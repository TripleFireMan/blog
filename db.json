{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/CAReplcatorLayer.gif","path":"images/CAReplcatorLayer.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"6385288dcaa56b0d3d299082de6b6f59cab832e4","modified":1568865473213},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1484925314000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1484925314000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1484925314000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1484925314000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1484925314000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1484925314000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1484925314000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1484925314000},{"_id":"themes/next/_config.yml","hash":"64a05d969e3aa26227efe0d5c57a94678e3dd0f1","modified":1497364382000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1484925314000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1484925314000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1484925314000},{"_id":"source/_posts/.DS_Store","hash":"6140a88ba79f9b547fe82b0e7c7582f0f1a18475","modified":1569721244227},{"_id":"source/_posts/CAReplicatorLayer探究.md","hash":"c26bdf74ffee9d49816570c7332cb73c7e5cd728","modified":1496937272000},{"_id":"source/_posts/CoreGraphicsAndAnimation.md","hash":"1a42d66ca54f102dcf9216e48af47070ebfc0249","modified":1496937183000},{"_id":"source/_posts/CoreGraphicsAndAnimations-2.md","hash":"240abb55c1d8b8d5583fc155779513fd0ccedc6d","modified":1496937124000},{"_id":"source/_posts/Hexo使用手册.md","hash":"f47524348d96ac94e5175c2f7154c19c82ce18c7","modified":1568864689775},{"_id":"source/_posts/SDWebImage学习笔记.md","hash":"8d9e26249404b97c2affb944ef501eb2e9788ba2","modified":1484925314000},{"_id":"source/_posts/SDWebImage学习笔记（三）.md","hash":"a665f3a81b9fbfff3b1b29b22b453ea2b7e71634","modified":1484926108000},{"_id":"source/_posts/SDWebImage学习笔记（二）.md","hash":"f2c59ce5b3e2b19bafdb0f3cf0346e5a0dde8ec0","modified":1484926108000},{"_id":"source/_posts/Xcode自动化打包实践.md","hash":"df66dd987b41733be1d0c9a6653bcf9003bce340","modified":1569742346780},{"_id":"source/_posts/[译] ios并发编程指南.md","hash":"a01bc988cdfc71060a86c812322c7875cdb36028","modified":1484925314000},{"_id":"source/_posts/hexo本地图片放置问题.md","hash":"8710555a2340c3d376575f721c513e11f407ea9e","modified":1494069876000},{"_id":"source/_posts/iOS开发中遇到的同步机制.md","hash":"9112e2bfcb802badb240b517346d27e40c6f3fa3","modified":1496937470000},{"_id":"source/_posts/《CoreData》系列（一）.md","hash":"4ff7a10612a90a396dd12ecf34a96c5f7e639d24","modified":1496936926000},{"_id":"source/_posts/《CoreData》系列（二）.md","hash":"d9f291cb1b6f742dfa14553e91cd1a4baf17d95e","modified":1484925314000},{"_id":"source/_posts/关于Runtime的一些理论和实践.md","hash":"96241214f5a31f1e663e739c9e5800e802b14f8a","modified":1497192481000},{"_id":"source/_posts/关于如何将私人Pod库发布到pod库的心得.md","hash":"9c39268e2edc7117ba56e878239b807622d086f6","modified":1496938391000},{"_id":"source/_posts/如何使用subline-text2-作为markdown的编辑工具.md","hash":"a7f894f3fa2b4704784551de14badf914913ec62","modified":1484925314000},{"_id":"source/_posts/如何在iOS9系统中使用Universal-Link.md","hash":"996db65423c97526c5ff2fe464064fa8b0ba4cd4","modified":1497452455000},{"_id":"source/_posts/点点滴滴：HTTPS和HTTP的区别.md","hash":"8c4f2def6c8ce07bc03d9c16ae71437dd9c27a3a","modified":1484925314000},{"_id":"source/_posts/点点滴滴：NSLog一点说道.md","hash":"ede1e31f5874378708b67e2b66d0eb4925170acf","modified":1484925314000},{"_id":"source/_posts/点点滴滴：一个容易被忽视的数组和字典的方法.md","hash":"3836bf1a040eef8f2f6eb81cb016658276b36bfe","modified":1484925314000},{"_id":"source/_posts/点点滴滴：NSScanner的用法小结.md","hash":"1ec67f97d07689071e885e71bb2b67302044110f","modified":1484925314000},{"_id":"source/_posts/点点滴滴：关于va-list.md","hash":"7299e7759b80760c3b479bd83926cd4f096bc72f","modified":1484925314000},{"_id":"source/categories/index.md","hash":"f3a00ddeea5943dabbfac4ed285a9ccdb4d93084","modified":1484925314000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1494066892000},{"_id":"source/tags/index.md","hash":"eaf610067dd2bda0f0f3cdd3af08f07a87a93957","modified":1484925314000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1484925314000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1484925314000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1484925314000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1484925314000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1484925314000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1484925314000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1484925314000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1484925314000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1484925314000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1484925314000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1484925314000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1484925314000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1484925314000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1484925314000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1484925314000},{"_id":"themes/next/layout/_layout.swig","hash":"7a1e4443c3ba1e08c20e64ddbf0b8255d034dab0","modified":1484925314000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1484925314000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1484925314000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1484925314000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1484925314000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1484925314000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1484925314000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1484925314000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1484925314000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1484925314000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1484925314000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1484925314000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484925314000},{"_id":"source/_posts/CAReplicatorLayer探究/1.png","hash":"f831bf7ddf06aad4b4ea710e92ff66253aa9fd7b","modified":1494072087000},{"_id":"source/_posts/CAReplicatorLayer探究/2.png","hash":"249d5de421ef8a17b8a3b547b91345768c683091","modified":1494072556000},{"_id":"source/_posts/CAReplicatorLayer探究/3.png","hash":"49cb52e0353dcf9fbd1cde4a9a588aded87f01c4","modified":1494072884000},{"_id":"source/_posts/CoreGraphicsAndAnimation/1.png","hash":"7a45a5b65b58a464d7fe25a5259d2dc138ba73f8","modified":1494154659000},{"_id":"source/_posts/CoreGraphicsAndAnimation/2.png","hash":"6be7418c1306edc6f76ff2c205d66ee4b26902d9","modified":1494171338000},{"_id":"source/_posts/CoreGraphicsAndAnimation/8.png","hash":"3598bc10b8d0f232148571bfa21c90c899a53340","modified":1494858777000},{"_id":"source/_posts/CoreGraphicsAndAnimation/7.gif","hash":"f3767d40983a1e089032546c7cff6c91cc8f4a7d","modified":1494772012000},{"_id":"source/_posts/关于Runtime的一些理论和实践/1.jpeg","hash":"1ca3086714459b730c833db9f52738ff525b4cbb","modified":1495728442000},{"_id":"source/_posts/如何在iOS9系统中使用Universal-Link/apple_capabilities.png","hash":"2b231aaaacf8873b52c34ec070ccab0098bd98c7","modified":1493114308000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1484925314000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1484925314000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1484925314000},{"_id":"themes/next/layout/_macro/post.swig","hash":"39a8efd961ea2c5758ca4231d3cc4108c1856930","modified":1484925314000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1484925314000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1484925314000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1484925314000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4eb278f7b1b7dfe1088c2b411778cc6129df82bb","modified":1484925314000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1484925314000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1484925314000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1484925314000},{"_id":"themes/next/layout/_partials/header.swig","hash":"5696ee15fc21eb3a6416902afcf1df454497c552","modified":1484925314000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1484925314000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1484925314000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1484925314000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1484925314000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1484925314000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1484925314000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1484925314000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1484925314000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1484925314000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1484925314000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1484925314000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1484925314000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1484925314000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1484925314000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1484925314000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1484925314000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1484925314000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1484925314000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1484925314000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1484925314000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1484925314000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1484925314000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1484925314000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1484925314000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1484925314000},{"_id":"source/_posts/Xcode自动化打包实践/image-20190929145115777.png","hash":"ebae32081480041de4cba22b28c5ffe0cb8a36cd","modified":1569739875777},{"_id":"source/_posts/Xcode自动化打包实践/image-20190929150425280.png","hash":"a24c8d4d91bd01723cf91a2c74c6dd2ccb41d76e","modified":1569740665280},{"_id":"source/_posts/Xcode自动化打包实践/image-20190929150130963.png","hash":"37b0d6fd247379423a04d9365f4f24b443f1d793","modified":1569740490963},{"_id":"source/_posts/Xcode自动化打包实践/xcodeBuild.png","hash":"39243f614091c625f23a80c3dc2dd8077d3ed6b8","modified":1569721055526},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484925314000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484925314000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484925314000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484925314000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484925314000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484925314000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484925314000},{"_id":"source/_posts/关于Runtime的一些理论和实践/2.png","hash":"f6a5e3bbde308e650403cfd7c7b695920d9f3dc9","modified":1496927104000},{"_id":"source/_posts/如何在iOS9系统中使用Universal-Link/apple_team_id.png","hash":"2dcc955c07b490658a03583c1b0242941402afa2","modified":1493114364000},{"_id":"source/_posts/如何在iOS9系统中使用Universal-Link/universal_links.png","hash":"6bbd4fc96106050291a8eb35bce28c2e47a8a304","modified":1493114074000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1484925314000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1484925314000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1484925314000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1484925314000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1484925314000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1484925314000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1484925314000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1484925314000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1484925314000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1484925314000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1484925314000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"417e16a0fbdcb1b87987787bd7f9fa17eefc2d2b","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1484925314000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1484925314000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1484925314000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1484925314000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1484925314000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1484925314000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"bef514826ebf9eb6e99bb2b0d72285106658a1ec","modified":1484925314000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1484925314000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1484925314000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1484925314000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1484925314000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1484925314000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1484925314000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1484925314000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1484925314000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1484925314000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1484925314000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1484925314000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1484925314000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1484925314000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1484925314000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1484925314000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1484925314000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1484925314000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1484925314000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1484925314000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1484925314000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1484925314000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1484925314000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1484925314000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1484925314000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1484925314000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1484925314000},{"_id":"source/_posts/CAReplicatorLayer探究/5.gif","hash":"419711e8ab5f547150b9c65581d4150b851d1aa2","modified":1494073781000},{"_id":"source/_posts/Hexo使用手册/流程图.png","hash":"c38d1a4d1211599b02d669066ad7367349480ddd","modified":1561520680701},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1484925314000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1484925314000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1484925314000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1484925314000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1484925314000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1484925314000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1484925314000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7e899c4c0aa1312666f2534a4700667d1bfd88da","modified":1484925314000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1484925314000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1484925314000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1484925314000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1484925314000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1484925314000},{"_id":"themes/next/source/images/avatar.gif","hash":"d928df3e3d789d308e443adf3f9214a56f22df45","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1484925314000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1484925314000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1484925314000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1484925314000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1484925314000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1484925314000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1484925314000},{"_id":"source/images/CAReplcatorLayer.gif","hash":"90f2b5e81d655ccfe11f1f15d9aacf13ab171faa","modified":1494066847000},{"_id":"source/_posts/CAReplicatorLayer探究/CAReplicatorLayer.gif","hash":"90f2b5e81d655ccfe11f1f15d9aacf13ab171faa","modified":1494066847000},{"_id":"source/_posts/CoreGraphicsAndAnimations-2/1.gif","hash":"3dae8f9467c8a6343d27b2b273fd14fbf1ce05e9","modified":1494954145000},{"_id":"source/_posts/CoreGraphicsAndAnimations-2/2.gif","hash":"c3fa688ebf70dcf45a93451965bc66a921271995","modified":1495037174000},{"_id":"source/_posts/CoreGraphicsAndAnimations-2/3.gif","hash":"dcd6bddaa66016a4ddbd36f438e34ac21200c708","modified":1495123881000},{"_id":"source/_posts/CoreGraphicsAndAnimation/6.gif","hash":"0e3c1510cfec79ca0ea8f3dcbfea9b869ee5d582","modified":1494130400000},{"_id":"source/_posts/CoreGraphicsAndAnimations-2/5.gif","hash":"82f53a6f4bed111cfa5479ed2f8ab36052185452","modified":1495210151000},{"_id":"source/_posts/CoreGraphicsAndAnimations-2/4.gif","hash":"6d851096c3a8222b304c59f4f8c070459718aad4","modified":1495124078000}],"Category":[{"name":"转","_id":"ck14o8ywe000ehx5lwzgd1nl0"}],"Data":[],"Page":[{"title":"分类","date":"2016-12-29T03:05:19.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-12-29 11:05:19\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-01-20T15:15:14.000Z","path":"categories/index.html","layout":"page","_id":"ck14o8yvl0001hx5ld2ltzmmi","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-12-29T02:58:47.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-12-29 10:58:47\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-01-20T15:15:14.000Z","path":"tags/index.html","layout":"page","_id":"ck14o8yvt0003hx5l4t7jkrrm","content":"","excerpt":"","more":""}],"Post":[{"title":"CAReplicatorLayer探究","date":"2017-05-06T10:17:14.000Z","_content":"\n\n\n## 概述\n\n1. 这个layer干什么用的？\n2. 这个layer如何用？\n3. 何种场景适合这个layer发挥？\n\n带着这些问题，我们上路，开始研究它。\n\n<!--more-->\n\n## 苹果官方demo\n\n![img](CAReplicatorLayer探究/CAReplicatorLayer.gif)\n\n​\t这个是我搜到的苹果对CAReplicatorLayer讲述功能时，使用到的demo，有没有吊炸天的感觉，但是实际上，我要告诉你的是，实现这样一个功能使用的代码不超过300行。\n\n## 干什么用？\n\n​\t说实话，其实这个layer很偏门，基本上很少有人会用到它，它的主要作用是用来复制任意数量的它的sublayer的，sublayer是它复制的源头，如果没有sublayer那么是复制不了的。复制的方式，可能是几何变换、时间控制、颜色变换。\n\n​\t使用CAReplicatorLayer对象可以通过一个图片源构建复杂的布局，而仅仅是通过坐标转换、颜色转换、时间转换。\n\n## 如何使用\n\n1. **基础使用**\n\n   多说无益，看代码吧\n\n```objc\n- (CAReplicatorLayer *)xReplicatorLayer\n{\n    // 创建原始图层，白色的大小 50，50\n    CALayer *redLayer = [CALayer layer];\n    redLayer.backgroundColor = [[UIColor whiteColor]CGColor];\n    redLayer.frame = CGRectMake(0, 0, 50, 50);\n    \n    // 创建复制图层，并设置复制5个，复制转换为按横坐标偏移60，颜色为从白变为红\n    CAReplicatorLayer *replicatorLayer = [CAReplicatorLayer layer];\n    replicatorLayer.instanceCount = 5;\n    replicatorLayer.instanceTransform = CATransform3DMakeTranslation(60, 0, 0);\n    CGFloat step = - 1 / 5.f;\n    replicatorLayer.instanceGreenOffset = step;\n    replicatorLayer.instanceBlueOffset = step;\n    [replicatorLayer addSublayer:redLayer];\n    \n    return replicatorLayer;\n}\n\n- (CAReplicatorLayer *)ReplicatorLayer\n{\n    // 获取经过X轴变换的layer\n    CAReplicatorLayer *redLayer = [self xReplicatorLayer];\n    \n    // 做纵坐标变换，复制6次，变换方式为向上偏移60，颜色从红变灰\n    CAReplicatorLayer *replicatorLayer = [CAReplicatorLayer layer];\n    replicatorLayer.instanceCount = 6;\n    replicatorLayer.instanceTransform = CATransform3DMakeTranslation(0, 60, 0);\n    CGFloat step = -1 / 6.f;\n    replicatorLayer.instanceRedOffset = step;\n    [replicatorLayer addSublayer:redLayer];\n    \n    return replicatorLayer;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor blackColor];\n    \n    CAReplicatorLayer *replicatorLayer = [self ReplicatorLayer];\n    replicatorLayer.frame = CGRectMake(10, 100, 50, 50);\n    [self.view.layer addSublayer:replicatorLayer];\n    \n\n}\n```\n\n***实现效果，如下图***\n\n![](CAReplicatorLayer探究/2.png)\n\n除了做横纵坐标变换以外，还可以做旋转，代码如下\n\n```objc\n- (CAReplicatorLayer *)rotateReplicatorLayer\n{\n    CAReplicatorLayer *layer = [CAReplicatorLayer layer];\n    layer.frame = CGRectMake(screen_width() / 2, screen_height() / 2, w_16, h_16);\n    CALayer *content = [CALayer layer];\n    content.opacity = 1;\n    content.frame = layer.bounds;\n    content.contents = (id)[[UIImage imageNamed:@\"brightBlob.png\"]CGImage];\n    \n    layer.instanceCount = 36;\n    layer.instanceColor = [[UIColor redColor]CGColor];\n    CATransform3D transform = CATransform3DMakeTranslation(16, 0, 0);\n    layer.instanceTransform = CATransform3DRotate(transform, -M_PI * 10 / 180, 0, 0, 1);\n    [layer addSublayer:content];\n    \n    return layer;\n}\n```\n\n***效果图如下***\n\n![img](CAReplicatorLayer探究/3.png)\n\n2. **进阶使用**\n\n   使用该类可以实现粒子发射器的效果，结合动画的使用，加上旋转、位移变换，可以实现类似游戏中的粒子发射器的效果。此处需要定义一个CYEmitterLayer类，该类要继承自CAReplicatorLayer。很显然，我要对CAReplicatorLayer进行功能扩展。让它具备开始发射粒子和停止发射粒子的功能。\n\n   ```objc\n   #import <QuartzCore/QuartzCore.h>\n\n   @interface CYEmitterLayer : CAReplicatorLayer{}\n\n   @property (nonatomic, strong) CALayer *imageLayer;  //作为原始层，供CAReplicatorLayer 复制\n   @property (nonatomic, assign) CGFloat rotator;      //旋转因子，实现旋转功能\n   @property (nonatomic, assign) CGFloat length;       //发射长度\n   @property (nonatomic, assign) CGFloat count;        //一次发射的个数\n   @property (nonatomic, assign) CGFloat angle;        //发射角度\n   @property (nonatomic, assign) CGFloat cycleTime;    //循环时间\n   @property (nonatomic, assign) CGFloat xAdjust;      //x轴调整\n   @property (nonatomic, assign) CGFloat yAdjust;      //y轴调整\n\n   - (void)start;\n\n   - (void)stop;\n   @end\n     \n   #import \"CYEmitterLayer.h\"\n   #import <UIKit/UIKit.h>\n\n   @implementation CYEmitterLayer\n   - (id)init\n   {\n       self = [super init];\n       if (self) {\n           self.count = 1;\n           self.imageLayer = [CALayer layer];\n           self.imageLayer.contents = (id)[UIImage imageNamed:@\"brightBlob\"].CGImage;\n           self.instanceColor = [[UIColor whiteColor]CGColor];\n           [self addSublayer:self.imageLayer];\n       }\n       return self;\n   }\n\n   - (void)start\n   {\n       // 配置发射信息\n       self.imageLayer.frame = self.bounds;\n       self.imageLayer.opacity = 1.0f;\n       self.instanceCount = self.count;\n       self.instanceDelay = self.cycleTime / self.count;\n       \n       // 校准粒子与上个粒子之间的角度以及位置\n       CATransform3D transform = CATransform3DMakeRotation(self.rotator, 0, 0, 1);\n       self.instanceTransform = CATransform3DTranslate(transform, self.xAdjust, self.yAdjust, 0);\n       \n       // 校准发射源发射角度\n       self.transform = CATransform3DMakeRotation(self.angle, 0, 0, 1);\n       \n       // 执行动画，实现发射效果\n       [self animation];\n   }\n\n   - (void)animation\n   {\n       CGPoint newPoint = CGPointMake(0, self.length);\n       CABasicAnimation *basic = [CABasicAnimation animation];\n       basic.keyPath = @\"position\";\n       basic.toValue = [NSValue valueWithCGPoint:newPoint];\n       basic.duration = self.cycleTime;\n       basic.repeatCount = MAXFLOAT;\n       [self.imageLayer addAnimation:basic forKey:@\"position\"];\n   }\n\n   - (void)stop\n   {\n       self.imageLayer.opacity = 0;\n       [self.imageLayer removeAllAnimations];\n       self.instanceCount = 0;\n   }\n   @end\n   ```\n\n   这里是头文件的定义，我们扩展了动画执行时间、发射个数、发射角度、粒子旋转角度等基本属性，通过对这些基本属性的合理赋值，就可以实现发射粒子的功能了。我这里只写了俩个简单的用法，具体怎么实现更牛逼，更吊的效果就靠看官脑洞大开了。\n\n   ***效果图如下***\n\n   ![img](CAReplicatorLayer探究/5.gif)\n\n   ​\n\n## 何时使用？\n\n​\t我个人认为，这个类之所以没有在我们开发中经常出现，确实是有道理的，后面的粒子发射器，实际上苹果在ios5的时候已经引入了CAEmitterLayer来做这个功能，那么我们使用这个类的场景也就剩下静态的展示多个图层的时候使用了，此外要说的是，由于layer不能像UIView那样的响应触摸事件，带有交互的场景是不适合它的，好了，下面附上我在github上的demo地址，感兴趣的朋友可以[下载](https://github.com/TripleFireMan/CARepicatorLayerDemo.git)下来观看下。\n\n\n\n​\t另外，开场的苹果官方demo是用来镇场的 #35\n\n## 参考资料\n\n1. [官方资料](https://developer.apple.com/reference/quartzcore/careplicatorlayer?language=objc)","source":"_posts/CAReplicatorLayer探究.md","raw":"---\n\ntitle: CAReplicatorLayer探究\n\ndate: 2017-05-06 18:17:14\n\n---\n\n\n\n## 概述\n\n1. 这个layer干什么用的？\n2. 这个layer如何用？\n3. 何种场景适合这个layer发挥？\n\n带着这些问题，我们上路，开始研究它。\n\n<!--more-->\n\n## 苹果官方demo\n\n![img](CAReplicatorLayer探究/CAReplicatorLayer.gif)\n\n​\t这个是我搜到的苹果对CAReplicatorLayer讲述功能时，使用到的demo，有没有吊炸天的感觉，但是实际上，我要告诉你的是，实现这样一个功能使用的代码不超过300行。\n\n## 干什么用？\n\n​\t说实话，其实这个layer很偏门，基本上很少有人会用到它，它的主要作用是用来复制任意数量的它的sublayer的，sublayer是它复制的源头，如果没有sublayer那么是复制不了的。复制的方式，可能是几何变换、时间控制、颜色变换。\n\n​\t使用CAReplicatorLayer对象可以通过一个图片源构建复杂的布局，而仅仅是通过坐标转换、颜色转换、时间转换。\n\n## 如何使用\n\n1. **基础使用**\n\n   多说无益，看代码吧\n\n```objc\n- (CAReplicatorLayer *)xReplicatorLayer\n{\n    // 创建原始图层，白色的大小 50，50\n    CALayer *redLayer = [CALayer layer];\n    redLayer.backgroundColor = [[UIColor whiteColor]CGColor];\n    redLayer.frame = CGRectMake(0, 0, 50, 50);\n    \n    // 创建复制图层，并设置复制5个，复制转换为按横坐标偏移60，颜色为从白变为红\n    CAReplicatorLayer *replicatorLayer = [CAReplicatorLayer layer];\n    replicatorLayer.instanceCount = 5;\n    replicatorLayer.instanceTransform = CATransform3DMakeTranslation(60, 0, 0);\n    CGFloat step = - 1 / 5.f;\n    replicatorLayer.instanceGreenOffset = step;\n    replicatorLayer.instanceBlueOffset = step;\n    [replicatorLayer addSublayer:redLayer];\n    \n    return replicatorLayer;\n}\n\n- (CAReplicatorLayer *)ReplicatorLayer\n{\n    // 获取经过X轴变换的layer\n    CAReplicatorLayer *redLayer = [self xReplicatorLayer];\n    \n    // 做纵坐标变换，复制6次，变换方式为向上偏移60，颜色从红变灰\n    CAReplicatorLayer *replicatorLayer = [CAReplicatorLayer layer];\n    replicatorLayer.instanceCount = 6;\n    replicatorLayer.instanceTransform = CATransform3DMakeTranslation(0, 60, 0);\n    CGFloat step = -1 / 6.f;\n    replicatorLayer.instanceRedOffset = step;\n    [replicatorLayer addSublayer:redLayer];\n    \n    return replicatorLayer;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor blackColor];\n    \n    CAReplicatorLayer *replicatorLayer = [self ReplicatorLayer];\n    replicatorLayer.frame = CGRectMake(10, 100, 50, 50);\n    [self.view.layer addSublayer:replicatorLayer];\n    \n\n}\n```\n\n***实现效果，如下图***\n\n![](CAReplicatorLayer探究/2.png)\n\n除了做横纵坐标变换以外，还可以做旋转，代码如下\n\n```objc\n- (CAReplicatorLayer *)rotateReplicatorLayer\n{\n    CAReplicatorLayer *layer = [CAReplicatorLayer layer];\n    layer.frame = CGRectMake(screen_width() / 2, screen_height() / 2, w_16, h_16);\n    CALayer *content = [CALayer layer];\n    content.opacity = 1;\n    content.frame = layer.bounds;\n    content.contents = (id)[[UIImage imageNamed:@\"brightBlob.png\"]CGImage];\n    \n    layer.instanceCount = 36;\n    layer.instanceColor = [[UIColor redColor]CGColor];\n    CATransform3D transform = CATransform3DMakeTranslation(16, 0, 0);\n    layer.instanceTransform = CATransform3DRotate(transform, -M_PI * 10 / 180, 0, 0, 1);\n    [layer addSublayer:content];\n    \n    return layer;\n}\n```\n\n***效果图如下***\n\n![img](CAReplicatorLayer探究/3.png)\n\n2. **进阶使用**\n\n   使用该类可以实现粒子发射器的效果，结合动画的使用，加上旋转、位移变换，可以实现类似游戏中的粒子发射器的效果。此处需要定义一个CYEmitterLayer类，该类要继承自CAReplicatorLayer。很显然，我要对CAReplicatorLayer进行功能扩展。让它具备开始发射粒子和停止发射粒子的功能。\n\n   ```objc\n   #import <QuartzCore/QuartzCore.h>\n\n   @interface CYEmitterLayer : CAReplicatorLayer{}\n\n   @property (nonatomic, strong) CALayer *imageLayer;  //作为原始层，供CAReplicatorLayer 复制\n   @property (nonatomic, assign) CGFloat rotator;      //旋转因子，实现旋转功能\n   @property (nonatomic, assign) CGFloat length;       //发射长度\n   @property (nonatomic, assign) CGFloat count;        //一次发射的个数\n   @property (nonatomic, assign) CGFloat angle;        //发射角度\n   @property (nonatomic, assign) CGFloat cycleTime;    //循环时间\n   @property (nonatomic, assign) CGFloat xAdjust;      //x轴调整\n   @property (nonatomic, assign) CGFloat yAdjust;      //y轴调整\n\n   - (void)start;\n\n   - (void)stop;\n   @end\n     \n   #import \"CYEmitterLayer.h\"\n   #import <UIKit/UIKit.h>\n\n   @implementation CYEmitterLayer\n   - (id)init\n   {\n       self = [super init];\n       if (self) {\n           self.count = 1;\n           self.imageLayer = [CALayer layer];\n           self.imageLayer.contents = (id)[UIImage imageNamed:@\"brightBlob\"].CGImage;\n           self.instanceColor = [[UIColor whiteColor]CGColor];\n           [self addSublayer:self.imageLayer];\n       }\n       return self;\n   }\n\n   - (void)start\n   {\n       // 配置发射信息\n       self.imageLayer.frame = self.bounds;\n       self.imageLayer.opacity = 1.0f;\n       self.instanceCount = self.count;\n       self.instanceDelay = self.cycleTime / self.count;\n       \n       // 校准粒子与上个粒子之间的角度以及位置\n       CATransform3D transform = CATransform3DMakeRotation(self.rotator, 0, 0, 1);\n       self.instanceTransform = CATransform3DTranslate(transform, self.xAdjust, self.yAdjust, 0);\n       \n       // 校准发射源发射角度\n       self.transform = CATransform3DMakeRotation(self.angle, 0, 0, 1);\n       \n       // 执行动画，实现发射效果\n       [self animation];\n   }\n\n   - (void)animation\n   {\n       CGPoint newPoint = CGPointMake(0, self.length);\n       CABasicAnimation *basic = [CABasicAnimation animation];\n       basic.keyPath = @\"position\";\n       basic.toValue = [NSValue valueWithCGPoint:newPoint];\n       basic.duration = self.cycleTime;\n       basic.repeatCount = MAXFLOAT;\n       [self.imageLayer addAnimation:basic forKey:@\"position\"];\n   }\n\n   - (void)stop\n   {\n       self.imageLayer.opacity = 0;\n       [self.imageLayer removeAllAnimations];\n       self.instanceCount = 0;\n   }\n   @end\n   ```\n\n   这里是头文件的定义，我们扩展了动画执行时间、发射个数、发射角度、粒子旋转角度等基本属性，通过对这些基本属性的合理赋值，就可以实现发射粒子的功能了。我这里只写了俩个简单的用法，具体怎么实现更牛逼，更吊的效果就靠看官脑洞大开了。\n\n   ***效果图如下***\n\n   ![img](CAReplicatorLayer探究/5.gif)\n\n   ​\n\n## 何时使用？\n\n​\t我个人认为，这个类之所以没有在我们开发中经常出现，确实是有道理的，后面的粒子发射器，实际上苹果在ios5的时候已经引入了CAEmitterLayer来做这个功能，那么我们使用这个类的场景也就剩下静态的展示多个图层的时候使用了，此外要说的是，由于layer不能像UIView那样的响应触摸事件，带有交互的场景是不适合它的，好了，下面附上我在github上的demo地址，感兴趣的朋友可以[下载](https://github.com/TripleFireMan/CARepicatorLayerDemo.git)下来观看下。\n\n\n\n​\t另外，开场的苹果官方demo是用来镇场的 #35\n\n## 参考资料\n\n1. [官方资料](https://developer.apple.com/reference/quartzcore/careplicatorlayer?language=objc)","slug":"CAReplicatorLayer探究","published":1,"updated":"2017-06-08T15:54:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yvg0000hx5lvuzv7758","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ol>\n<li>这个layer干什么用的？</li>\n<li>这个layer如何用？</li>\n<li>何种场景适合这个layer发挥？</li>\n</ol>\n<p>带着这些问题，我们上路，开始研究它。</p>\n<a id=\"more\"></a>\n<h2 id=\"苹果官方demo\"><a href=\"#苹果官方demo\" class=\"headerlink\" title=\"苹果官方demo\"></a>苹果官方demo</h2><p><img src=\"/2017/05/06/CAReplicatorLayer探究/CAReplicatorLayer.gif\" alt=\"img\"></p>\n<p>​    这个是我搜到的苹果对CAReplicatorLayer讲述功能时，使用到的demo，有没有吊炸天的感觉，但是实际上，我要告诉你的是，实现这样一个功能使用的代码不超过300行。</p>\n<h2 id=\"干什么用？\"><a href=\"#干什么用？\" class=\"headerlink\" title=\"干什么用？\"></a>干什么用？</h2><p>​    说实话，其实这个layer很偏门，基本上很少有人会用到它，它的主要作用是用来复制任意数量的它的sublayer的，sublayer是它复制的源头，如果没有sublayer那么是复制不了的。复制的方式，可能是几何变换、时间控制、颜色变换。</p>\n<p>​    使用CAReplicatorLayer对象可以通过一个图片源构建复杂的布局，而仅仅是通过坐标转换、颜色转换、时间转换。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><ol>\n<li><p><strong>基础使用</strong></p>\n<p>多说无益，看代码吧</p>\n</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">CAReplicatorLayer</span> *)xReplicatorLayer</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 创建原始图层，白色的大小 50，50</span></div><div class=\"line\">    <span class=\"built_in\">CALayer</span> *redLayer = [<span class=\"built_in\">CALayer</span> layer];</div><div class=\"line\">    redLayer.backgroundColor = [[<span class=\"built_in\">UIColor</span> whiteColor]<span class=\"built_in\">CGColor</span>];</div><div class=\"line\">    redLayer.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 创建复制图层，并设置复制5个，复制转换为按横坐标偏移60，颜色为从白变为红</span></div><div class=\"line\">    <span class=\"built_in\">CAReplicatorLayer</span> *replicatorLayer = [<span class=\"built_in\">CAReplicatorLayer</span> layer];</div><div class=\"line\">    replicatorLayer.instanceCount = <span class=\"number\">5</span>;</div><div class=\"line\">    replicatorLayer.instanceTransform = <span class=\"built_in\">CATransform3DMakeTranslation</span>(<span class=\"number\">60</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> step = - <span class=\"number\">1</span> / <span class=\"number\">5.</span>f;</div><div class=\"line\">    replicatorLayer.instanceGreenOffset = step;</div><div class=\"line\">    replicatorLayer.instanceBlueOffset = step;</div><div class=\"line\">    [replicatorLayer addSublayer:redLayer];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> replicatorLayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CAReplicatorLayer</span> *)ReplicatorLayer</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取经过X轴变换的layer</span></div><div class=\"line\">    <span class=\"built_in\">CAReplicatorLayer</span> *redLayer = [<span class=\"keyword\">self</span> xReplicatorLayer];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 做纵坐标变换，复制6次，变换方式为向上偏移60，颜色从红变灰</span></div><div class=\"line\">    <span class=\"built_in\">CAReplicatorLayer</span> *replicatorLayer = [<span class=\"built_in\">CAReplicatorLayer</span> layer];</div><div class=\"line\">    replicatorLayer.instanceCount = <span class=\"number\">6</span>;</div><div class=\"line\">    replicatorLayer.instanceTransform = <span class=\"built_in\">CATransform3DMakeTranslation</span>(<span class=\"number\">0</span>, <span class=\"number\">60</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> step = <span class=\"number\">-1</span> / <span class=\"number\">6.</span>f;</div><div class=\"line\">    replicatorLayer.instanceRedOffset = step;</div><div class=\"line\">    [replicatorLayer addSublayer:redLayer];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> replicatorLayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CAReplicatorLayer</span> *replicatorLayer = [<span class=\"keyword\">self</span> ReplicatorLayer];</div><div class=\"line\">    replicatorLayer.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view.layer addSublayer:replicatorLayer];</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em>实现效果，如下图</em></strong></p>\n<p><img src=\"/2017/05/06/CAReplicatorLayer探究/2.png\" alt=\"\"></p>\n<p>除了做横纵坐标变换以外，还可以做旋转，代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">CAReplicatorLayer</span> *)rotateReplicatorLayer</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CAReplicatorLayer</span> *layer = [<span class=\"built_in\">CAReplicatorLayer</span> layer];</div><div class=\"line\">    layer.frame = <span class=\"built_in\">CGRectMake</span>(screen_width() / <span class=\"number\">2</span>, screen_height() / <span class=\"number\">2</span>, w_16, h_16);</div><div class=\"line\">    <span class=\"built_in\">CALayer</span> *content = [<span class=\"built_in\">CALayer</span> layer];</div><div class=\"line\">    content.opacity = <span class=\"number\">1</span>;</div><div class=\"line\">    content.frame = layer.bounds;</div><div class=\"line\">    content.contents = (<span class=\"keyword\">id</span>)[[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"brightBlob.png\"</span>]<span class=\"built_in\">CGImage</span>];</div><div class=\"line\">    </div><div class=\"line\">    layer.instanceCount = <span class=\"number\">36</span>;</div><div class=\"line\">    layer.instanceColor = [[<span class=\"built_in\">UIColor</span> redColor]<span class=\"built_in\">CGColor</span>];</div><div class=\"line\">    <span class=\"built_in\">CATransform3D</span> transform = <span class=\"built_in\">CATransform3DMakeTranslation</span>(<span class=\"number\">16</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    layer.instanceTransform = <span class=\"built_in\">CATransform3DRotate</span>(transform, -M_PI * <span class=\"number\">10</span> / <span class=\"number\">180</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    [layer addSublayer:content];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> layer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em>效果图如下</em></strong></p>\n<p><img src=\"/2017/05/06/CAReplicatorLayer探究/3.png\" alt=\"img\"></p>\n<ol>\n<li><p><strong>进阶使用</strong></p>\n<p>使用该类可以实现粒子发射器的效果，结合动画的使用，加上旋转、位移变换，可以实现类似游戏中的粒子发射器的效果。此处需要定义一个CYEmitterLayer类，该类要继承自CAReplicatorLayer。很显然，我要对CAReplicatorLayer进行功能扩展。让它具备开始发射粒子和停止发射粒子的功能。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;QuartzCore/QuartzCore.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CYEmitterLayer</span> : <span class=\"title\">CAReplicatorLayer</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">CALayer</span> *imageLayer;  <span class=\"comment\">//作为原始层，供CAReplicatorLayer 复制</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> rotator;      <span class=\"comment\">//旋转因子，实现旋转功能</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> length;       <span class=\"comment\">//发射长度</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> count;        <span class=\"comment\">//一次发射的个数</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> angle;        <span class=\"comment\">//发射角度</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> cycleTime;    <span class=\"comment\">//循环时间</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> xAdjust;      <span class=\"comment\">//x轴调整</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> yAdjust;      <span class=\"comment\">//y轴调整</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)start;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"CYEmitterLayer.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKit.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CYEmitterLayer</span></span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.count = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">self</span>.imageLayer = [<span class=\"built_in\">CALayer</span> layer];</div><div class=\"line\">        <span class=\"keyword\">self</span>.imageLayer.contents = (<span class=\"keyword\">id</span>)[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"brightBlob\"</span>].CGImage;</div><div class=\"line\">        <span class=\"keyword\">self</span>.instanceColor = [[<span class=\"built_in\">UIColor</span> whiteColor]<span class=\"built_in\">CGColor</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> addSublayer:<span class=\"keyword\">self</span>.imageLayer];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)start</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 配置发射信息</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.imageLayer.frame = <span class=\"keyword\">self</span>.bounds;</div><div class=\"line\">    <span class=\"keyword\">self</span>.imageLayer.opacity = <span class=\"number\">1.0</span>f;</div><div class=\"line\">    <span class=\"keyword\">self</span>.instanceCount = <span class=\"keyword\">self</span>.count;</div><div class=\"line\">    <span class=\"keyword\">self</span>.instanceDelay = <span class=\"keyword\">self</span>.cycleTime / <span class=\"keyword\">self</span>.count;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 校准粒子与上个粒子之间的角度以及位置</span></div><div class=\"line\">    <span class=\"built_in\">CATransform3D</span> transform = <span class=\"built_in\">CATransform3DMakeRotation</span>(<span class=\"keyword\">self</span>.rotator, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">self</span>.instanceTransform = <span class=\"built_in\">CATransform3DTranslate</span>(transform, <span class=\"keyword\">self</span>.xAdjust, <span class=\"keyword\">self</span>.yAdjust, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 校准发射源发射角度</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.transform = <span class=\"built_in\">CATransform3DMakeRotation</span>(<span class=\"keyword\">self</span>.angle, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 执行动画，实现发射效果</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> animation];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)animation</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> newPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, <span class=\"keyword\">self</span>.length);</div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *basic = [<span class=\"built_in\">CABasicAnimation</span> animation];</div><div class=\"line\">    basic.keyPath = <span class=\"string\">@\"position\"</span>;</div><div class=\"line\">    basic.toValue = [<span class=\"built_in\">NSValue</span> valueWithCGPoint:newPoint];</div><div class=\"line\">    basic.duration = <span class=\"keyword\">self</span>.cycleTime;</div><div class=\"line\">    basic.repeatCount = MAXFLOAT;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.imageLayer addAnimation:basic forKey:<span class=\"string\">@\"position\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.imageLayer.opacity = <span class=\"number\">0</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.imageLayer removeAllAnimations];</div><div class=\"line\">    <span class=\"keyword\">self</span>.instanceCount = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>这里是头文件的定义，我们扩展了动画执行时间、发射个数、发射角度、粒子旋转角度等基本属性，通过对这些基本属性的合理赋值，就可以实现发射粒子的功能了。我这里只写了俩个简单的用法，具体怎么实现更牛逼，更吊的效果就靠看官脑洞大开了。</p>\n<p><strong><em>效果图如下</em></strong></p>\n<p><img src=\"/2017/05/06/CAReplicatorLayer探究/5.gif\" alt=\"img\"></p>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"何时使用？\"><a href=\"#何时使用？\" class=\"headerlink\" title=\"何时使用？\"></a>何时使用？</h2><p>​    我个人认为，这个类之所以没有在我们开发中经常出现，确实是有道理的，后面的粒子发射器，实际上苹果在ios5的时候已经引入了CAEmitterLayer来做这个功能，那么我们使用这个类的场景也就剩下静态的展示多个图层的时候使用了，此外要说的是，由于layer不能像UIView那样的响应触摸事件，带有交互的场景是不适合它的，好了，下面附上我在github上的demo地址，感兴趣的朋友可以<a href=\"https://github.com/TripleFireMan/CARepicatorLayerDemo.git\" target=\"_blank\" rel=\"external\">下载</a>下来观看下。</p>\n<p>​    另外，开场的苹果官方demo是用来镇场的 #35</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://developer.apple.com/reference/quartzcore/careplicatorlayer?language=objc\" target=\"_blank\" rel=\"external\">官方资料</a></li>\n</ol>\n","excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ol>\n<li>这个layer干什么用的？</li>\n<li>这个layer如何用？</li>\n<li>何种场景适合这个layer发挥？</li>\n</ol>\n<p>带着这些问题，我们上路，开始研究它。</p>","more":"<h2 id=\"苹果官方demo\"><a href=\"#苹果官方demo\" class=\"headerlink\" title=\"苹果官方demo\"></a>苹果官方demo</h2><p><img src=\"/2017/05/06/CAReplicatorLayer探究/CAReplicatorLayer.gif\" alt=\"img\"></p>\n<p>​    这个是我搜到的苹果对CAReplicatorLayer讲述功能时，使用到的demo，有没有吊炸天的感觉，但是实际上，我要告诉你的是，实现这样一个功能使用的代码不超过300行。</p>\n<h2 id=\"干什么用？\"><a href=\"#干什么用？\" class=\"headerlink\" title=\"干什么用？\"></a>干什么用？</h2><p>​    说实话，其实这个layer很偏门，基本上很少有人会用到它，它的主要作用是用来复制任意数量的它的sublayer的，sublayer是它复制的源头，如果没有sublayer那么是复制不了的。复制的方式，可能是几何变换、时间控制、颜色变换。</p>\n<p>​    使用CAReplicatorLayer对象可以通过一个图片源构建复杂的布局，而仅仅是通过坐标转换、颜色转换、时间转换。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><ol>\n<li><p><strong>基础使用</strong></p>\n<p>多说无益，看代码吧</p>\n</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">CAReplicatorLayer</span> *)xReplicatorLayer</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 创建原始图层，白色的大小 50，50</span></div><div class=\"line\">    <span class=\"built_in\">CALayer</span> *redLayer = [<span class=\"built_in\">CALayer</span> layer];</div><div class=\"line\">    redLayer.backgroundColor = [[<span class=\"built_in\">UIColor</span> whiteColor]<span class=\"built_in\">CGColor</span>];</div><div class=\"line\">    redLayer.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 创建复制图层，并设置复制5个，复制转换为按横坐标偏移60，颜色为从白变为红</span></div><div class=\"line\">    <span class=\"built_in\">CAReplicatorLayer</span> *replicatorLayer = [<span class=\"built_in\">CAReplicatorLayer</span> layer];</div><div class=\"line\">    replicatorLayer.instanceCount = <span class=\"number\">5</span>;</div><div class=\"line\">    replicatorLayer.instanceTransform = <span class=\"built_in\">CATransform3DMakeTranslation</span>(<span class=\"number\">60</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> step = - <span class=\"number\">1</span> / <span class=\"number\">5.</span>f;</div><div class=\"line\">    replicatorLayer.instanceGreenOffset = step;</div><div class=\"line\">    replicatorLayer.instanceBlueOffset = step;</div><div class=\"line\">    [replicatorLayer addSublayer:redLayer];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> replicatorLayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CAReplicatorLayer</span> *)ReplicatorLayer</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取经过X轴变换的layer</span></div><div class=\"line\">    <span class=\"built_in\">CAReplicatorLayer</span> *redLayer = [<span class=\"keyword\">self</span> xReplicatorLayer];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 做纵坐标变换，复制6次，变换方式为向上偏移60，颜色从红变灰</span></div><div class=\"line\">    <span class=\"built_in\">CAReplicatorLayer</span> *replicatorLayer = [<span class=\"built_in\">CAReplicatorLayer</span> layer];</div><div class=\"line\">    replicatorLayer.instanceCount = <span class=\"number\">6</span>;</div><div class=\"line\">    replicatorLayer.instanceTransform = <span class=\"built_in\">CATransform3DMakeTranslation</span>(<span class=\"number\">0</span>, <span class=\"number\">60</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> step = <span class=\"number\">-1</span> / <span class=\"number\">6.</span>f;</div><div class=\"line\">    replicatorLayer.instanceRedOffset = step;</div><div class=\"line\">    [replicatorLayer addSublayer:redLayer];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> replicatorLayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CAReplicatorLayer</span> *replicatorLayer = [<span class=\"keyword\">self</span> ReplicatorLayer];</div><div class=\"line\">    replicatorLayer.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view.layer addSublayer:replicatorLayer];</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em>实现效果，如下图</em></strong></p>\n<p><img src=\"/2017/05/06/CAReplicatorLayer探究/2.png\" alt=\"\"></p>\n<p>除了做横纵坐标变换以外，还可以做旋转，代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">CAReplicatorLayer</span> *)rotateReplicatorLayer</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CAReplicatorLayer</span> *layer = [<span class=\"built_in\">CAReplicatorLayer</span> layer];</div><div class=\"line\">    layer.frame = <span class=\"built_in\">CGRectMake</span>(screen_width() / <span class=\"number\">2</span>, screen_height() / <span class=\"number\">2</span>, w_16, h_16);</div><div class=\"line\">    <span class=\"built_in\">CALayer</span> *content = [<span class=\"built_in\">CALayer</span> layer];</div><div class=\"line\">    content.opacity = <span class=\"number\">1</span>;</div><div class=\"line\">    content.frame = layer.bounds;</div><div class=\"line\">    content.contents = (<span class=\"keyword\">id</span>)[[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"brightBlob.png\"</span>]<span class=\"built_in\">CGImage</span>];</div><div class=\"line\">    </div><div class=\"line\">    layer.instanceCount = <span class=\"number\">36</span>;</div><div class=\"line\">    layer.instanceColor = [[<span class=\"built_in\">UIColor</span> redColor]<span class=\"built_in\">CGColor</span>];</div><div class=\"line\">    <span class=\"built_in\">CATransform3D</span> transform = <span class=\"built_in\">CATransform3DMakeTranslation</span>(<span class=\"number\">16</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    layer.instanceTransform = <span class=\"built_in\">CATransform3DRotate</span>(transform, -M_PI * <span class=\"number\">10</span> / <span class=\"number\">180</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    [layer addSublayer:content];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> layer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em>效果图如下</em></strong></p>\n<p><img src=\"/2017/05/06/CAReplicatorLayer探究/3.png\" alt=\"img\"></p>\n<ol>\n<li><p><strong>进阶使用</strong></p>\n<p>使用该类可以实现粒子发射器的效果，结合动画的使用，加上旋转、位移变换，可以实现类似游戏中的粒子发射器的效果。此处需要定义一个CYEmitterLayer类，该类要继承自CAReplicatorLayer。很显然，我要对CAReplicatorLayer进行功能扩展。让它具备开始发射粒子和停止发射粒子的功能。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;QuartzCore/QuartzCore.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CYEmitterLayer</span> : <span class=\"title\">CAReplicatorLayer</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">CALayer</span> *imageLayer;  <span class=\"comment\">//作为原始层，供CAReplicatorLayer 复制</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> rotator;      <span class=\"comment\">//旋转因子，实现旋转功能</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> length;       <span class=\"comment\">//发射长度</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> count;        <span class=\"comment\">//一次发射的个数</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> angle;        <span class=\"comment\">//发射角度</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> cycleTime;    <span class=\"comment\">//循环时间</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> xAdjust;      <span class=\"comment\">//x轴调整</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> yAdjust;      <span class=\"comment\">//y轴调整</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)start;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"CYEmitterLayer.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKit.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CYEmitterLayer</span></span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.count = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">self</span>.imageLayer = [<span class=\"built_in\">CALayer</span> layer];</div><div class=\"line\">        <span class=\"keyword\">self</span>.imageLayer.contents = (<span class=\"keyword\">id</span>)[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"brightBlob\"</span>].CGImage;</div><div class=\"line\">        <span class=\"keyword\">self</span>.instanceColor = [[<span class=\"built_in\">UIColor</span> whiteColor]<span class=\"built_in\">CGColor</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> addSublayer:<span class=\"keyword\">self</span>.imageLayer];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)start</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 配置发射信息</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.imageLayer.frame = <span class=\"keyword\">self</span>.bounds;</div><div class=\"line\">    <span class=\"keyword\">self</span>.imageLayer.opacity = <span class=\"number\">1.0</span>f;</div><div class=\"line\">    <span class=\"keyword\">self</span>.instanceCount = <span class=\"keyword\">self</span>.count;</div><div class=\"line\">    <span class=\"keyword\">self</span>.instanceDelay = <span class=\"keyword\">self</span>.cycleTime / <span class=\"keyword\">self</span>.count;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 校准粒子与上个粒子之间的角度以及位置</span></div><div class=\"line\">    <span class=\"built_in\">CATransform3D</span> transform = <span class=\"built_in\">CATransform3DMakeRotation</span>(<span class=\"keyword\">self</span>.rotator, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">self</span>.instanceTransform = <span class=\"built_in\">CATransform3DTranslate</span>(transform, <span class=\"keyword\">self</span>.xAdjust, <span class=\"keyword\">self</span>.yAdjust, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 校准发射源发射角度</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.transform = <span class=\"built_in\">CATransform3DMakeRotation</span>(<span class=\"keyword\">self</span>.angle, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 执行动画，实现发射效果</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> animation];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)animation</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> newPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, <span class=\"keyword\">self</span>.length);</div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *basic = [<span class=\"built_in\">CABasicAnimation</span> animation];</div><div class=\"line\">    basic.keyPath = <span class=\"string\">@\"position\"</span>;</div><div class=\"line\">    basic.toValue = [<span class=\"built_in\">NSValue</span> valueWithCGPoint:newPoint];</div><div class=\"line\">    basic.duration = <span class=\"keyword\">self</span>.cycleTime;</div><div class=\"line\">    basic.repeatCount = MAXFLOAT;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.imageLayer addAnimation:basic forKey:<span class=\"string\">@\"position\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.imageLayer.opacity = <span class=\"number\">0</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.imageLayer removeAllAnimations];</div><div class=\"line\">    <span class=\"keyword\">self</span>.instanceCount = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>这里是头文件的定义，我们扩展了动画执行时间、发射个数、发射角度、粒子旋转角度等基本属性，通过对这些基本属性的合理赋值，就可以实现发射粒子的功能了。我这里只写了俩个简单的用法，具体怎么实现更牛逼，更吊的效果就靠看官脑洞大开了。</p>\n<p><strong><em>效果图如下</em></strong></p>\n<p><img src=\"/2017/05/06/CAReplicatorLayer探究/5.gif\" alt=\"img\"></p>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"何时使用？\"><a href=\"#何时使用？\" class=\"headerlink\" title=\"何时使用？\"></a>何时使用？</h2><p>​    我个人认为，这个类之所以没有在我们开发中经常出现，确实是有道理的，后面的粒子发射器，实际上苹果在ios5的时候已经引入了CAEmitterLayer来做这个功能，那么我们使用这个类的场景也就剩下静态的展示多个图层的时候使用了，此外要说的是，由于layer不能像UIView那样的响应触摸事件，带有交互的场景是不适合它的，好了，下面附上我在github上的demo地址，感兴趣的朋友可以<a href=\"https://github.com/TripleFireMan/CARepicatorLayerDemo.git\">下载</a>下来观看下。</p>\n<p>​    另外，开场的苹果官方demo是用来镇场的 #35</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://developer.apple.com/reference/quartzcore/careplicatorlayer?language=objc\">官方资料</a></li>\n</ol>"},{"title":"CoreGraphicsAndAnimations(2)","date":"2017-05-19T15:48:14.000Z","_content":"\n# 绘图（2）\n\n## 图层合并及Flower生长动画\n\n### 图层合并\n\n图层的合并说起来很高大上，其实实际上在IOS里面实现非常的简单，实现原理就是，先获取当前的图片绘图上下文，将当前view的layer渲染到当前的绘图上下文，之后从当前的上下文中获取图片，最后结束当前上下文。返回获取到的图片\n\n可能看代码更直观些。\n\n<!--more-->\n\n注：这是一个view的category方法\n\n```objc\n- (UIImage *)cy_compositedView\n{\n    UIGraphicsBeginImageContext(self.bounds.size);\n    [self.layer renderInContext:UIGraphicsGetCurrentContext()];\n    UIImage *compositedImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    \n    return compositedImage;\n    \n}\n```\n\n### Flower 生长动画\n\nflower的生长主要注意的地方就俩点，一个是花的位置安排，一个是花的生长动画。位置的话，需要注意的是我们希望看起来大的花和位置靠下的花，尽量能往前放。这样会有一些层次感。生长动画的话就是希望锚点能在根部，这样会有一种长起来的感觉。\n\n还有需要注意的就是，我们这里只使用了一个Flower类，然后用这个类去生成了🌺的图片。然后采用初始化UIImageView贴图片的方式创建60朵🌺，这样能大大的节省内存空间。\n\n代码如下\n\n```objc\n- (void)addFlowers\n{\n    CGFloat height = self.view.bounds.size.height;\n    CGFloat width = self.view.bounds.size.width;\n    \n    // 花的高度\n    CGFloat flowerHeight = height / 6;\n    \n    // 花的起始位置\n    CGFloat flowerY = height * 0.3;\n\n    // 创建花\n    CYFlower *flower = [[CYFlower alloc]initWithFrame:CGRectMake(0, 0, flowerHeight * .7, flowerHeight)];\n    \n    // 生成花图片\n    UIImage *floweimg = [flower cy_compositedView];\n    \n    // 贴花\n    for (int i = 0; i < 60; i ++) {\n        int size = height / 12.f;\n        CGFloat flowersize =( arc4random() % (int) size) + size;\n        \n        UIImageView *flowerImgView = [[UIImageView alloc]initWithFrame:CGRectMake(arc4random()%(int)width * 0.9, arc4random() % (int)flowerY + 2 * flowerY, flowersize * .7, flowersize)];\n        flowerImgView.image = floweimg;\n        \n        // z position设置，这样会有层次感\n        flowerImgView.layer.zPosition = flowerImgView.frame.origin.y + flowersize;\n        [self.view addSubview:flowerImgView];\n        // 花生长\n        [self growFlowers:flowerImgView duration:arc4random() % 100 / 25 + 4];\n    }\n    \n}\n\n- (void)growFlowers:(UIImageView *)flowers duration:(CGFloat)duration\n{\n    // 花锚点设置\n    flowers.layer.anchorPoint = CGPointMake(.5, 1);\n    \n    // 添加动画\n    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@\"transform.scale\"];\n    animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];\n    animation.duration = duration;\n    animation.fromValue = [NSValue valueWithCGSize:CGSizeMake(0, 0)];\n    animation.toValue = [NSValue valueWithCGSize:CGSizeMake(1, 1)];\n    [flowers.layer addAnimation:animation forKey:@\"grow\"];\n}\n```\n\n\n\n下面附上生长动画\n\n![img](CoreGraphicsAndAnimations-2/1.gif)\n\n###  利用梯度layer实现太阳升起的动画\n\nios里面有一个layer叫CAGradientLayer，这个layer支持线性的梯度，最为关键的是，它有一个colors属性支持动画效果。我们只需要给这个colors数组里面填充颜色对象就可以了，另外我们还希望能够从起点到结束点有个过度。那么需要对startPoint属性做动画。\n\n最后，不希望视图生成的时候就开始动画，而是在视图贴到父视图上的时候才开始动画，那么layer的动画就要加在-(void)didMoveToSuperView方法上。以下是具体实现代码\n\n```objc\n+ (Class)layerClass\n{\n    return [CAGradientLayer class];\n}\n\n- (void)didMoveToSuperview\n{\n    self.backgroundColor = [UIColor blackColor];\n    CGColorRef blackcolor = [[UIColor blackColor]CGColor];\n    UIColor *color1 = [UIColor colorWithRed:0.01 green:0.2 blue:0.8 alpha:1];\n    UIColor *color2 = [UIColor colorWithRed:1 green:0.5 blue:0 alpha:1];\n    UIColor *color3 = [UIColor colorWithRed:.35 green:.74 blue:.11 alpha:1];\n    NSArray *colors = [NSArray arrayWithObjects:(id)[color1 CGColor],\n                       [color2 CGColor],\n                       [color3 CGColor],\n                       nil];\n    NSNumber *location1 = [NSNumber numberWithFloat:.0];\n    NSNumber *location2 = [NSNumber numberWithFloat:.4];\n    NSNumber *location3 = [NSNumber numberWithFloat:.9];\n    \n    CAGradientLayer *layer = (CAGradientLayer *)[self layer];\n    layer.colors = colors;\n    layer.locations = @[location1,location2,location3];\n    layer.startPoint = CGPointMake(.5, 0);\n    layer.endPoint = CGPointMake(.5, 1);\n    \n    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@\"startPoint\"];\n    animation.duration = 6.f;\n    animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];\n    animation.fromValue = [NSValue valueWithCGPoint:CGPointMake(.5, 1)];\n    \n    [layer addAnimation:animation forKey:@\"start\"];\n    \n    animation.keyPath = @\"colors\";\n    animation.duration = 6.f;\n    animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];\n    animation.fromValue = [NSArray arrayWithObjects:(__bridge id)blackcolor, blackcolor, blackcolor, nil];\n    \n    [layer addAnimation:animation forKey:@\"color\"];\n}\n@end\n```\n\n老规矩附上一张实现的效果图\n\n![](CoreGraphicsAndAnimations-2/2.gif)\n\n### 云彩飘动\n\n接下来，我们希望实现的是开篇的时候，展示的云朵从屏幕左侧飘移到屏幕右侧的动画，这里有几个需要注意的点\n\n* 云朵轨迹\n* 云朵投影\n* 云朵投影和云朵要一起动。\n\n实现方式的话，这里采用UIBezierPath绘制轨迹，然后内部采用梯度进行填充。云朵的投影采用云朵一半的高度绘制，然后将其设置为云朵的ShadowPath，然后利用shadowoffset属性将云朵投射到足够远的距离，形成一种投影的效果。\n\n```objc\n- (void)drawRect:(CGRect)rect\n{\n    CGFloat height = self.bounds.size.height;\n    \n    UIBezierPath *path = [self createCloudPathWithHeight:height];\n    [path addClip];\n    \n    CGGradientRef gradientRef = [self gradientWithColor:self.innerColor toColor:self.outerColor count:2];\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGPoint startPoint = CGPointMake(0, 0);\n    CGPoint endPoint = CGPointMake(0, height);\n    CGContextDrawLinearGradient(context, gradientRef, startPoint, endPoint, 0);\n    \n    path.lineWidth = self.lineThickness;\n    [self.strokeColor setStroke];\n    [path stroke];\n    \n    UIBezierPath *shadowPath = [self createCloudPathWithHeight:height / 2];\n    self.layer.shadowPath = shadowPath.CGPath;\n    if (!self.distance) {\n        self.distance = height * 1.8;\n    }\n    self.layer.shadowOffset = CGSizeMake(0, self.distance);\n    \n    self.layer.shadowOpacity = 0.4f;\n    \n    self.alpha = 0.9f;\n    \n}\n\n- (UIBezierPath *)createCloudPathWithHeight:(CGFloat)height\n{\n    CGFloat width = self.bounds.size.width;\n    \n    CGFloat points[] = {\n        0.4,0.2,\n        0.5,0.1,0.6,0.2,\n        0.8,0.2,0.8,0.4,\n        0.9,0.5,0.8,0.6,\n        0.8,0.8,0.6,0.8,\n        0.5,0.9,0.4,0.8,\n        0.2,0.8,0.2,0.6,\n        0.1,0.5,0.2,0.4,\n        0.2,0.2,0.4,0.2,\n    };\n    \n    CGPoint cPoint;\n    CGPoint point;\n    \n    UIBezierPath *path = [UIBezierPath bezierPath];\n    [path moveToPoint:CGPointMake(points[0] * width, points[1] * height)];\n    \n    for (int i = 2; i < sizeof(points) / sizeof(CGFloat); i += 4) {\n        cPoint = CGPointMake(points[i] * width, points[i + 1] * height);\n        point  = CGPointMake(points[i + 2] * width, points[i + 3] * height);\n        [path addQuadCurveToPoint:point controlPoint:cPoint];\n    }\n    \n    [path closePath];\n    \n    return path;\n}\n```\n\n实现的效果图如下\n\n![](CoreGraphicsAndAnimations-2/4.gif)\n\n### 海鸥\n\n进行到现在，跟成品图中相差的也就剩下最后一步了，那就是海鸥的绘制，海鸥这里同样还是采用Bezier曲线绘制，不同的是，我们要采用onscreen渲染的方式，绘制出多张海鸥的image，最后将image组合成一个数组，然后用UIImageView的images数组进行展示。\n\n以下是具体绘制代码\n\n```objc\n- (void)didMoveToSuperview\n{\n    if (!self.animationImages) {\n        self.animationImages = [self arrayofImages];\n    }\n}\n\n- (NSArray *)arrayofImages\n{\n    NSMutableArray *arr = [NSMutableArray arrayWithCapacity:COUNT];\n    for (CGFloat i = LOWWING; i < HEIGING; i+=STEP) {\n        [arr addObject:[self animationFrame:i]];\n    }\n    \n    for (CGFloat i = HEIGING; i > LOWWING; i -= STEP) {\n        [arr addObject:[self animationFrame:i]];\n    }\n    \n    return arr;\n}\n\n\n- (UIImage *)animationFrame:(CGFloat)frame\n{\n    CGFloat width = self.bounds.size.width;\n    CGFloat height = self.bounds.size.height;\n    \n    UIGraphicsBeginImageContextWithOptions(CGSizeMake(width, height), NO, 0);\n    \n    UIBezierPath *path = [UIBezierPath bezierPath];\n    [path moveToPoint:CGPointMake(0, frame)];\n    [path addQuadCurveToPoint:CGPointMake(.5, 0.6 - frame / 3) controlPoint:CGPointMake(.25, .25)];\n    [path addQuadCurveToPoint:CGPointMake(1, frame) controlPoint:CGPointMake(.75, .25)];\n    \n    [path applyTransform:CGAffineTransformMakeScale(width, height)];\n    path.lineWidth = height / 30;\n    [path stroke];\n\n    UIImage *imge = UIGraphicsGetImageFromCurrentImageContext();\n    \n    UIGraphicsEndImageContext();\n    \n    return imge;\n}\n```\n\n效果图\n\n![](CoreGraphicsAndAnimations-2/5.gif)\n\n### 小结\n\n通过学习绘制图形以及给layer做动画，基本掌握了一些常用的绘制函数和动画实现方法。发现CoreGraphics确实是一个强大的图形绘制库，只要你脑洞大开就能绘制你想到的任意图形，此外图层合并能够大大节省内存空间，如果是静态的多个图层的view。可以考虑做图层渲染，渲染成图片。\n\n\n\n## 附录\n\n最后附上本项目在git上的demo，感兴趣的朋友可以[下载](https://github.com/TripleFireMan/GardenDemo.git)下来看看，欢迎star。","source":"_posts/CoreGraphicsAndAnimations-2.md","raw":"---\ntitle: CoreGraphicsAndAnimations(2)\ndate: 2017-05-19 23:48:14\ntags:\n---\n\n# 绘图（2）\n\n## 图层合并及Flower生长动画\n\n### 图层合并\n\n图层的合并说起来很高大上，其实实际上在IOS里面实现非常的简单，实现原理就是，先获取当前的图片绘图上下文，将当前view的layer渲染到当前的绘图上下文，之后从当前的上下文中获取图片，最后结束当前上下文。返回获取到的图片\n\n可能看代码更直观些。\n\n<!--more-->\n\n注：这是一个view的category方法\n\n```objc\n- (UIImage *)cy_compositedView\n{\n    UIGraphicsBeginImageContext(self.bounds.size);\n    [self.layer renderInContext:UIGraphicsGetCurrentContext()];\n    UIImage *compositedImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    \n    return compositedImage;\n    \n}\n```\n\n### Flower 生长动画\n\nflower的生长主要注意的地方就俩点，一个是花的位置安排，一个是花的生长动画。位置的话，需要注意的是我们希望看起来大的花和位置靠下的花，尽量能往前放。这样会有一些层次感。生长动画的话就是希望锚点能在根部，这样会有一种长起来的感觉。\n\n还有需要注意的就是，我们这里只使用了一个Flower类，然后用这个类去生成了🌺的图片。然后采用初始化UIImageView贴图片的方式创建60朵🌺，这样能大大的节省内存空间。\n\n代码如下\n\n```objc\n- (void)addFlowers\n{\n    CGFloat height = self.view.bounds.size.height;\n    CGFloat width = self.view.bounds.size.width;\n    \n    // 花的高度\n    CGFloat flowerHeight = height / 6;\n    \n    // 花的起始位置\n    CGFloat flowerY = height * 0.3;\n\n    // 创建花\n    CYFlower *flower = [[CYFlower alloc]initWithFrame:CGRectMake(0, 0, flowerHeight * .7, flowerHeight)];\n    \n    // 生成花图片\n    UIImage *floweimg = [flower cy_compositedView];\n    \n    // 贴花\n    for (int i = 0; i < 60; i ++) {\n        int size = height / 12.f;\n        CGFloat flowersize =( arc4random() % (int) size) + size;\n        \n        UIImageView *flowerImgView = [[UIImageView alloc]initWithFrame:CGRectMake(arc4random()%(int)width * 0.9, arc4random() % (int)flowerY + 2 * flowerY, flowersize * .7, flowersize)];\n        flowerImgView.image = floweimg;\n        \n        // z position设置，这样会有层次感\n        flowerImgView.layer.zPosition = flowerImgView.frame.origin.y + flowersize;\n        [self.view addSubview:flowerImgView];\n        // 花生长\n        [self growFlowers:flowerImgView duration:arc4random() % 100 / 25 + 4];\n    }\n    \n}\n\n- (void)growFlowers:(UIImageView *)flowers duration:(CGFloat)duration\n{\n    // 花锚点设置\n    flowers.layer.anchorPoint = CGPointMake(.5, 1);\n    \n    // 添加动画\n    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@\"transform.scale\"];\n    animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];\n    animation.duration = duration;\n    animation.fromValue = [NSValue valueWithCGSize:CGSizeMake(0, 0)];\n    animation.toValue = [NSValue valueWithCGSize:CGSizeMake(1, 1)];\n    [flowers.layer addAnimation:animation forKey:@\"grow\"];\n}\n```\n\n\n\n下面附上生长动画\n\n![img](CoreGraphicsAndAnimations-2/1.gif)\n\n###  利用梯度layer实现太阳升起的动画\n\nios里面有一个layer叫CAGradientLayer，这个layer支持线性的梯度，最为关键的是，它有一个colors属性支持动画效果。我们只需要给这个colors数组里面填充颜色对象就可以了，另外我们还希望能够从起点到结束点有个过度。那么需要对startPoint属性做动画。\n\n最后，不希望视图生成的时候就开始动画，而是在视图贴到父视图上的时候才开始动画，那么layer的动画就要加在-(void)didMoveToSuperView方法上。以下是具体实现代码\n\n```objc\n+ (Class)layerClass\n{\n    return [CAGradientLayer class];\n}\n\n- (void)didMoveToSuperview\n{\n    self.backgroundColor = [UIColor blackColor];\n    CGColorRef blackcolor = [[UIColor blackColor]CGColor];\n    UIColor *color1 = [UIColor colorWithRed:0.01 green:0.2 blue:0.8 alpha:1];\n    UIColor *color2 = [UIColor colorWithRed:1 green:0.5 blue:0 alpha:1];\n    UIColor *color3 = [UIColor colorWithRed:.35 green:.74 blue:.11 alpha:1];\n    NSArray *colors = [NSArray arrayWithObjects:(id)[color1 CGColor],\n                       [color2 CGColor],\n                       [color3 CGColor],\n                       nil];\n    NSNumber *location1 = [NSNumber numberWithFloat:.0];\n    NSNumber *location2 = [NSNumber numberWithFloat:.4];\n    NSNumber *location3 = [NSNumber numberWithFloat:.9];\n    \n    CAGradientLayer *layer = (CAGradientLayer *)[self layer];\n    layer.colors = colors;\n    layer.locations = @[location1,location2,location3];\n    layer.startPoint = CGPointMake(.5, 0);\n    layer.endPoint = CGPointMake(.5, 1);\n    \n    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@\"startPoint\"];\n    animation.duration = 6.f;\n    animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];\n    animation.fromValue = [NSValue valueWithCGPoint:CGPointMake(.5, 1)];\n    \n    [layer addAnimation:animation forKey:@\"start\"];\n    \n    animation.keyPath = @\"colors\";\n    animation.duration = 6.f;\n    animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];\n    animation.fromValue = [NSArray arrayWithObjects:(__bridge id)blackcolor, blackcolor, blackcolor, nil];\n    \n    [layer addAnimation:animation forKey:@\"color\"];\n}\n@end\n```\n\n老规矩附上一张实现的效果图\n\n![](CoreGraphicsAndAnimations-2/2.gif)\n\n### 云彩飘动\n\n接下来，我们希望实现的是开篇的时候，展示的云朵从屏幕左侧飘移到屏幕右侧的动画，这里有几个需要注意的点\n\n* 云朵轨迹\n* 云朵投影\n* 云朵投影和云朵要一起动。\n\n实现方式的话，这里采用UIBezierPath绘制轨迹，然后内部采用梯度进行填充。云朵的投影采用云朵一半的高度绘制，然后将其设置为云朵的ShadowPath，然后利用shadowoffset属性将云朵投射到足够远的距离，形成一种投影的效果。\n\n```objc\n- (void)drawRect:(CGRect)rect\n{\n    CGFloat height = self.bounds.size.height;\n    \n    UIBezierPath *path = [self createCloudPathWithHeight:height];\n    [path addClip];\n    \n    CGGradientRef gradientRef = [self gradientWithColor:self.innerColor toColor:self.outerColor count:2];\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGPoint startPoint = CGPointMake(0, 0);\n    CGPoint endPoint = CGPointMake(0, height);\n    CGContextDrawLinearGradient(context, gradientRef, startPoint, endPoint, 0);\n    \n    path.lineWidth = self.lineThickness;\n    [self.strokeColor setStroke];\n    [path stroke];\n    \n    UIBezierPath *shadowPath = [self createCloudPathWithHeight:height / 2];\n    self.layer.shadowPath = shadowPath.CGPath;\n    if (!self.distance) {\n        self.distance = height * 1.8;\n    }\n    self.layer.shadowOffset = CGSizeMake(0, self.distance);\n    \n    self.layer.shadowOpacity = 0.4f;\n    \n    self.alpha = 0.9f;\n    \n}\n\n- (UIBezierPath *)createCloudPathWithHeight:(CGFloat)height\n{\n    CGFloat width = self.bounds.size.width;\n    \n    CGFloat points[] = {\n        0.4,0.2,\n        0.5,0.1,0.6,0.2,\n        0.8,0.2,0.8,0.4,\n        0.9,0.5,0.8,0.6,\n        0.8,0.8,0.6,0.8,\n        0.5,0.9,0.4,0.8,\n        0.2,0.8,0.2,0.6,\n        0.1,0.5,0.2,0.4,\n        0.2,0.2,0.4,0.2,\n    };\n    \n    CGPoint cPoint;\n    CGPoint point;\n    \n    UIBezierPath *path = [UIBezierPath bezierPath];\n    [path moveToPoint:CGPointMake(points[0] * width, points[1] * height)];\n    \n    for (int i = 2; i < sizeof(points) / sizeof(CGFloat); i += 4) {\n        cPoint = CGPointMake(points[i] * width, points[i + 1] * height);\n        point  = CGPointMake(points[i + 2] * width, points[i + 3] * height);\n        [path addQuadCurveToPoint:point controlPoint:cPoint];\n    }\n    \n    [path closePath];\n    \n    return path;\n}\n```\n\n实现的效果图如下\n\n![](CoreGraphicsAndAnimations-2/4.gif)\n\n### 海鸥\n\n进行到现在，跟成品图中相差的也就剩下最后一步了，那就是海鸥的绘制，海鸥这里同样还是采用Bezier曲线绘制，不同的是，我们要采用onscreen渲染的方式，绘制出多张海鸥的image，最后将image组合成一个数组，然后用UIImageView的images数组进行展示。\n\n以下是具体绘制代码\n\n```objc\n- (void)didMoveToSuperview\n{\n    if (!self.animationImages) {\n        self.animationImages = [self arrayofImages];\n    }\n}\n\n- (NSArray *)arrayofImages\n{\n    NSMutableArray *arr = [NSMutableArray arrayWithCapacity:COUNT];\n    for (CGFloat i = LOWWING; i < HEIGING; i+=STEP) {\n        [arr addObject:[self animationFrame:i]];\n    }\n    \n    for (CGFloat i = HEIGING; i > LOWWING; i -= STEP) {\n        [arr addObject:[self animationFrame:i]];\n    }\n    \n    return arr;\n}\n\n\n- (UIImage *)animationFrame:(CGFloat)frame\n{\n    CGFloat width = self.bounds.size.width;\n    CGFloat height = self.bounds.size.height;\n    \n    UIGraphicsBeginImageContextWithOptions(CGSizeMake(width, height), NO, 0);\n    \n    UIBezierPath *path = [UIBezierPath bezierPath];\n    [path moveToPoint:CGPointMake(0, frame)];\n    [path addQuadCurveToPoint:CGPointMake(.5, 0.6 - frame / 3) controlPoint:CGPointMake(.25, .25)];\n    [path addQuadCurveToPoint:CGPointMake(1, frame) controlPoint:CGPointMake(.75, .25)];\n    \n    [path applyTransform:CGAffineTransformMakeScale(width, height)];\n    path.lineWidth = height / 30;\n    [path stroke];\n\n    UIImage *imge = UIGraphicsGetImageFromCurrentImageContext();\n    \n    UIGraphicsEndImageContext();\n    \n    return imge;\n}\n```\n\n效果图\n\n![](CoreGraphicsAndAnimations-2/5.gif)\n\n### 小结\n\n通过学习绘制图形以及给layer做动画，基本掌握了一些常用的绘制函数和动画实现方法。发现CoreGraphics确实是一个强大的图形绘制库，只要你脑洞大开就能绘制你想到的任意图形，此外图层合并能够大大节省内存空间，如果是静态的多个图层的view。可以考虑做图层渲染，渲染成图片。\n\n\n\n## 附录\n\n最后附上本项目在git上的demo，感兴趣的朋友可以[下载](https://github.com/TripleFireMan/GardenDemo.git)下来看看，欢迎star。","slug":"CoreGraphicsAndAnimations-2","published":1,"updated":"2017-06-08T15:52:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yvq0002hx5lugwpekin","content":"<h1 id=\"绘图（2）\"><a href=\"#绘图（2）\" class=\"headerlink\" title=\"绘图（2）\"></a>绘图（2）</h1><h2 id=\"图层合并及Flower生长动画\"><a href=\"#图层合并及Flower生长动画\" class=\"headerlink\" title=\"图层合并及Flower生长动画\"></a>图层合并及Flower生长动画</h2><h3 id=\"图层合并\"><a href=\"#图层合并\" class=\"headerlink\" title=\"图层合并\"></a>图层合并</h3><p>图层的合并说起来很高大上，其实实际上在IOS里面实现非常的简单，实现原理就是，先获取当前的图片绘图上下文，将当前view的layer渲染到当前的绘图上下文，之后从当前的上下文中获取图片，最后结束当前上下文。返回获取到的图片</p>\n<p>可能看代码更直观些。</p>\n<a id=\"more\"></a>\n<p>注：这是一个view的category方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">UIImage</span> *)cy_compositedView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">UIGraphicsBeginImageContext</span>(<span class=\"keyword\">self</span>.bounds.size);</div><div class=\"line\">    [<span class=\"keyword\">self</span>.layer renderInContext:<span class=\"built_in\">UIGraphicsGetCurrentContext</span>()];</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *compositedImage = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class=\"line\">    <span class=\"built_in\">UIGraphicsEndImageContext</span>();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> compositedImage;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Flower-生长动画\"><a href=\"#Flower-生长动画\" class=\"headerlink\" title=\"Flower 生长动画\"></a>Flower 生长动画</h3><p>flower的生长主要注意的地方就俩点，一个是花的位置安排，一个是花的生长动画。位置的话，需要注意的是我们希望看起来大的花和位置靠下的花，尽量能往前放。这样会有一些层次感。生长动画的话就是希望锚点能在根部，这样会有一种长起来的感觉。</p>\n<p>还有需要注意的就是，我们这里只使用了一个Flower类，然后用这个类去生成了🌺的图片。然后采用初始化UIImageView贴图片的方式创建60朵🌺，这样能大大的节省内存空间。</p>\n<p>代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)addFlowers</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> height = <span class=\"keyword\">self</span>.view.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> width = <span class=\"keyword\">self</span>.view.bounds.size.width;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 花的高度</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> flowerHeight = height / <span class=\"number\">6</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 花的起始位置</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> flowerY = height * <span class=\"number\">0.3</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 创建花</span></div><div class=\"line\">    CYFlower *flower = [[CYFlower alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, flowerHeight * <span class=\"number\">.7</span>, flowerHeight)];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 生成花图片</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *floweimg = [flower cy_compositedView];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 贴花</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">60</span>; i ++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> size = height / <span class=\"number\">12.</span>f;</div><div class=\"line\">        <span class=\"built_in\">CGFloat</span> flowersize =( arc4random() % (<span class=\"keyword\">int</span>) size) + size;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">UIImageView</span> *flowerImgView = [[<span class=\"built_in\">UIImageView</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(arc4random()%(<span class=\"keyword\">int</span>)width * <span class=\"number\">0.9</span>, arc4random() % (<span class=\"keyword\">int</span>)flowerY + <span class=\"number\">2</span> * flowerY, flowersize * <span class=\"number\">.7</span>, flowersize)];</div><div class=\"line\">        flowerImgView.image = floweimg;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// z position设置，这样会有层次感</span></div><div class=\"line\">        flowerImgView.layer.zPosition = flowerImgView.frame.origin.y + flowersize;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.view addSubview:flowerImgView];</div><div class=\"line\">        <span class=\"comment\">// 花生长</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> growFlowers:flowerImgView duration:arc4random() % <span class=\"number\">100</span> / <span class=\"number\">25</span> + <span class=\"number\">4</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)growFlowers:(<span class=\"built_in\">UIImageView</span> *)flowers duration:(<span class=\"built_in\">CGFloat</span>)duration</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 花锚点设置</span></div><div class=\"line\">    flowers.layer.anchorPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 添加动画</span></div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *animation = [<span class=\"built_in\">CABasicAnimation</span> animationWithKeyPath:<span class=\"string\">@\"transform.scale\"</span>];</div><div class=\"line\">    animation.timingFunction = [<span class=\"built_in\">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class=\"line\">    animation.duration = duration;</div><div class=\"line\">    animation.fromValue = [<span class=\"built_in\">NSValue</span> valueWithCGSize:<span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>)];</div><div class=\"line\">    animation.toValue = [<span class=\"built_in\">NSValue</span> valueWithCGSize:<span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>)];</div><div class=\"line\">    [flowers.layer addAnimation:animation forKey:<span class=\"string\">@\"grow\"</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面附上生长动画</p>\n<p><img src=\"/2017/05/19/CoreGraphicsAndAnimations-2/1.gif\" alt=\"img\"></p>\n<h3 id=\"利用梯度layer实现太阳升起的动画\"><a href=\"#利用梯度layer实现太阳升起的动画\" class=\"headerlink\" title=\"利用梯度layer实现太阳升起的动画\"></a>利用梯度layer实现太阳升起的动画</h3><p>ios里面有一个layer叫CAGradientLayer，这个layer支持线性的梯度，最为关键的是，它有一个colors属性支持动画效果。我们只需要给这个colors数组里面填充颜色对象就可以了，另外我们还希望能够从起点到结束点有个过度。那么需要对startPoint属性做动画。</p>\n<p>最后，不希望视图生成的时候就开始动画，而是在视图贴到父视图上的时候才开始动画，那么layer的动画就要加在-(void)didMoveToSuperView方法上。以下是具体实现代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (Class)layerClass</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">CAGradientLayer</span> <span class=\"keyword\">class</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)didMoveToSuperview</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.backgroundColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">    <span class=\"built_in\">CGColorRef</span> blackcolor = [[<span class=\"built_in\">UIColor</span> blackColor]<span class=\"built_in\">CGColor</span>];</div><div class=\"line\">    <span class=\"built_in\">UIColor</span> *color1 = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.01</span> green:<span class=\"number\">0.2</span> blue:<span class=\"number\">0.8</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">UIColor</span> *color2 = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">1</span> green:<span class=\"number\">0.5</span> blue:<span class=\"number\">0</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">UIColor</span> *color3 = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">.35</span> green:<span class=\"number\">.74</span> blue:<span class=\"number\">.11</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *colors = [<span class=\"built_in\">NSArray</span> arrayWithObjects:(<span class=\"keyword\">id</span>)[color1 <span class=\"built_in\">CGColor</span>],</div><div class=\"line\">                       [color2 <span class=\"built_in\">CGColor</span>],</div><div class=\"line\">                       [color3 <span class=\"built_in\">CGColor</span>],</div><div class=\"line\">                       <span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSNumber</span> *location1 = [<span class=\"built_in\">NSNumber</span> numberWithFloat:<span class=\"number\">.0</span>];</div><div class=\"line\">    <span class=\"built_in\">NSNumber</span> *location2 = [<span class=\"built_in\">NSNumber</span> numberWithFloat:<span class=\"number\">.4</span>];</div><div class=\"line\">    <span class=\"built_in\">NSNumber</span> *location3 = [<span class=\"built_in\">NSNumber</span> numberWithFloat:<span class=\"number\">.9</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CAGradientLayer</span> *layer = (<span class=\"built_in\">CAGradientLayer</span> *)[<span class=\"keyword\">self</span> layer];</div><div class=\"line\">    layer.colors = colors;</div><div class=\"line\">    layer.locations = @[location1,location2,location3];</div><div class=\"line\">    layer.startPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    layer.endPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *animation = [<span class=\"built_in\">CABasicAnimation</span> animationWithKeyPath:<span class=\"string\">@\"startPoint\"</span>];</div><div class=\"line\">    animation.duration = <span class=\"number\">6.</span>f;</div><div class=\"line\">    animation.timingFunction = [<span class=\"built_in\">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseOut];</div><div class=\"line\">    animation.fromValue = [<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">1</span>)];</div><div class=\"line\">    </div><div class=\"line\">    [layer addAnimation:animation forKey:<span class=\"string\">@\"start\"</span>];</div><div class=\"line\">    </div><div class=\"line\">    animation.keyPath = <span class=\"string\">@\"colors\"</span>;</div><div class=\"line\">    animation.duration = <span class=\"number\">6.</span>f;</div><div class=\"line\">    animation.timingFunction = [<span class=\"built_in\">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseOut];</div><div class=\"line\">    animation.fromValue = [<span class=\"built_in\">NSArray</span> arrayWithObjects:(__bridge <span class=\"keyword\">id</span>)blackcolor, blackcolor, blackcolor, <span class=\"literal\">nil</span>];</div><div class=\"line\">    </div><div class=\"line\">    [layer addAnimation:animation forKey:<span class=\"string\">@\"color\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>老规矩附上一张实现的效果图</p>\n<p><img src=\"/2017/05/19/CoreGraphicsAndAnimations-2/2.gif\" alt=\"\"></p>\n<h3 id=\"云彩飘动\"><a href=\"#云彩飘动\" class=\"headerlink\" title=\"云彩飘动\"></a>云彩飘动</h3><p>接下来，我们希望实现的是开篇的时候，展示的云朵从屏幕左侧飘移到屏幕右侧的动画，这里有几个需要注意的点</p>\n<ul>\n<li>云朵轨迹</li>\n<li>云朵投影</li>\n<li>云朵投影和云朵要一起动。</li>\n</ul>\n<p>实现方式的话，这里采用UIBezierPath绘制轨迹，然后内部采用梯度进行填充。云朵的投影采用云朵一半的高度绘制，然后将其设置为云朵的ShadowPath，然后利用shadowoffset属性将云朵投射到足够远的距离，形成一种投影的效果。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> height = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"keyword\">self</span> createCloudPathWithHeight:height];</div><div class=\"line\">    [path addClip];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGGradientRef</span> gradientRef = [<span class=\"keyword\">self</span> gradientWithColor:<span class=\"keyword\">self</span>.innerColor toColor:<span class=\"keyword\">self</span>.outerColor count:<span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> startPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> endPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, height);</div><div class=\"line\">    <span class=\"built_in\">CGContextDrawLinearGradient</span>(context, gradientRef, startPoint, endPoint, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    path.lineWidth = <span class=\"keyword\">self</span>.lineThickness;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.strokeColor setStroke];</div><div class=\"line\">    [path stroke];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *shadowPath = [<span class=\"keyword\">self</span> createCloudPathWithHeight:height / <span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"keyword\">self</span>.layer.shadowPath = shadowPath.CGPath;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.distance) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.distance = height * <span class=\"number\">1.8</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">self</span>.layer.shadowOffset = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">0</span>, <span class=\"keyword\">self</span>.distance);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span>.layer.shadowOpacity = <span class=\"number\">0.4</span>f;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span>.alpha = <span class=\"number\">0.9</span>f;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">UIBezierPath</span> *)createCloudPathWithHeight:(<span class=\"built_in\">CGFloat</span>)height</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> width = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> points[] = &#123;</div><div class=\"line\">        <span class=\"number\">0.4</span>,<span class=\"number\">0.2</span>,</div><div class=\"line\">        <span class=\"number\">0.5</span>,<span class=\"number\">0.1</span>,<span class=\"number\">0.6</span>,<span class=\"number\">0.2</span>,</div><div class=\"line\">        <span class=\"number\">0.8</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.8</span>,<span class=\"number\">0.4</span>,</div><div class=\"line\">        <span class=\"number\">0.9</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.8</span>,<span class=\"number\">0.6</span>,</div><div class=\"line\">        <span class=\"number\">0.8</span>,<span class=\"number\">0.8</span>,<span class=\"number\">0.6</span>,<span class=\"number\">0.8</span>,</div><div class=\"line\">        <span class=\"number\">0.5</span>,<span class=\"number\">0.9</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.8</span>,</div><div class=\"line\">        <span class=\"number\">0.2</span>,<span class=\"number\">0.8</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.6</span>,</div><div class=\"line\">        <span class=\"number\">0.1</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.4</span>,</div><div class=\"line\">        <span class=\"number\">0.2</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.2</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> cPoint;</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> point;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</div><div class=\"line\">    [path moveToPoint:<span class=\"built_in\">CGPointMake</span>(points[<span class=\"number\">0</span>] * width, points[<span class=\"number\">1</span>] * height)];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"keyword\">sizeof</span>(points) / <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">CGFloat</span>); i += <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        cPoint = <span class=\"built_in\">CGPointMake</span>(points[i] * width, points[i + <span class=\"number\">1</span>] * height);</div><div class=\"line\">        point  = <span class=\"built_in\">CGPointMake</span>(points[i + <span class=\"number\">2</span>] * width, points[i + <span class=\"number\">3</span>] * height);</div><div class=\"line\">        [path addQuadCurveToPoint:point controlPoint:cPoint];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [path closePath];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> path;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实现的效果图如下</p>\n<p><img src=\"/2017/05/19/CoreGraphicsAndAnimations-2/4.gif\" alt=\"\"></p>\n<h3 id=\"海鸥\"><a href=\"#海鸥\" class=\"headerlink\" title=\"海鸥\"></a>海鸥</h3><p>进行到现在，跟成品图中相差的也就剩下最后一步了，那就是海鸥的绘制，海鸥这里同样还是采用Bezier曲线绘制，不同的是，我们要采用onscreen渲染的方式，绘制出多张海鸥的image，最后将image组合成一个数组，然后用UIImageView的images数组进行展示。</p>\n<p>以下是具体绘制代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)didMoveToSuperview</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.animationImages) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.animationImages = [<span class=\"keyword\">self</span> arrayofImages];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)arrayofImages</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *arr = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity:COUNT];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">CGFloat</span> i = LOWWING; i &lt; HEIGING; i+=STEP) &#123;</div><div class=\"line\">        [arr addObject:[<span class=\"keyword\">self</span> animationFrame:i]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">CGFloat</span> i = HEIGING; i &gt; LOWWING; i -= STEP) &#123;</div><div class=\"line\">        [arr addObject:[<span class=\"keyword\">self</span> animationFrame:i]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">UIImage</span> *)animationFrame:(<span class=\"built_in\">CGFloat</span>)frame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> width = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> height = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIGraphicsBeginImageContextWithOptions</span>(<span class=\"built_in\">CGSizeMake</span>(width, height), <span class=\"literal\">NO</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</div><div class=\"line\">    [path moveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, frame)];</div><div class=\"line\">    [path addQuadCurveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">0.6</span> - frame / <span class=\"number\">3</span>) controlPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.25</span>, <span class=\"number\">.25</span>)];</div><div class=\"line\">    [path addQuadCurveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">1</span>, frame) controlPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.75</span>, <span class=\"number\">.25</span>)];</div><div class=\"line\">    </div><div class=\"line\">    [path applyTransform:<span class=\"built_in\">CGAffineTransformMakeScale</span>(width, height)];</div><div class=\"line\">    path.lineWidth = height / <span class=\"number\">30</span>;</div><div class=\"line\">    [path stroke];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *imge = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIGraphicsEndImageContext</span>();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> imge;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果图</p>\n<p><img src=\"/2017/05/19/CoreGraphicsAndAnimations-2/5.gif\" alt=\"\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>通过学习绘制图形以及给layer做动画，基本掌握了一些常用的绘制函数和动画实现方法。发现CoreGraphics确实是一个强大的图形绘制库，只要你脑洞大开就能绘制你想到的任意图形，此外图层合并能够大大节省内存空间，如果是静态的多个图层的view。可以考虑做图层渲染，渲染成图片。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>最后附上本项目在git上的demo，感兴趣的朋友可以<a href=\"https://github.com/TripleFireMan/GardenDemo.git\" target=\"_blank\" rel=\"external\">下载</a>下来看看，欢迎star。</p>\n","excerpt":"<h1 id=\"绘图（2）\"><a href=\"#绘图（2）\" class=\"headerlink\" title=\"绘图（2）\"></a>绘图（2）</h1><h2 id=\"图层合并及Flower生长动画\"><a href=\"#图层合并及Flower生长动画\" class=\"headerlink\" title=\"图层合并及Flower生长动画\"></a>图层合并及Flower生长动画</h2><h3 id=\"图层合并\"><a href=\"#图层合并\" class=\"headerlink\" title=\"图层合并\"></a>图层合并</h3><p>图层的合并说起来很高大上，其实实际上在IOS里面实现非常的简单，实现原理就是，先获取当前的图片绘图上下文，将当前view的layer渲染到当前的绘图上下文，之后从当前的上下文中获取图片，最后结束当前上下文。返回获取到的图片</p>\n<p>可能看代码更直观些。</p>","more":"<p>注：这是一个view的category方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">UIImage</span> *)cy_compositedView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">UIGraphicsBeginImageContext</span>(<span class=\"keyword\">self</span>.bounds.size);</div><div class=\"line\">    [<span class=\"keyword\">self</span>.layer renderInContext:<span class=\"built_in\">UIGraphicsGetCurrentContext</span>()];</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *compositedImage = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class=\"line\">    <span class=\"built_in\">UIGraphicsEndImageContext</span>();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> compositedImage;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Flower-生长动画\"><a href=\"#Flower-生长动画\" class=\"headerlink\" title=\"Flower 生长动画\"></a>Flower 生长动画</h3><p>flower的生长主要注意的地方就俩点，一个是花的位置安排，一个是花的生长动画。位置的话，需要注意的是我们希望看起来大的花和位置靠下的花，尽量能往前放。这样会有一些层次感。生长动画的话就是希望锚点能在根部，这样会有一种长起来的感觉。</p>\n<p>还有需要注意的就是，我们这里只使用了一个Flower类，然后用这个类去生成了🌺的图片。然后采用初始化UIImageView贴图片的方式创建60朵🌺，这样能大大的节省内存空间。</p>\n<p>代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)addFlowers</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> height = <span class=\"keyword\">self</span>.view.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> width = <span class=\"keyword\">self</span>.view.bounds.size.width;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 花的高度</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> flowerHeight = height / <span class=\"number\">6</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 花的起始位置</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> flowerY = height * <span class=\"number\">0.3</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 创建花</span></div><div class=\"line\">    CYFlower *flower = [[CYFlower alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, flowerHeight * <span class=\"number\">.7</span>, flowerHeight)];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 生成花图片</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *floweimg = [flower cy_compositedView];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 贴花</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">60</span>; i ++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> size = height / <span class=\"number\">12.</span>f;</div><div class=\"line\">        <span class=\"built_in\">CGFloat</span> flowersize =( arc4random() % (<span class=\"keyword\">int</span>) size) + size;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">UIImageView</span> *flowerImgView = [[<span class=\"built_in\">UIImageView</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(arc4random()%(<span class=\"keyword\">int</span>)width * <span class=\"number\">0.9</span>, arc4random() % (<span class=\"keyword\">int</span>)flowerY + <span class=\"number\">2</span> * flowerY, flowersize * <span class=\"number\">.7</span>, flowersize)];</div><div class=\"line\">        flowerImgView.image = floweimg;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// z position设置，这样会有层次感</span></div><div class=\"line\">        flowerImgView.layer.zPosition = flowerImgView.frame.origin.y + flowersize;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.view addSubview:flowerImgView];</div><div class=\"line\">        <span class=\"comment\">// 花生长</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> growFlowers:flowerImgView duration:arc4random() % <span class=\"number\">100</span> / <span class=\"number\">25</span> + <span class=\"number\">4</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)growFlowers:(<span class=\"built_in\">UIImageView</span> *)flowers duration:(<span class=\"built_in\">CGFloat</span>)duration</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 花锚点设置</span></div><div class=\"line\">    flowers.layer.anchorPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 添加动画</span></div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *animation = [<span class=\"built_in\">CABasicAnimation</span> animationWithKeyPath:<span class=\"string\">@\"transform.scale\"</span>];</div><div class=\"line\">    animation.timingFunction = [<span class=\"built_in\">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class=\"line\">    animation.duration = duration;</div><div class=\"line\">    animation.fromValue = [<span class=\"built_in\">NSValue</span> valueWithCGSize:<span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>)];</div><div class=\"line\">    animation.toValue = [<span class=\"built_in\">NSValue</span> valueWithCGSize:<span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>)];</div><div class=\"line\">    [flowers.layer addAnimation:animation forKey:<span class=\"string\">@\"grow\"</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面附上生长动画</p>\n<p><img src=\"/2017/05/19/CoreGraphicsAndAnimations-2/1.gif\" alt=\"img\"></p>\n<h3 id=\"利用梯度layer实现太阳升起的动画\"><a href=\"#利用梯度layer实现太阳升起的动画\" class=\"headerlink\" title=\"利用梯度layer实现太阳升起的动画\"></a>利用梯度layer实现太阳升起的动画</h3><p>ios里面有一个layer叫CAGradientLayer，这个layer支持线性的梯度，最为关键的是，它有一个colors属性支持动画效果。我们只需要给这个colors数组里面填充颜色对象就可以了，另外我们还希望能够从起点到结束点有个过度。那么需要对startPoint属性做动画。</p>\n<p>最后，不希望视图生成的时候就开始动画，而是在视图贴到父视图上的时候才开始动画，那么layer的动画就要加在-(void)didMoveToSuperView方法上。以下是具体实现代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (Class)layerClass</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">CAGradientLayer</span> <span class=\"keyword\">class</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)didMoveToSuperview</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.backgroundColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">    <span class=\"built_in\">CGColorRef</span> blackcolor = [[<span class=\"built_in\">UIColor</span> blackColor]<span class=\"built_in\">CGColor</span>];</div><div class=\"line\">    <span class=\"built_in\">UIColor</span> *color1 = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.01</span> green:<span class=\"number\">0.2</span> blue:<span class=\"number\">0.8</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">UIColor</span> *color2 = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">1</span> green:<span class=\"number\">0.5</span> blue:<span class=\"number\">0</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">UIColor</span> *color3 = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">.35</span> green:<span class=\"number\">.74</span> blue:<span class=\"number\">.11</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *colors = [<span class=\"built_in\">NSArray</span> arrayWithObjects:(<span class=\"keyword\">id</span>)[color1 <span class=\"built_in\">CGColor</span>],</div><div class=\"line\">                       [color2 <span class=\"built_in\">CGColor</span>],</div><div class=\"line\">                       [color3 <span class=\"built_in\">CGColor</span>],</div><div class=\"line\">                       <span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSNumber</span> *location1 = [<span class=\"built_in\">NSNumber</span> numberWithFloat:<span class=\"number\">.0</span>];</div><div class=\"line\">    <span class=\"built_in\">NSNumber</span> *location2 = [<span class=\"built_in\">NSNumber</span> numberWithFloat:<span class=\"number\">.4</span>];</div><div class=\"line\">    <span class=\"built_in\">NSNumber</span> *location3 = [<span class=\"built_in\">NSNumber</span> numberWithFloat:<span class=\"number\">.9</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CAGradientLayer</span> *layer = (<span class=\"built_in\">CAGradientLayer</span> *)[<span class=\"keyword\">self</span> layer];</div><div class=\"line\">    layer.colors = colors;</div><div class=\"line\">    layer.locations = @[location1,location2,location3];</div><div class=\"line\">    layer.startPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    layer.endPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *animation = [<span class=\"built_in\">CABasicAnimation</span> animationWithKeyPath:<span class=\"string\">@\"startPoint\"</span>];</div><div class=\"line\">    animation.duration = <span class=\"number\">6.</span>f;</div><div class=\"line\">    animation.timingFunction = [<span class=\"built_in\">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseOut];</div><div class=\"line\">    animation.fromValue = [<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">1</span>)];</div><div class=\"line\">    </div><div class=\"line\">    [layer addAnimation:animation forKey:<span class=\"string\">@\"start\"</span>];</div><div class=\"line\">    </div><div class=\"line\">    animation.keyPath = <span class=\"string\">@\"colors\"</span>;</div><div class=\"line\">    animation.duration = <span class=\"number\">6.</span>f;</div><div class=\"line\">    animation.timingFunction = [<span class=\"built_in\">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseOut];</div><div class=\"line\">    animation.fromValue = [<span class=\"built_in\">NSArray</span> arrayWithObjects:(__bridge <span class=\"keyword\">id</span>)blackcolor, blackcolor, blackcolor, <span class=\"literal\">nil</span>];</div><div class=\"line\">    </div><div class=\"line\">    [layer addAnimation:animation forKey:<span class=\"string\">@\"color\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>老规矩附上一张实现的效果图</p>\n<p><img src=\"/2017/05/19/CoreGraphicsAndAnimations-2/2.gif\" alt=\"\"></p>\n<h3 id=\"云彩飘动\"><a href=\"#云彩飘动\" class=\"headerlink\" title=\"云彩飘动\"></a>云彩飘动</h3><p>接下来，我们希望实现的是开篇的时候，展示的云朵从屏幕左侧飘移到屏幕右侧的动画，这里有几个需要注意的点</p>\n<ul>\n<li>云朵轨迹</li>\n<li>云朵投影</li>\n<li>云朵投影和云朵要一起动。</li>\n</ul>\n<p>实现方式的话，这里采用UIBezierPath绘制轨迹，然后内部采用梯度进行填充。云朵的投影采用云朵一半的高度绘制，然后将其设置为云朵的ShadowPath，然后利用shadowoffset属性将云朵投射到足够远的距离，形成一种投影的效果。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> height = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"keyword\">self</span> createCloudPathWithHeight:height];</div><div class=\"line\">    [path addClip];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGGradientRef</span> gradientRef = [<span class=\"keyword\">self</span> gradientWithColor:<span class=\"keyword\">self</span>.innerColor toColor:<span class=\"keyword\">self</span>.outerColor count:<span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> startPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> endPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, height);</div><div class=\"line\">    <span class=\"built_in\">CGContextDrawLinearGradient</span>(context, gradientRef, startPoint, endPoint, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    path.lineWidth = <span class=\"keyword\">self</span>.lineThickness;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.strokeColor setStroke];</div><div class=\"line\">    [path stroke];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *shadowPath = [<span class=\"keyword\">self</span> createCloudPathWithHeight:height / <span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"keyword\">self</span>.layer.shadowPath = shadowPath.CGPath;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.distance) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.distance = height * <span class=\"number\">1.8</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">self</span>.layer.shadowOffset = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">0</span>, <span class=\"keyword\">self</span>.distance);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span>.layer.shadowOpacity = <span class=\"number\">0.4</span>f;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span>.alpha = <span class=\"number\">0.9</span>f;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">UIBezierPath</span> *)createCloudPathWithHeight:(<span class=\"built_in\">CGFloat</span>)height</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> width = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> points[] = &#123;</div><div class=\"line\">        <span class=\"number\">0.4</span>,<span class=\"number\">0.2</span>,</div><div class=\"line\">        <span class=\"number\">0.5</span>,<span class=\"number\">0.1</span>,<span class=\"number\">0.6</span>,<span class=\"number\">0.2</span>,</div><div class=\"line\">        <span class=\"number\">0.8</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.8</span>,<span class=\"number\">0.4</span>,</div><div class=\"line\">        <span class=\"number\">0.9</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.8</span>,<span class=\"number\">0.6</span>,</div><div class=\"line\">        <span class=\"number\">0.8</span>,<span class=\"number\">0.8</span>,<span class=\"number\">0.6</span>,<span class=\"number\">0.8</span>,</div><div class=\"line\">        <span class=\"number\">0.5</span>,<span class=\"number\">0.9</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.8</span>,</div><div class=\"line\">        <span class=\"number\">0.2</span>,<span class=\"number\">0.8</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.6</span>,</div><div class=\"line\">        <span class=\"number\">0.1</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.4</span>,</div><div class=\"line\">        <span class=\"number\">0.2</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.2</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> cPoint;</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> point;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</div><div class=\"line\">    [path moveToPoint:<span class=\"built_in\">CGPointMake</span>(points[<span class=\"number\">0</span>] * width, points[<span class=\"number\">1</span>] * height)];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"keyword\">sizeof</span>(points) / <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">CGFloat</span>); i += <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        cPoint = <span class=\"built_in\">CGPointMake</span>(points[i] * width, points[i + <span class=\"number\">1</span>] * height);</div><div class=\"line\">        point  = <span class=\"built_in\">CGPointMake</span>(points[i + <span class=\"number\">2</span>] * width, points[i + <span class=\"number\">3</span>] * height);</div><div class=\"line\">        [path addQuadCurveToPoint:point controlPoint:cPoint];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [path closePath];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> path;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实现的效果图如下</p>\n<p><img src=\"/2017/05/19/CoreGraphicsAndAnimations-2/4.gif\" alt=\"\"></p>\n<h3 id=\"海鸥\"><a href=\"#海鸥\" class=\"headerlink\" title=\"海鸥\"></a>海鸥</h3><p>进行到现在，跟成品图中相差的也就剩下最后一步了，那就是海鸥的绘制，海鸥这里同样还是采用Bezier曲线绘制，不同的是，我们要采用onscreen渲染的方式，绘制出多张海鸥的image，最后将image组合成一个数组，然后用UIImageView的images数组进行展示。</p>\n<p>以下是具体绘制代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)didMoveToSuperview</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.animationImages) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.animationImages = [<span class=\"keyword\">self</span> arrayofImages];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)arrayofImages</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *arr = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity:COUNT];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">CGFloat</span> i = LOWWING; i &lt; HEIGING; i+=STEP) &#123;</div><div class=\"line\">        [arr addObject:[<span class=\"keyword\">self</span> animationFrame:i]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">CGFloat</span> i = HEIGING; i &gt; LOWWING; i -= STEP) &#123;</div><div class=\"line\">        [arr addObject:[<span class=\"keyword\">self</span> animationFrame:i]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">UIImage</span> *)animationFrame:(<span class=\"built_in\">CGFloat</span>)frame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> width = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> height = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIGraphicsBeginImageContextWithOptions</span>(<span class=\"built_in\">CGSizeMake</span>(width, height), <span class=\"literal\">NO</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</div><div class=\"line\">    [path moveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, frame)];</div><div class=\"line\">    [path addQuadCurveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">0.6</span> - frame / <span class=\"number\">3</span>) controlPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.25</span>, <span class=\"number\">.25</span>)];</div><div class=\"line\">    [path addQuadCurveToPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">1</span>, frame) controlPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.75</span>, <span class=\"number\">.25</span>)];</div><div class=\"line\">    </div><div class=\"line\">    [path applyTransform:<span class=\"built_in\">CGAffineTransformMakeScale</span>(width, height)];</div><div class=\"line\">    path.lineWidth = height / <span class=\"number\">30</span>;</div><div class=\"line\">    [path stroke];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *imge = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIGraphicsEndImageContext</span>();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> imge;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果图</p>\n<p><img src=\"/2017/05/19/CoreGraphicsAndAnimations-2/5.gif\" alt=\"\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>通过学习绘制图形以及给layer做动画，基本掌握了一些常用的绘制函数和动画实现方法。发现CoreGraphics确实是一个强大的图形绘制库，只要你脑洞大开就能绘制你想到的任意图形，此外图层合并能够大大节省内存空间，如果是静态的多个图层的view。可以考虑做图层渲染，渲染成图片。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>最后附上本项目在git上的demo，感兴趣的朋友可以<a href=\"https://github.com/TripleFireMan/GardenDemo.git\">下载</a>下来看看，欢迎star。</p>"},{"title":"CoreGraphicsAndAnimation(1)","date":"2017-05-12T03:47:58.000Z","_content":"\n# 绘图\n\n## 成品展示\n\n![core](CoreGraphicsAndAnimation/6.gif)\n\n<!--more-->\n\n## UIBezierPath\n\n说到绘图，那么有一个不得不讲的对象，那就是UIBezierPath。先来看几个UIBezierPath里面比较重要的API。我都已经做了注释，功能还是比较强大的。\n\n```objc\n+ (instancetype)bezierPath;//创建贝塞尔曲线\n+ (instancetype)bezierPathWithRect:(CGRect)rect;//获取矩形的贝塞尔曲线\n+ (instancetype)bezierPathWithOvalInRect:(CGRect)rect;//获取矩形框内椭圆的贝塞尔曲线\n+ (instancetype)bezierPathWithRoundedRect:(CGRect)rect cornerRadius:(CGFloat)cornerRadius; //圆角贝塞尔曲线\n+ (instancetype)bezierPathWithRoundedRect:(CGRect)rect byRoundingCorners:(UIRectCorner)corners cornerRadii:(CGSize)cornerRadii;//矩形框内，指定圆角、半径的贝塞尔曲线\n+ (instancetype)bezierPathWithArcCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise;//指定圆心、半径、起始角度、时钟方向的贝塞尔曲线\n+ (instancetype)bezierPathWithCGPath:(CGPathRef)CGPath;//根据CGPath创建贝塞尔曲线\n\n- (instancetype)init NS_DESIGNATED_INITIALIZER;\n\n- (void)moveToPoint:(CGPoint)point;//移动到某个点\n- (void)addLineToPoint:(CGPoint)point;//从当前点，添加线段到目标点\n- (void)addCurveToPoint:(CGPoint)endPoint controlPoint1:(CGPoint)controlPoint1 controlPoint2:(CGPoint)controlPoint2;//贝塞尔三次方程，从当前点，到目标点，受控制点1、控制点2控制\n- (void)addQuadCurveToPoint:(CGPoint)endPoint controlPoint:(CGPoint)controlPoint;//贝塞尔二次方程，从当前点到目标点，受控制点1控制\n- (void)addArcWithCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise NS_AVAILABLE_IOS(4_0);//添加椭圆路径，参数包括圆心，半径、开始角度，结束角度，时钟方向\n- (void)closePath;//关闭路径，当前大多是子路径，收到该消息之后，都会将首位点连接起来。\n- (void)fill;//填充封闭路径，根据当前context设置的颜色等参数\n- (void)stroke;//划线，根据当前context设置的线宽啊，颜色啊等参数\n- (void)addClip;//切边，调用该方法之后，只有封闭路径内可以继续操作，封闭路径外无法操作。\n\n@end\n```\n\n## 梯度\n\n梯度的实现在ios里面有俩种方式，一种是通过CAGradientLayer去绘制，一种是通过CGGradientRef使用DrawRect:方法去绘制，我这里采用的是第二种方式。\n\n实现方式，首先创建了一个CYShapeView的基类，该类可以设置一些属性值，如外边界色，里边界色，划线色，线宽等。方便子类继承它。通过设置的这些属性，可以获取到需要的梯度Ref指针。\n\n下面是具体的代码\n\n```objc\n@interface CYShapedView : UIView\n\n@property (nonatomic, strong) UIColor *innerColor;\n@property (nonatomic, strong) UIColor *outerColor;\n@property (nonatomic, strong) UIColor *strokeColor;\n@property (nonatomic, assign) CGFloat lineThickness;\n\n- (CGGradientRef)gradientWithColor:(UIColor *)c1\n                           toColor:(UIColor *)c2\n                             count:(CGFloat)colorNumb;\n@end\n \n@implementation CYShapedView\n\n- (id)initWithFrame:(CGRect)frame\n{\n    self = [super initWithFrame:frame];\n    if (self) {\n        self.innerColor = [UIColor redColor];\n        self.outerColor = [UIColor yellowColor];\n        self.strokeColor = [UIColor blackColor];\n        self.lineThickness = 3.f;\n        self.backgroundColor = [UIColor clearColor];\n    }\n    return self;\n}\n\n- (void)setLineThickness:(CGFloat)lineThickness\n{\n    CGFloat totalWidth = self.bounds.size.width;\n    CGFloat totalHeight = self.bounds.size.height;\n    CGFloat halfWidth = totalWidth / 2.f;\n    CGFloat halfHeight = totalHeight / 2.f;\n    CGFloat smallest = MIN(halfWidth, halfHeight);\n    CGFloat factor = smallest / 100.f;\n    factor = (factor > 1) ? 1 : factor;\n    _lineThickness = factor * lineThickness;\n}\n\n- (CGGradientRef)gradientWithColor:(UIColor *)c1 toColor:(UIColor *)c2 count:(CGFloat)colorNumb\n{\n    // 获取颜色组成\n    const CGFloat *colorComponents1 = CGColorGetComponents(c1.CGColor);\n    CGFloat r1 = colorComponents1[0];\n    CGFloat g1 = colorComponents1[1];\n    CGFloat b1 = colorComponents1[2];\n    \n    const CGFloat *colorComponents2 = CGColorGetComponents(c2.CGColor);\n    CGFloat r2 = colorComponents2[0];\n    CGFloat g2 = colorComponents2[1];\n    CGFloat b2 = colorComponents2[2];\n    \n    CGFloat gradientColorComponents[] = {\n        r1,g1,b1,1,\n        r2,g2,b2,1,\n        r1,g1,b1,1,\n    };\n    \n    // 使用RGB色生成颜色空间\n    CGColorSpaceRef rgb = CGColorSpaceCreateDeviceRGB();\n    // 根据RGB色和梯度色数组，以及梯度色个数，创建梯度引用\n    CGGradientRef    gradientRef =  CGGradientCreateWithColorComponents(rgb, gradientColorComponents, NULL, colorNumb);\n    CGColorSpaceRelease(rgb);\n    \n    return gradientRef;\n}\n@end\n```\n\n## 使用梯度及UIBezierPath绘制一个叶子\n\n实现思路，创建一个继承自CYShapedView的子类，并将它命名为CYPetal。我们主要做的工作是在该类的DrawRect:方法里面\n\n绘制一个叶子，首先要绘制的点有起点和终点，中间需要用曲线连接起来。那么接下来的工作就是找到这些点。\n\n```objc\n1. 起点（startPoint）：CGPointMake(self.view.bounds.size.width / 2, 3)\n2. 终点（endPoint）：CGPointMake(self.view.bounds.size.width/ 2,self.view.bounds.size.height);\n3. 左叶子控制点（leftCtl）：CGPointMake(-self.view.bounds.size.width / 2,self.view.bounds.size.height/ 3)\n4. 右叶子控制点（rightCtl）：CGPointMake(self.view.bounds.size.width *1.5,self.view.bounds.size.height/ 3)\n5. 中间控制点（midPoint）：CGPointMake(self.view.bounds.size.width / 2,self.view.bounds.size.height * 0.8)\n6. 边界点（corner）：该点用来设置梯度的终点CGPointMake(self.view.bounds.size.width, 0)\n```\n\n下面来形象的展示下这些点的位置\n\n```objc\n/*---------------------------------------------------------------------------*/\n//              -----------------------------------------\n//              |                . -> start poin       .|corner\n//   . left ctl |                                       |           . right ctl\n//              |                                       |\n//              |                                       |\n//              |                                       |\n//              |                                       |\n//              |              mid point                |\n//              |                .                      |\n//              |                                       |\n//              |                . -> end pint          |\n//              -----------------------------------------\n/*----------------------------------------------------------------------------*/\n```\n\n以下是具体的实现代码，其实找到点之后，再用代码实现就很容易了。\n\n```objc\n- (void)drawRect:(CGRect)rect {    \n    CGFloat fullWidth = self.bounds.size.width;\n    CGFloat fullHeight = self.bounds.size.height;\n    CGFloat halfWidth = fullWidth / 2.f;\n    CGFloat halfHeight = fullHeight / 2.f;\n    CGPoint startPoint = CGPointMake(halfWidth, 3.f);\n    CGPoint midPoint = CGPointMake(halfWidth, halfHeight * 1.6f);\n    CGPoint endPoint = CGPointMake(halfWidth, fullHeight);\n    CGPoint leftCtl = CGPointMake(-halfWidth, halfHeight / 3.f);\n    CGPoint rightCtl = CGPointMake(fullWidth * 1.5f, halfHeight / 3.f);\n    CGPoint corner = CGPointMake(fullWidth, 0);\n    \n    UIBezierPath *path = [UIBezierPath bezierPath];\n    \n    [path moveToPoint:startPoint];\n    [path addCurveToPoint:endPoint controlPoint1:leftCtl controlPoint2:midPoint];\n    [path addCurveToPoint:startPoint controlPoint1:midPoint controlPoint2:rightCtl];\n    [path addClip];\n    \n    CGGradientRef gradient = [self gradientWithColor:self.innerColor toColor:self.outerColor count:3];\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGContextDrawLinearGradient(context, gradient, CGPointZero, corner, 0);\n    path.lineWidth = self.lineThickness;\n    [self.strokeColor setStroke];\n    [path stroke];\n}\n```\n\n贴个图感受下最后绘制出来的叶子\n\n![](CoreGraphicsAndAnimation/1.png)\n\n## 绘制笑脸\n\n实现思路，同绘制叶子一样，我们先搞清楚需要的绘制参数。首先我们要绘制一个圆，用来显示脸。其次需要绘制一条曲线，用来显示嘴巴。最后还要绘制俩个椭圆用来显示眼睛。那么总结起来就是。\n\n1. 绘制圆，并做圆心向外发散的梯度处理\n2. 绘制曲线，俩个嘴角受中心点控制的贝塞尔曲线。\n3. 绘制椭圆，找到合适的位置调用贝塞尔的矩形框绘制椭圆路径即可。\n\n实现的代码也比较简单，如下\n\n```objc\n- (void)drawRect:(CGRect)rect {\n    \n    // 基础点\n    CGFloat fullWidth = self.bounds.size.width;\n    CGFloat fullHeight = self.bounds.size.height;\n    CGFloat halfWidth = fullWidth / 2.f;\n    CGFloat halfHeight = fullHeight / 2.f;\n    CGFloat radius = MIN(halfWidth, halfHeight);\n    CGPoint center = CGPointMake(halfWidth, halfHeight);\n    \n    // bezierPath 切圆\n    UIBezierPath *bezier = [UIBezierPath bezierPath];\n    [bezier addArcWithCenter:center radius:radius startAngle:0 endAngle:M_PI * 2 clockwise:YES];\n    [bezier addClip];\n    \n    // 填充梯度，从中心发散\n    CGGradientRef gradient = [self gradientWithColor:self.innerColor toColor:self.outerColor count:2];\n    CGContextRef graphics = UIGraphicsGetCurrentContext();\n    CGContextDrawRadialGradient(graphics, gradient, center, 0, center, radius, 0);\n    \n    // 划线\n    bezier.lineWidth = self.lineThickness * 1.7;\n    [self.strokeColor setStroke];\n    [bezier stroke];\n    \n    // 准备画嘴巴\n    [bezier removeAllPoints];\n    bezier.lineWidth = self.lineThickness;\n    [bezier moveToPoint:CGPointMake(halfWidth * 0.5, halfHeight * 1.3)];\n    [bezier addQuadCurveToPoint:CGPointMake(halfWidth * 1.5, halfHeight * 1.3)\n                   controlPoint:CGPointMake(halfWidth, fullHeight * 0.91)];\n    [bezier stroke];\n    \n    // 准备画左眼\n    bezier = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(fullWidth / 3 - halfWidth * .1,\n                                                               fullHeight  / 3.f,\n                                                               halfWidth * .2,\n                                                               halfHeight * .3)];\n    bezier.lineWidth = self.lineThickness;\n    [bezier fill];\n    [bezier stroke];\n    \n    // 画右眼\n    bezier = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(fullWidth / 3 * 2 - halfWidth * .1,\n                                                               fullHeight / 3.f,\n                                                               halfWidth * .2,\n                                                               halfHeight * .3)];\n    bezier.lineWidth = self.lineThickness;\n    [bezier fill];\n    [bezier stroke];\n}\n```\n\n按照惯例，贴下实现的效果图\n\n![](CoreGraphicsAndAnimation/2.png)\n\n## 动起来\n\n现在我们希望能用之前绘制的俩个图形，集合动画，做出一个类似太阳的动画特效。\n\n还是谈谈实现的思路：先用之前的CYSmile绘制一个太阳，之后采用CYPetal绘制一组阳光，阳光的绘制有技巧，需要绘制相同frame的光芒视图15个，之后采用transform的方式，设置位置偏移。此外由于要实现动画效果，需要对光芒的锚点位置进行设置。以下是一个view设置的时候，太阳和光芒的位置设置。\n\n```objc\n ----------------------------------------------------------------------\n |                                                                     |\n |                                                                     |\n |                                                                     |\n |                -------------------------------                      |\n |                |         -------             |                      |\n |                |         |     |             |                      |\n |                |         |  光 |             |                      |\n |                |         |  芒 |             |                      |\n |                |         |  区 |             |                      |\n |                |         |     |             |                      |\n |                |         |     |             |                      |\n |                |         -------             |                      |\n |                |                             |                      |\n |                |         太阳区              |                      |\n |                |                             |                      |\n |                -------------------------------                      |\n |                                                                     |\n |                                                                     |\n |                                                                     |\n |                                                                     |\n ------------------------------------------------------------------------\n```\n\n具体的话还是看下代码吧。\n\n```objc\n- (void)createSunshine\n{\n    // 设置大小\n    \n    CGFloat fullWidth = self.bounds.size.width;\n    CGFloat fullHeight = self.bounds.size.height;\n    CGFloat halfWidth = fullWidth / 2.f;\n    CGFloat halfHeigt = fullHeight / 2.f;\n    \n    // 设置太阳和光芒的位置\n    CGRect sunRect = CGRectMake(halfWidth - fullWidth / 4, halfHeigt - fullHeight / 4, halfWidth, halfHeigt);\n    CGRect sunshineRect = CGRectMake(halfWidth - fullWidth / 40, halfHeigt - fullHeight / 8, fullWidth / 20, fullHeight / 4);\n    \n    // 创建光芒所在的view，并将本类的shineLayer指向它的layer，方便后面添加动画\n    UIView *shineView = [[UIView alloc]initWithFrame:self.bounds];\n    self.shineLayer = shineView.layer;\n    [self addSubview:shineView];\n    \n    // 将光芒都添加到光芒view上，并进行相应的transform转换和锚点设置\n    for (CGFloat i = M_PI / 10; i < M_PI * 2; i += M_PI / 7.5) {\n        CYPetal *petal = [[CYPetal alloc]initWithFrame:sunshineRect];\n        petal.innerColor = [UIColor yellowColor];\n        petal.outerColor = [UIColor colorWithRed:1 green:0.8 blue:.2 alpha:1];\n        petal.lineThickness = 40.f;\n        petal.strokeColor = [UIColor whiteColor];\n        [shineView addSubview:petal];\n        \n        petal.layer.anchorPoint = CGPointMake(.5, 2);\n        petal.transform = CGAffineTransformMakeRotation(i);\n    }\n    \n    // 添加动画，让光芒动起来\n    [self addRotationAnimation];\n    \n    // 添加太阳\n    CYSmile *smile = [[CYSmile alloc]initWithFrame:sunRect];\n    smile.innerColor = [UIColor yellowColor];\n    smile.outerColor = [UIColor colorWithRed:1 green:.8 blue:.2 alpha:1];\n    [self addSubview:smile];\n    \n}\n\n\n\n- (void)addRotationAnimation\n{\n    CABasicAnimation *basicAnimation = [CABasicAnimation animationWithKeyPath:@\"transform.rotation\"];\n    \n    // 设置旋转动画\n    basicAnimation.duration = 10;\n    basicAnimation.fromValue = @0;\n    basicAnimation.speed = self.speed;\n    basicAnimation.toValue = @(M_PI * 2);\n    basicAnimation.repeatCount = CGFLOAT_MAX;\n    [self.shineLayer addAnimation:basicAnimation forKey:@\"rotation\"];\n    \n    // 设置透明度动画\n    basicAnimation.keyPath = @\"opacity\";\n    basicAnimation.duration = .5f;\n    basicAnimation.autoreverses = YES;\n    basicAnimation.fromValue = @0.7;\n    basicAnimation.toValue = @1.0;\n    [self.shineLayer addAnimation:basicAnimation forKey:@\"fade\"];\n    \n    // 设置大小动画\n    basicAnimation.keyPath = @\"transform.scale\";\n    basicAnimation.fromValue = @0.9;\n    basicAnimation.toValue = @1.1;\n    [self.shineLayer addAnimation:basicAnimation forKey:@\"scale\"];\n    \n}\n```\n\n最后的效果图如下\n\n![img](CoreGraphicsAndAnimation/7.gif)\n\n## 组合绘制花朵\n\n花朵包括的元素主要有笑脸、花瓣、茎、叶子。这些元素（除了茎）都可以使用之前的组件来绘制出来。\n\n### 茎\n\n坐标路径大概如下,并不一定是这样，手工绘制敬请谅解\n\n```objc\n/*\n ------------------------------------------------------------------------\n |                                   . start point               corner .|\n |                                  .  .                                 |\n |                                 .  .                                  |\n |                                .  .                                   |\n |                               .   .                                   |\n |                               .   .                                   |\n |                               .  .                                    |\n |                               .   .                                   |\n |. left ctrl                    .   ..mid point                         |\n |                                .   .                                  |\n |                                .   .                                  |\n |                                 .  .                                  |\n |                                 .  .                                  |\n |                                  .  .                                 |\n |                                  .  .                                 |\n |                                   .  .                                |\n |                                    . .                                |\n |                                   . end point            right ctrl . |\n ------------------------------------------------------------------------\n */\n```\n\n\n\n茎的绘制和之前花瓣的绘制差不多，都是要选择一个起点和一个终点，然后绘制根据俩个锚点，绘制出相应的图形，具体绘制就不细说了，还是附上代码感受下吧\n\n```objc\n- (void)drawRect:(CGRect)rect\n{\n    CGFloat fullWidth = self.bounds.size.width;\n    CGFloat fullHeight = self.bounds.size.height;\n    CGFloat halfWidth = fullWidth / 2;\n    CGFloat halfHeight = fullHeight / 2;\n    \n    CGPoint startPoint = CGPointMake(halfWidth * .9, 0);\n    CGPoint midPoint = CGPointMake(halfWidth, halfHeight);\n    CGPoint endPoint = CGPointMake(halfWidth * .9, fullHeight);\n    CGPoint corner = CGPointMake(fullWidth, 0);\n    CGPoint leftCtl = CGPointMake(0, halfHeight);\n    CGPoint rightCtl = CGPointMake(fullWidth, fullHeight);\n    \n    UIBezierPath *path = [UIBezierPath bezierPath];\n    [path moveToPoint:startPoint];\n    [path addCurveToPoint:endPoint controlPoint1:leftCtl controlPoint2:rightCtl];\n    [path addCurveToPoint:startPoint controlPoint1:rightCtl controlPoint2:midPoint];\n    [path closePath];\n    [path addClip];\n    \n    CGContextRef ref = UIGraphicsGetCurrentContext();\n    CGGradientRef gradient = [self gradientWithColor:self.innerColor toColor:self.outerColor count:3];\n    CGContextDrawLinearGradient(ref, gradient, CGPointZero, corner, 0);\n    path.lineWidth = self.lineThickness;\n    \n    [self.strokeColor setStroke];\n    [path stroke];\n    \n    \n}\n```\n\n### 组合花朵\n\n组合花朵，主要就是在于计算笑脸、茎、花瓣、叶子等的坐标位置。然后还有就是设置它们的颜色。此外要注意设置花朵的frame的时候，要保持宽高比为7 : 10，这样才能生成比较好的效果。\n\n下面附上花朵的位置设置代码：\n\n```objc\n- (id)initWithFrame:(CGRect)frame\n{\n    self = [super initWithFrame:frame];\n    if (self) {\n        [self p_createFlower];\n    }\n    return self;\n}\n\n- (void)p_createFlower\n{\n    // 贴图的时候注意要由下而上，由内而外的贴。\n    CGFloat fullwidth = self.bounds.size.width;\n    CGFloat fullHeight = self.bounds.size.height;\n    CGFloat halfWidth = self.bounds.size.width/2.f;\n    CGFloat halfHeight = self.bounds.size.height/2.f;\n    \n    // 位置的计算是最麻烦\n    CGRect smileRect = CGRectMake(halfWidth/2, halfHeight/4*.9,\n                                  halfWidth, halfHeight);\n    CGRect petalRect = CGRectMake(halfWidth-fullwidth/10, fullHeight/5,\n                                  fullwidth/5, fullwidth/2);\n    CGRect leafRect = CGRectMake(halfWidth-fullwidth/12, fullHeight*.84,\n                                 fullwidth/5, fullwidth/2);\n    CGRect stemRect = CGRectMake(halfWidth-fullwidth/8, halfHeight*1.3,\n                                 fullwidth/4, halfHeight*.8);\n    // 贴茎\n    CYStem *stem = [[CYStem alloc]initWithFrame:stemRect];\n    stem.outerColor = [UIColor colorWithRed:0 green:0.5 blue:0 alpha:1];\n    stem.innerColor = [UIColor colorWithRed:.3 green:1 blue:.2 alpha:1];\n    [self addSubview:stem];\n    \n    // 贴花瓣\n    for (CGFloat i = M_PI / 10; i < M_PI * 2; i += M_PI / 7.5) {\n        CYPetal *petal = [[CYPetal alloc]initWithFrame:petalRect];\n        petal.outerColor = [UIColor  purpleColor];\n        petal.innerColor = [UIColor colorWithRed:1 green:0 blue:1 alpha:1];\n        [self addSubview:petal];\n        petal.layer.anchorPoint = CGPointMake(.5, 1);\n        petal.transform = CGAffineTransformMakeRotation(i);\n    }\n    \n    // 贴叶子\n    for (CGFloat i = -M_PI/5; i <= M_PI/5; i += M_PI * 2/5) {\n        CYPetal *leaf = [[CYPetal alloc]initWithFrame:leafRect];\n        leaf.outerColor = [UIColor colorWithRed:0 green:.5 blue:0 alpha:1 ];\n        leaf.innerColor = [UIColor colorWithRed:.3 green:1 blue:.2 alpha:1];\n        [self addSubview:leaf];\n        leaf.layer.anchorPoint = CGPointMake(.5, 1);\n        leaf.transform = CGAffineTransformMakeRotation(i);\n    }\n    \n    // 贴笑脸\n    CYSmile *smile = [[CYSmile alloc]initWithFrame:smileRect];\n    smile.innerColor = [UIColor yellowColor];\n    smile.outerColor = [UIColor colorWithRed:1 green:.4 blue:0 alpha:1];\n    [self addSubview:smile];\n    \n}\n```\n\n![](CoreGraphicsAndAnimation/8.png)\n\n\n\n\n\n# 参考资料\n\n","source":"_posts/CoreGraphicsAndAnimation.md","raw":"---\ntitle: CoreGraphicsAndAnimation(1)\ndate: 2017-05-012 11:47:58\ntags:\n---\n\n# 绘图\n\n## 成品展示\n\n![core](CoreGraphicsAndAnimation/6.gif)\n\n<!--more-->\n\n## UIBezierPath\n\n说到绘图，那么有一个不得不讲的对象，那就是UIBezierPath。先来看几个UIBezierPath里面比较重要的API。我都已经做了注释，功能还是比较强大的。\n\n```objc\n+ (instancetype)bezierPath;//创建贝塞尔曲线\n+ (instancetype)bezierPathWithRect:(CGRect)rect;//获取矩形的贝塞尔曲线\n+ (instancetype)bezierPathWithOvalInRect:(CGRect)rect;//获取矩形框内椭圆的贝塞尔曲线\n+ (instancetype)bezierPathWithRoundedRect:(CGRect)rect cornerRadius:(CGFloat)cornerRadius; //圆角贝塞尔曲线\n+ (instancetype)bezierPathWithRoundedRect:(CGRect)rect byRoundingCorners:(UIRectCorner)corners cornerRadii:(CGSize)cornerRadii;//矩形框内，指定圆角、半径的贝塞尔曲线\n+ (instancetype)bezierPathWithArcCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise;//指定圆心、半径、起始角度、时钟方向的贝塞尔曲线\n+ (instancetype)bezierPathWithCGPath:(CGPathRef)CGPath;//根据CGPath创建贝塞尔曲线\n\n- (instancetype)init NS_DESIGNATED_INITIALIZER;\n\n- (void)moveToPoint:(CGPoint)point;//移动到某个点\n- (void)addLineToPoint:(CGPoint)point;//从当前点，添加线段到目标点\n- (void)addCurveToPoint:(CGPoint)endPoint controlPoint1:(CGPoint)controlPoint1 controlPoint2:(CGPoint)controlPoint2;//贝塞尔三次方程，从当前点，到目标点，受控制点1、控制点2控制\n- (void)addQuadCurveToPoint:(CGPoint)endPoint controlPoint:(CGPoint)controlPoint;//贝塞尔二次方程，从当前点到目标点，受控制点1控制\n- (void)addArcWithCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise NS_AVAILABLE_IOS(4_0);//添加椭圆路径，参数包括圆心，半径、开始角度，结束角度，时钟方向\n- (void)closePath;//关闭路径，当前大多是子路径，收到该消息之后，都会将首位点连接起来。\n- (void)fill;//填充封闭路径，根据当前context设置的颜色等参数\n- (void)stroke;//划线，根据当前context设置的线宽啊，颜色啊等参数\n- (void)addClip;//切边，调用该方法之后，只有封闭路径内可以继续操作，封闭路径外无法操作。\n\n@end\n```\n\n## 梯度\n\n梯度的实现在ios里面有俩种方式，一种是通过CAGradientLayer去绘制，一种是通过CGGradientRef使用DrawRect:方法去绘制，我这里采用的是第二种方式。\n\n实现方式，首先创建了一个CYShapeView的基类，该类可以设置一些属性值，如外边界色，里边界色，划线色，线宽等。方便子类继承它。通过设置的这些属性，可以获取到需要的梯度Ref指针。\n\n下面是具体的代码\n\n```objc\n@interface CYShapedView : UIView\n\n@property (nonatomic, strong) UIColor *innerColor;\n@property (nonatomic, strong) UIColor *outerColor;\n@property (nonatomic, strong) UIColor *strokeColor;\n@property (nonatomic, assign) CGFloat lineThickness;\n\n- (CGGradientRef)gradientWithColor:(UIColor *)c1\n                           toColor:(UIColor *)c2\n                             count:(CGFloat)colorNumb;\n@end\n \n@implementation CYShapedView\n\n- (id)initWithFrame:(CGRect)frame\n{\n    self = [super initWithFrame:frame];\n    if (self) {\n        self.innerColor = [UIColor redColor];\n        self.outerColor = [UIColor yellowColor];\n        self.strokeColor = [UIColor blackColor];\n        self.lineThickness = 3.f;\n        self.backgroundColor = [UIColor clearColor];\n    }\n    return self;\n}\n\n- (void)setLineThickness:(CGFloat)lineThickness\n{\n    CGFloat totalWidth = self.bounds.size.width;\n    CGFloat totalHeight = self.bounds.size.height;\n    CGFloat halfWidth = totalWidth / 2.f;\n    CGFloat halfHeight = totalHeight / 2.f;\n    CGFloat smallest = MIN(halfWidth, halfHeight);\n    CGFloat factor = smallest / 100.f;\n    factor = (factor > 1) ? 1 : factor;\n    _lineThickness = factor * lineThickness;\n}\n\n- (CGGradientRef)gradientWithColor:(UIColor *)c1 toColor:(UIColor *)c2 count:(CGFloat)colorNumb\n{\n    // 获取颜色组成\n    const CGFloat *colorComponents1 = CGColorGetComponents(c1.CGColor);\n    CGFloat r1 = colorComponents1[0];\n    CGFloat g1 = colorComponents1[1];\n    CGFloat b1 = colorComponents1[2];\n    \n    const CGFloat *colorComponents2 = CGColorGetComponents(c2.CGColor);\n    CGFloat r2 = colorComponents2[0];\n    CGFloat g2 = colorComponents2[1];\n    CGFloat b2 = colorComponents2[2];\n    \n    CGFloat gradientColorComponents[] = {\n        r1,g1,b1,1,\n        r2,g2,b2,1,\n        r1,g1,b1,1,\n    };\n    \n    // 使用RGB色生成颜色空间\n    CGColorSpaceRef rgb = CGColorSpaceCreateDeviceRGB();\n    // 根据RGB色和梯度色数组，以及梯度色个数，创建梯度引用\n    CGGradientRef    gradientRef =  CGGradientCreateWithColorComponents(rgb, gradientColorComponents, NULL, colorNumb);\n    CGColorSpaceRelease(rgb);\n    \n    return gradientRef;\n}\n@end\n```\n\n## 使用梯度及UIBezierPath绘制一个叶子\n\n实现思路，创建一个继承自CYShapedView的子类，并将它命名为CYPetal。我们主要做的工作是在该类的DrawRect:方法里面\n\n绘制一个叶子，首先要绘制的点有起点和终点，中间需要用曲线连接起来。那么接下来的工作就是找到这些点。\n\n```objc\n1. 起点（startPoint）：CGPointMake(self.view.bounds.size.width / 2, 3)\n2. 终点（endPoint）：CGPointMake(self.view.bounds.size.width/ 2,self.view.bounds.size.height);\n3. 左叶子控制点（leftCtl）：CGPointMake(-self.view.bounds.size.width / 2,self.view.bounds.size.height/ 3)\n4. 右叶子控制点（rightCtl）：CGPointMake(self.view.bounds.size.width *1.5,self.view.bounds.size.height/ 3)\n5. 中间控制点（midPoint）：CGPointMake(self.view.bounds.size.width / 2,self.view.bounds.size.height * 0.8)\n6. 边界点（corner）：该点用来设置梯度的终点CGPointMake(self.view.bounds.size.width, 0)\n```\n\n下面来形象的展示下这些点的位置\n\n```objc\n/*---------------------------------------------------------------------------*/\n//              -----------------------------------------\n//              |                . -> start poin       .|corner\n//   . left ctl |                                       |           . right ctl\n//              |                                       |\n//              |                                       |\n//              |                                       |\n//              |                                       |\n//              |              mid point                |\n//              |                .                      |\n//              |                                       |\n//              |                . -> end pint          |\n//              -----------------------------------------\n/*----------------------------------------------------------------------------*/\n```\n\n以下是具体的实现代码，其实找到点之后，再用代码实现就很容易了。\n\n```objc\n- (void)drawRect:(CGRect)rect {    \n    CGFloat fullWidth = self.bounds.size.width;\n    CGFloat fullHeight = self.bounds.size.height;\n    CGFloat halfWidth = fullWidth / 2.f;\n    CGFloat halfHeight = fullHeight / 2.f;\n    CGPoint startPoint = CGPointMake(halfWidth, 3.f);\n    CGPoint midPoint = CGPointMake(halfWidth, halfHeight * 1.6f);\n    CGPoint endPoint = CGPointMake(halfWidth, fullHeight);\n    CGPoint leftCtl = CGPointMake(-halfWidth, halfHeight / 3.f);\n    CGPoint rightCtl = CGPointMake(fullWidth * 1.5f, halfHeight / 3.f);\n    CGPoint corner = CGPointMake(fullWidth, 0);\n    \n    UIBezierPath *path = [UIBezierPath bezierPath];\n    \n    [path moveToPoint:startPoint];\n    [path addCurveToPoint:endPoint controlPoint1:leftCtl controlPoint2:midPoint];\n    [path addCurveToPoint:startPoint controlPoint1:midPoint controlPoint2:rightCtl];\n    [path addClip];\n    \n    CGGradientRef gradient = [self gradientWithColor:self.innerColor toColor:self.outerColor count:3];\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGContextDrawLinearGradient(context, gradient, CGPointZero, corner, 0);\n    path.lineWidth = self.lineThickness;\n    [self.strokeColor setStroke];\n    [path stroke];\n}\n```\n\n贴个图感受下最后绘制出来的叶子\n\n![](CoreGraphicsAndAnimation/1.png)\n\n## 绘制笑脸\n\n实现思路，同绘制叶子一样，我们先搞清楚需要的绘制参数。首先我们要绘制一个圆，用来显示脸。其次需要绘制一条曲线，用来显示嘴巴。最后还要绘制俩个椭圆用来显示眼睛。那么总结起来就是。\n\n1. 绘制圆，并做圆心向外发散的梯度处理\n2. 绘制曲线，俩个嘴角受中心点控制的贝塞尔曲线。\n3. 绘制椭圆，找到合适的位置调用贝塞尔的矩形框绘制椭圆路径即可。\n\n实现的代码也比较简单，如下\n\n```objc\n- (void)drawRect:(CGRect)rect {\n    \n    // 基础点\n    CGFloat fullWidth = self.bounds.size.width;\n    CGFloat fullHeight = self.bounds.size.height;\n    CGFloat halfWidth = fullWidth / 2.f;\n    CGFloat halfHeight = fullHeight / 2.f;\n    CGFloat radius = MIN(halfWidth, halfHeight);\n    CGPoint center = CGPointMake(halfWidth, halfHeight);\n    \n    // bezierPath 切圆\n    UIBezierPath *bezier = [UIBezierPath bezierPath];\n    [bezier addArcWithCenter:center radius:radius startAngle:0 endAngle:M_PI * 2 clockwise:YES];\n    [bezier addClip];\n    \n    // 填充梯度，从中心发散\n    CGGradientRef gradient = [self gradientWithColor:self.innerColor toColor:self.outerColor count:2];\n    CGContextRef graphics = UIGraphicsGetCurrentContext();\n    CGContextDrawRadialGradient(graphics, gradient, center, 0, center, radius, 0);\n    \n    // 划线\n    bezier.lineWidth = self.lineThickness * 1.7;\n    [self.strokeColor setStroke];\n    [bezier stroke];\n    \n    // 准备画嘴巴\n    [bezier removeAllPoints];\n    bezier.lineWidth = self.lineThickness;\n    [bezier moveToPoint:CGPointMake(halfWidth * 0.5, halfHeight * 1.3)];\n    [bezier addQuadCurveToPoint:CGPointMake(halfWidth * 1.5, halfHeight * 1.3)\n                   controlPoint:CGPointMake(halfWidth, fullHeight * 0.91)];\n    [bezier stroke];\n    \n    // 准备画左眼\n    bezier = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(fullWidth / 3 - halfWidth * .1,\n                                                               fullHeight  / 3.f,\n                                                               halfWidth * .2,\n                                                               halfHeight * .3)];\n    bezier.lineWidth = self.lineThickness;\n    [bezier fill];\n    [bezier stroke];\n    \n    // 画右眼\n    bezier = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(fullWidth / 3 * 2 - halfWidth * .1,\n                                                               fullHeight / 3.f,\n                                                               halfWidth * .2,\n                                                               halfHeight * .3)];\n    bezier.lineWidth = self.lineThickness;\n    [bezier fill];\n    [bezier stroke];\n}\n```\n\n按照惯例，贴下实现的效果图\n\n![](CoreGraphicsAndAnimation/2.png)\n\n## 动起来\n\n现在我们希望能用之前绘制的俩个图形，集合动画，做出一个类似太阳的动画特效。\n\n还是谈谈实现的思路：先用之前的CYSmile绘制一个太阳，之后采用CYPetal绘制一组阳光，阳光的绘制有技巧，需要绘制相同frame的光芒视图15个，之后采用transform的方式，设置位置偏移。此外由于要实现动画效果，需要对光芒的锚点位置进行设置。以下是一个view设置的时候，太阳和光芒的位置设置。\n\n```objc\n ----------------------------------------------------------------------\n |                                                                     |\n |                                                                     |\n |                                                                     |\n |                -------------------------------                      |\n |                |         -------             |                      |\n |                |         |     |             |                      |\n |                |         |  光 |             |                      |\n |                |         |  芒 |             |                      |\n |                |         |  区 |             |                      |\n |                |         |     |             |                      |\n |                |         |     |             |                      |\n |                |         -------             |                      |\n |                |                             |                      |\n |                |         太阳区              |                      |\n |                |                             |                      |\n |                -------------------------------                      |\n |                                                                     |\n |                                                                     |\n |                                                                     |\n |                                                                     |\n ------------------------------------------------------------------------\n```\n\n具体的话还是看下代码吧。\n\n```objc\n- (void)createSunshine\n{\n    // 设置大小\n    \n    CGFloat fullWidth = self.bounds.size.width;\n    CGFloat fullHeight = self.bounds.size.height;\n    CGFloat halfWidth = fullWidth / 2.f;\n    CGFloat halfHeigt = fullHeight / 2.f;\n    \n    // 设置太阳和光芒的位置\n    CGRect sunRect = CGRectMake(halfWidth - fullWidth / 4, halfHeigt - fullHeight / 4, halfWidth, halfHeigt);\n    CGRect sunshineRect = CGRectMake(halfWidth - fullWidth / 40, halfHeigt - fullHeight / 8, fullWidth / 20, fullHeight / 4);\n    \n    // 创建光芒所在的view，并将本类的shineLayer指向它的layer，方便后面添加动画\n    UIView *shineView = [[UIView alloc]initWithFrame:self.bounds];\n    self.shineLayer = shineView.layer;\n    [self addSubview:shineView];\n    \n    // 将光芒都添加到光芒view上，并进行相应的transform转换和锚点设置\n    for (CGFloat i = M_PI / 10; i < M_PI * 2; i += M_PI / 7.5) {\n        CYPetal *petal = [[CYPetal alloc]initWithFrame:sunshineRect];\n        petal.innerColor = [UIColor yellowColor];\n        petal.outerColor = [UIColor colorWithRed:1 green:0.8 blue:.2 alpha:1];\n        petal.lineThickness = 40.f;\n        petal.strokeColor = [UIColor whiteColor];\n        [shineView addSubview:petal];\n        \n        petal.layer.anchorPoint = CGPointMake(.5, 2);\n        petal.transform = CGAffineTransformMakeRotation(i);\n    }\n    \n    // 添加动画，让光芒动起来\n    [self addRotationAnimation];\n    \n    // 添加太阳\n    CYSmile *smile = [[CYSmile alloc]initWithFrame:sunRect];\n    smile.innerColor = [UIColor yellowColor];\n    smile.outerColor = [UIColor colorWithRed:1 green:.8 blue:.2 alpha:1];\n    [self addSubview:smile];\n    \n}\n\n\n\n- (void)addRotationAnimation\n{\n    CABasicAnimation *basicAnimation = [CABasicAnimation animationWithKeyPath:@\"transform.rotation\"];\n    \n    // 设置旋转动画\n    basicAnimation.duration = 10;\n    basicAnimation.fromValue = @0;\n    basicAnimation.speed = self.speed;\n    basicAnimation.toValue = @(M_PI * 2);\n    basicAnimation.repeatCount = CGFLOAT_MAX;\n    [self.shineLayer addAnimation:basicAnimation forKey:@\"rotation\"];\n    \n    // 设置透明度动画\n    basicAnimation.keyPath = @\"opacity\";\n    basicAnimation.duration = .5f;\n    basicAnimation.autoreverses = YES;\n    basicAnimation.fromValue = @0.7;\n    basicAnimation.toValue = @1.0;\n    [self.shineLayer addAnimation:basicAnimation forKey:@\"fade\"];\n    \n    // 设置大小动画\n    basicAnimation.keyPath = @\"transform.scale\";\n    basicAnimation.fromValue = @0.9;\n    basicAnimation.toValue = @1.1;\n    [self.shineLayer addAnimation:basicAnimation forKey:@\"scale\"];\n    \n}\n```\n\n最后的效果图如下\n\n![img](CoreGraphicsAndAnimation/7.gif)\n\n## 组合绘制花朵\n\n花朵包括的元素主要有笑脸、花瓣、茎、叶子。这些元素（除了茎）都可以使用之前的组件来绘制出来。\n\n### 茎\n\n坐标路径大概如下,并不一定是这样，手工绘制敬请谅解\n\n```objc\n/*\n ------------------------------------------------------------------------\n |                                   . start point               corner .|\n |                                  .  .                                 |\n |                                 .  .                                  |\n |                                .  .                                   |\n |                               .   .                                   |\n |                               .   .                                   |\n |                               .  .                                    |\n |                               .   .                                   |\n |. left ctrl                    .   ..mid point                         |\n |                                .   .                                  |\n |                                .   .                                  |\n |                                 .  .                                  |\n |                                 .  .                                  |\n |                                  .  .                                 |\n |                                  .  .                                 |\n |                                   .  .                                |\n |                                    . .                                |\n |                                   . end point            right ctrl . |\n ------------------------------------------------------------------------\n */\n```\n\n\n\n茎的绘制和之前花瓣的绘制差不多，都是要选择一个起点和一个终点，然后绘制根据俩个锚点，绘制出相应的图形，具体绘制就不细说了，还是附上代码感受下吧\n\n```objc\n- (void)drawRect:(CGRect)rect\n{\n    CGFloat fullWidth = self.bounds.size.width;\n    CGFloat fullHeight = self.bounds.size.height;\n    CGFloat halfWidth = fullWidth / 2;\n    CGFloat halfHeight = fullHeight / 2;\n    \n    CGPoint startPoint = CGPointMake(halfWidth * .9, 0);\n    CGPoint midPoint = CGPointMake(halfWidth, halfHeight);\n    CGPoint endPoint = CGPointMake(halfWidth * .9, fullHeight);\n    CGPoint corner = CGPointMake(fullWidth, 0);\n    CGPoint leftCtl = CGPointMake(0, halfHeight);\n    CGPoint rightCtl = CGPointMake(fullWidth, fullHeight);\n    \n    UIBezierPath *path = [UIBezierPath bezierPath];\n    [path moveToPoint:startPoint];\n    [path addCurveToPoint:endPoint controlPoint1:leftCtl controlPoint2:rightCtl];\n    [path addCurveToPoint:startPoint controlPoint1:rightCtl controlPoint2:midPoint];\n    [path closePath];\n    [path addClip];\n    \n    CGContextRef ref = UIGraphicsGetCurrentContext();\n    CGGradientRef gradient = [self gradientWithColor:self.innerColor toColor:self.outerColor count:3];\n    CGContextDrawLinearGradient(ref, gradient, CGPointZero, corner, 0);\n    path.lineWidth = self.lineThickness;\n    \n    [self.strokeColor setStroke];\n    [path stroke];\n    \n    \n}\n```\n\n### 组合花朵\n\n组合花朵，主要就是在于计算笑脸、茎、花瓣、叶子等的坐标位置。然后还有就是设置它们的颜色。此外要注意设置花朵的frame的时候，要保持宽高比为7 : 10，这样才能生成比较好的效果。\n\n下面附上花朵的位置设置代码：\n\n```objc\n- (id)initWithFrame:(CGRect)frame\n{\n    self = [super initWithFrame:frame];\n    if (self) {\n        [self p_createFlower];\n    }\n    return self;\n}\n\n- (void)p_createFlower\n{\n    // 贴图的时候注意要由下而上，由内而外的贴。\n    CGFloat fullwidth = self.bounds.size.width;\n    CGFloat fullHeight = self.bounds.size.height;\n    CGFloat halfWidth = self.bounds.size.width/2.f;\n    CGFloat halfHeight = self.bounds.size.height/2.f;\n    \n    // 位置的计算是最麻烦\n    CGRect smileRect = CGRectMake(halfWidth/2, halfHeight/4*.9,\n                                  halfWidth, halfHeight);\n    CGRect petalRect = CGRectMake(halfWidth-fullwidth/10, fullHeight/5,\n                                  fullwidth/5, fullwidth/2);\n    CGRect leafRect = CGRectMake(halfWidth-fullwidth/12, fullHeight*.84,\n                                 fullwidth/5, fullwidth/2);\n    CGRect stemRect = CGRectMake(halfWidth-fullwidth/8, halfHeight*1.3,\n                                 fullwidth/4, halfHeight*.8);\n    // 贴茎\n    CYStem *stem = [[CYStem alloc]initWithFrame:stemRect];\n    stem.outerColor = [UIColor colorWithRed:0 green:0.5 blue:0 alpha:1];\n    stem.innerColor = [UIColor colorWithRed:.3 green:1 blue:.2 alpha:1];\n    [self addSubview:stem];\n    \n    // 贴花瓣\n    for (CGFloat i = M_PI / 10; i < M_PI * 2; i += M_PI / 7.5) {\n        CYPetal *petal = [[CYPetal alloc]initWithFrame:petalRect];\n        petal.outerColor = [UIColor  purpleColor];\n        petal.innerColor = [UIColor colorWithRed:1 green:0 blue:1 alpha:1];\n        [self addSubview:petal];\n        petal.layer.anchorPoint = CGPointMake(.5, 1);\n        petal.transform = CGAffineTransformMakeRotation(i);\n    }\n    \n    // 贴叶子\n    for (CGFloat i = -M_PI/5; i <= M_PI/5; i += M_PI * 2/5) {\n        CYPetal *leaf = [[CYPetal alloc]initWithFrame:leafRect];\n        leaf.outerColor = [UIColor colorWithRed:0 green:.5 blue:0 alpha:1 ];\n        leaf.innerColor = [UIColor colorWithRed:.3 green:1 blue:.2 alpha:1];\n        [self addSubview:leaf];\n        leaf.layer.anchorPoint = CGPointMake(.5, 1);\n        leaf.transform = CGAffineTransformMakeRotation(i);\n    }\n    \n    // 贴笑脸\n    CYSmile *smile = [[CYSmile alloc]initWithFrame:smileRect];\n    smile.innerColor = [UIColor yellowColor];\n    smile.outerColor = [UIColor colorWithRed:1 green:.4 blue:0 alpha:1];\n    [self addSubview:smile];\n    \n}\n```\n\n![](CoreGraphicsAndAnimation/8.png)\n\n\n\n\n\n# 参考资料\n\n","slug":"CoreGraphicsAndAnimation","published":1,"updated":"2017-06-08T15:53:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yvu0004hx5lzvvqnqp3","content":"<h1 id=\"绘图\"><a href=\"#绘图\" class=\"headerlink\" title=\"绘图\"></a>绘图</h1><h2 id=\"成品展示\"><a href=\"#成品展示\" class=\"headerlink\" title=\"成品展示\"></a>成品展示</h2><p><img src=\"/2017/05/12/CoreGraphicsAndAnimation/6.gif\" alt=\"core\"></p>\n<a id=\"more\"></a>\n<h2 id=\"UIBezierPath\"><a href=\"#UIBezierPath\" class=\"headerlink\" title=\"UIBezierPath\"></a>UIBezierPath</h2><p>说到绘图，那么有一个不得不讲的对象，那就是UIBezierPath。先来看几个UIBezierPath里面比较重要的API。我都已经做了注释，功能还是比较强大的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPath;<span class=\"comment\">//创建贝塞尔曲线</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPathWithRect:(<span class=\"built_in\">CGRect</span>)rect;<span class=\"comment\">//获取矩形的贝塞尔曲线</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPathWithOvalInRect:(<span class=\"built_in\">CGRect</span>)rect;<span class=\"comment\">//获取矩形框内椭圆的贝塞尔曲线</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPathWithRoundedRect:(<span class=\"built_in\">CGRect</span>)rect cornerRadius:(<span class=\"built_in\">CGFloat</span>)cornerRadius; <span class=\"comment\">//圆角贝塞尔曲线</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPathWithRoundedRect:(<span class=\"built_in\">CGRect</span>)rect byRoundingCorners:(<span class=\"built_in\">UIRectCorner</span>)corners cornerRadii:(<span class=\"built_in\">CGSize</span>)cornerRadii;<span class=\"comment\">//矩形框内，指定圆角、半径的贝塞尔曲线</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPathWithArcCenter:(<span class=\"built_in\">CGPoint</span>)center radius:(<span class=\"built_in\">CGFloat</span>)radius startAngle:(<span class=\"built_in\">CGFloat</span>)startAngle endAngle:(<span class=\"built_in\">CGFloat</span>)endAngle clockwise:(<span class=\"built_in\">BOOL</span>)clockwise;<span class=\"comment\">//指定圆心、半径、起始角度、时钟方向的贝塞尔曲线</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPathWithCGPath:(<span class=\"built_in\">CGPathRef</span>)<span class=\"built_in\">CGPath</span>;<span class=\"comment\">//根据CGPath创建贝塞尔曲线</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)init <span class=\"built_in\">NS_DESIGNATED_INITIALIZER</span>;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)moveToPoint:(<span class=\"built_in\">CGPoint</span>)point;<span class=\"comment\">//移动到某个点</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addLineToPoint:(<span class=\"built_in\">CGPoint</span>)point;<span class=\"comment\">//从当前点，添加线段到目标点</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addCurveToPoint:(<span class=\"built_in\">CGPoint</span>)endPoint controlPoint1:(<span class=\"built_in\">CGPoint</span>)controlPoint1 controlPoint2:(<span class=\"built_in\">CGPoint</span>)controlPoint2;<span class=\"comment\">//贝塞尔三次方程，从当前点，到目标点，受控制点1、控制点2控制</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addQuadCurveToPoint:(<span class=\"built_in\">CGPoint</span>)endPoint controlPoint:(<span class=\"built_in\">CGPoint</span>)controlPoint;<span class=\"comment\">//贝塞尔二次方程，从当前点到目标点，受控制点1控制</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addArcWithCenter:(<span class=\"built_in\">CGPoint</span>)center radius:(<span class=\"built_in\">CGFloat</span>)radius startAngle:(<span class=\"built_in\">CGFloat</span>)startAngle endAngle:(<span class=\"built_in\">CGFloat</span>)endAngle clockwise:(<span class=\"built_in\">BOOL</span>)clockwise <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">4</span>_0);<span class=\"comment\">//添加椭圆路径，参数包括圆心，半径、开始角度，结束角度，时钟方向</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)closePath;<span class=\"comment\">//关闭路径，当前大多是子路径，收到该消息之后，都会将首位点连接起来。</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)fill;<span class=\"comment\">//填充封闭路径，根据当前context设置的颜色等参数</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)stroke;<span class=\"comment\">//划线，根据当前context设置的线宽啊，颜色啊等参数</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addClip;<span class=\"comment\">//切边，调用该方法之后，只有封闭路径内可以继续操作，封闭路径外无法操作。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<h2 id=\"梯度\"><a href=\"#梯度\" class=\"headerlink\" title=\"梯度\"></a>梯度</h2><p>梯度的实现在ios里面有俩种方式，一种是通过CAGradientLayer去绘制，一种是通过CGGradientRef使用DrawRect:方法去绘制，我这里采用的是第二种方式。</p>\n<p>实现方式，首先创建了一个CYShapeView的基类，该类可以设置一些属性值，如外边界色，里边界色，划线色，线宽等。方便子类继承它。通过设置的这些属性，可以获取到需要的梯度Ref指针。</p>\n<p>下面是具体的代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CYShapedView</span> : <span class=\"title\">UIView</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *innerColor;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *outerColor;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *strokeColor;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> lineThickness;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGGradientRef</span>)gradientWithColor:(<span class=\"built_in\">UIColor</span> *)c1</div><div class=\"line\">                           toColor:(<span class=\"built_in\">UIColor</span> *)c2</div><div class=\"line\">                             count:(<span class=\"built_in\">CGFloat</span>)colorNumb;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CYShapedView</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithFrame:(<span class=\"built_in\">CGRect</span>)frame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> initWithFrame:frame];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.innerColor = [<span class=\"built_in\">UIColor</span> redColor];</div><div class=\"line\">        <span class=\"keyword\">self</span>.outerColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">        <span class=\"keyword\">self</span>.strokeColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">        <span class=\"keyword\">self</span>.lineThickness = <span class=\"number\">3.</span>f;</div><div class=\"line\">        <span class=\"keyword\">self</span>.backgroundColor = [<span class=\"built_in\">UIColor</span> clearColor];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setLineThickness:(<span class=\"built_in\">CGFloat</span>)lineThickness</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> totalWidth = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> totalHeight = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfWidth = totalWidth / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfHeight = totalHeight / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> smallest = MIN(halfWidth, halfHeight);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> factor = smallest / <span class=\"number\">100.</span>f;</div><div class=\"line\">    factor = (factor &gt; <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : factor;</div><div class=\"line\">    _lineThickness = factor * lineThickness;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGGradientRef</span>)gradientWithColor:(<span class=\"built_in\">UIColor</span> *)c1 toColor:(<span class=\"built_in\">UIColor</span> *)c2 count:(<span class=\"built_in\">CGFloat</span>)colorNumb</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取颜色组成</span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">CGFloat</span> *colorComponents1 = <span class=\"built_in\">CGColorGetComponents</span>(c1.CGColor);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> r1 = colorComponents1[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> g1 = colorComponents1[<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> b1 = colorComponents1[<span class=\"number\">2</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">CGFloat</span> *colorComponents2 = <span class=\"built_in\">CGColorGetComponents</span>(c2.CGColor);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> r2 = colorComponents2[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> g2 = colorComponents2[<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> b2 = colorComponents2[<span class=\"number\">2</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> gradientColorComponents[] = &#123;</div><div class=\"line\">        r1,g1,b1,<span class=\"number\">1</span>,</div><div class=\"line\">        r2,g2,b2,<span class=\"number\">1</span>,</div><div class=\"line\">        r1,g1,b1,<span class=\"number\">1</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 使用RGB色生成颜色空间</span></div><div class=\"line\">    <span class=\"built_in\">CGColorSpaceRef</span> rgb = <span class=\"built_in\">CGColorSpaceCreateDeviceRGB</span>();</div><div class=\"line\">    <span class=\"comment\">// 根据RGB色和梯度色数组，以及梯度色个数，创建梯度引用</span></div><div class=\"line\">    <span class=\"built_in\">CGGradientRef</span>    gradientRef =  <span class=\"built_in\">CGGradientCreateWithColorComponents</span>(rgb, gradientColorComponents, <span class=\"literal\">NULL</span>, colorNumb);</div><div class=\"line\">    <span class=\"built_in\">CGColorSpaceRelease</span>(rgb);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> gradientRef;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<h2 id=\"使用梯度及UIBezierPath绘制一个叶子\"><a href=\"#使用梯度及UIBezierPath绘制一个叶子\" class=\"headerlink\" title=\"使用梯度及UIBezierPath绘制一个叶子\"></a>使用梯度及UIBezierPath绘制一个叶子</h2><p>实现思路，创建一个继承自CYShapedView的子类，并将它命名为CYPetal。我们主要做的工作是在该类的DrawRect:方法里面</p>\n<p>绘制一个叶子，首先要绘制的点有起点和终点，中间需要用曲线连接起来。那么接下来的工作就是找到这些点。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span> 起点（startPoint）：<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width / <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"number\">2.</span> 终点（endPoint）：<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width/ <span class=\"number\">2</span>,<span class=\"keyword\">self</span>.view.bounds.size.height);</div><div class=\"line\"><span class=\"number\">3.</span> 左叶子控制点（leftCtl）：<span class=\"built_in\">CGPointMake</span>(-<span class=\"keyword\">self</span>.view.bounds.size.width / <span class=\"number\">2</span>,<span class=\"keyword\">self</span>.view.bounds.size.height/ <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"number\">4.</span> 右叶子控制点（rightCtl）：<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width *<span class=\"number\">1.5</span>,<span class=\"keyword\">self</span>.view.bounds.size.height/ <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"number\">5.</span> 中间控制点（midPoint）：<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width / <span class=\"number\">2</span>,<span class=\"keyword\">self</span>.view.bounds.size.height * <span class=\"number\">0.8</span>)</div><div class=\"line\"><span class=\"number\">6.</span> 边界点（corner）：该点用来设置梯度的终点<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width, <span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n<p>下面来形象的展示下这些点的位置</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*---------------------------------------------------------------------------*/</span></div><div class=\"line\"><span class=\"comment\">//              -----------------------------------------</span></div><div class=\"line\"><span class=\"comment\">//              |                . -&gt; start poin       .|corner</span></div><div class=\"line\"><span class=\"comment\">//   . left ctl |                                       |           . right ctl</span></div><div class=\"line\"><span class=\"comment\">//              |                                       |</span></div><div class=\"line\"><span class=\"comment\">//              |                                       |</span></div><div class=\"line\"><span class=\"comment\">//              |                                       |</span></div><div class=\"line\"><span class=\"comment\">//              |                                       |</span></div><div class=\"line\"><span class=\"comment\">//              |              mid point                |</span></div><div class=\"line\"><span class=\"comment\">//              |                .                      |</span></div><div class=\"line\"><span class=\"comment\">//              |                                       |</span></div><div class=\"line\"><span class=\"comment\">//              |                . -&gt; end pint          |</span></div><div class=\"line\"><span class=\"comment\">//              -----------------------------------------</span></div><div class=\"line\"><span class=\"comment\">/*----------------------------------------------------------------------------*/</span></div></pre></td></tr></table></figure>\n<p>以下是具体的实现代码，其实找到点之后，再用代码实现就很容易了。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect &#123;    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullWidth = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullHeight = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfWidth = fullWidth / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfHeight = fullHeight / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> startPoint = <span class=\"built_in\">CGPointMake</span>(halfWidth, <span class=\"number\">3.</span>f);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> midPoint = <span class=\"built_in\">CGPointMake</span>(halfWidth, halfHeight * <span class=\"number\">1.6</span>f);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> endPoint = <span class=\"built_in\">CGPointMake</span>(halfWidth, fullHeight);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> leftCtl = <span class=\"built_in\">CGPointMake</span>(-halfWidth, halfHeight / <span class=\"number\">3.</span>f);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> rightCtl = <span class=\"built_in\">CGPointMake</span>(fullWidth * <span class=\"number\">1.5</span>f, halfHeight / <span class=\"number\">3.</span>f);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> corner = <span class=\"built_in\">CGPointMake</span>(fullWidth, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</div><div class=\"line\">    </div><div class=\"line\">    [path moveToPoint:startPoint];</div><div class=\"line\">    [path addCurveToPoint:endPoint controlPoint1:leftCtl controlPoint2:midPoint];</div><div class=\"line\">    [path addCurveToPoint:startPoint controlPoint1:midPoint controlPoint2:rightCtl];</div><div class=\"line\">    [path addClip];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGGradientRef</span> gradient = [<span class=\"keyword\">self</span> gradientWithColor:<span class=\"keyword\">self</span>.innerColor toColor:<span class=\"keyword\">self</span>.outerColor count:<span class=\"number\">3</span>];</div><div class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</div><div class=\"line\">    <span class=\"built_in\">CGContextDrawLinearGradient</span>(context, gradient, <span class=\"built_in\">CGPointZero</span>, corner, <span class=\"number\">0</span>);</div><div class=\"line\">    path.lineWidth = <span class=\"keyword\">self</span>.lineThickness;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.strokeColor setStroke];</div><div class=\"line\">    [path stroke];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>贴个图感受下最后绘制出来的叶子</p>\n<p><img src=\"/2017/05/12/CoreGraphicsAndAnimation/1.png\" alt=\"\"></p>\n<h2 id=\"绘制笑脸\"><a href=\"#绘制笑脸\" class=\"headerlink\" title=\"绘制笑脸\"></a>绘制笑脸</h2><p>实现思路，同绘制叶子一样，我们先搞清楚需要的绘制参数。首先我们要绘制一个圆，用来显示脸。其次需要绘制一条曲线，用来显示嘴巴。最后还要绘制俩个椭圆用来显示眼睛。那么总结起来就是。</p>\n<ol>\n<li>绘制圆，并做圆心向外发散的梯度处理</li>\n<li>绘制曲线，俩个嘴角受中心点控制的贝塞尔曲线。</li>\n<li>绘制椭圆，找到合适的位置调用贝塞尔的矩形框绘制椭圆路径即可。</li>\n</ol>\n<p>实现的代码也比较简单，如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 基础点</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullWidth = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullHeight = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfWidth = fullWidth / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfHeight = fullHeight / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> radius = MIN(halfWidth, halfHeight);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> center = <span class=\"built_in\">CGPointMake</span>(halfWidth, halfHeight);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// bezierPath 切圆</span></div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *bezier = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</div><div class=\"line\">    [bezier addArcWithCenter:center radius:radius startAngle:<span class=\"number\">0</span> endAngle:M_PI * <span class=\"number\">2</span> clockwise:<span class=\"literal\">YES</span>];</div><div class=\"line\">    [bezier addClip];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 填充梯度，从中心发散</span></div><div class=\"line\">    <span class=\"built_in\">CGGradientRef</span> gradient = [<span class=\"keyword\">self</span> gradientWithColor:<span class=\"keyword\">self</span>.innerColor toColor:<span class=\"keyword\">self</span>.outerColor count:<span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"built_in\">CGContextRef</span> graphics = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</div><div class=\"line\">    <span class=\"built_in\">CGContextDrawRadialGradient</span>(graphics, gradient, center, <span class=\"number\">0</span>, center, radius, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 划线</span></div><div class=\"line\">    bezier.lineWidth = <span class=\"keyword\">self</span>.lineThickness * <span class=\"number\">1.7</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.strokeColor setStroke];</div><div class=\"line\">    [bezier stroke];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 准备画嘴巴</span></div><div class=\"line\">    [bezier removeAllPoints];</div><div class=\"line\">    bezier.lineWidth = <span class=\"keyword\">self</span>.lineThickness;</div><div class=\"line\">    [bezier moveToPoint:<span class=\"built_in\">CGPointMake</span>(halfWidth * <span class=\"number\">0.5</span>, halfHeight * <span class=\"number\">1.3</span>)];</div><div class=\"line\">    [bezier addQuadCurveToPoint:<span class=\"built_in\">CGPointMake</span>(halfWidth * <span class=\"number\">1.5</span>, halfHeight * <span class=\"number\">1.3</span>)</div><div class=\"line\">                   controlPoint:<span class=\"built_in\">CGPointMake</span>(halfWidth, fullHeight * <span class=\"number\">0.91</span>)];</div><div class=\"line\">    [bezier stroke];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 准备画左眼</span></div><div class=\"line\">    bezier = [<span class=\"built_in\">UIBezierPath</span> bezierPathWithOvalInRect:<span class=\"built_in\">CGRectMake</span>(fullWidth / <span class=\"number\">3</span> - halfWidth * <span class=\"number\">.1</span>,</div><div class=\"line\">                                                               fullHeight  / <span class=\"number\">3.</span>f,</div><div class=\"line\">                                                               halfWidth * <span class=\"number\">.2</span>,</div><div class=\"line\">                                                               halfHeight * <span class=\"number\">.3</span>)];</div><div class=\"line\">    bezier.lineWidth = <span class=\"keyword\">self</span>.lineThickness;</div><div class=\"line\">    [bezier fill];</div><div class=\"line\">    [bezier stroke];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 画右眼</span></div><div class=\"line\">    bezier = [<span class=\"built_in\">UIBezierPath</span> bezierPathWithOvalInRect:<span class=\"built_in\">CGRectMake</span>(fullWidth / <span class=\"number\">3</span> * <span class=\"number\">2</span> - halfWidth * <span class=\"number\">.1</span>,</div><div class=\"line\">                                                               fullHeight / <span class=\"number\">3.</span>f,</div><div class=\"line\">                                                               halfWidth * <span class=\"number\">.2</span>,</div><div class=\"line\">                                                               halfHeight * <span class=\"number\">.3</span>)];</div><div class=\"line\">    bezier.lineWidth = <span class=\"keyword\">self</span>.lineThickness;</div><div class=\"line\">    [bezier fill];</div><div class=\"line\">    [bezier stroke];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>按照惯例，贴下实现的效果图</p>\n<p><img src=\"/2017/05/12/CoreGraphicsAndAnimation/2.png\" alt=\"\"></p>\n<h2 id=\"动起来\"><a href=\"#动起来\" class=\"headerlink\" title=\"动起来\"></a>动起来</h2><p>现在我们希望能用之前绘制的俩个图形，集合动画，做出一个类似太阳的动画特效。</p>\n<p>还是谈谈实现的思路：先用之前的CYSmile绘制一个太阳，之后采用CYPetal绘制一组阳光，阳光的绘制有技巧，需要绘制相同frame的光芒视图15个，之后采用transform的方式，设置位置偏移。此外由于要实现动画效果，需要对光芒的锚点位置进行设置。以下是一个view设置的时候，太阳和光芒的位置设置。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">----------------------------------------------------------------------</div><div class=\"line\">|                                                                     |</div><div class=\"line\">|                                                                     |</div><div class=\"line\">|                                                                     |</div><div class=\"line\">|                -------------------------------                      |</div><div class=\"line\">|                |         -------             |                      |</div><div class=\"line\">|                |         |     |             |                      |</div><div class=\"line\">|                |         |  光 |             |                      |</div><div class=\"line\">|                |         |  芒 |             |                      |</div><div class=\"line\">|                |         |  区 |             |                      |</div><div class=\"line\">|                |         |     |             |                      |</div><div class=\"line\">|                |         |     |             |                      |</div><div class=\"line\">|                |         -------             |                      |</div><div class=\"line\">|                |                             |                      |</div><div class=\"line\">|                |         太阳区              |                      |</div><div class=\"line\">|                |                             |                      |</div><div class=\"line\">|                -------------------------------                      |</div><div class=\"line\">|                                                                     |</div><div class=\"line\">|                                                                     |</div><div class=\"line\">|                                                                     |</div><div class=\"line\">|                                                                     |</div><div class=\"line\">------------------------------------------------------------------------</div></pre></td></tr></table></figure>\n<p>具体的话还是看下代码吧。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)createSunshine</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 设置大小</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullWidth = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullHeight = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfWidth = fullWidth / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfHeigt = fullHeight / <span class=\"number\">2.</span>f;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 设置太阳和光芒的位置</span></div><div class=\"line\">    <span class=\"built_in\">CGRect</span> sunRect = <span class=\"built_in\">CGRectMake</span>(halfWidth - fullWidth / <span class=\"number\">4</span>, halfHeigt - fullHeight / <span class=\"number\">4</span>, halfWidth, halfHeigt);</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> sunshineRect = <span class=\"built_in\">CGRectMake</span>(halfWidth - fullWidth / <span class=\"number\">40</span>, halfHeigt - fullHeight / <span class=\"number\">8</span>, fullWidth / <span class=\"number\">20</span>, fullHeight / <span class=\"number\">4</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 创建光芒所在的view，并将本类的shineLayer指向它的layer，方便后面添加动画</span></div><div class=\"line\">    <span class=\"built_in\">UIView</span> *shineView = [[<span class=\"built_in\">UIView</span> alloc]initWithFrame:<span class=\"keyword\">self</span>.bounds];</div><div class=\"line\">    <span class=\"keyword\">self</span>.shineLayer = shineView.layer;</div><div class=\"line\">    [<span class=\"keyword\">self</span> addSubview:shineView];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 将光芒都添加到光芒view上，并进行相应的transform转换和锚点设置</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">CGFloat</span> i = M_PI / <span class=\"number\">10</span>; i &lt; M_PI * <span class=\"number\">2</span>; i += M_PI / <span class=\"number\">7.5</span>) &#123;</div><div class=\"line\">        CYPetal *petal = [[CYPetal alloc]initWithFrame:sunshineRect];</div><div class=\"line\">        petal.innerColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">        petal.outerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">1</span> green:<span class=\"number\">0.8</span> blue:<span class=\"number\">.2</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">        petal.lineThickness = <span class=\"number\">40.</span>f;</div><div class=\"line\">        petal.strokeColor = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\">        [shineView addSubview:petal];</div><div class=\"line\">        </div><div class=\"line\">        petal.layer.anchorPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">2</span>);</div><div class=\"line\">        petal.transform = <span class=\"built_in\">CGAffineTransformMakeRotation</span>(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 添加动画，让光芒动起来</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> addRotationAnimation];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 添加太阳</span></div><div class=\"line\">    CYSmile *smile = [[CYSmile alloc]initWithFrame:sunRect];</div><div class=\"line\">    smile.innerColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">    smile.outerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">1</span> green:<span class=\"number\">.8</span> blue:<span class=\"number\">.2</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span> addSubview:smile];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addRotationAnimation</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *basicAnimation = [<span class=\"built_in\">CABasicAnimation</span> animationWithKeyPath:<span class=\"string\">@\"transform.rotation\"</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 设置旋转动画</span></div><div class=\"line\">    basicAnimation.duration = <span class=\"number\">10</span>;</div><div class=\"line\">    basicAnimation.fromValue = @<span class=\"number\">0</span>;</div><div class=\"line\">    basicAnimation.speed = <span class=\"keyword\">self</span>.speed;</div><div class=\"line\">    basicAnimation.toValue = @(M_PI * <span class=\"number\">2</span>);</div><div class=\"line\">    basicAnimation.repeatCount = <span class=\"built_in\">CGFLOAT_MAX</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.shineLayer addAnimation:basicAnimation forKey:<span class=\"string\">@\"rotation\"</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 设置透明度动画</span></div><div class=\"line\">    basicAnimation.keyPath = <span class=\"string\">@\"opacity\"</span>;</div><div class=\"line\">    basicAnimation.duration = <span class=\"number\">.5</span>f;</div><div class=\"line\">    basicAnimation.autoreverses = <span class=\"literal\">YES</span>;</div><div class=\"line\">    basicAnimation.fromValue = @<span class=\"number\">0.7</span>;</div><div class=\"line\">    basicAnimation.toValue = @<span class=\"number\">1.0</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.shineLayer addAnimation:basicAnimation forKey:<span class=\"string\">@\"fade\"</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 设置大小动画</span></div><div class=\"line\">    basicAnimation.keyPath = <span class=\"string\">@\"transform.scale\"</span>;</div><div class=\"line\">    basicAnimation.fromValue = @<span class=\"number\">0.9</span>;</div><div class=\"line\">    basicAnimation.toValue = @<span class=\"number\">1.1</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.shineLayer addAnimation:basicAnimation forKey:<span class=\"string\">@\"scale\"</span>];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后的效果图如下</p>\n<p><img src=\"/2017/05/12/CoreGraphicsAndAnimation/7.gif\" alt=\"img\"></p>\n<h2 id=\"组合绘制花朵\"><a href=\"#组合绘制花朵\" class=\"headerlink\" title=\"组合绘制花朵\"></a>组合绘制花朵</h2><p>花朵包括的元素主要有笑脸、花瓣、茎、叶子。这些元素（除了茎）都可以使用之前的组件来绘制出来。</p>\n<h3 id=\"茎\"><a href=\"#茎\" class=\"headerlink\" title=\"茎\"></a>茎</h3><p>坐标路径大概如下,并不一定是这样，手工绘制敬请谅解</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> ------------------------------------------------------------------------</div><div class=\"line\"> |                                   . start point               corner .|</div><div class=\"line\"> |                                  .  .                                 |</div><div class=\"line\"> |                                 .  .                                  |</div><div class=\"line\"> |                                .  .                                   |</div><div class=\"line\"> |                               .   .                                   |</div><div class=\"line\"> |                               .   .                                   |</div><div class=\"line\"> |                               .  .                                    |</div><div class=\"line\"> |                               .   .                                   |</div><div class=\"line\"> |. left ctrl                    .   ..mid point                         |</div><div class=\"line\"> |                                .   .                                  |</div><div class=\"line\"> |                                .   .                                  |</div><div class=\"line\"> |                                 .  .                                  |</div><div class=\"line\"> |                                 .  .                                  |</div><div class=\"line\"> |                                  .  .                                 |</div><div class=\"line\"> |                                  .  .                                 |</div><div class=\"line\"> |                                   .  .                                |</div><div class=\"line\"> |                                    . .                                |</div><div class=\"line\"> |                                   . end point            right ctrl . |</div><div class=\"line\"> ------------------------------------------------------------------------</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<p>茎的绘制和之前花瓣的绘制差不多，都是要选择一个起点和一个终点，然后绘制根据俩个锚点，绘制出相应的图形，具体绘制就不细说了，还是附上代码感受下吧</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullWidth = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullHeight = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfWidth = fullWidth / <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfHeight = fullHeight / <span class=\"number\">2</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> startPoint = <span class=\"built_in\">CGPointMake</span>(halfWidth * <span class=\"number\">.9</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> midPoint = <span class=\"built_in\">CGPointMake</span>(halfWidth, halfHeight);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> endPoint = <span class=\"built_in\">CGPointMake</span>(halfWidth * <span class=\"number\">.9</span>, fullHeight);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> corner = <span class=\"built_in\">CGPointMake</span>(fullWidth, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> leftCtl = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, halfHeight);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> rightCtl = <span class=\"built_in\">CGPointMake</span>(fullWidth, fullHeight);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</div><div class=\"line\">    [path moveToPoint:startPoint];</div><div class=\"line\">    [path addCurveToPoint:endPoint controlPoint1:leftCtl controlPoint2:rightCtl];</div><div class=\"line\">    [path addCurveToPoint:startPoint controlPoint1:rightCtl controlPoint2:midPoint];</div><div class=\"line\">    [path closePath];</div><div class=\"line\">    [path addClip];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGContextRef</span> ref = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</div><div class=\"line\">    <span class=\"built_in\">CGGradientRef</span> gradient = [<span class=\"keyword\">self</span> gradientWithColor:<span class=\"keyword\">self</span>.innerColor toColor:<span class=\"keyword\">self</span>.outerColor count:<span class=\"number\">3</span>];</div><div class=\"line\">    <span class=\"built_in\">CGContextDrawLinearGradient</span>(ref, gradient, <span class=\"built_in\">CGPointZero</span>, corner, <span class=\"number\">0</span>);</div><div class=\"line\">    path.lineWidth = <span class=\"keyword\">self</span>.lineThickness;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.strokeColor setStroke];</div><div class=\"line\">    [path stroke];</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"组合花朵\"><a href=\"#组合花朵\" class=\"headerlink\" title=\"组合花朵\"></a>组合花朵</h3><p>组合花朵，主要就是在于计算笑脸、茎、花瓣、叶子等的坐标位置。然后还有就是设置它们的颜色。此外要注意设置花朵的frame的时候，要保持宽高比为7 : 10，这样才能生成比较好的效果。</p>\n<p>下面附上花朵的位置设置代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithFrame:(<span class=\"built_in\">CGRect</span>)frame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> initWithFrame:frame];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> p_createFlower];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)p_createFlower</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 贴图的时候注意要由下而上，由内而外的贴。</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullwidth = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullHeight = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfWidth = <span class=\"keyword\">self</span>.bounds.size.width/<span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfHeight = <span class=\"keyword\">self</span>.bounds.size.height/<span class=\"number\">2.</span>f;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 位置的计算是最麻烦</span></div><div class=\"line\">    <span class=\"built_in\">CGRect</span> smileRect = <span class=\"built_in\">CGRectMake</span>(halfWidth/<span class=\"number\">2</span>, halfHeight/<span class=\"number\">4</span>*<span class=\"number\">.9</span>,</div><div class=\"line\">                                  halfWidth, halfHeight);</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> petalRect = <span class=\"built_in\">CGRectMake</span>(halfWidth-fullwidth/<span class=\"number\">10</span>, fullHeight/<span class=\"number\">5</span>,</div><div class=\"line\">                                  fullwidth/<span class=\"number\">5</span>, fullwidth/<span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> leafRect = <span class=\"built_in\">CGRectMake</span>(halfWidth-fullwidth/<span class=\"number\">12</span>, fullHeight*<span class=\"number\">.84</span>,</div><div class=\"line\">                                 fullwidth/<span class=\"number\">5</span>, fullwidth/<span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> stemRect = <span class=\"built_in\">CGRectMake</span>(halfWidth-fullwidth/<span class=\"number\">8</span>, halfHeight*<span class=\"number\">1.3</span>,</div><div class=\"line\">                                 fullwidth/<span class=\"number\">4</span>, halfHeight*<span class=\"number\">.8</span>);</div><div class=\"line\">    <span class=\"comment\">// 贴茎</span></div><div class=\"line\">    CYStem *stem = [[CYStem alloc]initWithFrame:stemRect];</div><div class=\"line\">    stem.outerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0</span> green:<span class=\"number\">0.5</span> blue:<span class=\"number\">0</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    stem.innerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">.3</span> green:<span class=\"number\">1</span> blue:<span class=\"number\">.2</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span> addSubview:stem];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 贴花瓣</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">CGFloat</span> i = M_PI / <span class=\"number\">10</span>; i &lt; M_PI * <span class=\"number\">2</span>; i += M_PI / <span class=\"number\">7.5</span>) &#123;</div><div class=\"line\">        CYPetal *petal = [[CYPetal alloc]initWithFrame:petalRect];</div><div class=\"line\">        petal.outerColor = [<span class=\"built_in\">UIColor</span>  purpleColor];</div><div class=\"line\">        petal.innerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">1</span> green:<span class=\"number\">0</span> blue:<span class=\"number\">1</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> addSubview:petal];</div><div class=\"line\">        petal.layer.anchorPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">1</span>);</div><div class=\"line\">        petal.transform = <span class=\"built_in\">CGAffineTransformMakeRotation</span>(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 贴叶子</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">CGFloat</span> i = -M_PI/<span class=\"number\">5</span>; i &lt;= M_PI/<span class=\"number\">5</span>; i += M_PI * <span class=\"number\">2</span>/<span class=\"number\">5</span>) &#123;</div><div class=\"line\">        CYPetal *leaf = [[CYPetal alloc]initWithFrame:leafRect];</div><div class=\"line\">        leaf.outerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0</span> green:<span class=\"number\">.5</span> blue:<span class=\"number\">0</span> alpha:<span class=\"number\">1</span> ];</div><div class=\"line\">        leaf.innerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">.3</span> green:<span class=\"number\">1</span> blue:<span class=\"number\">.2</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> addSubview:leaf];</div><div class=\"line\">        leaf.layer.anchorPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">1</span>);</div><div class=\"line\">        leaf.transform = <span class=\"built_in\">CGAffineTransformMakeRotation</span>(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 贴笑脸</span></div><div class=\"line\">    CYSmile *smile = [[CYSmile alloc]initWithFrame:smileRect];</div><div class=\"line\">    smile.innerColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">    smile.outerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">1</span> green:<span class=\"number\">.4</span> blue:<span class=\"number\">0</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span> addSubview:smile];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/05/12/CoreGraphicsAndAnimation/8.png\" alt=\"\"></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1>","excerpt":"<h1 id=\"绘图\"><a href=\"#绘图\" class=\"headerlink\" title=\"绘图\"></a>绘图</h1><h2 id=\"成品展示\"><a href=\"#成品展示\" class=\"headerlink\" title=\"成品展示\"></a>成品展示</h2><p><img src=\"/2017/05/12/CoreGraphicsAndAnimation/6.gif\" alt=\"core\"></p>","more":"<h2 id=\"UIBezierPath\"><a href=\"#UIBezierPath\" class=\"headerlink\" title=\"UIBezierPath\"></a>UIBezierPath</h2><p>说到绘图，那么有一个不得不讲的对象，那就是UIBezierPath。先来看几个UIBezierPath里面比较重要的API。我都已经做了注释，功能还是比较强大的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPath;<span class=\"comment\">//创建贝塞尔曲线</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPathWithRect:(<span class=\"built_in\">CGRect</span>)rect;<span class=\"comment\">//获取矩形的贝塞尔曲线</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPathWithOvalInRect:(<span class=\"built_in\">CGRect</span>)rect;<span class=\"comment\">//获取矩形框内椭圆的贝塞尔曲线</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPathWithRoundedRect:(<span class=\"built_in\">CGRect</span>)rect cornerRadius:(<span class=\"built_in\">CGFloat</span>)cornerRadius; <span class=\"comment\">//圆角贝塞尔曲线</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPathWithRoundedRect:(<span class=\"built_in\">CGRect</span>)rect byRoundingCorners:(<span class=\"built_in\">UIRectCorner</span>)corners cornerRadii:(<span class=\"built_in\">CGSize</span>)cornerRadii;<span class=\"comment\">//矩形框内，指定圆角、半径的贝塞尔曲线</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPathWithArcCenter:(<span class=\"built_in\">CGPoint</span>)center radius:(<span class=\"built_in\">CGFloat</span>)radius startAngle:(<span class=\"built_in\">CGFloat</span>)startAngle endAngle:(<span class=\"built_in\">CGFloat</span>)endAngle clockwise:(<span class=\"built_in\">BOOL</span>)clockwise;<span class=\"comment\">//指定圆心、半径、起始角度、时钟方向的贝塞尔曲线</span></div><div class=\"line\">+ (<span class=\"keyword\">instancetype</span>)bezierPathWithCGPath:(<span class=\"built_in\">CGPathRef</span>)<span class=\"built_in\">CGPath</span>;<span class=\"comment\">//根据CGPath创建贝塞尔曲线</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)init <span class=\"built_in\">NS_DESIGNATED_INITIALIZER</span>;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)moveToPoint:(<span class=\"built_in\">CGPoint</span>)point;<span class=\"comment\">//移动到某个点</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addLineToPoint:(<span class=\"built_in\">CGPoint</span>)point;<span class=\"comment\">//从当前点，添加线段到目标点</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addCurveToPoint:(<span class=\"built_in\">CGPoint</span>)endPoint controlPoint1:(<span class=\"built_in\">CGPoint</span>)controlPoint1 controlPoint2:(<span class=\"built_in\">CGPoint</span>)controlPoint2;<span class=\"comment\">//贝塞尔三次方程，从当前点，到目标点，受控制点1、控制点2控制</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addQuadCurveToPoint:(<span class=\"built_in\">CGPoint</span>)endPoint controlPoint:(<span class=\"built_in\">CGPoint</span>)controlPoint;<span class=\"comment\">//贝塞尔二次方程，从当前点到目标点，受控制点1控制</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addArcWithCenter:(<span class=\"built_in\">CGPoint</span>)center radius:(<span class=\"built_in\">CGFloat</span>)radius startAngle:(<span class=\"built_in\">CGFloat</span>)startAngle endAngle:(<span class=\"built_in\">CGFloat</span>)endAngle clockwise:(<span class=\"built_in\">BOOL</span>)clockwise <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">4</span>_0);<span class=\"comment\">//添加椭圆路径，参数包括圆心，半径、开始角度，结束角度，时钟方向</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)closePath;<span class=\"comment\">//关闭路径，当前大多是子路径，收到该消息之后，都会将首位点连接起来。</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)fill;<span class=\"comment\">//填充封闭路径，根据当前context设置的颜色等参数</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)stroke;<span class=\"comment\">//划线，根据当前context设置的线宽啊，颜色啊等参数</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addClip;<span class=\"comment\">//切边，调用该方法之后，只有封闭路径内可以继续操作，封闭路径外无法操作。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<h2 id=\"梯度\"><a href=\"#梯度\" class=\"headerlink\" title=\"梯度\"></a>梯度</h2><p>梯度的实现在ios里面有俩种方式，一种是通过CAGradientLayer去绘制，一种是通过CGGradientRef使用DrawRect:方法去绘制，我这里采用的是第二种方式。</p>\n<p>实现方式，首先创建了一个CYShapeView的基类，该类可以设置一些属性值，如外边界色，里边界色，划线色，线宽等。方便子类继承它。通过设置的这些属性，可以获取到需要的梯度Ref指针。</p>\n<p>下面是具体的代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CYShapedView</span> : <span class=\"title\">UIView</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *innerColor;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *outerColor;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *strokeColor;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> lineThickness;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGGradientRef</span>)gradientWithColor:(<span class=\"built_in\">UIColor</span> *)c1</div><div class=\"line\">                           toColor:(<span class=\"built_in\">UIColor</span> *)c2</div><div class=\"line\">                             count:(<span class=\"built_in\">CGFloat</span>)colorNumb;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CYShapedView</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithFrame:(<span class=\"built_in\">CGRect</span>)frame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> initWithFrame:frame];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.innerColor = [<span class=\"built_in\">UIColor</span> redColor];</div><div class=\"line\">        <span class=\"keyword\">self</span>.outerColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">        <span class=\"keyword\">self</span>.strokeColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">        <span class=\"keyword\">self</span>.lineThickness = <span class=\"number\">3.</span>f;</div><div class=\"line\">        <span class=\"keyword\">self</span>.backgroundColor = [<span class=\"built_in\">UIColor</span> clearColor];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setLineThickness:(<span class=\"built_in\">CGFloat</span>)lineThickness</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> totalWidth = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> totalHeight = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfWidth = totalWidth / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfHeight = totalHeight / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> smallest = MIN(halfWidth, halfHeight);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> factor = smallest / <span class=\"number\">100.</span>f;</div><div class=\"line\">    factor = (factor &gt; <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : factor;</div><div class=\"line\">    _lineThickness = factor * lineThickness;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGGradientRef</span>)gradientWithColor:(<span class=\"built_in\">UIColor</span> *)c1 toColor:(<span class=\"built_in\">UIColor</span> *)c2 count:(<span class=\"built_in\">CGFloat</span>)colorNumb</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取颜色组成</span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">CGFloat</span> *colorComponents1 = <span class=\"built_in\">CGColorGetComponents</span>(c1.CGColor);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> r1 = colorComponents1[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> g1 = colorComponents1[<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> b1 = colorComponents1[<span class=\"number\">2</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">CGFloat</span> *colorComponents2 = <span class=\"built_in\">CGColorGetComponents</span>(c2.CGColor);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> r2 = colorComponents2[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> g2 = colorComponents2[<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> b2 = colorComponents2[<span class=\"number\">2</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> gradientColorComponents[] = &#123;</div><div class=\"line\">        r1,g1,b1,<span class=\"number\">1</span>,</div><div class=\"line\">        r2,g2,b2,<span class=\"number\">1</span>,</div><div class=\"line\">        r1,g1,b1,<span class=\"number\">1</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 使用RGB色生成颜色空间</span></div><div class=\"line\">    <span class=\"built_in\">CGColorSpaceRef</span> rgb = <span class=\"built_in\">CGColorSpaceCreateDeviceRGB</span>();</div><div class=\"line\">    <span class=\"comment\">// 根据RGB色和梯度色数组，以及梯度色个数，创建梯度引用</span></div><div class=\"line\">    <span class=\"built_in\">CGGradientRef</span>    gradientRef =  <span class=\"built_in\">CGGradientCreateWithColorComponents</span>(rgb, gradientColorComponents, <span class=\"literal\">NULL</span>, colorNumb);</div><div class=\"line\">    <span class=\"built_in\">CGColorSpaceRelease</span>(rgb);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> gradientRef;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<h2 id=\"使用梯度及UIBezierPath绘制一个叶子\"><a href=\"#使用梯度及UIBezierPath绘制一个叶子\" class=\"headerlink\" title=\"使用梯度及UIBezierPath绘制一个叶子\"></a>使用梯度及UIBezierPath绘制一个叶子</h2><p>实现思路，创建一个继承自CYShapedView的子类，并将它命名为CYPetal。我们主要做的工作是在该类的DrawRect:方法里面</p>\n<p>绘制一个叶子，首先要绘制的点有起点和终点，中间需要用曲线连接起来。那么接下来的工作就是找到这些点。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span> 起点（startPoint）：<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width / <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"number\">2.</span> 终点（endPoint）：<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width/ <span class=\"number\">2</span>,<span class=\"keyword\">self</span>.view.bounds.size.height);</div><div class=\"line\"><span class=\"number\">3.</span> 左叶子控制点（leftCtl）：<span class=\"built_in\">CGPointMake</span>(-<span class=\"keyword\">self</span>.view.bounds.size.width / <span class=\"number\">2</span>,<span class=\"keyword\">self</span>.view.bounds.size.height/ <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"number\">4.</span> 右叶子控制点（rightCtl）：<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width *<span class=\"number\">1.5</span>,<span class=\"keyword\">self</span>.view.bounds.size.height/ <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"number\">5.</span> 中间控制点（midPoint）：<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width / <span class=\"number\">2</span>,<span class=\"keyword\">self</span>.view.bounds.size.height * <span class=\"number\">0.8</span>)</div><div class=\"line\"><span class=\"number\">6.</span> 边界点（corner）：该点用来设置梯度的终点<span class=\"built_in\">CGPointMake</span>(<span class=\"keyword\">self</span>.view.bounds.size.width, <span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n<p>下面来形象的展示下这些点的位置</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*---------------------------------------------------------------------------*/</span></div><div class=\"line\"><span class=\"comment\">//              -----------------------------------------</span></div><div class=\"line\"><span class=\"comment\">//              |                . -&gt; start poin       .|corner</span></div><div class=\"line\"><span class=\"comment\">//   . left ctl |                                       |           . right ctl</span></div><div class=\"line\"><span class=\"comment\">//              |                                       |</span></div><div class=\"line\"><span class=\"comment\">//              |                                       |</span></div><div class=\"line\"><span class=\"comment\">//              |                                       |</span></div><div class=\"line\"><span class=\"comment\">//              |                                       |</span></div><div class=\"line\"><span class=\"comment\">//              |              mid point                |</span></div><div class=\"line\"><span class=\"comment\">//              |                .                      |</span></div><div class=\"line\"><span class=\"comment\">//              |                                       |</span></div><div class=\"line\"><span class=\"comment\">//              |                . -&gt; end pint          |</span></div><div class=\"line\"><span class=\"comment\">//              -----------------------------------------</span></div><div class=\"line\"><span class=\"comment\">/*----------------------------------------------------------------------------*/</span></div></pre></td></tr></table></figure>\n<p>以下是具体的实现代码，其实找到点之后，再用代码实现就很容易了。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect &#123;    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullWidth = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullHeight = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfWidth = fullWidth / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfHeight = fullHeight / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> startPoint = <span class=\"built_in\">CGPointMake</span>(halfWidth, <span class=\"number\">3.</span>f);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> midPoint = <span class=\"built_in\">CGPointMake</span>(halfWidth, halfHeight * <span class=\"number\">1.6</span>f);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> endPoint = <span class=\"built_in\">CGPointMake</span>(halfWidth, fullHeight);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> leftCtl = <span class=\"built_in\">CGPointMake</span>(-halfWidth, halfHeight / <span class=\"number\">3.</span>f);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> rightCtl = <span class=\"built_in\">CGPointMake</span>(fullWidth * <span class=\"number\">1.5</span>f, halfHeight / <span class=\"number\">3.</span>f);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> corner = <span class=\"built_in\">CGPointMake</span>(fullWidth, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</div><div class=\"line\">    </div><div class=\"line\">    [path moveToPoint:startPoint];</div><div class=\"line\">    [path addCurveToPoint:endPoint controlPoint1:leftCtl controlPoint2:midPoint];</div><div class=\"line\">    [path addCurveToPoint:startPoint controlPoint1:midPoint controlPoint2:rightCtl];</div><div class=\"line\">    [path addClip];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGGradientRef</span> gradient = [<span class=\"keyword\">self</span> gradientWithColor:<span class=\"keyword\">self</span>.innerColor toColor:<span class=\"keyword\">self</span>.outerColor count:<span class=\"number\">3</span>];</div><div class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</div><div class=\"line\">    <span class=\"built_in\">CGContextDrawLinearGradient</span>(context, gradient, <span class=\"built_in\">CGPointZero</span>, corner, <span class=\"number\">0</span>);</div><div class=\"line\">    path.lineWidth = <span class=\"keyword\">self</span>.lineThickness;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.strokeColor setStroke];</div><div class=\"line\">    [path stroke];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>贴个图感受下最后绘制出来的叶子</p>\n<p><img src=\"/2017/05/12/CoreGraphicsAndAnimation/1.png\" alt=\"\"></p>\n<h2 id=\"绘制笑脸\"><a href=\"#绘制笑脸\" class=\"headerlink\" title=\"绘制笑脸\"></a>绘制笑脸</h2><p>实现思路，同绘制叶子一样，我们先搞清楚需要的绘制参数。首先我们要绘制一个圆，用来显示脸。其次需要绘制一条曲线，用来显示嘴巴。最后还要绘制俩个椭圆用来显示眼睛。那么总结起来就是。</p>\n<ol>\n<li>绘制圆，并做圆心向外发散的梯度处理</li>\n<li>绘制曲线，俩个嘴角受中心点控制的贝塞尔曲线。</li>\n<li>绘制椭圆，找到合适的位置调用贝塞尔的矩形框绘制椭圆路径即可。</li>\n</ol>\n<p>实现的代码也比较简单，如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 基础点</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullWidth = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullHeight = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfWidth = fullWidth / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfHeight = fullHeight / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> radius = MIN(halfWidth, halfHeight);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> center = <span class=\"built_in\">CGPointMake</span>(halfWidth, halfHeight);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// bezierPath 切圆</span></div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *bezier = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</div><div class=\"line\">    [bezier addArcWithCenter:center radius:radius startAngle:<span class=\"number\">0</span> endAngle:M_PI * <span class=\"number\">2</span> clockwise:<span class=\"literal\">YES</span>];</div><div class=\"line\">    [bezier addClip];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 填充梯度，从中心发散</span></div><div class=\"line\">    <span class=\"built_in\">CGGradientRef</span> gradient = [<span class=\"keyword\">self</span> gradientWithColor:<span class=\"keyword\">self</span>.innerColor toColor:<span class=\"keyword\">self</span>.outerColor count:<span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"built_in\">CGContextRef</span> graphics = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</div><div class=\"line\">    <span class=\"built_in\">CGContextDrawRadialGradient</span>(graphics, gradient, center, <span class=\"number\">0</span>, center, radius, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 划线</span></div><div class=\"line\">    bezier.lineWidth = <span class=\"keyword\">self</span>.lineThickness * <span class=\"number\">1.7</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.strokeColor setStroke];</div><div class=\"line\">    [bezier stroke];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 准备画嘴巴</span></div><div class=\"line\">    [bezier removeAllPoints];</div><div class=\"line\">    bezier.lineWidth = <span class=\"keyword\">self</span>.lineThickness;</div><div class=\"line\">    [bezier moveToPoint:<span class=\"built_in\">CGPointMake</span>(halfWidth * <span class=\"number\">0.5</span>, halfHeight * <span class=\"number\">1.3</span>)];</div><div class=\"line\">    [bezier addQuadCurveToPoint:<span class=\"built_in\">CGPointMake</span>(halfWidth * <span class=\"number\">1.5</span>, halfHeight * <span class=\"number\">1.3</span>)</div><div class=\"line\">                   controlPoint:<span class=\"built_in\">CGPointMake</span>(halfWidth, fullHeight * <span class=\"number\">0.91</span>)];</div><div class=\"line\">    [bezier stroke];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 准备画左眼</span></div><div class=\"line\">    bezier = [<span class=\"built_in\">UIBezierPath</span> bezierPathWithOvalInRect:<span class=\"built_in\">CGRectMake</span>(fullWidth / <span class=\"number\">3</span> - halfWidth * <span class=\"number\">.1</span>,</div><div class=\"line\">                                                               fullHeight  / <span class=\"number\">3.</span>f,</div><div class=\"line\">                                                               halfWidth * <span class=\"number\">.2</span>,</div><div class=\"line\">                                                               halfHeight * <span class=\"number\">.3</span>)];</div><div class=\"line\">    bezier.lineWidth = <span class=\"keyword\">self</span>.lineThickness;</div><div class=\"line\">    [bezier fill];</div><div class=\"line\">    [bezier stroke];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 画右眼</span></div><div class=\"line\">    bezier = [<span class=\"built_in\">UIBezierPath</span> bezierPathWithOvalInRect:<span class=\"built_in\">CGRectMake</span>(fullWidth / <span class=\"number\">3</span> * <span class=\"number\">2</span> - halfWidth * <span class=\"number\">.1</span>,</div><div class=\"line\">                                                               fullHeight / <span class=\"number\">3.</span>f,</div><div class=\"line\">                                                               halfWidth * <span class=\"number\">.2</span>,</div><div class=\"line\">                                                               halfHeight * <span class=\"number\">.3</span>)];</div><div class=\"line\">    bezier.lineWidth = <span class=\"keyword\">self</span>.lineThickness;</div><div class=\"line\">    [bezier fill];</div><div class=\"line\">    [bezier stroke];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>按照惯例，贴下实现的效果图</p>\n<p><img src=\"/2017/05/12/CoreGraphicsAndAnimation/2.png\" alt=\"\"></p>\n<h2 id=\"动起来\"><a href=\"#动起来\" class=\"headerlink\" title=\"动起来\"></a>动起来</h2><p>现在我们希望能用之前绘制的俩个图形，集合动画，做出一个类似太阳的动画特效。</p>\n<p>还是谈谈实现的思路：先用之前的CYSmile绘制一个太阳，之后采用CYPetal绘制一组阳光，阳光的绘制有技巧，需要绘制相同frame的光芒视图15个，之后采用transform的方式，设置位置偏移。此外由于要实现动画效果，需要对光芒的锚点位置进行设置。以下是一个view设置的时候，太阳和光芒的位置设置。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">----------------------------------------------------------------------</div><div class=\"line\">|                                                                     |</div><div class=\"line\">|                                                                     |</div><div class=\"line\">|                                                                     |</div><div class=\"line\">|                -------------------------------                      |</div><div class=\"line\">|                |         -------             |                      |</div><div class=\"line\">|                |         |     |             |                      |</div><div class=\"line\">|                |         |  光 |             |                      |</div><div class=\"line\">|                |         |  芒 |             |                      |</div><div class=\"line\">|                |         |  区 |             |                      |</div><div class=\"line\">|                |         |     |             |                      |</div><div class=\"line\">|                |         |     |             |                      |</div><div class=\"line\">|                |         -------             |                      |</div><div class=\"line\">|                |                             |                      |</div><div class=\"line\">|                |         太阳区              |                      |</div><div class=\"line\">|                |                             |                      |</div><div class=\"line\">|                -------------------------------                      |</div><div class=\"line\">|                                                                     |</div><div class=\"line\">|                                                                     |</div><div class=\"line\">|                                                                     |</div><div class=\"line\">|                                                                     |</div><div class=\"line\">------------------------------------------------------------------------</div></pre></td></tr></table></figure>\n<p>具体的话还是看下代码吧。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)createSunshine</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 设置大小</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullWidth = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullHeight = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfWidth = fullWidth / <span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfHeigt = fullHeight / <span class=\"number\">2.</span>f;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 设置太阳和光芒的位置</span></div><div class=\"line\">    <span class=\"built_in\">CGRect</span> sunRect = <span class=\"built_in\">CGRectMake</span>(halfWidth - fullWidth / <span class=\"number\">4</span>, halfHeigt - fullHeight / <span class=\"number\">4</span>, halfWidth, halfHeigt);</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> sunshineRect = <span class=\"built_in\">CGRectMake</span>(halfWidth - fullWidth / <span class=\"number\">40</span>, halfHeigt - fullHeight / <span class=\"number\">8</span>, fullWidth / <span class=\"number\">20</span>, fullHeight / <span class=\"number\">4</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 创建光芒所在的view，并将本类的shineLayer指向它的layer，方便后面添加动画</span></div><div class=\"line\">    <span class=\"built_in\">UIView</span> *shineView = [[<span class=\"built_in\">UIView</span> alloc]initWithFrame:<span class=\"keyword\">self</span>.bounds];</div><div class=\"line\">    <span class=\"keyword\">self</span>.shineLayer = shineView.layer;</div><div class=\"line\">    [<span class=\"keyword\">self</span> addSubview:shineView];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 将光芒都添加到光芒view上，并进行相应的transform转换和锚点设置</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">CGFloat</span> i = M_PI / <span class=\"number\">10</span>; i &lt; M_PI * <span class=\"number\">2</span>; i += M_PI / <span class=\"number\">7.5</span>) &#123;</div><div class=\"line\">        CYPetal *petal = [[CYPetal alloc]initWithFrame:sunshineRect];</div><div class=\"line\">        petal.innerColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">        petal.outerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">1</span> green:<span class=\"number\">0.8</span> blue:<span class=\"number\">.2</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">        petal.lineThickness = <span class=\"number\">40.</span>f;</div><div class=\"line\">        petal.strokeColor = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\">        [shineView addSubview:petal];</div><div class=\"line\">        </div><div class=\"line\">        petal.layer.anchorPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">2</span>);</div><div class=\"line\">        petal.transform = <span class=\"built_in\">CGAffineTransformMakeRotation</span>(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 添加动画，让光芒动起来</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> addRotationAnimation];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 添加太阳</span></div><div class=\"line\">    CYSmile *smile = [[CYSmile alloc]initWithFrame:sunRect];</div><div class=\"line\">    smile.innerColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">    smile.outerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">1</span> green:<span class=\"number\">.8</span> blue:<span class=\"number\">.2</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span> addSubview:smile];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addRotationAnimation</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *basicAnimation = [<span class=\"built_in\">CABasicAnimation</span> animationWithKeyPath:<span class=\"string\">@\"transform.rotation\"</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 设置旋转动画</span></div><div class=\"line\">    basicAnimation.duration = <span class=\"number\">10</span>;</div><div class=\"line\">    basicAnimation.fromValue = @<span class=\"number\">0</span>;</div><div class=\"line\">    basicAnimation.speed = <span class=\"keyword\">self</span>.speed;</div><div class=\"line\">    basicAnimation.toValue = @(M_PI * <span class=\"number\">2</span>);</div><div class=\"line\">    basicAnimation.repeatCount = <span class=\"built_in\">CGFLOAT_MAX</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.shineLayer addAnimation:basicAnimation forKey:<span class=\"string\">@\"rotation\"</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 设置透明度动画</span></div><div class=\"line\">    basicAnimation.keyPath = <span class=\"string\">@\"opacity\"</span>;</div><div class=\"line\">    basicAnimation.duration = <span class=\"number\">.5</span>f;</div><div class=\"line\">    basicAnimation.autoreverses = <span class=\"literal\">YES</span>;</div><div class=\"line\">    basicAnimation.fromValue = @<span class=\"number\">0.7</span>;</div><div class=\"line\">    basicAnimation.toValue = @<span class=\"number\">1.0</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.shineLayer addAnimation:basicAnimation forKey:<span class=\"string\">@\"fade\"</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 设置大小动画</span></div><div class=\"line\">    basicAnimation.keyPath = <span class=\"string\">@\"transform.scale\"</span>;</div><div class=\"line\">    basicAnimation.fromValue = @<span class=\"number\">0.9</span>;</div><div class=\"line\">    basicAnimation.toValue = @<span class=\"number\">1.1</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.shineLayer addAnimation:basicAnimation forKey:<span class=\"string\">@\"scale\"</span>];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后的效果图如下</p>\n<p><img src=\"/2017/05/12/CoreGraphicsAndAnimation/7.gif\" alt=\"img\"></p>\n<h2 id=\"组合绘制花朵\"><a href=\"#组合绘制花朵\" class=\"headerlink\" title=\"组合绘制花朵\"></a>组合绘制花朵</h2><p>花朵包括的元素主要有笑脸、花瓣、茎、叶子。这些元素（除了茎）都可以使用之前的组件来绘制出来。</p>\n<h3 id=\"茎\"><a href=\"#茎\" class=\"headerlink\" title=\"茎\"></a>茎</h3><p>坐标路径大概如下,并不一定是这样，手工绘制敬请谅解</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> ------------------------------------------------------------------------</div><div class=\"line\"> |                                   . start point               corner .|</div><div class=\"line\"> |                                  .  .                                 |</div><div class=\"line\"> |                                 .  .                                  |</div><div class=\"line\"> |                                .  .                                   |</div><div class=\"line\"> |                               .   .                                   |</div><div class=\"line\"> |                               .   .                                   |</div><div class=\"line\"> |                               .  .                                    |</div><div class=\"line\"> |                               .   .                                   |</div><div class=\"line\"> |. left ctrl                    .   ..mid point                         |</div><div class=\"line\"> |                                .   .                                  |</div><div class=\"line\"> |                                .   .                                  |</div><div class=\"line\"> |                                 .  .                                  |</div><div class=\"line\"> |                                 .  .                                  |</div><div class=\"line\"> |                                  .  .                                 |</div><div class=\"line\"> |                                  .  .                                 |</div><div class=\"line\"> |                                   .  .                                |</div><div class=\"line\"> |                                    . .                                |</div><div class=\"line\"> |                                   . end point            right ctrl . |</div><div class=\"line\"> ------------------------------------------------------------------------</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<p>茎的绘制和之前花瓣的绘制差不多，都是要选择一个起点和一个终点，然后绘制根据俩个锚点，绘制出相应的图形，具体绘制就不细说了，还是附上代码感受下吧</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullWidth = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullHeight = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfWidth = fullWidth / <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfHeight = fullHeight / <span class=\"number\">2</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> startPoint = <span class=\"built_in\">CGPointMake</span>(halfWidth * <span class=\"number\">.9</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> midPoint = <span class=\"built_in\">CGPointMake</span>(halfWidth, halfHeight);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> endPoint = <span class=\"built_in\">CGPointMake</span>(halfWidth * <span class=\"number\">.9</span>, fullHeight);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> corner = <span class=\"built_in\">CGPointMake</span>(fullWidth, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> leftCtl = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, halfHeight);</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> rightCtl = <span class=\"built_in\">CGPointMake</span>(fullWidth, fullHeight);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIBezierPath</span> *path = [<span class=\"built_in\">UIBezierPath</span> bezierPath];</div><div class=\"line\">    [path moveToPoint:startPoint];</div><div class=\"line\">    [path addCurveToPoint:endPoint controlPoint1:leftCtl controlPoint2:rightCtl];</div><div class=\"line\">    [path addCurveToPoint:startPoint controlPoint1:rightCtl controlPoint2:midPoint];</div><div class=\"line\">    [path closePath];</div><div class=\"line\">    [path addClip];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGContextRef</span> ref = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</div><div class=\"line\">    <span class=\"built_in\">CGGradientRef</span> gradient = [<span class=\"keyword\">self</span> gradientWithColor:<span class=\"keyword\">self</span>.innerColor toColor:<span class=\"keyword\">self</span>.outerColor count:<span class=\"number\">3</span>];</div><div class=\"line\">    <span class=\"built_in\">CGContextDrawLinearGradient</span>(ref, gradient, <span class=\"built_in\">CGPointZero</span>, corner, <span class=\"number\">0</span>);</div><div class=\"line\">    path.lineWidth = <span class=\"keyword\">self</span>.lineThickness;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.strokeColor setStroke];</div><div class=\"line\">    [path stroke];</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"组合花朵\"><a href=\"#组合花朵\" class=\"headerlink\" title=\"组合花朵\"></a>组合花朵</h3><p>组合花朵，主要就是在于计算笑脸、茎、花瓣、叶子等的坐标位置。然后还有就是设置它们的颜色。此外要注意设置花朵的frame的时候，要保持宽高比为7 : 10，这样才能生成比较好的效果。</p>\n<p>下面附上花朵的位置设置代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithFrame:(<span class=\"built_in\">CGRect</span>)frame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> initWithFrame:frame];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> p_createFlower];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)p_createFlower</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 贴图的时候注意要由下而上，由内而外的贴。</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullwidth = <span class=\"keyword\">self</span>.bounds.size.width;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> fullHeight = <span class=\"keyword\">self</span>.bounds.size.height;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfWidth = <span class=\"keyword\">self</span>.bounds.size.width/<span class=\"number\">2.</span>f;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> halfHeight = <span class=\"keyword\">self</span>.bounds.size.height/<span class=\"number\">2.</span>f;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 位置的计算是最麻烦</span></div><div class=\"line\">    <span class=\"built_in\">CGRect</span> smileRect = <span class=\"built_in\">CGRectMake</span>(halfWidth/<span class=\"number\">2</span>, halfHeight/<span class=\"number\">4</span>*<span class=\"number\">.9</span>,</div><div class=\"line\">                                  halfWidth, halfHeight);</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> petalRect = <span class=\"built_in\">CGRectMake</span>(halfWidth-fullwidth/<span class=\"number\">10</span>, fullHeight/<span class=\"number\">5</span>,</div><div class=\"line\">                                  fullwidth/<span class=\"number\">5</span>, fullwidth/<span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> leafRect = <span class=\"built_in\">CGRectMake</span>(halfWidth-fullwidth/<span class=\"number\">12</span>, fullHeight*<span class=\"number\">.84</span>,</div><div class=\"line\">                                 fullwidth/<span class=\"number\">5</span>, fullwidth/<span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> stemRect = <span class=\"built_in\">CGRectMake</span>(halfWidth-fullwidth/<span class=\"number\">8</span>, halfHeight*<span class=\"number\">1.3</span>,</div><div class=\"line\">                                 fullwidth/<span class=\"number\">4</span>, halfHeight*<span class=\"number\">.8</span>);</div><div class=\"line\">    <span class=\"comment\">// 贴茎</span></div><div class=\"line\">    CYStem *stem = [[CYStem alloc]initWithFrame:stemRect];</div><div class=\"line\">    stem.outerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0</span> green:<span class=\"number\">0.5</span> blue:<span class=\"number\">0</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    stem.innerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">.3</span> green:<span class=\"number\">1</span> blue:<span class=\"number\">.2</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span> addSubview:stem];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 贴花瓣</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">CGFloat</span> i = M_PI / <span class=\"number\">10</span>; i &lt; M_PI * <span class=\"number\">2</span>; i += M_PI / <span class=\"number\">7.5</span>) &#123;</div><div class=\"line\">        CYPetal *petal = [[CYPetal alloc]initWithFrame:petalRect];</div><div class=\"line\">        petal.outerColor = [<span class=\"built_in\">UIColor</span>  purpleColor];</div><div class=\"line\">        petal.innerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">1</span> green:<span class=\"number\">0</span> blue:<span class=\"number\">1</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> addSubview:petal];</div><div class=\"line\">        petal.layer.anchorPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">1</span>);</div><div class=\"line\">        petal.transform = <span class=\"built_in\">CGAffineTransformMakeRotation</span>(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 贴叶子</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">CGFloat</span> i = -M_PI/<span class=\"number\">5</span>; i &lt;= M_PI/<span class=\"number\">5</span>; i += M_PI * <span class=\"number\">2</span>/<span class=\"number\">5</span>) &#123;</div><div class=\"line\">        CYPetal *leaf = [[CYPetal alloc]initWithFrame:leafRect];</div><div class=\"line\">        leaf.outerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0</span> green:<span class=\"number\">.5</span> blue:<span class=\"number\">0</span> alpha:<span class=\"number\">1</span> ];</div><div class=\"line\">        leaf.innerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">.3</span> green:<span class=\"number\">1</span> blue:<span class=\"number\">.2</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> addSubview:leaf];</div><div class=\"line\">        leaf.layer.anchorPoint = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">.5</span>, <span class=\"number\">1</span>);</div><div class=\"line\">        leaf.transform = <span class=\"built_in\">CGAffineTransformMakeRotation</span>(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 贴笑脸</span></div><div class=\"line\">    CYSmile *smile = [[CYSmile alloc]initWithFrame:smileRect];</div><div class=\"line\">    smile.innerColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">    smile.outerColor = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">1</span> green:<span class=\"number\">.4</span> blue:<span class=\"number\">0</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span> addSubview:smile];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/2017/05/12/CoreGraphicsAndAnimation/8.png\" alt=\"\"></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1>"},{"title":"Hexo使用手册","date":"2019-09-19T02:32:04.000Z","_content":"\n## Hexo手册\n\n### 1.启动本地调试服务器\n\n```objective-c\nhexo server\n```\n\n### 2.新建文章\n\n```objective-c\nhexo new '文章标题'\n```\n\n### 3. 静态文件生成\n\n```objective-c\nhexo generate\n```\n\n### 4. 文章发布\n\n```objective-c\nhexo deploy\n```\n\n\n\n<!---more--->\n\n### 5.图片放置\n\n将用的图片放置到 “文章标题”/  文件夹下面\n\n使用的时候\n\n```\n![](文章标题/图片.jpg)\n```\n\n","source":"_posts/Hexo使用手册.md","raw":"---\ntitle: Hexo使用手册\ndate: 2019-09-19 10:32:04\ntags: Hexo\n---\n\n## Hexo手册\n\n### 1.启动本地调试服务器\n\n```objective-c\nhexo server\n```\n\n### 2.新建文章\n\n```objective-c\nhexo new '文章标题'\n```\n\n### 3. 静态文件生成\n\n```objective-c\nhexo generate\n```\n\n### 4. 文章发布\n\n```objective-c\nhexo deploy\n```\n\n\n\n<!---more--->\n\n### 5.图片放置\n\n将用的图片放置到 “文章标题”/  文件夹下面\n\n使用的时候\n\n```\n![](文章标题/图片.jpg)\n```\n\n","slug":"Hexo使用手册","published":1,"updated":"2019-09-19T03:44:49.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yvw0005hx5lsb2wggu7","content":"<h2 id=\"Hexo手册\"><a href=\"#Hexo手册\" class=\"headerlink\" title=\"Hexo手册\"></a>Hexo手册</h2><h3 id=\"1-启动本地调试服务器\"><a href=\"#1-启动本地调试服务器\" class=\"headerlink\" title=\"1.启动本地调试服务器\"></a>1.启动本地调试服务器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<h3 id=\"2-新建文章\"><a href=\"#2-新建文章\" class=\"headerlink\" title=\"2.新建文章\"></a>2.新建文章</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &apos;文章标题&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"3-静态文件生成\"><a href=\"#3-静态文件生成\" class=\"headerlink\" title=\"3. 静态文件生成\"></a>3. 静态文件生成</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<h3 id=\"4-文章发布\"><a href=\"#4-文章发布\" class=\"headerlink\" title=\"4. 文章发布\"></a>4. 文章发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"5-图片放置\"><a href=\"#5-图片放置\" class=\"headerlink\" title=\"5.图片放置\"></a>5.图片放置</h3><p>将用的图片放置到 “文章标题”/  文件夹下面</p>\n<p>使用的时候</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![](文章标题/图片.jpg)</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"Hexo手册\"><a href=\"#Hexo手册\" class=\"headerlink\" title=\"Hexo手册\"></a>Hexo手册</h2><h3 id=\"1-启动本地调试服务器\"><a href=\"#1-启动本地调试服务器\" class=\"headerlink\" title=\"1.启动本地调试服务器\"></a>1.启动本地调试服务器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<h3 id=\"2-新建文章\"><a href=\"#2-新建文章\" class=\"headerlink\" title=\"2.新建文章\"></a>2.新建文章</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &apos;文章标题&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"3-静态文件生成\"><a href=\"#3-静态文件生成\" class=\"headerlink\" title=\"3. 静态文件生成\"></a>3. 静态文件生成</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<h3 id=\"4-文章发布\"><a href=\"#4-文章发布\" class=\"headerlink\" title=\"4. 文章发布\"></a>4. 文章发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>","more":"<h3 id=\"5-图片放置\"><a href=\"#5-图片放置\" class=\"headerlink\" title=\"5.图片放置\"></a>5.图片放置</h3><p>将用的图片放置到 “文章标题”/  文件夹下面</p>\n<p>使用的时候</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![](文章标题/图片.jpg)</div></pre></td></tr></table></figure>"},{"title":"SDWebImage学习笔记（三）","date":"2017-01-16T03:41:33.000Z","_content":"上一小节研究了SDWebImageView里面的缓存实现原理，在这一小节我们继续研究SDWebImage对缓存和下载整体功能的封装。也就是-SDWebImageManager管理类。\n<!--more-->\n\n# 组装\nSDWebImageManager使用了组装的设计模式，通过内部包含SDWebImageCache和SDWebImageDownloader的成员变量来实现下载和缓存的功能。\n```objc\n@interface SDWebImageManager : NSObject\n@property (strong, nonatomic, readonly, nullable) SDImageCache *imageCache;\n@property (strong, nonatomic, readonly, nullable) SDWebImageDownloader *imageDownloader;\n```\n接入，下载和缓存对象可以由初始化的时候外部传入，但是官方建议的还是在SDWebImageManager初始化的时候进行初始化。\n```objc\n+ (nonnull instancetype)sharedManager {\n    static dispatch_once_t once;\n    static id instance;\n    dispatch_once(&once, ^{\n        instance = [self new];\n    });\n    return instance;\n}\n\n- (nonnull instancetype)init {\n    SDImageCache *cache = [SDImageCache sharedImageCache];\n    SDWebImageDownloader *downloader = [SDWebImageDownloader sharedDownloader];\n    return [self initWithCache:cache downloader:downloader];\n}\n\n- (nonnull instancetype)initWithCache:(nonnull SDImageCache *)cache downloader:(nonnull SDWebImageDownloader *)downloader {\n    if ((self = [super init])) {\n        _imageCache = cache;\n        _imageDownloader = downloader;\n        _failedURLs = [NSMutableSet new];\n        _runningOperations = [NSMutableArray new];\n    }\n    return self;\n}\n```\n\n# 代理\nSDWebImageManager使用了代理的设计模式，给使用者提供一个可以过滤下载URL和对下载后的图片进行转码的一个外部接口，代码如下：\n```objc\n@protocol SDWebImageManagerDelegate <NSObject>\n\n@optional\n\n/**\n * 控制图片是否允许被下载，当这个图片在缓存中没找到时候\n *\n * @param imageManager 图片管理器\n * @param imageURL     要下载的图片URL\n *\n * @return 返回NO，当缓存没有命中的时候，阻止图片下载。如果没实现，默认是YES\n * \n */\n- (BOOL)imageManager:(nonnull SDWebImageManager *)imageManager shouldDownloadImageForURL:(nullable NSURL *)imageURL;\n\n/**\n * 允许转变图片，当图片被从网上下载下来，但是还没有缓存到磁盘和内存中之前。\n * NOTE: 这个方法是在全局的队列中调用的。以防对主线程造成阻塞\n *\n * @param imageManager The current `SDWebImageManager`\n * @param image        The image to transform\n * @param imageURL     The url of the image to transform\n *\n * @return The transformed image object.\n */\n- (nullable UIImage *)imageManager:(nonnull SDWebImageManager *)imageManager transformDownloadedImage:(nullable UIImage *)image withURL:(nullable NSURL *)imageURL;\n\n@end\n```\n\n# 核心API\n## <font color=red>外部唤起下载操作</font>\n SDWebImageManager提供了一个外部传入URL和SDWebImageOptions，而后可以获取下载过程回调，以及下载完成回调的一个核心API，该核心API会返回一个确认SDWebImageOperation协议的对象。\n\n```objc\n- (id <SDWebImageOperation>)loadImageWithURL:(nullable NSURL *)url\n                                     options:(SDWebImageOptions)options\n                                    progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                                   completed:(nullable SDInternalCompletionBlock)completedBlock {\n    // 如果完成回调没有设置，用断言直接打断\n    NSAssert(completedBlock != nil, @\"If you mean to prefetch the image, use -[SDWebImagePrefetcher prefetchURLs] instead\");\n\n    // 如果是误传了NSString类型到NSURl，做容错处理\n    if ([url isKindOfClass:NSString.class]) {\n        url = [NSURL URLWithString:(NSString *)url];\n    }\n\n    // 容错\n    if (![url isKindOfClass:NSURL.class]) {\n        url = nil;\n    }\n\n    // 操作对象\n    __block SDWebImageCombinedOperation *operation = [SDWebImageCombinedOperation new];\n    __weak SDWebImageCombinedOperation *weakOperation = operation;\n\n    // 验证是否是错误的URL\n    BOOL isFailedUrl = NO;\n    if (url) {\n        @synchronized (self.failedURLs) {\n            isFailedUrl = [self.failedURLs containsObject:url];\n        }\n    }\n\n    // 当确认是错误的URL取消操作\n    if (url.absoluteString.length == 0 || (!(options & SDWebImageRetryFailed) && isFailedUrl)) {\n        [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:NSURLErrorDomain code:NSURLErrorFileDoesNotExist userInfo:nil] url:url];\n        return operation;\n    }\n\n    // 如果往下走了，证明是正确的URL，把请求操作保存到数组中\n    @synchronized (self.runningOperations) {\n        [self.runningOperations addObject:operation];\n    }\n    //  获取缓存的key\n    NSString *key = [self cacheKeyForURL:url];\n\n    // 使用内部创建的图片缓存类，创建缓存操作\n    operation.cacheOperation = [self.imageCache queryCacheOperationForKey:key done:^(UIImage *cachedImage, NSData *cachedData, SDImageCacheType cacheType) {\n        // 操作被取消，将operation从内部的数组中移除，block终止\n        if (operation.isCancelled) {\n            [self safelyRemoveOperationFromRunning:operation];\n            return;\n        }\n        // 处理不存在缓存图片或有缓存但是需要重新刷新的情况\n        if ((!cachedImage || options & SDWebImageRefreshCached) && (![self.delegate respondsToSelector:@selector(imageManager:shouldDownloadImageForURL:)] || [self.delegate imageManager:self shouldDownloadImageForURL:url])) {\n            if (cachedImage && options & SDWebImageRefreshCached) {\n                \n                // 如果图片在缓存中，但是选项要求重新下，那么直接调用重新下\n                [self callCompletionBlockForOperation:weakOperation completion:completedBlock image:cachedImage data:cachedData error:nil cacheType:cacheType finished:YES url:url];\n            }\n\n            // 如果没有缓存图片，那就踏踏实实下载吧，先设置下载选项\n            SDWebImageDownloaderOptions downloaderOptions = 0;\n            if (options & SDWebImageLowPriority) downloaderOptions |= SDWebImageDownloaderLowPriority;\n            if (options & SDWebImageProgressiveDownload) downloaderOptions |= SDWebImageDownloaderProgressiveDownload;\n            if (options & SDWebImageRefreshCached) downloaderOptions |= SDWebImageDownloaderUseNSURLCache;\n            if (options & SDWebImageContinueInBackground) downloaderOptions |= SDWebImageDownloaderContinueInBackground;\n            if (options & SDWebImageHandleCookies) downloaderOptions |= SDWebImageDownloaderHandleCookies;\n            if (options & SDWebImageAllowInvalidSSLCertificates) downloaderOptions |= SDWebImageDownloaderAllowInvalidSSLCertificates;\n            if (options & SDWebImageHighPriority) downloaderOptions |= SDWebImageDownloaderHighPriority;\n            if (options & SDWebImageScaleDownLargeImages) downloaderOptions |= SDWebImageDownloaderScaleDownLargeImages;\n            \n            // 如果有缓存图片且是要求强制刷新的情况，那就强制刷新\n            if (cachedImage && options & SDWebImageRefreshCached) {\n                // force progressive off if image already cached but forced refreshing\n                downloaderOptions &= ~SDWebImageDownloaderProgressiveDownload;\n                // ignore image read from NSURLCache if image if cached but force refreshing\n                downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;\n            }\n            \n            // 下载引擎执行下载操作\n            SDWebImageDownloadToken *subOperationToken = [self.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(UIImage *downloadedImage, NSData *downloadedData, NSError *error, BOOL finished) {\n                __strong __typeof(weakOperation) strongOperation = weakOperation;\n                if (!strongOperation || strongOperation.isCancelled) {\n                    // Do nothing if the operation was cancelled\n                    // See #699 for more details\n                    // if we would call the completedBlock, there could be a race condition between this block and another completedBlock for the same object, so if this one is called second, we will overwrite the new data\n                } else if (error) {\n                    // 下载错误了，进行错误回调，并将错误的url存到错误url数组中\n                    [self callCompletionBlockForOperation:strongOperation completion:completedBlock error:error url:url];\n\n                    if (   error.code != NSURLErrorNotConnectedToInternet\n                        && error.code != NSURLErrorCancelled\n                        && error.code != NSURLErrorTimedOut\n                        && error.code != NSURLErrorInternationalRoamingOff\n                        && error.code != NSURLErrorDataNotAllowed\n                        && error.code != NSURLErrorCannotFindHost\n                        && error.code != NSURLErrorCannotConnectToHost) {\n                        @synchronized (self.failedURLs) {\n                            [self.failedURLs addObject:url];\n                        }\n                    }\n                }\n                else {\n                    // 如果选项是下载错误继续下，将错误url从错误数组中移除\n                    if ((options & SDWebImageRetryFailed)) {\n                        @synchronized (self.failedURLs) {\n                            [self.failedURLs removeObject:url];\n                        }\n                    }\n                    \n                    // 获取缓存设置\n                    BOOL cacheOnDisk = !(options & SDWebImageCacheMemoryOnly);\n\n                    if (options & SDWebImageRefreshCached && cachedImage && !downloadedImage) {\n                        // Image refresh hit the NSURLCache cache, do not call the completion block\n                    } else if (downloadedImage && (!downloadedImage.images || (options & SDWebImageTransformAnimatedImage)) && [self.delegate respondsToSelector:@selector(imageManager:transformDownloadedImage:withURL:)]) {\n                        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{\n                            UIImage *transformedImage = [self.delegate imageManager:self transformDownloadedImage:downloadedImage withURL:url];\n\n                            if (transformedImage && finished) {\n                                BOOL imageWasTransformed = ![transformedImage isEqual:downloadedImage];\n                                // pass nil if the image was transformed, so we can recalculate the data from the image\n                                [self.imageCache storeImage:transformedImage imageData:(imageWasTransformed ? nil : downloadedData) forKey:key toDisk:cacheOnDisk completion:nil];\n                            }\n                            \n                            [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:transformedImage data:downloadedData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url];\n                        });\n                    } else {\n                        if (downloadedImage && finished) {\n                            [self.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:nil];\n                        }\n                        [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url];\n                    }\n                }\n\n                if (finished) {\n                    [self safelyRemoveOperationFromRunning:strongOperation];\n                }\n            }];\n            operation.cancelBlock = ^{\n                [self.imageDownloader cancel:subOperationToken];\n                __strong __typeof(weakOperation) strongOperation = weakOperation;\n                [self safelyRemoveOperationFromRunning:strongOperation];\n            };\n        } else if (cachedImage) {\n            __strong __typeof(weakOperation) strongOperation = weakOperation;\n            [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:cachedImage data:cachedData error:nil cacheType:cacheType finished:YES url:url];\n            [self safelyRemoveOperationFromRunning:operation];\n        } else {\n            // Image not in cache and download disallowed by delegate\n            __strong __typeof(weakOperation) strongOperation = weakOperation;\n            [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:nil data:nil error:nil cacheType:SDImageCacheTypeNone finished:YES url:url];\n            [self safelyRemoveOperationFromRunning:operation];\n        }\n    }];\n\n    return operation;\n}\n```\n## 取消所有请求\n将正在运行的操作全部执行取消操作，并将操作从执行数组中移除\n```objc\n- (void)cancelAll {\n    // 注意要加锁\n    @synchronized (self.runningOperations) {\n        NSArray<SDWebImageCombinedOperation *> *copiedOperations = [self.runningOperations copy];\n        [copiedOperations makeObjectsPerformSelector:@selector(cancel)];\n        [self.runningOperations removeObjectsInArray:copiedOperations];\n    }\n}\n```\n## 检测是否在运行\n辅助方法，检测是否有请求在运行中\n```objc\n- (BOOL)isRunning {\n    BOOL isRunning = NO;\n    @synchronized (self.runningOperations) {\n        isRunning = (self.runningOperations.count > 0);\n    }\n    return isRunning;\n}\n```\n## 缓存某URL对应的图片到缓存\n使用内部的ImageCache将图片进行缓存到磁盘\n```objc\n- (void)saveImageToCache:(nullable UIImage *)image forURL:(nullable NSURL *)url {\n    if (image && url) {\n        NSString *key = [self cacheKeyForURL:url];\n        [self.imageCache storeImage:image forKey:key toDisk:YES completion:nil];\n    }\n}\n```\n## 异步检测内存中/磁盘中是否有图片\n* 检测内存中是否有缓存\n```objc\n- (void)cachedImageExistsForURL:(nullable NSURL *)url\n                     completion:(nullable SDWebImageCheckCacheCompletionBlock)completionBlock {\n    NSString *key = [self cacheKeyForURL:url];\n    \n    BOOL isInMemoryCache = ([self.imageCache imageFromMemoryCacheForKey:key] != nil);\n    \n    if (isInMemoryCache) {\n        // making sure we call the completion block on the main queue\n        dispatch_async(dispatch_get_main_queue(), ^{\n            if (completionBlock) {\n                completionBlock(YES);\n            }\n        });\n        return;\n    }\n    \n    [self.imageCache diskImageExistsWithKey:key completion:^(BOOL isInDiskCache) {\n        // the completion block of checkDiskCacheForImageWithKey:completion: is always called on the main queue, no need to further dispatch\n        if (completionBlock) {\n            completionBlock(isInDiskCache);\n        }\n    }];\n}\n```\n* 检测磁盘中是否有图片\n```objc\n- (void)diskImageExistsForURL:(nullable NSURL *)url\n                   completion:(nullable SDWebImageCheckCacheCompletionBlock)completionBlock {\n    NSString *key = [self cacheKeyForURL:url];\n    \n    [self.imageCache diskImageExistsWithKey:key completion:^(BOOL isInDiskCache) {\n        // the completion block of checkDiskCacheForImageWithKey:completion: is always called on the main queue, no need to further dispatch\n        if (completionBlock) {\n            completionBlock(isInDiskCache);\n        }\n    }];\n}\n```\n## 获取某个URL对应的缓存key\n辅助方法，获取url对应的图片key,允许用户对URL进行筛选\n```objc\n- (nullable NSString *)cacheKeyForURL:(nullable NSURL *)url {\n    if (!url) {\n        return @\"\";\n    }\n\n    if (self.cacheKeyFilter) {\n        return self.cacheKeyFilter(url);\n    } else {\n        return url.absoluteString;\n    }\n}\n```\n\n#  小结\nSDWebImageManager 相对还是比较简单，因为内部已经有下载和缓存类的实现了，下载图片时，先判断缓存的情况，如果缓存中有，进行缓存获取的回调，如果没有或者强制要求刷新的话，就会执行下载操作。期间把操作要进行保存到运行数组中，这样的话，如果有取消，也可以拿到对象进行取消操作。\n\n下一小节，研究下，三方库如果进行进一步的封装，然后可以供用户方便的使用？而不用关注内部的实现细节！\n\n\n\n\n\n","source":"_posts/SDWebImage学习笔记（三）.md","raw":"---\ntitle: SDWebImage学习笔记（三）\ndate: 2017-01-16 11:41:33\ntags: 三方库研究\n---\n上一小节研究了SDWebImageView里面的缓存实现原理，在这一小节我们继续研究SDWebImage对缓存和下载整体功能的封装。也就是-SDWebImageManager管理类。\n<!--more-->\n\n# 组装\nSDWebImageManager使用了组装的设计模式，通过内部包含SDWebImageCache和SDWebImageDownloader的成员变量来实现下载和缓存的功能。\n```objc\n@interface SDWebImageManager : NSObject\n@property (strong, nonatomic, readonly, nullable) SDImageCache *imageCache;\n@property (strong, nonatomic, readonly, nullable) SDWebImageDownloader *imageDownloader;\n```\n接入，下载和缓存对象可以由初始化的时候外部传入，但是官方建议的还是在SDWebImageManager初始化的时候进行初始化。\n```objc\n+ (nonnull instancetype)sharedManager {\n    static dispatch_once_t once;\n    static id instance;\n    dispatch_once(&once, ^{\n        instance = [self new];\n    });\n    return instance;\n}\n\n- (nonnull instancetype)init {\n    SDImageCache *cache = [SDImageCache sharedImageCache];\n    SDWebImageDownloader *downloader = [SDWebImageDownloader sharedDownloader];\n    return [self initWithCache:cache downloader:downloader];\n}\n\n- (nonnull instancetype)initWithCache:(nonnull SDImageCache *)cache downloader:(nonnull SDWebImageDownloader *)downloader {\n    if ((self = [super init])) {\n        _imageCache = cache;\n        _imageDownloader = downloader;\n        _failedURLs = [NSMutableSet new];\n        _runningOperations = [NSMutableArray new];\n    }\n    return self;\n}\n```\n\n# 代理\nSDWebImageManager使用了代理的设计模式，给使用者提供一个可以过滤下载URL和对下载后的图片进行转码的一个外部接口，代码如下：\n```objc\n@protocol SDWebImageManagerDelegate <NSObject>\n\n@optional\n\n/**\n * 控制图片是否允许被下载，当这个图片在缓存中没找到时候\n *\n * @param imageManager 图片管理器\n * @param imageURL     要下载的图片URL\n *\n * @return 返回NO，当缓存没有命中的时候，阻止图片下载。如果没实现，默认是YES\n * \n */\n- (BOOL)imageManager:(nonnull SDWebImageManager *)imageManager shouldDownloadImageForURL:(nullable NSURL *)imageURL;\n\n/**\n * 允许转变图片，当图片被从网上下载下来，但是还没有缓存到磁盘和内存中之前。\n * NOTE: 这个方法是在全局的队列中调用的。以防对主线程造成阻塞\n *\n * @param imageManager The current `SDWebImageManager`\n * @param image        The image to transform\n * @param imageURL     The url of the image to transform\n *\n * @return The transformed image object.\n */\n- (nullable UIImage *)imageManager:(nonnull SDWebImageManager *)imageManager transformDownloadedImage:(nullable UIImage *)image withURL:(nullable NSURL *)imageURL;\n\n@end\n```\n\n# 核心API\n## <font color=red>外部唤起下载操作</font>\n SDWebImageManager提供了一个外部传入URL和SDWebImageOptions，而后可以获取下载过程回调，以及下载完成回调的一个核心API，该核心API会返回一个确认SDWebImageOperation协议的对象。\n\n```objc\n- (id <SDWebImageOperation>)loadImageWithURL:(nullable NSURL *)url\n                                     options:(SDWebImageOptions)options\n                                    progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                                   completed:(nullable SDInternalCompletionBlock)completedBlock {\n    // 如果完成回调没有设置，用断言直接打断\n    NSAssert(completedBlock != nil, @\"If you mean to prefetch the image, use -[SDWebImagePrefetcher prefetchURLs] instead\");\n\n    // 如果是误传了NSString类型到NSURl，做容错处理\n    if ([url isKindOfClass:NSString.class]) {\n        url = [NSURL URLWithString:(NSString *)url];\n    }\n\n    // 容错\n    if (![url isKindOfClass:NSURL.class]) {\n        url = nil;\n    }\n\n    // 操作对象\n    __block SDWebImageCombinedOperation *operation = [SDWebImageCombinedOperation new];\n    __weak SDWebImageCombinedOperation *weakOperation = operation;\n\n    // 验证是否是错误的URL\n    BOOL isFailedUrl = NO;\n    if (url) {\n        @synchronized (self.failedURLs) {\n            isFailedUrl = [self.failedURLs containsObject:url];\n        }\n    }\n\n    // 当确认是错误的URL取消操作\n    if (url.absoluteString.length == 0 || (!(options & SDWebImageRetryFailed) && isFailedUrl)) {\n        [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:NSURLErrorDomain code:NSURLErrorFileDoesNotExist userInfo:nil] url:url];\n        return operation;\n    }\n\n    // 如果往下走了，证明是正确的URL，把请求操作保存到数组中\n    @synchronized (self.runningOperations) {\n        [self.runningOperations addObject:operation];\n    }\n    //  获取缓存的key\n    NSString *key = [self cacheKeyForURL:url];\n\n    // 使用内部创建的图片缓存类，创建缓存操作\n    operation.cacheOperation = [self.imageCache queryCacheOperationForKey:key done:^(UIImage *cachedImage, NSData *cachedData, SDImageCacheType cacheType) {\n        // 操作被取消，将operation从内部的数组中移除，block终止\n        if (operation.isCancelled) {\n            [self safelyRemoveOperationFromRunning:operation];\n            return;\n        }\n        // 处理不存在缓存图片或有缓存但是需要重新刷新的情况\n        if ((!cachedImage || options & SDWebImageRefreshCached) && (![self.delegate respondsToSelector:@selector(imageManager:shouldDownloadImageForURL:)] || [self.delegate imageManager:self shouldDownloadImageForURL:url])) {\n            if (cachedImage && options & SDWebImageRefreshCached) {\n                \n                // 如果图片在缓存中，但是选项要求重新下，那么直接调用重新下\n                [self callCompletionBlockForOperation:weakOperation completion:completedBlock image:cachedImage data:cachedData error:nil cacheType:cacheType finished:YES url:url];\n            }\n\n            // 如果没有缓存图片，那就踏踏实实下载吧，先设置下载选项\n            SDWebImageDownloaderOptions downloaderOptions = 0;\n            if (options & SDWebImageLowPriority) downloaderOptions |= SDWebImageDownloaderLowPriority;\n            if (options & SDWebImageProgressiveDownload) downloaderOptions |= SDWebImageDownloaderProgressiveDownload;\n            if (options & SDWebImageRefreshCached) downloaderOptions |= SDWebImageDownloaderUseNSURLCache;\n            if (options & SDWebImageContinueInBackground) downloaderOptions |= SDWebImageDownloaderContinueInBackground;\n            if (options & SDWebImageHandleCookies) downloaderOptions |= SDWebImageDownloaderHandleCookies;\n            if (options & SDWebImageAllowInvalidSSLCertificates) downloaderOptions |= SDWebImageDownloaderAllowInvalidSSLCertificates;\n            if (options & SDWebImageHighPriority) downloaderOptions |= SDWebImageDownloaderHighPriority;\n            if (options & SDWebImageScaleDownLargeImages) downloaderOptions |= SDWebImageDownloaderScaleDownLargeImages;\n            \n            // 如果有缓存图片且是要求强制刷新的情况，那就强制刷新\n            if (cachedImage && options & SDWebImageRefreshCached) {\n                // force progressive off if image already cached but forced refreshing\n                downloaderOptions &= ~SDWebImageDownloaderProgressiveDownload;\n                // ignore image read from NSURLCache if image if cached but force refreshing\n                downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;\n            }\n            \n            // 下载引擎执行下载操作\n            SDWebImageDownloadToken *subOperationToken = [self.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(UIImage *downloadedImage, NSData *downloadedData, NSError *error, BOOL finished) {\n                __strong __typeof(weakOperation) strongOperation = weakOperation;\n                if (!strongOperation || strongOperation.isCancelled) {\n                    // Do nothing if the operation was cancelled\n                    // See #699 for more details\n                    // if we would call the completedBlock, there could be a race condition between this block and another completedBlock for the same object, so if this one is called second, we will overwrite the new data\n                } else if (error) {\n                    // 下载错误了，进行错误回调，并将错误的url存到错误url数组中\n                    [self callCompletionBlockForOperation:strongOperation completion:completedBlock error:error url:url];\n\n                    if (   error.code != NSURLErrorNotConnectedToInternet\n                        && error.code != NSURLErrorCancelled\n                        && error.code != NSURLErrorTimedOut\n                        && error.code != NSURLErrorInternationalRoamingOff\n                        && error.code != NSURLErrorDataNotAllowed\n                        && error.code != NSURLErrorCannotFindHost\n                        && error.code != NSURLErrorCannotConnectToHost) {\n                        @synchronized (self.failedURLs) {\n                            [self.failedURLs addObject:url];\n                        }\n                    }\n                }\n                else {\n                    // 如果选项是下载错误继续下，将错误url从错误数组中移除\n                    if ((options & SDWebImageRetryFailed)) {\n                        @synchronized (self.failedURLs) {\n                            [self.failedURLs removeObject:url];\n                        }\n                    }\n                    \n                    // 获取缓存设置\n                    BOOL cacheOnDisk = !(options & SDWebImageCacheMemoryOnly);\n\n                    if (options & SDWebImageRefreshCached && cachedImage && !downloadedImage) {\n                        // Image refresh hit the NSURLCache cache, do not call the completion block\n                    } else if (downloadedImage && (!downloadedImage.images || (options & SDWebImageTransformAnimatedImage)) && [self.delegate respondsToSelector:@selector(imageManager:transformDownloadedImage:withURL:)]) {\n                        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{\n                            UIImage *transformedImage = [self.delegate imageManager:self transformDownloadedImage:downloadedImage withURL:url];\n\n                            if (transformedImage && finished) {\n                                BOOL imageWasTransformed = ![transformedImage isEqual:downloadedImage];\n                                // pass nil if the image was transformed, so we can recalculate the data from the image\n                                [self.imageCache storeImage:transformedImage imageData:(imageWasTransformed ? nil : downloadedData) forKey:key toDisk:cacheOnDisk completion:nil];\n                            }\n                            \n                            [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:transformedImage data:downloadedData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url];\n                        });\n                    } else {\n                        if (downloadedImage && finished) {\n                            [self.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:nil];\n                        }\n                        [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url];\n                    }\n                }\n\n                if (finished) {\n                    [self safelyRemoveOperationFromRunning:strongOperation];\n                }\n            }];\n            operation.cancelBlock = ^{\n                [self.imageDownloader cancel:subOperationToken];\n                __strong __typeof(weakOperation) strongOperation = weakOperation;\n                [self safelyRemoveOperationFromRunning:strongOperation];\n            };\n        } else if (cachedImage) {\n            __strong __typeof(weakOperation) strongOperation = weakOperation;\n            [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:cachedImage data:cachedData error:nil cacheType:cacheType finished:YES url:url];\n            [self safelyRemoveOperationFromRunning:operation];\n        } else {\n            // Image not in cache and download disallowed by delegate\n            __strong __typeof(weakOperation) strongOperation = weakOperation;\n            [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:nil data:nil error:nil cacheType:SDImageCacheTypeNone finished:YES url:url];\n            [self safelyRemoveOperationFromRunning:operation];\n        }\n    }];\n\n    return operation;\n}\n```\n## 取消所有请求\n将正在运行的操作全部执行取消操作，并将操作从执行数组中移除\n```objc\n- (void)cancelAll {\n    // 注意要加锁\n    @synchronized (self.runningOperations) {\n        NSArray<SDWebImageCombinedOperation *> *copiedOperations = [self.runningOperations copy];\n        [copiedOperations makeObjectsPerformSelector:@selector(cancel)];\n        [self.runningOperations removeObjectsInArray:copiedOperations];\n    }\n}\n```\n## 检测是否在运行\n辅助方法，检测是否有请求在运行中\n```objc\n- (BOOL)isRunning {\n    BOOL isRunning = NO;\n    @synchronized (self.runningOperations) {\n        isRunning = (self.runningOperations.count > 0);\n    }\n    return isRunning;\n}\n```\n## 缓存某URL对应的图片到缓存\n使用内部的ImageCache将图片进行缓存到磁盘\n```objc\n- (void)saveImageToCache:(nullable UIImage *)image forURL:(nullable NSURL *)url {\n    if (image && url) {\n        NSString *key = [self cacheKeyForURL:url];\n        [self.imageCache storeImage:image forKey:key toDisk:YES completion:nil];\n    }\n}\n```\n## 异步检测内存中/磁盘中是否有图片\n* 检测内存中是否有缓存\n```objc\n- (void)cachedImageExistsForURL:(nullable NSURL *)url\n                     completion:(nullable SDWebImageCheckCacheCompletionBlock)completionBlock {\n    NSString *key = [self cacheKeyForURL:url];\n    \n    BOOL isInMemoryCache = ([self.imageCache imageFromMemoryCacheForKey:key] != nil);\n    \n    if (isInMemoryCache) {\n        // making sure we call the completion block on the main queue\n        dispatch_async(dispatch_get_main_queue(), ^{\n            if (completionBlock) {\n                completionBlock(YES);\n            }\n        });\n        return;\n    }\n    \n    [self.imageCache diskImageExistsWithKey:key completion:^(BOOL isInDiskCache) {\n        // the completion block of checkDiskCacheForImageWithKey:completion: is always called on the main queue, no need to further dispatch\n        if (completionBlock) {\n            completionBlock(isInDiskCache);\n        }\n    }];\n}\n```\n* 检测磁盘中是否有图片\n```objc\n- (void)diskImageExistsForURL:(nullable NSURL *)url\n                   completion:(nullable SDWebImageCheckCacheCompletionBlock)completionBlock {\n    NSString *key = [self cacheKeyForURL:url];\n    \n    [self.imageCache diskImageExistsWithKey:key completion:^(BOOL isInDiskCache) {\n        // the completion block of checkDiskCacheForImageWithKey:completion: is always called on the main queue, no need to further dispatch\n        if (completionBlock) {\n            completionBlock(isInDiskCache);\n        }\n    }];\n}\n```\n## 获取某个URL对应的缓存key\n辅助方法，获取url对应的图片key,允许用户对URL进行筛选\n```objc\n- (nullable NSString *)cacheKeyForURL:(nullable NSURL *)url {\n    if (!url) {\n        return @\"\";\n    }\n\n    if (self.cacheKeyFilter) {\n        return self.cacheKeyFilter(url);\n    } else {\n        return url.absoluteString;\n    }\n}\n```\n\n#  小结\nSDWebImageManager 相对还是比较简单，因为内部已经有下载和缓存类的实现了，下载图片时，先判断缓存的情况，如果缓存中有，进行缓存获取的回调，如果没有或者强制要求刷新的话，就会执行下载操作。期间把操作要进行保存到运行数组中，这样的话，如果有取消，也可以拿到对象进行取消操作。\n\n下一小节，研究下，三方库如果进行进一步的封装，然后可以供用户方便的使用？而不用关注内部的实现细节！\n\n\n\n\n\n","slug":"SDWebImage学习笔记（三）","published":1,"updated":"2017-01-20T15:28:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yvz0006hx5ln51vdw6i","content":"<p>上一小节研究了SDWebImageView里面的缓存实现原理，在这一小节我们继续研究SDWebImage对缓存和下载整体功能的封装。也就是-SDWebImageManager管理类。<br><a id=\"more\"></a></p>\n<h1 id=\"组装\"><a href=\"#组装\" class=\"headerlink\" title=\"组装\"></a>组装</h1><p>SDWebImageManager使用了组装的设计模式，通过内部包含SDWebImageCache和SDWebImageDownloader的成员变量来实现下载和缓存的功能。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">SDWebImageManager</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>, <span class=\"keyword\">nullable</span>) SDImageCache *imageCache;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>, <span class=\"keyword\">nullable</span>) SDWebImageDownloader *imageDownloader;</div></pre></td></tr></table></figure></p>\n<p>接入，下载和缓存对象可以由初始化的时候外部传入，但是官方建议的还是在SDWebImageManager初始化的时候进行初始化。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)sharedManager &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> once;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">id</span> instance;</div><div class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;once, ^&#123;</div><div class=\"line\">        instance = [<span class=\"keyword\">self</span> new];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)init &#123;</div><div class=\"line\">    SDImageCache *cache = [SDImageCache sharedImageCache];</div><div class=\"line\">    SDWebImageDownloader *downloader = [SDWebImageDownloader sharedDownloader];</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> initWithCache:cache downloader:downloader];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithCache:(<span class=\"keyword\">nonnull</span> SDImageCache *)cache downloader:(<span class=\"keyword\">nonnull</span> SDWebImageDownloader *)downloader &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init])) &#123;</div><div class=\"line\">        _imageCache = cache;</div><div class=\"line\">        _imageDownloader = downloader;</div><div class=\"line\">        _failedURLs = [<span class=\"built_in\">NSMutableSet</span> new];</div><div class=\"line\">        _runningOperations = [<span class=\"built_in\">NSMutableArray</span> new];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h1><p>SDWebImageManager使用了代理的设计模式，给使用者提供一个可以过滤下载URL和对下载后的图片进行转码的一个外部接口，代码如下：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">SDWebImageManagerDelegate</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@optional</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 控制图片是否允许被下载，当这个图片在缓存中没找到时候</div><div class=\"line\"> *</div><div class=\"line\"> * @param imageManager 图片管理器</div><div class=\"line\"> * @param imageURL     要下载的图片URL</div><div class=\"line\"> *</div><div class=\"line\"> * @return 返回NO，当缓存没有命中的时候，阻止图片下载。如果没实现，默认是YES</div><div class=\"line\"> * </div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)imageManager:(<span class=\"keyword\">nonnull</span> SDWebImageManager *)imageManager shouldDownloadImageForURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)imageURL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 允许转变图片，当图片被从网上下载下来，但是还没有缓存到磁盘和内存中之前。</div><div class=\"line\"> * <span class=\"doctag\">NOTE:</span> 这个方法是在全局的队列中调用的。以防对主线程造成阻塞</div><div class=\"line\"> *</div><div class=\"line\"> * @param imageManager The current `SDWebImageManager`</div><div class=\"line\"> * @param image        The image to transform</div><div class=\"line\"> * @param imageURL     The url of the image to transform</div><div class=\"line\"> *</div><div class=\"line\"> * @return The transformed image object.</div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)imageManager:(<span class=\"keyword\">nonnull</span> SDWebImageManager *)imageManager transformDownloadedImage:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image withURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)imageURL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"核心API\"><a href=\"#核心API\" class=\"headerlink\" title=\"核心API\"></a>核心API</h1><h2 id=\"外部唤起下载操作\"><a href=\"#外部唤起下载操作\" class=\"headerlink\" title=\"外部唤起下载操作\"></a><font color=\"red\">外部唤起下载操作</font></h2><p> SDWebImageManager提供了一个外部传入URL和SDWebImageOptions，而后可以获取下载过程回调，以及下载完成回调的一个核心API，该核心API会返回一个确认SDWebImageOperation协议的对象。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span> &lt;SDWebImageOperation&gt;)loadImageWithURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url</div><div class=\"line\">                                     options:(SDWebImageOptions)options</div><div class=\"line\">                                    progress:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class=\"line\">                                   completed:(<span class=\"keyword\">nullable</span> SDInternalCompletionBlock)completedBlock &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果完成回调没有设置，用断言直接打断</span></div><div class=\"line\">    <span class=\"built_in\">NSAssert</span>(completedBlock != <span class=\"literal\">nil</span>, <span class=\"string\">@\"If you mean to prefetch the image, use -[SDWebImagePrefetcher prefetchURLs] instead\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果是误传了NSString类型到NSURl，做容错处理</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ([url isKindOfClass:<span class=\"built_in\">NSString</span>.class]) &#123;</div><div class=\"line\">        url = [<span class=\"built_in\">NSURL</span> URLWithString:(<span class=\"built_in\">NSString</span> *)url];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 容错</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (![url isKindOfClass:<span class=\"built_in\">NSURL</span>.class]) &#123;</div><div class=\"line\">        url = <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 操作对象</span></div><div class=\"line\">    __block SDWebImageCombinedOperation *operation = [SDWebImageCombinedOperation new];</div><div class=\"line\">    __<span class=\"keyword\">weak</span> SDWebImageCombinedOperation *weakOperation = operation;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 验证是否是错误的URL</span></div><div class=\"line\">    <span class=\"built_in\">BOOL</span> isFailedUrl = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (url) &#123;</div><div class=\"line\">        <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.failedURLs) &#123;</div><div class=\"line\">            isFailedUrl = [<span class=\"keyword\">self</span>.failedURLs containsObject:url];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 当确认是错误的URL取消操作</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (url.absoluteString.length == <span class=\"number\">0</span> || (!(options &amp; SDWebImageRetryFailed) &amp;&amp; isFailedUrl)) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> callCompletionBlockForOperation:operation completion:completedBlock error:[<span class=\"built_in\">NSError</span> errorWithDomain:<span class=\"built_in\">NSURLErrorDomain</span> code:<span class=\"built_in\">NSURLErrorFileDoesNotExist</span> userInfo:<span class=\"literal\">nil</span>] url:url];</div><div class=\"line\">        <span class=\"keyword\">return</span> operation;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果往下走了，证明是正确的URL，把请求操作保存到数组中</span></div><div class=\"line\">    <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.runningOperations) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.runningOperations addObject:operation];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//  获取缓存的key</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *key = [<span class=\"keyword\">self</span> cacheKeyForURL:url];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用内部创建的图片缓存类，创建缓存操作</span></div><div class=\"line\">    operation.cacheOperation = [<span class=\"keyword\">self</span>.imageCache queryCacheOperationForKey:key done:^(<span class=\"built_in\">UIImage</span> *cachedImage, <span class=\"built_in\">NSData</span> *cachedData, SDImageCacheType cacheType) &#123;</div><div class=\"line\">        <span class=\"comment\">// 操作被取消，将operation从内部的数组中移除，block终止</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (operation.isCancelled) &#123;</div><div class=\"line\">            [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:operation];</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 处理不存在缓存图片或有缓存但是需要重新刷新的情况</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ((!cachedImage || options &amp; SDWebImageRefreshCached) &amp;&amp; (![<span class=\"keyword\">self</span>.delegate respondsToSelector:<span class=\"keyword\">@selector</span>(imageManager:shouldDownloadImageForURL:)] || [<span class=\"keyword\">self</span>.delegate imageManager:<span class=\"keyword\">self</span> shouldDownloadImageForURL:url])) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"comment\">// 如果图片在缓存中，但是选项要求重新下，那么直接调用重新下</span></div><div class=\"line\">                [<span class=\"keyword\">self</span> callCompletionBlockForOperation:weakOperation completion:completedBlock image:cachedImage data:cachedData error:<span class=\"literal\">nil</span> cacheType:cacheType finished:<span class=\"literal\">YES</span> url:url];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 如果没有缓存图片，那就踏踏实实下载吧，先设置下载选项</span></div><div class=\"line\">            SDWebImageDownloaderOptions downloaderOptions = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageLowPriority) downloaderOptions |= SDWebImageDownloaderLowPriority;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageProgressiveDownload) downloaderOptions |= SDWebImageDownloaderProgressiveDownload;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageRefreshCached) downloaderOptions |= SDWebImageDownloaderUseNSURLCache;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageContinueInBackground) downloaderOptions |= SDWebImageDownloaderContinueInBackground;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageHandleCookies) downloaderOptions |= SDWebImageDownloaderHandleCookies;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageAllowInvalidSSLCertificates) downloaderOptions |= SDWebImageDownloaderAllowInvalidSSLCertificates;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageHighPriority) downloaderOptions |= SDWebImageDownloaderHighPriority;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageScaleDownLargeImages) downloaderOptions |= SDWebImageDownloaderScaleDownLargeImages;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// 如果有缓存图片且是要求强制刷新的情况，那就强制刷新</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123;</div><div class=\"line\">                <span class=\"comment\">// force progressive off if image already cached but forced refreshing</span></div><div class=\"line\">                downloaderOptions &amp;= ~SDWebImageDownloaderProgressiveDownload;</div><div class=\"line\">                <span class=\"comment\">// ignore image read from NSURLCache if image if cached but force refreshing</span></div><div class=\"line\">                downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// 下载引擎执行下载操作</span></div><div class=\"line\">            SDWebImageDownloadToken *subOperationToken = [<span class=\"keyword\">self</span>.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(<span class=\"built_in\">UIImage</span> *downloadedImage, <span class=\"built_in\">NSData</span> *downloadedData, <span class=\"built_in\">NSError</span> *error, <span class=\"built_in\">BOOL</span> finished) &#123;</div><div class=\"line\">                __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!strongOperation || strongOperation.isCancelled) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Do nothing if the operation was cancelled</span></div><div class=\"line\">                    <span class=\"comment\">// See #699 for more details</span></div><div class=\"line\">                    <span class=\"comment\">// if we would call the completedBlock, there could be a race condition between this block and another completedBlock for the same object, so if this one is called second, we will overwrite the new data</span></div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 下载错误了，进行错误回调，并将错误的url存到错误url数组中</span></div><div class=\"line\">                    [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock error:error url:url];</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (   error.code != <span class=\"built_in\">NSURLErrorNotConnectedToInternet</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorCancelled</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorTimedOut</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorInternationalRoamingOff</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorDataNotAllowed</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorCannotFindHost</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorCannotConnectToHost</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.failedURLs) &#123;</div><div class=\"line\">                            [<span class=\"keyword\">self</span>.failedURLs addObject:url];</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// 如果选项是下载错误继续下，将错误url从错误数组中移除</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> ((options &amp; SDWebImageRetryFailed)) &#123;</div><div class=\"line\">                        <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.failedURLs) &#123;</div><div class=\"line\">                            [<span class=\"keyword\">self</span>.failedURLs removeObject:url];</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    </div><div class=\"line\">                    <span class=\"comment\">// 获取缓存设置</span></div><div class=\"line\">                    <span class=\"built_in\">BOOL</span> cacheOnDisk = !(options &amp; SDWebImageCacheMemoryOnly);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (options &amp; SDWebImageRefreshCached &amp;&amp; cachedImage &amp;&amp; !downloadedImage) &#123;</div><div class=\"line\">                        <span class=\"comment\">// Image refresh hit the NSURLCache cache, do not call the completion block</span></div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (downloadedImage &amp;&amp; (!downloadedImage.images || (options &amp; SDWebImageTransformAnimatedImage)) &amp;&amp; [<span class=\"keyword\">self</span>.delegate respondsToSelector:<span class=\"keyword\">@selector</span>(imageManager:transformDownloadedImage:withURL:)]) &#123;</div><div class=\"line\">                        <span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">                            <span class=\"built_in\">UIImage</span> *transformedImage = [<span class=\"keyword\">self</span>.delegate imageManager:<span class=\"keyword\">self</span> transformDownloadedImage:downloadedImage withURL:url];</div><div class=\"line\"></div><div class=\"line\">                            <span class=\"keyword\">if</span> (transformedImage &amp;&amp; finished) &#123;</div><div class=\"line\">                                <span class=\"built_in\">BOOL</span> imageWasTransformed = ![transformedImage isEqual:downloadedImage];</div><div class=\"line\">                                <span class=\"comment\">// pass nil if the image was transformed, so we can recalculate the data from the image</span></div><div class=\"line\">                                [<span class=\"keyword\">self</span>.imageCache storeImage:transformedImage imageData:(imageWasTransformed ? <span class=\"literal\">nil</span> : downloadedData) forKey:key toDisk:cacheOnDisk completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            </div><div class=\"line\">                            [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:transformedImage data:downloadedData error:<span class=\"literal\">nil</span> cacheType:SDImageCacheTypeNone finished:finished url:url];</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (downloadedImage &amp;&amp; finished) &#123;</div><div class=\"line\">                            [<span class=\"keyword\">self</span>.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:<span class=\"literal\">nil</span> cacheType:SDImageCacheTypeNone finished:finished url:url];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (finished) &#123;</div><div class=\"line\">                    [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:strongOperation];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;];</div><div class=\"line\">            operation.cancelBlock = ^&#123;</div><div class=\"line\">                [<span class=\"keyword\">self</span>.imageDownloader cancel:subOperationToken];</div><div class=\"line\">                __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class=\"line\">                [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:strongOperation];</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cachedImage) &#123;</div><div class=\"line\">            __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class=\"line\">            [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:cachedImage data:cachedData error:<span class=\"literal\">nil</span> cacheType:cacheType finished:<span class=\"literal\">YES</span> url:url];</div><div class=\"line\">            [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:operation];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// Image not in cache and download disallowed by delegate</span></div><div class=\"line\">            __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class=\"line\">            [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:<span class=\"literal\">nil</span> data:<span class=\"literal\">nil</span> error:<span class=\"literal\">nil</span> cacheType:SDImageCacheTypeNone finished:<span class=\"literal\">YES</span> url:url];</div><div class=\"line\">            [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:operation];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> operation;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"取消所有请求\"><a href=\"#取消所有请求\" class=\"headerlink\" title=\"取消所有请求\"></a>取消所有请求</h2><p>将正在运行的操作全部执行取消操作，并将操作从执行数组中移除<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)cancelAll &#123;</div><div class=\"line\">    <span class=\"comment\">// 注意要加锁</span></div><div class=\"line\">    <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.runningOperations) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSArray</span>&lt;SDWebImageCombinedOperation *&gt; *copiedOperations = [<span class=\"keyword\">self</span>.runningOperations <span class=\"keyword\">copy</span>];</div><div class=\"line\">        [copiedOperations makeObjectsPerformSelector:<span class=\"keyword\">@selector</span>(cancel)];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.runningOperations removeObjectsInArray:copiedOperations];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"检测是否在运行\"><a href=\"#检测是否在运行\" class=\"headerlink\" title=\"检测是否在运行\"></a>检测是否在运行</h2><p>辅助方法，检测是否有请求在运行中<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isRunning &#123;</div><div class=\"line\">    <span class=\"built_in\">BOOL</span> isRunning = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.runningOperations) &#123;</div><div class=\"line\">        isRunning = (<span class=\"keyword\">self</span>.runningOperations.count &gt; <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> isRunning;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"缓存某URL对应的图片到缓存\"><a href=\"#缓存某URL对应的图片到缓存\" class=\"headerlink\" title=\"缓存某URL对应的图片到缓存\"></a>缓存某URL对应的图片到缓存</h2><p>使用内部的ImageCache将图片进行缓存到磁盘<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)saveImageToCache:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image forURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (image &amp;&amp; url) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *key = [<span class=\"keyword\">self</span> cacheKeyForURL:url];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.imageCache storeImage:image forKey:key toDisk:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"异步检测内存中-磁盘中是否有图片\"><a href=\"#异步检测内存中-磁盘中是否有图片\" class=\"headerlink\" title=\"异步检测内存中/磁盘中是否有图片\"></a>异步检测内存中/磁盘中是否有图片</h2><ul>\n<li><p>检测内存中是否有缓存</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)cachedImageExistsForURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url</div><div class=\"line\">                     completion:(<span class=\"keyword\">nullable</span> SDWebImageCheckCacheCompletionBlock)completionBlock &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *key = [<span class=\"keyword\">self</span> cacheKeyForURL:url];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">BOOL</span> isInMemoryCache = ([<span class=\"keyword\">self</span>.imageCache imageFromMemoryCacheForKey:key] != <span class=\"literal\">nil</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (isInMemoryCache) &#123;</div><div class=\"line\">        <span class=\"comment\">// making sure we call the completion block on the main queue</span></div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">                completionBlock(<span class=\"literal\">YES</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.imageCache diskImageExistsWithKey:key completion:^(<span class=\"built_in\">BOOL</span> isInDiskCache) &#123;</div><div class=\"line\">        <span class=\"comment\">// the completion block of checkDiskCacheForImageWithKey:completion: is always called on the main queue, no need to further dispatch</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            completionBlock(isInDiskCache);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>检测磁盘中是否有图片</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)diskImageExistsForURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url</div><div class=\"line\">                   completion:(<span class=\"keyword\">nullable</span> SDWebImageCheckCacheCompletionBlock)completionBlock &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *key = [<span class=\"keyword\">self</span> cacheKeyForURL:url];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.imageCache diskImageExistsWithKey:key completion:^(<span class=\"built_in\">BOOL</span> isInDiskCache) &#123;</div><div class=\"line\">        <span class=\"comment\">// the completion block of checkDiskCacheForImageWithKey:completion: is always called on the main queue, no need to further dispatch</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            completionBlock(isInDiskCache);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"获取某个URL对应的缓存key\"><a href=\"#获取某个URL对应的缓存key\" class=\"headerlink\" title=\"获取某个URL对应的缓存key\"></a>获取某个URL对应的缓存key</h2><p>辅助方法，获取url对应的图片key,允许用户对URL进行筛选<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)cacheKeyForURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!url) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">@\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.cacheKeyFilter) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.cacheKeyFilter(url);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> url.absoluteString;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>SDWebImageManager 相对还是比较简单，因为内部已经有下载和缓存类的实现了，下载图片时，先判断缓存的情况，如果缓存中有，进行缓存获取的回调，如果没有或者强制要求刷新的话，就会执行下载操作。期间把操作要进行保存到运行数组中，这样的话，如果有取消，也可以拿到对象进行取消操作。</p>\n<p>下一小节，研究下，三方库如果进行进一步的封装，然后可以供用户方便的使用？而不用关注内部的实现细节！</p>\n","excerpt":"<p>上一小节研究了SDWebImageView里面的缓存实现原理，在这一小节我们继续研究SDWebImage对缓存和下载整体功能的封装。也就是-SDWebImageManager管理类。<br></p>","more":"<p></p>\n<h1 id=\"组装\"><a href=\"#组装\" class=\"headerlink\" title=\"组装\"></a>组装</h1><p>SDWebImageManager使用了组装的设计模式，通过内部包含SDWebImageCache和SDWebImageDownloader的成员变量来实现下载和缓存的功能。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">SDWebImageManager</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>, <span class=\"keyword\">nullable</span>) SDImageCache *imageCache;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>, <span class=\"keyword\">nullable</span>) SDWebImageDownloader *imageDownloader;</div></pre></td></tr></table></figure></p>\n<p>接入，下载和缓存对象可以由初始化的时候外部传入，但是官方建议的还是在SDWebImageManager初始化的时候进行初始化。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)sharedManager &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> once;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">id</span> instance;</div><div class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;once, ^&#123;</div><div class=\"line\">        instance = [<span class=\"keyword\">self</span> new];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)init &#123;</div><div class=\"line\">    SDImageCache *cache = [SDImageCache sharedImageCache];</div><div class=\"line\">    SDWebImageDownloader *downloader = [SDWebImageDownloader sharedDownloader];</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> initWithCache:cache downloader:downloader];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithCache:(<span class=\"keyword\">nonnull</span> SDImageCache *)cache downloader:(<span class=\"keyword\">nonnull</span> SDWebImageDownloader *)downloader &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init])) &#123;</div><div class=\"line\">        _imageCache = cache;</div><div class=\"line\">        _imageDownloader = downloader;</div><div class=\"line\">        _failedURLs = [<span class=\"built_in\">NSMutableSet</span> new];</div><div class=\"line\">        _runningOperations = [<span class=\"built_in\">NSMutableArray</span> new];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h1><p>SDWebImageManager使用了代理的设计模式，给使用者提供一个可以过滤下载URL和对下载后的图片进行转码的一个外部接口，代码如下：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">SDWebImageManagerDelegate</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@optional</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 控制图片是否允许被下载，当这个图片在缓存中没找到时候</div><div class=\"line\"> *</div><div class=\"line\"> * @param imageManager 图片管理器</div><div class=\"line\"> * @param imageURL     要下载的图片URL</div><div class=\"line\"> *</div><div class=\"line\"> * @return 返回NO，当缓存没有命中的时候，阻止图片下载。如果没实现，默认是YES</div><div class=\"line\"> * </div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)imageManager:(<span class=\"keyword\">nonnull</span> SDWebImageManager *)imageManager shouldDownloadImageForURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)imageURL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 允许转变图片，当图片被从网上下载下来，但是还没有缓存到磁盘和内存中之前。</div><div class=\"line\"> * <span class=\"doctag\">NOTE:</span> 这个方法是在全局的队列中调用的。以防对主线程造成阻塞</div><div class=\"line\"> *</div><div class=\"line\"> * @param imageManager The current `SDWebImageManager`</div><div class=\"line\"> * @param image        The image to transform</div><div class=\"line\"> * @param imageURL     The url of the image to transform</div><div class=\"line\"> *</div><div class=\"line\"> * @return The transformed image object.</div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)imageManager:(<span class=\"keyword\">nonnull</span> SDWebImageManager *)imageManager transformDownloadedImage:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image withURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)imageURL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"核心API\"><a href=\"#核心API\" class=\"headerlink\" title=\"核心API\"></a>核心API</h1><h2 id=\"外部唤起下载操作\"><a href=\"#外部唤起下载操作\" class=\"headerlink\" title=\"外部唤起下载操作\"></a><font color=\"red\">外部唤起下载操作</font></h2><p> SDWebImageManager提供了一个外部传入URL和SDWebImageOptions，而后可以获取下载过程回调，以及下载完成回调的一个核心API，该核心API会返回一个确认SDWebImageOperation协议的对象。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span> &lt;SDWebImageOperation&gt;)loadImageWithURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url</div><div class=\"line\">                                     options:(SDWebImageOptions)options</div><div class=\"line\">                                    progress:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class=\"line\">                                   completed:(<span class=\"keyword\">nullable</span> SDInternalCompletionBlock)completedBlock &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果完成回调没有设置，用断言直接打断</span></div><div class=\"line\">    <span class=\"built_in\">NSAssert</span>(completedBlock != <span class=\"literal\">nil</span>, <span class=\"string\">@\"If you mean to prefetch the image, use -[SDWebImagePrefetcher prefetchURLs] instead\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果是误传了NSString类型到NSURl，做容错处理</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ([url isKindOfClass:<span class=\"built_in\">NSString</span>.class]) &#123;</div><div class=\"line\">        url = [<span class=\"built_in\">NSURL</span> URLWithString:(<span class=\"built_in\">NSString</span> *)url];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 容错</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (![url isKindOfClass:<span class=\"built_in\">NSURL</span>.class]) &#123;</div><div class=\"line\">        url = <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 操作对象</span></div><div class=\"line\">    __block SDWebImageCombinedOperation *operation = [SDWebImageCombinedOperation new];</div><div class=\"line\">    __<span class=\"keyword\">weak</span> SDWebImageCombinedOperation *weakOperation = operation;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 验证是否是错误的URL</span></div><div class=\"line\">    <span class=\"built_in\">BOOL</span> isFailedUrl = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (url) &#123;</div><div class=\"line\">        <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.failedURLs) &#123;</div><div class=\"line\">            isFailedUrl = [<span class=\"keyword\">self</span>.failedURLs containsObject:url];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 当确认是错误的URL取消操作</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (url.absoluteString.length == <span class=\"number\">0</span> || (!(options &amp; SDWebImageRetryFailed) &amp;&amp; isFailedUrl)) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> callCompletionBlockForOperation:operation completion:completedBlock error:[<span class=\"built_in\">NSError</span> errorWithDomain:<span class=\"built_in\">NSURLErrorDomain</span> code:<span class=\"built_in\">NSURLErrorFileDoesNotExist</span> userInfo:<span class=\"literal\">nil</span>] url:url];</div><div class=\"line\">        <span class=\"keyword\">return</span> operation;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果往下走了，证明是正确的URL，把请求操作保存到数组中</span></div><div class=\"line\">    <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.runningOperations) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.runningOperations addObject:operation];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//  获取缓存的key</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *key = [<span class=\"keyword\">self</span> cacheKeyForURL:url];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用内部创建的图片缓存类，创建缓存操作</span></div><div class=\"line\">    operation.cacheOperation = [<span class=\"keyword\">self</span>.imageCache queryCacheOperationForKey:key done:^(<span class=\"built_in\">UIImage</span> *cachedImage, <span class=\"built_in\">NSData</span> *cachedData, SDImageCacheType cacheType) &#123;</div><div class=\"line\">        <span class=\"comment\">// 操作被取消，将operation从内部的数组中移除，block终止</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (operation.isCancelled) &#123;</div><div class=\"line\">            [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:operation];</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 处理不存在缓存图片或有缓存但是需要重新刷新的情况</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ((!cachedImage || options &amp; SDWebImageRefreshCached) &amp;&amp; (![<span class=\"keyword\">self</span>.delegate respondsToSelector:<span class=\"keyword\">@selector</span>(imageManager:shouldDownloadImageForURL:)] || [<span class=\"keyword\">self</span>.delegate imageManager:<span class=\"keyword\">self</span> shouldDownloadImageForURL:url])) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"comment\">// 如果图片在缓存中，但是选项要求重新下，那么直接调用重新下</span></div><div class=\"line\">                [<span class=\"keyword\">self</span> callCompletionBlockForOperation:weakOperation completion:completedBlock image:cachedImage data:cachedData error:<span class=\"literal\">nil</span> cacheType:cacheType finished:<span class=\"literal\">YES</span> url:url];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 如果没有缓存图片，那就踏踏实实下载吧，先设置下载选项</span></div><div class=\"line\">            SDWebImageDownloaderOptions downloaderOptions = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageLowPriority) downloaderOptions |= SDWebImageDownloaderLowPriority;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageProgressiveDownload) downloaderOptions |= SDWebImageDownloaderProgressiveDownload;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageRefreshCached) downloaderOptions |= SDWebImageDownloaderUseNSURLCache;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageContinueInBackground) downloaderOptions |= SDWebImageDownloaderContinueInBackground;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageHandleCookies) downloaderOptions |= SDWebImageDownloaderHandleCookies;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageAllowInvalidSSLCertificates) downloaderOptions |= SDWebImageDownloaderAllowInvalidSSLCertificates;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageHighPriority) downloaderOptions |= SDWebImageDownloaderHighPriority;</div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageScaleDownLargeImages) downloaderOptions |= SDWebImageDownloaderScaleDownLargeImages;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// 如果有缓存图片且是要求强制刷新的情况，那就强制刷新</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123;</div><div class=\"line\">                <span class=\"comment\">// force progressive off if image already cached but forced refreshing</span></div><div class=\"line\">                downloaderOptions &amp;= ~SDWebImageDownloaderProgressiveDownload;</div><div class=\"line\">                <span class=\"comment\">// ignore image read from NSURLCache if image if cached but force refreshing</span></div><div class=\"line\">                downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// 下载引擎执行下载操作</span></div><div class=\"line\">            SDWebImageDownloadToken *subOperationToken = [<span class=\"keyword\">self</span>.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(<span class=\"built_in\">UIImage</span> *downloadedImage, <span class=\"built_in\">NSData</span> *downloadedData, <span class=\"built_in\">NSError</span> *error, <span class=\"built_in\">BOOL</span> finished) &#123;</div><div class=\"line\">                __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!strongOperation || strongOperation.isCancelled) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Do nothing if the operation was cancelled</span></div><div class=\"line\">                    <span class=\"comment\">// See #699 for more details</span></div><div class=\"line\">                    <span class=\"comment\">// if we would call the completedBlock, there could be a race condition between this block and another completedBlock for the same object, so if this one is called second, we will overwrite the new data</span></div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 下载错误了，进行错误回调，并将错误的url存到错误url数组中</span></div><div class=\"line\">                    [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock error:error url:url];</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (   error.code != <span class=\"built_in\">NSURLErrorNotConnectedToInternet</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorCancelled</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorTimedOut</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorInternationalRoamingOff</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorDataNotAllowed</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorCannotFindHost</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorCannotConnectToHost</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.failedURLs) &#123;</div><div class=\"line\">                            [<span class=\"keyword\">self</span>.failedURLs addObject:url];</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// 如果选项是下载错误继续下，将错误url从错误数组中移除</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> ((options &amp; SDWebImageRetryFailed)) &#123;</div><div class=\"line\">                        <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.failedURLs) &#123;</div><div class=\"line\">                            [<span class=\"keyword\">self</span>.failedURLs removeObject:url];</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    </div><div class=\"line\">                    <span class=\"comment\">// 获取缓存设置</span></div><div class=\"line\">                    <span class=\"built_in\">BOOL</span> cacheOnDisk = !(options &amp; SDWebImageCacheMemoryOnly);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (options &amp; SDWebImageRefreshCached &amp;&amp; cachedImage &amp;&amp; !downloadedImage) &#123;</div><div class=\"line\">                        <span class=\"comment\">// Image refresh hit the NSURLCache cache, do not call the completion block</span></div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (downloadedImage &amp;&amp; (!downloadedImage.images || (options &amp; SDWebImageTransformAnimatedImage)) &amp;&amp; [<span class=\"keyword\">self</span>.delegate respondsToSelector:<span class=\"keyword\">@selector</span>(imageManager:transformDownloadedImage:withURL:)]) &#123;</div><div class=\"line\">                        <span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">                            <span class=\"built_in\">UIImage</span> *transformedImage = [<span class=\"keyword\">self</span>.delegate imageManager:<span class=\"keyword\">self</span> transformDownloadedImage:downloadedImage withURL:url];</div><div class=\"line\"></div><div class=\"line\">                            <span class=\"keyword\">if</span> (transformedImage &amp;&amp; finished) &#123;</div><div class=\"line\">                                <span class=\"built_in\">BOOL</span> imageWasTransformed = ![transformedImage isEqual:downloadedImage];</div><div class=\"line\">                                <span class=\"comment\">// pass nil if the image was transformed, so we can recalculate the data from the image</span></div><div class=\"line\">                                [<span class=\"keyword\">self</span>.imageCache storeImage:transformedImage imageData:(imageWasTransformed ? <span class=\"literal\">nil</span> : downloadedData) forKey:key toDisk:cacheOnDisk completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            </div><div class=\"line\">                            [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:transformedImage data:downloadedData error:<span class=\"literal\">nil</span> cacheType:SDImageCacheTypeNone finished:finished url:url];</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (downloadedImage &amp;&amp; finished) &#123;</div><div class=\"line\">                            [<span class=\"keyword\">self</span>.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:<span class=\"literal\">nil</span> cacheType:SDImageCacheTypeNone finished:finished url:url];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (finished) &#123;</div><div class=\"line\">                    [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:strongOperation];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;];</div><div class=\"line\">            operation.cancelBlock = ^&#123;</div><div class=\"line\">                [<span class=\"keyword\">self</span>.imageDownloader cancel:subOperationToken];</div><div class=\"line\">                __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class=\"line\">                [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:strongOperation];</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cachedImage) &#123;</div><div class=\"line\">            __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class=\"line\">            [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:cachedImage data:cachedData error:<span class=\"literal\">nil</span> cacheType:cacheType finished:<span class=\"literal\">YES</span> url:url];</div><div class=\"line\">            [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:operation];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// Image not in cache and download disallowed by delegate</span></div><div class=\"line\">            __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class=\"line\">            [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:<span class=\"literal\">nil</span> data:<span class=\"literal\">nil</span> error:<span class=\"literal\">nil</span> cacheType:SDImageCacheTypeNone finished:<span class=\"literal\">YES</span> url:url];</div><div class=\"line\">            [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:operation];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> operation;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"取消所有请求\"><a href=\"#取消所有请求\" class=\"headerlink\" title=\"取消所有请求\"></a>取消所有请求</h2><p>将正在运行的操作全部执行取消操作，并将操作从执行数组中移除<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)cancelAll &#123;</div><div class=\"line\">    <span class=\"comment\">// 注意要加锁</span></div><div class=\"line\">    <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.runningOperations) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSArray</span>&lt;SDWebImageCombinedOperation *&gt; *copiedOperations = [<span class=\"keyword\">self</span>.runningOperations <span class=\"keyword\">copy</span>];</div><div class=\"line\">        [copiedOperations makeObjectsPerformSelector:<span class=\"keyword\">@selector</span>(cancel)];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.runningOperations removeObjectsInArray:copiedOperations];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"检测是否在运行\"><a href=\"#检测是否在运行\" class=\"headerlink\" title=\"检测是否在运行\"></a>检测是否在运行</h2><p>辅助方法，检测是否有请求在运行中<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isRunning &#123;</div><div class=\"line\">    <span class=\"built_in\">BOOL</span> isRunning = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.runningOperations) &#123;</div><div class=\"line\">        isRunning = (<span class=\"keyword\">self</span>.runningOperations.count &gt; <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> isRunning;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"缓存某URL对应的图片到缓存\"><a href=\"#缓存某URL对应的图片到缓存\" class=\"headerlink\" title=\"缓存某URL对应的图片到缓存\"></a>缓存某URL对应的图片到缓存</h2><p>使用内部的ImageCache将图片进行缓存到磁盘<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)saveImageToCache:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image forURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (image &amp;&amp; url) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *key = [<span class=\"keyword\">self</span> cacheKeyForURL:url];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.imageCache storeImage:image forKey:key toDisk:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"异步检测内存中-磁盘中是否有图片\"><a href=\"#异步检测内存中-磁盘中是否有图片\" class=\"headerlink\" title=\"异步检测内存中/磁盘中是否有图片\"></a>异步检测内存中/磁盘中是否有图片</h2><ul>\n<li><p>检测内存中是否有缓存</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)cachedImageExistsForURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url</div><div class=\"line\">                     completion:(<span class=\"keyword\">nullable</span> SDWebImageCheckCacheCompletionBlock)completionBlock &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *key = [<span class=\"keyword\">self</span> cacheKeyForURL:url];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">BOOL</span> isInMemoryCache = ([<span class=\"keyword\">self</span>.imageCache imageFromMemoryCacheForKey:key] != <span class=\"literal\">nil</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (isInMemoryCache) &#123;</div><div class=\"line\">        <span class=\"comment\">// making sure we call the completion block on the main queue</span></div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">                completionBlock(<span class=\"literal\">YES</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.imageCache diskImageExistsWithKey:key completion:^(<span class=\"built_in\">BOOL</span> isInDiskCache) &#123;</div><div class=\"line\">        <span class=\"comment\">// the completion block of checkDiskCacheForImageWithKey:completion: is always called on the main queue, no need to further dispatch</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            completionBlock(isInDiskCache);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>检测磁盘中是否有图片</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)diskImageExistsForURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url</div><div class=\"line\">                   completion:(<span class=\"keyword\">nullable</span> SDWebImageCheckCacheCompletionBlock)completionBlock &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *key = [<span class=\"keyword\">self</span> cacheKeyForURL:url];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.imageCache diskImageExistsWithKey:key completion:^(<span class=\"built_in\">BOOL</span> isInDiskCache) &#123;</div><div class=\"line\">        <span class=\"comment\">// the completion block of checkDiskCacheForImageWithKey:completion: is always called on the main queue, no need to further dispatch</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            completionBlock(isInDiskCache);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"获取某个URL对应的缓存key\"><a href=\"#获取某个URL对应的缓存key\" class=\"headerlink\" title=\"获取某个URL对应的缓存key\"></a>获取某个URL对应的缓存key</h2><p>辅助方法，获取url对应的图片key,允许用户对URL进行筛选<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)cacheKeyForURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!url) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">@\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.cacheKeyFilter) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.cacheKeyFilter(url);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> url.absoluteString;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>SDWebImageManager 相对还是比较简单，因为内部已经有下载和缓存类的实现了，下载图片时，先判断缓存的情况，如果缓存中有，进行缓存获取的回调，如果没有或者强制要求刷新的话，就会执行下载操作。期间把操作要进行保存到运行数组中，这样的话，如果有取消，也可以拿到对象进行取消操作。</p>\n<p>下一小节，研究下，三方库如果进行进一步的封装，然后可以供用户方便的使用？而不用关注内部的实现细节！</p>"},{"title":"SDWebImage学习笔记（二）","date":"2017-01-06T06:46:12.000Z","_content":"\n# 缓存\n这一小节主要研究下SDWebImage的cache功能是如何实现的，首先找到在SDWebImage中充当缓存功能的类，这一步很简单，直接定位到SDImageCache类。也就是说，接下来主要就研究这个类了。\n<!--more-->\n## SDImageCacheConfig 缓存配置\nSDWebImage提供了一个专门的类SDImageCacheConfig，来进行Cache的一些配置工作，主要配置的信息包括以下几点\n\n1. 是否允许解压原图\n2. 是否支持iCloud，默认不支持\n3. 是否允许将图片缓存到内存，默认支持\n4. <font color=red><B>最大缓存周期（默认是一周）</B></font>\n5. 最大缓存大小（默认不设置）\n\n## SDImageCache 缓存类\nSDImageCache是一个单例，作为执行图片缓存的工具类，整个App只需要有一个全局的实例就可以了，这没毛病。\n### SDImageCache文件系统\n在开始缓存操作之前，除了配置项需要配置外，我个人感觉还有一个地方需要提前准备好的就是缓存的文件系统。\n#### 默认的文件存储路径\nSDImageCache的默认文件存储路径是由单例去控制的，在单例初始化的时候，传入了默认的文件夹名称default，这样的话，默认的文件路径就是../cache/default/com.hackemist.SDWebImageCache. default/ 文件夹。\n#### 用户自己定义的文件路径\nSDImageCache还支持用户自己定义的命名空间，所需要做的就是在创建的时候传入namespace，即可，这样的话，假如用户传入了YoukuImages，那么 缓存的文件路径就是../cache/YoukuImages/com.hackemist.SDWebImageCache.YoukuImages/ 文件夹了。\n#### 辅助的文件路径方法\n这个并不是很复杂，之所以要提一嘴，主要是比较赞赏SDWebImage的函数命名，代码如下\n```objc\n- (nullable NSString *)makeDiskCachePath:(nonnull NSString*)fullNamespace {\n    NSArray<NSString *> *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);\n    return [paths[0] stringByAppendingPathComponent:fullNamespace];\n}\n```\n#### 图片存储路径\n图片的存储路径采用了对URL进行MD5加密的方式，进行处理，通过这种方式防止文件被盗链给服务端增加流量损耗。\nMD5也是很常见的加密方式，下面附上代码，方便自己以后查看。注意，这里稍微和别的MD5加密的不同的就是，会把文件扩展名带上，比如.png,.jpg之类的。这个方法，其实是提供了一个URL到文件名的映射\n```objc\n- (nullable NSString *)cachedFileNameForKey:(nullable NSString *)key {\n    const char *str = key.UTF8String;\n    if (str == NULL) {\n        str = \"\";\n    }\n    unsigned char r[CC_MD5_DIGEST_LENGTH];\n    CC_MD5(str, (CC_LONG)strlen(str), r);\n    NSString *filename = [NSString stringWithFormat:@\"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%@\",\n                          r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10],\n                          r[11], r[12], r[13], r[14], r[15], [key.pathExtension isEqualToString:@\"\"] ? @\"\" : [NSString stringWithFormat:@\".%@\", key.pathExtension]];\n\n    return filename;\n}\n```\n另外提供俩个函数，方便获取文件默认存储路径下指定key图片的方法\n```objc\n// 获取指定路径下名称为key的图片路径\n- (nullable NSString *)cachePathForKey:(nullable NSString *)key inPath:(nonnull NSString *)path {\n    NSString *filename = [self cachedFileNameForKey:key];\n    return [path stringByAppendingPathComponent:filename];\n}\n```\n```objc\n// 获取默认路径下key的图片路径，一般情况都是直接使用该方法就获取到图片的路径了\n- (nullable NSString *)defaultCachePathForKey:(nullable NSString *)key {\n    return [self cachePathForKey:key inPath:self.diskCachePath];\n}\n```\n\n### SDImageCache的初始化\n自从Xcode8之后，编译器好像做了一些优化，init方法需要去调用其他的NS_DESIGNATED_INITIALIZER标记的初始化方法，SDImageCache显然也是响应了这样的号召，所以提供了俩个自定义的初始化方法initWithNamespace:和initWithNamespace:diskCacheDirectory:，分别支持按照命名空间及存储路径的自定义初始化。但是单例的初始化会调用默认的初始化方法，使用单例的时候，会在App的Cache文件夹下面创建你一个default的文件夹，并在该Default文件夹下创建com.hackmisk.SDWebImageCache.default的一个文件夹，使用该文件夹来存储图片。下面是初始化的一些代码，并不是很复杂。\n```objc\n+ (nonnull instancetype)sharedImageCache {\n    static dispatch_once_t once;\n    static id instance;\n    dispatch_once(&once, ^{\n        instance = [self new];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    return [self initWithNamespace:@\"default\"];\n}\n\n- (nonnull instancetype)initWithNamespace:(nonnull NSString *)ns {\n    NSString *path = [self makeDiskCachePath:ns];\n    return [self initWithNamespace:ns diskCacheDirectory:path];\n}\n\n- (nonnull instancetype)initWithNamespace:(nonnull NSString *)ns\n                       diskCacheDirectory:(nonnull NSString *)directory {\n    if ((self = [super init])) {\n        NSString *fullNamespace = [@\"com.hackemist.SDWebImageCache.\" stringByAppendingString:ns];\n        \n        // Create IO serial queue\n        _ioQueue = dispatch_queue_create(\"com.hackemist.SDWebImageCache\", DISPATCH_QUEUE_SERIAL);\n        \n        //目前这里使用的都是默认配置\n        _config = [[SDImageCacheConfig alloc] init];\n        \n        // Init the memory cache\n        // 创建内存缓存\n        _memCache = [[AutoPurgeCache alloc] init];\n        _memCache.name = fullNamespace;\n\n        // Init the disk cache\n        if (directory != nil) {\n        // 单例形式创建的时候，这里肯定是能执行到的，之后就会创建com.hackmisk.SDWebImageCache.default的缓存路径\n            _diskCachePath = [directory stringByAppendingPathComponent:fullNamespace];\n        } else {\n            NSString *path = [self makeDiskCachePath:ns];\n            _diskCachePath = path;\n        }\n        // 此处需要稍微注意一下，因为io队列主要是对图片进行增删读写等操作，需要保证fileManager创建在io队列上。\n        dispatch_sync(_ioQueue, ^{\n            _fileManager = [NSFileManager new];\n        });\n\n#if SD_UIKIT\n        // Subscribe to app events\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(clearMemory)\n                                                     name:UIApplicationDidReceiveMemoryWarningNotification\n                                                   object:nil];\n\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(deleteOldFiles)\n                                                     name:UIApplicationWillTerminateNotification\n                                                   object:nil];\n\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(backgroundDeleteOldFiles)\n                                                     name:UIApplicationDidEnterBackgroundNotification\n                                                   object:nil];\n#endif\n    }\n\n    return self;\n}\n//辅助方法，便捷式创建缓存路径\n- (nullable NSString *)makeDiskCachePath:(nonnull NSString*)fullNamespace {\n    NSArray<NSString *> *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);\n    return [paths[0] stringByAppendingPathComponent:fullNamespace];\n}\n```\n### SDImageCache的缓存操作\n#### 存\n这里同样提供了三个方法方便使用者根据不同的需求进行图片存储功能的选择。\n```objc\n// 使用默认的存储路径，并默认存储到磁盘\n- (void)storeImage:(nullable UIImage *)image\n            forKey:(nullable NSString *)key\n        completion:(nullable SDWebImageNoParamsBlock)completionBlock {\n    [self storeImage:image imageData:nil forKey:key toDisk:YES completion:completionBlock];\n}\n\n// 该方法可供用户选择是否能够保存到磁盘\n- (void)storeImage:(nullable UIImage *)image\n            forKey:(nullable NSString *)key\n            toDisk:(BOOL)toDisk\n        completion:(nullable SDWebImageNoParamsBlock)completionBlock {\n    [self storeImage:image imageData:nil forKey:key toDisk:toDisk completion:completionBlock];\n}\n\n// 此处提供了图片的NSdata数据，可供用户直接存储。\n- (void)storeImage:(nullable UIImage *)image\n         imageData:(nullable NSData *)imageData\n            forKey:(nullable NSString *)key\n            toDisk:(BOOL)toDisk\n        completion:(nullable SDWebImageNoParamsBlock)completionBlock {\n    // 做下异常校验，如果图片或者key不存在，直接返回    \n    if (!image || !key) {\n        if (completionBlock) {\n            completionBlock();\n        }\n        return;\n    }\n    // 检验下配置类是否允许将图片保存到内存，如果允许就进行保存处理\n    if (self.config.shouldCacheImagesInMemory) {\n        NSUInteger cost = SDCacheCostForImage(image);\n        [self.memCache setObject:image forKey:key cost:cost];\n    }\n    // 是否需要保存到磁盘\n    if (toDisk) {\n        // 保存需要在IO队列中进行，先检验图片NSdata是否存在，如果只有UIImage对象，需要先转换成Data类型\n        dispatch_async(self.ioQueue, ^{\n            NSData *data = imageData;\n            \n            if (!data && image) {\n                SDImageFormat imageFormatFromData = [NSData sd_imageFormatForImageData:data];\n                data = [image sd_imageDataAsFormat:imageFormatFromData];\n            }\n            \n            [self storeImageDataToDisk:data forKey:key];\n            if (completionBlock) {\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    completionBlock();\n                });\n            }\n        });\n    } else {\n        if (completionBlock) {\n            completionBlock();\n        }\n    }\n}\n\n// 保存数据到磁盘，注意保存操作要在IO队列上进行。并根据是否要保存到iCloud对URL进行设置\n- (void)storeImageDataToDisk:(nullable NSData *)imageData forKey:(nullable NSString *)key {\n    if (!imageData || !key) {\n        return;\n    }\n    \n    // 检查下是否是在IO队列上，因为读写操作要在单独的异步队列进行\n    [self checkIfQueueIsIOQueue];\n    \n    // 检查是否在当前的目录下存在文件夹，如不存在，先创建之\n    if (![_fileManager fileExistsAtPath:_diskCachePath]) {\n        [_fileManager createDirectoryAtPath:_diskCachePath withIntermediateDirectories:YES attributes:nil error:NULL];\n    }\n    \n    // 获取缓存图片地址文件夹路径\n    NSString *cachePathForKey = [self defaultCachePathForKey:key];\n    // 转变为文件URL\n    NSURL *fileURL = [NSURL fileURLWithPath:cachePathForKey];\n    \n    // 保存操作\n    [_fileManager createFileAtPath:cachePathForKey contents:imageData attributes:nil];\n    \n    // 阻止图片保存到iCloud\n    if (self.config.shouldDisableiCloud) {\n        [fileURL setResourceValue:@YES forKey:NSURLIsExcludedFromBackupKey error:nil];\n    }\n}\n```\n#### 取&查\nSDWebImageCache提供了查询内存图片、磁盘图片的功能，还提供了查询默认路径和自定义路径下某个key对应的图片。\n* 检测图片是否在磁盘中有缓存\n    ```objc\n    - (void)diskImageExistsWithKey:(nullable NSString *)key completion:(nullable SDWebImageCheckCacheCompletionBlock)completionBlock {\n    dispatch_async(_ioQueue, ^{\n        BOOL exists = [_fileManager fileExistsAtPath:[self defaultCachePathForKey:key]];\n\n        // fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name\n        // checking the key with and without the extension\n        if (!exists) {\n            exists = [_fileManager fileExistsAtPath:[self defaultCachePathForKey:key].stringByDeletingPathExtension];\n        }\n\n        if (completionBlock) {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                completionBlock(exists);\n            });\n        }\n    });\n}\n    ```\n* 获取内存/磁盘上缓存的图片\n    ```objc\n    - (nullable UIImage *)imageFromMemoryCacheForKey:(nullable NSString *)key {\n    return [self.memCache objectForKey:key];\n}\n    - (nullable UIImage *)imageFromDiskCacheForKey:(nullable NSString *)key {\n    UIImage *diskImage = [self diskImageForKey:key];\n    if (diskImage && self.config.shouldCacheImagesInMemory) {\n        NSUInteger cost = SDCacheCostForImage(diskImage);\n        [self.memCache setObject:diskImage forKey:key cost:cost];\n    }\n    - (nullable UIImage *)imageFromCacheForKey:(nullable NSString *)key {\n    // First check the in-memory cache...\n    UIImage *image = [self imageFromMemoryCacheForKey:key];\n    if (image) {\n        return image;\n    }\n    \n    // Second check the disk cache...\n    image = [self imageFromDiskCacheForKey:key];\n    \n    return diskImage;\n}\n    ```\n* 辅助方法，获取所有路径下是否有该key缓存的图片\n    ```objc\n    - (nullable NSData *)diskImageDataBySearchingAllPathsForKey:(nullable NSString *)key {\n    NSString *defaultPath = [self defaultCachePathForKey:key];\n    NSData *data = [NSData dataWithContentsOfFile:defaultPath];\n    if (data) {\n        return data;\n    }\n\n    // fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name\n    // checking the key with and without the extension\n    data = [NSData dataWithContentsOfFile:defaultPath.stringByDeletingPathExtension];\n    if (data) {\n        return data;\n    }\n\n    NSArray<NSString *> *customPaths = [self.customPaths copy];\n    for (NSString *path in customPaths) {\n        NSString *filePath = [self cachePathForKey:key inPath:path];\n        NSData *imageData = [NSData dataWithContentsOfFile:filePath];\n        if (imageData) {\n            return imageData;\n        }\n\n        // fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name\n        // checking the key with and without the extension\n        imageData = [NSData dataWithContentsOfFile:filePath.stringByDeletingPathExtension];\n        if (imageData) {\n            return imageData;\n        }\n    }\n\n    return nil;\n}\n    - (nullable UIImage *)diskImageForKey:(nullable NSString *)key {\n    NSData *data = [self diskImageDataBySearchingAllPathsForKey:key];\n    if (data) {\n        UIImage *image = [UIImage sd_imageWithData:data];\n        image = [self scaledImageForKey:key image:image];\n        if (self.config.shouldDecompressImages) {\n            image = [UIImage decodedImageWithImage:image];\n        }\n        return image;\n    }\n    else {\n        return nil;\n    }\n}\n    ```\n*  提供供外部调用的，且返回一个Operation对象的查询某Key的图片\n    ```objc\n    - (nullable NSOperation *)queryCacheOperationForKey:(nullable NSString *)key done:(nullable SDCacheQueryCompletedBlock)doneBlock {\n    if (!key) {\n        if (doneBlock) {\n            doneBlock(nil, nil, SDImageCacheTypeNone);\n        }\n        return nil;\n    }\n\n    // First check the in-memory cache...\n    UIImage *image = [self imageFromMemoryCacheForKey:key];\n    if (image) {\n        NSData *diskData = nil;\n        if ([image isGIF]) {\n            diskData = [self diskImageDataBySearchingAllPathsForKey:key];\n        }\n        if (doneBlock) {\n            doneBlock(image, diskData, SDImageCacheTypeMemory);\n        }\n        return nil;\n    }\n\n    NSOperation *operation = [NSOperation new];\n    dispatch_async(self.ioQueue, ^{\n        if (operation.isCancelled) {\n            // do not call the completion if cancelled\n            return;\n        }\n\n        @autoreleasepool {\n            NSData *diskData = [self diskImageDataBySearchingAllPathsForKey:key];\n            UIImage *diskImage = [self diskImageForKey:key];\n            if (diskImage && self.config.shouldCacheImagesInMemory) {\n                NSUInteger cost = SDCacheCostForImage(diskImage);\n                [self.memCache setObject:diskImage forKey:key cost:cost];\n            }\n\n            if (doneBlock) {\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    doneBlock(diskImage, diskData, SDImageCacheTypeDisk);\n                });\n            }\n        }\n    });\n\n    return operation;\n}\n    ```\n#### 删\n同样，删除也包括删除内存中的图片和删除磁盘中的图片，俩种，比较简单，下面是源码，可以参考下\n    ```objc\n     - (void)clearMemory {\n        [self.memCache removeAllObjects];\n    }\n\n    - (void)clearDiskOnCompletion:(nullable SDWebImageNoParamsBlock)completion {\n    dispatch_async(self.ioQueue, ^{\n        [_fileManager removeItemAtPath:self.diskCachePath error:nil];\n        [_fileManager createDirectoryAtPath:self.diskCachePath\n                withIntermediateDirectories:YES\n                                 attributes:nil\n                                      error:NULL];\n\n        if (completion) {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                completion();\n            });\n        }\n    });\n}\n    ```\n删除这块，唯一需要特别注意的就是删除过期的文件，以及对文件大小的存储上限做校验，如果超过最大上限，将最老的文件删除掉\n    ```objc\n    - (void)deleteOldFiles {\n    [self deleteOldFilesWithCompletionBlock:nil];\n}\n\n- (void)deleteOldFilesWithCompletionBlock:(nullable SDWebImageNoParamsBlock)completionBlock {\n    dispatch_async(self.ioQueue, ^{\n        NSURL *diskCacheURL = [NSURL fileURLWithPath:self.diskCachePath isDirectory:YES];\n        NSArray<NSString *> *resourceKeys = @[NSURLIsDirectoryKey, NSURLContentModificationDateKey, NSURLTotalFileAllocatedSizeKey];\n\n        // This enumerator prefetches useful properties for our cache files.\n        NSDirectoryEnumerator *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL\n                                                   includingPropertiesForKeys:resourceKeys\n                                                                      options:NSDirectoryEnumerationSkipsHiddenFiles\n                                                                 errorHandler:NULL];\n\n        NSDate *expirationDate = [NSDate dateWithTimeIntervalSinceNow:-self.config.maxCacheAge];\n        NSMutableDictionary<NSURL *, NSDictionary<NSString *, id> *> *cacheFiles = [NSMutableDictionary dictionary];\n        NSUInteger currentCacheSize = 0;\n\n        // Enumerate all of the files in the cache directory.  This loop has two purposes:\n        //\n        //  1. Removing files that are older than the expiration date.\n        //  2. Storing file attributes for the size-based cleanup pass.\n        NSMutableArray<NSURL *> *urlsToDelete = [[NSMutableArray alloc] init];\n        for (NSURL *fileURL in fileEnumerator) {\n            NSError *error;\n            NSDictionary<NSString *, id> *resourceValues = [fileURL resourceValuesForKeys:resourceKeys error:&error];\n\n            // Skip directories and errors.\n            if (error || !resourceValues || [resourceValues[NSURLIsDirectoryKey] boolValue]) {\n                continue;\n            }\n\n            // Remove files that are older than the expiration date;\n            NSDate *modificationDate = resourceValues[NSURLContentModificationDateKey];\n            if ([[modificationDate laterDate:expirationDate] isEqualToDate:expirationDate]) {\n                [urlsToDelete addObject:fileURL];\n                continue;\n            }\n\n            // Store a reference to this file and account for its total size.\n            NSNumber *totalAllocatedSize = resourceValues[NSURLTotalFileAllocatedSizeKey];\n            currentCacheSize += totalAllocatedSize.unsignedIntegerValue;\n            cacheFiles[fileURL] = resourceValues;\n        }\n        \n        for (NSURL *fileURL in urlsToDelete) {\n            [_fileManager removeItemAtURL:fileURL error:nil];\n        }\n\n        // If our remaining disk cache exceeds a configured maximum size, perform a second\n        // size-based cleanup pass.  We delete the oldest files first.\n        if (self.config.maxCacheSize > 0 && currentCacheSize > self.config.maxCacheSize) {\n            // Target half of our maximum cache size for this cleanup pass.\n            const NSUInteger desiredCacheSize = self.config.maxCacheSize / 2;\n\n            // Sort the remaining cache files by their last modification time (oldest first).\n            NSArray<NSURL *> *sortedFiles = [cacheFiles keysSortedByValueWithOptions:NSSortConcurrent\n                                                                     usingComparator:^NSComparisonResult(id obj1, id obj2) {\n                                                                         return [obj1[NSURLContentModificationDateKey] compare:obj2[NSURLContentModificationDateKey]];\n                                                                     }];\n\n            // Delete files until we fall below our desired cache size.\n            for (NSURL *fileURL in sortedFiles) {\n                if ([_fileManager removeItemAtURL:fileURL error:nil]) {\n                    NSDictionary<NSString *, id> *resourceValues = cacheFiles[fileURL];\n                    NSNumber *totalAllocatedSize = resourceValues[NSURLTotalFileAllocatedSizeKey];\n                    currentCacheSize -= totalAllocatedSize.unsignedIntegerValue;\n\n                    if (currentCacheSize < desiredCacheSize) {\n                        break;\n                    }\n                }\n            }\n        }\n        if (completionBlock) {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                completionBlock();\n            });\n        }\n    });\n}\n    ```\n对后台删除的支持，当APP在删除的时候，切换到后台，需要支持后台删除文件\n    ```objc\n    - (void)backgroundDeleteOldFiles {\n    Class UIApplicationClass = NSClassFromString(@\"UIApplication\");\n    if(!UIApplicationClass || ![UIApplicationClass respondsToSelector:@selector(sharedApplication)]) {\n        return;\n    }\n    UIApplication *application = [UIApplication performSelector:@selector(sharedApplication)];\n    __block UIBackgroundTaskIdentifier bgTask = [application beginBackgroundTaskWithExpirationHandler:^{\n        // Clean up any unfinished task business by marking where you\n        // stopped or ending the task outright.\n        [application endBackgroundTask:bgTask];\n        bgTask = UIBackgroundTaskInvalid;\n    }];\n\n    // Start the long-running task and return immediately.\n    [self deleteOldFilesWithCompletionBlock:^{\n        [application endBackgroundTask:bgTask];\n        bgTask = UIBackgroundTaskInvalid;\n    }];\n}\n    ```\n#### 缓存的信息\n除了支持存、查、取、删，之外，SDWebImageCache还提供了方便查看缓存的文件数、缓存的总大小、以及实时计算文件大小的block异步回调，代码如下\n    ```objc\n    - (NSUInteger)getSize {\n    __block NSUInteger size = 0;\n    dispatch_sync(self.ioQueue, ^{\n        NSDirectoryEnumerator *fileEnumerator = [_fileManager enumeratorAtPath:self.diskCachePath];\n        for (NSString *fileName in fileEnumerator) {\n            NSString *filePath = [self.diskCachePath stringByAppendingPathComponent:fileName];\n            NSDictionary<NSString *, id> *attrs = [[NSFileManager defaultManager] attributesOfItemAtPath:filePath error:nil];\n            size += [attrs fileSize];\n        }\n    });\n    return size;\n}\n\n- (NSUInteger)getDiskCount {\n    __block NSUInteger count = 0;\n    dispatch_sync(self.ioQueue, ^{\n        NSDirectoryEnumerator *fileEnumerator = [_fileManager enumeratorAtPath:self.diskCachePath];\n        count = fileEnumerator.allObjects.count;\n    });\n    return count;\n}\n\n- (void)calculateSizeWithCompletionBlock:(nullable SDWebImageCalculateSizeBlock)completionBlock {\n    NSURL *diskCacheURL = [NSURL fileURLWithPath:self.diskCachePath isDirectory:YES];\n\n    dispatch_async(self.ioQueue, ^{\n        NSUInteger fileCount = 0;\n        NSUInteger totalSize = 0;\n\n        NSDirectoryEnumerator *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL\n                                                   includingPropertiesForKeys:@[NSFileSize]\n                                                                      options:NSDirectoryEnumerationSkipsHiddenFiles\n                                                                 errorHandler:NULL];\n\n        for (NSURL *fileURL in fileEnumerator) {\n            NSNumber *fileSize;\n            [fileURL getResourceValue:&fileSize forKey:NSURLFileSizeKey error:NULL];\n            totalSize += fileSize.unsignedIntegerValue;\n            fileCount += 1;\n        }\n\n        if (completionBlock) {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                completionBlock(fileCount, totalSize);\n            });\n        }\n    });\n}\n    ```\n# 小结\n通过这一小节对源码的分析，我们大概知道了SDWebImage的缓存工作原理。也对文件操作有了一个更深刻的理解，下一小节将研究下SDWebImageManager是如果对下载和缓存进行综合管理的。\n\n","source":"_posts/SDWebImage学习笔记（二）.md","raw":"---\ntitle: SDWebImage学习笔记（二）\ndate: 2017-1-6 14:46:12\ntags: 三方库研究\n---\n\n# 缓存\n这一小节主要研究下SDWebImage的cache功能是如何实现的，首先找到在SDWebImage中充当缓存功能的类，这一步很简单，直接定位到SDImageCache类。也就是说，接下来主要就研究这个类了。\n<!--more-->\n## SDImageCacheConfig 缓存配置\nSDWebImage提供了一个专门的类SDImageCacheConfig，来进行Cache的一些配置工作，主要配置的信息包括以下几点\n\n1. 是否允许解压原图\n2. 是否支持iCloud，默认不支持\n3. 是否允许将图片缓存到内存，默认支持\n4. <font color=red><B>最大缓存周期（默认是一周）</B></font>\n5. 最大缓存大小（默认不设置）\n\n## SDImageCache 缓存类\nSDImageCache是一个单例，作为执行图片缓存的工具类，整个App只需要有一个全局的实例就可以了，这没毛病。\n### SDImageCache文件系统\n在开始缓存操作之前，除了配置项需要配置外，我个人感觉还有一个地方需要提前准备好的就是缓存的文件系统。\n#### 默认的文件存储路径\nSDImageCache的默认文件存储路径是由单例去控制的，在单例初始化的时候，传入了默认的文件夹名称default，这样的话，默认的文件路径就是../cache/default/com.hackemist.SDWebImageCache. default/ 文件夹。\n#### 用户自己定义的文件路径\nSDImageCache还支持用户自己定义的命名空间，所需要做的就是在创建的时候传入namespace，即可，这样的话，假如用户传入了YoukuImages，那么 缓存的文件路径就是../cache/YoukuImages/com.hackemist.SDWebImageCache.YoukuImages/ 文件夹了。\n#### 辅助的文件路径方法\n这个并不是很复杂，之所以要提一嘴，主要是比较赞赏SDWebImage的函数命名，代码如下\n```objc\n- (nullable NSString *)makeDiskCachePath:(nonnull NSString*)fullNamespace {\n    NSArray<NSString *> *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);\n    return [paths[0] stringByAppendingPathComponent:fullNamespace];\n}\n```\n#### 图片存储路径\n图片的存储路径采用了对URL进行MD5加密的方式，进行处理，通过这种方式防止文件被盗链给服务端增加流量损耗。\nMD5也是很常见的加密方式，下面附上代码，方便自己以后查看。注意，这里稍微和别的MD5加密的不同的就是，会把文件扩展名带上，比如.png,.jpg之类的。这个方法，其实是提供了一个URL到文件名的映射\n```objc\n- (nullable NSString *)cachedFileNameForKey:(nullable NSString *)key {\n    const char *str = key.UTF8String;\n    if (str == NULL) {\n        str = \"\";\n    }\n    unsigned char r[CC_MD5_DIGEST_LENGTH];\n    CC_MD5(str, (CC_LONG)strlen(str), r);\n    NSString *filename = [NSString stringWithFormat:@\"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%@\",\n                          r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10],\n                          r[11], r[12], r[13], r[14], r[15], [key.pathExtension isEqualToString:@\"\"] ? @\"\" : [NSString stringWithFormat:@\".%@\", key.pathExtension]];\n\n    return filename;\n}\n```\n另外提供俩个函数，方便获取文件默认存储路径下指定key图片的方法\n```objc\n// 获取指定路径下名称为key的图片路径\n- (nullable NSString *)cachePathForKey:(nullable NSString *)key inPath:(nonnull NSString *)path {\n    NSString *filename = [self cachedFileNameForKey:key];\n    return [path stringByAppendingPathComponent:filename];\n}\n```\n```objc\n// 获取默认路径下key的图片路径，一般情况都是直接使用该方法就获取到图片的路径了\n- (nullable NSString *)defaultCachePathForKey:(nullable NSString *)key {\n    return [self cachePathForKey:key inPath:self.diskCachePath];\n}\n```\n\n### SDImageCache的初始化\n自从Xcode8之后，编译器好像做了一些优化，init方法需要去调用其他的NS_DESIGNATED_INITIALIZER标记的初始化方法，SDImageCache显然也是响应了这样的号召，所以提供了俩个自定义的初始化方法initWithNamespace:和initWithNamespace:diskCacheDirectory:，分别支持按照命名空间及存储路径的自定义初始化。但是单例的初始化会调用默认的初始化方法，使用单例的时候，会在App的Cache文件夹下面创建你一个default的文件夹，并在该Default文件夹下创建com.hackmisk.SDWebImageCache.default的一个文件夹，使用该文件夹来存储图片。下面是初始化的一些代码，并不是很复杂。\n```objc\n+ (nonnull instancetype)sharedImageCache {\n    static dispatch_once_t once;\n    static id instance;\n    dispatch_once(&once, ^{\n        instance = [self new];\n    });\n    return instance;\n}\n\n- (instancetype)init {\n    return [self initWithNamespace:@\"default\"];\n}\n\n- (nonnull instancetype)initWithNamespace:(nonnull NSString *)ns {\n    NSString *path = [self makeDiskCachePath:ns];\n    return [self initWithNamespace:ns diskCacheDirectory:path];\n}\n\n- (nonnull instancetype)initWithNamespace:(nonnull NSString *)ns\n                       diskCacheDirectory:(nonnull NSString *)directory {\n    if ((self = [super init])) {\n        NSString *fullNamespace = [@\"com.hackemist.SDWebImageCache.\" stringByAppendingString:ns];\n        \n        // Create IO serial queue\n        _ioQueue = dispatch_queue_create(\"com.hackemist.SDWebImageCache\", DISPATCH_QUEUE_SERIAL);\n        \n        //目前这里使用的都是默认配置\n        _config = [[SDImageCacheConfig alloc] init];\n        \n        // Init the memory cache\n        // 创建内存缓存\n        _memCache = [[AutoPurgeCache alloc] init];\n        _memCache.name = fullNamespace;\n\n        // Init the disk cache\n        if (directory != nil) {\n        // 单例形式创建的时候，这里肯定是能执行到的，之后就会创建com.hackmisk.SDWebImageCache.default的缓存路径\n            _diskCachePath = [directory stringByAppendingPathComponent:fullNamespace];\n        } else {\n            NSString *path = [self makeDiskCachePath:ns];\n            _diskCachePath = path;\n        }\n        // 此处需要稍微注意一下，因为io队列主要是对图片进行增删读写等操作，需要保证fileManager创建在io队列上。\n        dispatch_sync(_ioQueue, ^{\n            _fileManager = [NSFileManager new];\n        });\n\n#if SD_UIKIT\n        // Subscribe to app events\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(clearMemory)\n                                                     name:UIApplicationDidReceiveMemoryWarningNotification\n                                                   object:nil];\n\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(deleteOldFiles)\n                                                     name:UIApplicationWillTerminateNotification\n                                                   object:nil];\n\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(backgroundDeleteOldFiles)\n                                                     name:UIApplicationDidEnterBackgroundNotification\n                                                   object:nil];\n#endif\n    }\n\n    return self;\n}\n//辅助方法，便捷式创建缓存路径\n- (nullable NSString *)makeDiskCachePath:(nonnull NSString*)fullNamespace {\n    NSArray<NSString *> *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);\n    return [paths[0] stringByAppendingPathComponent:fullNamespace];\n}\n```\n### SDImageCache的缓存操作\n#### 存\n这里同样提供了三个方法方便使用者根据不同的需求进行图片存储功能的选择。\n```objc\n// 使用默认的存储路径，并默认存储到磁盘\n- (void)storeImage:(nullable UIImage *)image\n            forKey:(nullable NSString *)key\n        completion:(nullable SDWebImageNoParamsBlock)completionBlock {\n    [self storeImage:image imageData:nil forKey:key toDisk:YES completion:completionBlock];\n}\n\n// 该方法可供用户选择是否能够保存到磁盘\n- (void)storeImage:(nullable UIImage *)image\n            forKey:(nullable NSString *)key\n            toDisk:(BOOL)toDisk\n        completion:(nullable SDWebImageNoParamsBlock)completionBlock {\n    [self storeImage:image imageData:nil forKey:key toDisk:toDisk completion:completionBlock];\n}\n\n// 此处提供了图片的NSdata数据，可供用户直接存储。\n- (void)storeImage:(nullable UIImage *)image\n         imageData:(nullable NSData *)imageData\n            forKey:(nullable NSString *)key\n            toDisk:(BOOL)toDisk\n        completion:(nullable SDWebImageNoParamsBlock)completionBlock {\n    // 做下异常校验，如果图片或者key不存在，直接返回    \n    if (!image || !key) {\n        if (completionBlock) {\n            completionBlock();\n        }\n        return;\n    }\n    // 检验下配置类是否允许将图片保存到内存，如果允许就进行保存处理\n    if (self.config.shouldCacheImagesInMemory) {\n        NSUInteger cost = SDCacheCostForImage(image);\n        [self.memCache setObject:image forKey:key cost:cost];\n    }\n    // 是否需要保存到磁盘\n    if (toDisk) {\n        // 保存需要在IO队列中进行，先检验图片NSdata是否存在，如果只有UIImage对象，需要先转换成Data类型\n        dispatch_async(self.ioQueue, ^{\n            NSData *data = imageData;\n            \n            if (!data && image) {\n                SDImageFormat imageFormatFromData = [NSData sd_imageFormatForImageData:data];\n                data = [image sd_imageDataAsFormat:imageFormatFromData];\n            }\n            \n            [self storeImageDataToDisk:data forKey:key];\n            if (completionBlock) {\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    completionBlock();\n                });\n            }\n        });\n    } else {\n        if (completionBlock) {\n            completionBlock();\n        }\n    }\n}\n\n// 保存数据到磁盘，注意保存操作要在IO队列上进行。并根据是否要保存到iCloud对URL进行设置\n- (void)storeImageDataToDisk:(nullable NSData *)imageData forKey:(nullable NSString *)key {\n    if (!imageData || !key) {\n        return;\n    }\n    \n    // 检查下是否是在IO队列上，因为读写操作要在单独的异步队列进行\n    [self checkIfQueueIsIOQueue];\n    \n    // 检查是否在当前的目录下存在文件夹，如不存在，先创建之\n    if (![_fileManager fileExistsAtPath:_diskCachePath]) {\n        [_fileManager createDirectoryAtPath:_diskCachePath withIntermediateDirectories:YES attributes:nil error:NULL];\n    }\n    \n    // 获取缓存图片地址文件夹路径\n    NSString *cachePathForKey = [self defaultCachePathForKey:key];\n    // 转变为文件URL\n    NSURL *fileURL = [NSURL fileURLWithPath:cachePathForKey];\n    \n    // 保存操作\n    [_fileManager createFileAtPath:cachePathForKey contents:imageData attributes:nil];\n    \n    // 阻止图片保存到iCloud\n    if (self.config.shouldDisableiCloud) {\n        [fileURL setResourceValue:@YES forKey:NSURLIsExcludedFromBackupKey error:nil];\n    }\n}\n```\n#### 取&查\nSDWebImageCache提供了查询内存图片、磁盘图片的功能，还提供了查询默认路径和自定义路径下某个key对应的图片。\n* 检测图片是否在磁盘中有缓存\n    ```objc\n    - (void)diskImageExistsWithKey:(nullable NSString *)key completion:(nullable SDWebImageCheckCacheCompletionBlock)completionBlock {\n    dispatch_async(_ioQueue, ^{\n        BOOL exists = [_fileManager fileExistsAtPath:[self defaultCachePathForKey:key]];\n\n        // fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name\n        // checking the key with and without the extension\n        if (!exists) {\n            exists = [_fileManager fileExistsAtPath:[self defaultCachePathForKey:key].stringByDeletingPathExtension];\n        }\n\n        if (completionBlock) {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                completionBlock(exists);\n            });\n        }\n    });\n}\n    ```\n* 获取内存/磁盘上缓存的图片\n    ```objc\n    - (nullable UIImage *)imageFromMemoryCacheForKey:(nullable NSString *)key {\n    return [self.memCache objectForKey:key];\n}\n    - (nullable UIImage *)imageFromDiskCacheForKey:(nullable NSString *)key {\n    UIImage *diskImage = [self diskImageForKey:key];\n    if (diskImage && self.config.shouldCacheImagesInMemory) {\n        NSUInteger cost = SDCacheCostForImage(diskImage);\n        [self.memCache setObject:diskImage forKey:key cost:cost];\n    }\n    - (nullable UIImage *)imageFromCacheForKey:(nullable NSString *)key {\n    // First check the in-memory cache...\n    UIImage *image = [self imageFromMemoryCacheForKey:key];\n    if (image) {\n        return image;\n    }\n    \n    // Second check the disk cache...\n    image = [self imageFromDiskCacheForKey:key];\n    \n    return diskImage;\n}\n    ```\n* 辅助方法，获取所有路径下是否有该key缓存的图片\n    ```objc\n    - (nullable NSData *)diskImageDataBySearchingAllPathsForKey:(nullable NSString *)key {\n    NSString *defaultPath = [self defaultCachePathForKey:key];\n    NSData *data = [NSData dataWithContentsOfFile:defaultPath];\n    if (data) {\n        return data;\n    }\n\n    // fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name\n    // checking the key with and without the extension\n    data = [NSData dataWithContentsOfFile:defaultPath.stringByDeletingPathExtension];\n    if (data) {\n        return data;\n    }\n\n    NSArray<NSString *> *customPaths = [self.customPaths copy];\n    for (NSString *path in customPaths) {\n        NSString *filePath = [self cachePathForKey:key inPath:path];\n        NSData *imageData = [NSData dataWithContentsOfFile:filePath];\n        if (imageData) {\n            return imageData;\n        }\n\n        // fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name\n        // checking the key with and without the extension\n        imageData = [NSData dataWithContentsOfFile:filePath.stringByDeletingPathExtension];\n        if (imageData) {\n            return imageData;\n        }\n    }\n\n    return nil;\n}\n    - (nullable UIImage *)diskImageForKey:(nullable NSString *)key {\n    NSData *data = [self diskImageDataBySearchingAllPathsForKey:key];\n    if (data) {\n        UIImage *image = [UIImage sd_imageWithData:data];\n        image = [self scaledImageForKey:key image:image];\n        if (self.config.shouldDecompressImages) {\n            image = [UIImage decodedImageWithImage:image];\n        }\n        return image;\n    }\n    else {\n        return nil;\n    }\n}\n    ```\n*  提供供外部调用的，且返回一个Operation对象的查询某Key的图片\n    ```objc\n    - (nullable NSOperation *)queryCacheOperationForKey:(nullable NSString *)key done:(nullable SDCacheQueryCompletedBlock)doneBlock {\n    if (!key) {\n        if (doneBlock) {\n            doneBlock(nil, nil, SDImageCacheTypeNone);\n        }\n        return nil;\n    }\n\n    // First check the in-memory cache...\n    UIImage *image = [self imageFromMemoryCacheForKey:key];\n    if (image) {\n        NSData *diskData = nil;\n        if ([image isGIF]) {\n            diskData = [self diskImageDataBySearchingAllPathsForKey:key];\n        }\n        if (doneBlock) {\n            doneBlock(image, diskData, SDImageCacheTypeMemory);\n        }\n        return nil;\n    }\n\n    NSOperation *operation = [NSOperation new];\n    dispatch_async(self.ioQueue, ^{\n        if (operation.isCancelled) {\n            // do not call the completion if cancelled\n            return;\n        }\n\n        @autoreleasepool {\n            NSData *diskData = [self diskImageDataBySearchingAllPathsForKey:key];\n            UIImage *diskImage = [self diskImageForKey:key];\n            if (diskImage && self.config.shouldCacheImagesInMemory) {\n                NSUInteger cost = SDCacheCostForImage(diskImage);\n                [self.memCache setObject:diskImage forKey:key cost:cost];\n            }\n\n            if (doneBlock) {\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    doneBlock(diskImage, diskData, SDImageCacheTypeDisk);\n                });\n            }\n        }\n    });\n\n    return operation;\n}\n    ```\n#### 删\n同样，删除也包括删除内存中的图片和删除磁盘中的图片，俩种，比较简单，下面是源码，可以参考下\n    ```objc\n     - (void)clearMemory {\n        [self.memCache removeAllObjects];\n    }\n\n    - (void)clearDiskOnCompletion:(nullable SDWebImageNoParamsBlock)completion {\n    dispatch_async(self.ioQueue, ^{\n        [_fileManager removeItemAtPath:self.diskCachePath error:nil];\n        [_fileManager createDirectoryAtPath:self.diskCachePath\n                withIntermediateDirectories:YES\n                                 attributes:nil\n                                      error:NULL];\n\n        if (completion) {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                completion();\n            });\n        }\n    });\n}\n    ```\n删除这块，唯一需要特别注意的就是删除过期的文件，以及对文件大小的存储上限做校验，如果超过最大上限，将最老的文件删除掉\n    ```objc\n    - (void)deleteOldFiles {\n    [self deleteOldFilesWithCompletionBlock:nil];\n}\n\n- (void)deleteOldFilesWithCompletionBlock:(nullable SDWebImageNoParamsBlock)completionBlock {\n    dispatch_async(self.ioQueue, ^{\n        NSURL *diskCacheURL = [NSURL fileURLWithPath:self.diskCachePath isDirectory:YES];\n        NSArray<NSString *> *resourceKeys = @[NSURLIsDirectoryKey, NSURLContentModificationDateKey, NSURLTotalFileAllocatedSizeKey];\n\n        // This enumerator prefetches useful properties for our cache files.\n        NSDirectoryEnumerator *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL\n                                                   includingPropertiesForKeys:resourceKeys\n                                                                      options:NSDirectoryEnumerationSkipsHiddenFiles\n                                                                 errorHandler:NULL];\n\n        NSDate *expirationDate = [NSDate dateWithTimeIntervalSinceNow:-self.config.maxCacheAge];\n        NSMutableDictionary<NSURL *, NSDictionary<NSString *, id> *> *cacheFiles = [NSMutableDictionary dictionary];\n        NSUInteger currentCacheSize = 0;\n\n        // Enumerate all of the files in the cache directory.  This loop has two purposes:\n        //\n        //  1. Removing files that are older than the expiration date.\n        //  2. Storing file attributes for the size-based cleanup pass.\n        NSMutableArray<NSURL *> *urlsToDelete = [[NSMutableArray alloc] init];\n        for (NSURL *fileURL in fileEnumerator) {\n            NSError *error;\n            NSDictionary<NSString *, id> *resourceValues = [fileURL resourceValuesForKeys:resourceKeys error:&error];\n\n            // Skip directories and errors.\n            if (error || !resourceValues || [resourceValues[NSURLIsDirectoryKey] boolValue]) {\n                continue;\n            }\n\n            // Remove files that are older than the expiration date;\n            NSDate *modificationDate = resourceValues[NSURLContentModificationDateKey];\n            if ([[modificationDate laterDate:expirationDate] isEqualToDate:expirationDate]) {\n                [urlsToDelete addObject:fileURL];\n                continue;\n            }\n\n            // Store a reference to this file and account for its total size.\n            NSNumber *totalAllocatedSize = resourceValues[NSURLTotalFileAllocatedSizeKey];\n            currentCacheSize += totalAllocatedSize.unsignedIntegerValue;\n            cacheFiles[fileURL] = resourceValues;\n        }\n        \n        for (NSURL *fileURL in urlsToDelete) {\n            [_fileManager removeItemAtURL:fileURL error:nil];\n        }\n\n        // If our remaining disk cache exceeds a configured maximum size, perform a second\n        // size-based cleanup pass.  We delete the oldest files first.\n        if (self.config.maxCacheSize > 0 && currentCacheSize > self.config.maxCacheSize) {\n            // Target half of our maximum cache size for this cleanup pass.\n            const NSUInteger desiredCacheSize = self.config.maxCacheSize / 2;\n\n            // Sort the remaining cache files by their last modification time (oldest first).\n            NSArray<NSURL *> *sortedFiles = [cacheFiles keysSortedByValueWithOptions:NSSortConcurrent\n                                                                     usingComparator:^NSComparisonResult(id obj1, id obj2) {\n                                                                         return [obj1[NSURLContentModificationDateKey] compare:obj2[NSURLContentModificationDateKey]];\n                                                                     }];\n\n            // Delete files until we fall below our desired cache size.\n            for (NSURL *fileURL in sortedFiles) {\n                if ([_fileManager removeItemAtURL:fileURL error:nil]) {\n                    NSDictionary<NSString *, id> *resourceValues = cacheFiles[fileURL];\n                    NSNumber *totalAllocatedSize = resourceValues[NSURLTotalFileAllocatedSizeKey];\n                    currentCacheSize -= totalAllocatedSize.unsignedIntegerValue;\n\n                    if (currentCacheSize < desiredCacheSize) {\n                        break;\n                    }\n                }\n            }\n        }\n        if (completionBlock) {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                completionBlock();\n            });\n        }\n    });\n}\n    ```\n对后台删除的支持，当APP在删除的时候，切换到后台，需要支持后台删除文件\n    ```objc\n    - (void)backgroundDeleteOldFiles {\n    Class UIApplicationClass = NSClassFromString(@\"UIApplication\");\n    if(!UIApplicationClass || ![UIApplicationClass respondsToSelector:@selector(sharedApplication)]) {\n        return;\n    }\n    UIApplication *application = [UIApplication performSelector:@selector(sharedApplication)];\n    __block UIBackgroundTaskIdentifier bgTask = [application beginBackgroundTaskWithExpirationHandler:^{\n        // Clean up any unfinished task business by marking where you\n        // stopped or ending the task outright.\n        [application endBackgroundTask:bgTask];\n        bgTask = UIBackgroundTaskInvalid;\n    }];\n\n    // Start the long-running task and return immediately.\n    [self deleteOldFilesWithCompletionBlock:^{\n        [application endBackgroundTask:bgTask];\n        bgTask = UIBackgroundTaskInvalid;\n    }];\n}\n    ```\n#### 缓存的信息\n除了支持存、查、取、删，之外，SDWebImageCache还提供了方便查看缓存的文件数、缓存的总大小、以及实时计算文件大小的block异步回调，代码如下\n    ```objc\n    - (NSUInteger)getSize {\n    __block NSUInteger size = 0;\n    dispatch_sync(self.ioQueue, ^{\n        NSDirectoryEnumerator *fileEnumerator = [_fileManager enumeratorAtPath:self.diskCachePath];\n        for (NSString *fileName in fileEnumerator) {\n            NSString *filePath = [self.diskCachePath stringByAppendingPathComponent:fileName];\n            NSDictionary<NSString *, id> *attrs = [[NSFileManager defaultManager] attributesOfItemAtPath:filePath error:nil];\n            size += [attrs fileSize];\n        }\n    });\n    return size;\n}\n\n- (NSUInteger)getDiskCount {\n    __block NSUInteger count = 0;\n    dispatch_sync(self.ioQueue, ^{\n        NSDirectoryEnumerator *fileEnumerator = [_fileManager enumeratorAtPath:self.diskCachePath];\n        count = fileEnumerator.allObjects.count;\n    });\n    return count;\n}\n\n- (void)calculateSizeWithCompletionBlock:(nullable SDWebImageCalculateSizeBlock)completionBlock {\n    NSURL *diskCacheURL = [NSURL fileURLWithPath:self.diskCachePath isDirectory:YES];\n\n    dispatch_async(self.ioQueue, ^{\n        NSUInteger fileCount = 0;\n        NSUInteger totalSize = 0;\n\n        NSDirectoryEnumerator *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL\n                                                   includingPropertiesForKeys:@[NSFileSize]\n                                                                      options:NSDirectoryEnumerationSkipsHiddenFiles\n                                                                 errorHandler:NULL];\n\n        for (NSURL *fileURL in fileEnumerator) {\n            NSNumber *fileSize;\n            [fileURL getResourceValue:&fileSize forKey:NSURLFileSizeKey error:NULL];\n            totalSize += fileSize.unsignedIntegerValue;\n            fileCount += 1;\n        }\n\n        if (completionBlock) {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                completionBlock(fileCount, totalSize);\n            });\n        }\n    });\n}\n    ```\n# 小结\n通过这一小节对源码的分析，我们大概知道了SDWebImage的缓存工作原理。也对文件操作有了一个更深刻的理解，下一小节将研究下SDWebImageManager是如果对下载和缓存进行综合管理的。\n\n","slug":"SDWebImage学习笔记（二）","published":1,"updated":"2017-01-20T15:28:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yw70008hx5ly73k5u41","content":"<h1 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h1><p>这一小节主要研究下SDWebImage的cache功能是如何实现的，首先找到在SDWebImage中充当缓存功能的类，这一步很简单，直接定位到SDImageCache类。也就是说，接下来主要就研究这个类了。<br><a id=\"more\"></a></p>\n<h2 id=\"SDImageCacheConfig-缓存配置\"><a href=\"#SDImageCacheConfig-缓存配置\" class=\"headerlink\" title=\"SDImageCacheConfig 缓存配置\"></a>SDImageCacheConfig 缓存配置</h2><p>SDWebImage提供了一个专门的类SDImageCacheConfig，来进行Cache的一些配置工作，主要配置的信息包括以下几点</p>\n<ol>\n<li>是否允许解压原图</li>\n<li>是否支持iCloud，默认不支持</li>\n<li>是否允许将图片缓存到内存，默认支持</li>\n<li><font color=\"red\"><b>最大缓存周期（默认是一周）</b></font></li>\n<li>最大缓存大小（默认不设置）</li>\n</ol>\n<h2 id=\"SDImageCache-缓存类\"><a href=\"#SDImageCache-缓存类\" class=\"headerlink\" title=\"SDImageCache 缓存类\"></a>SDImageCache 缓存类</h2><p>SDImageCache是一个单例，作为执行图片缓存的工具类，整个App只需要有一个全局的实例就可以了，这没毛病。</p>\n<h3 id=\"SDImageCache文件系统\"><a href=\"#SDImageCache文件系统\" class=\"headerlink\" title=\"SDImageCache文件系统\"></a>SDImageCache文件系统</h3><p>在开始缓存操作之前，除了配置项需要配置外，我个人感觉还有一个地方需要提前准备好的就是缓存的文件系统。</p>\n<h4 id=\"默认的文件存储路径\"><a href=\"#默认的文件存储路径\" class=\"headerlink\" title=\"默认的文件存储路径\"></a>默认的文件存储路径</h4><p>SDImageCache的默认文件存储路径是由单例去控制的，在单例初始化的时候，传入了默认的文件夹名称default，这样的话，默认的文件路径就是../cache/default/com.hackemist.SDWebImageCache. default/ 文件夹。</p>\n<h4 id=\"用户自己定义的文件路径\"><a href=\"#用户自己定义的文件路径\" class=\"headerlink\" title=\"用户自己定义的文件路径\"></a>用户自己定义的文件路径</h4><p>SDImageCache还支持用户自己定义的命名空间，所需要做的就是在创建的时候传入namespace，即可，这样的话，假如用户传入了YoukuImages，那么 缓存的文件路径就是../cache/YoukuImages/com.hackemist.SDWebImageCache.YoukuImages/ 文件夹了。</p>\n<h4 id=\"辅助的文件路径方法\"><a href=\"#辅助的文件路径方法\" class=\"headerlink\" title=\"辅助的文件路径方法\"></a>辅助的文件路径方法</h4><p>这个并不是很复杂，之所以要提一嘴，主要是比较赞赏SDWebImage的函数命名，代码如下<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)makeDiskCachePath:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span>*)fullNamespace &#123;</div><div class=\"line\">    <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *paths = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSCachesDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> [paths[<span class=\"number\">0</span>] stringByAppendingPathComponent:fullNamespace];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"图片存储路径\"><a href=\"#图片存储路径\" class=\"headerlink\" title=\"图片存储路径\"></a>图片存储路径</h4><p>图片的存储路径采用了对URL进行MD5加密的方式，进行处理，通过这种方式防止文件被盗链给服务端增加流量损耗。<br>MD5也是很常见的加密方式，下面附上代码，方便自己以后查看。注意，这里稍微和别的MD5加密的不同的就是，会把文件扩展名带上，比如.png,.jpg之类的。这个方法，其实是提供了一个URL到文件名的映射<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)cachedFileNameForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str = key.UTF8String;</div><div class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        str = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> r[CC_MD5_DIGEST_LENGTH];</div><div class=\"line\">    CC_MD5(str, (CC_LONG)strlen(str), r);</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *filename = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%@\"</span>,</div><div class=\"line\">                          r[<span class=\"number\">0</span>], r[<span class=\"number\">1</span>], r[<span class=\"number\">2</span>], r[<span class=\"number\">3</span>], r[<span class=\"number\">4</span>], r[<span class=\"number\">5</span>], r[<span class=\"number\">6</span>], r[<span class=\"number\">7</span>], r[<span class=\"number\">8</span>], r[<span class=\"number\">9</span>], r[<span class=\"number\">10</span>],</div><div class=\"line\">                          r[<span class=\"number\">11</span>], r[<span class=\"number\">12</span>], r[<span class=\"number\">13</span>], r[<span class=\"number\">14</span>], r[<span class=\"number\">15</span>], [key.pathExtension isEqualToString:<span class=\"string\">@\"\"</span>] ? <span class=\"string\">@\"\"</span> : [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\".%@\"</span>, key.pathExtension]];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> filename;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>另外提供俩个函数，方便获取文件默认存储路径下指定key图片的方法<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取指定路径下名称为key的图片路径</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)cachePathForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key inPath:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span> *)path &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *filename = [<span class=\"keyword\">self</span> cachedFileNameForKey:key];</div><div class=\"line\">    <span class=\"keyword\">return</span> [path stringByAppendingPathComponent:filename];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取默认路径下key的图片路径，一般情况都是直接使用该方法就获取到图片的路径了</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)defaultCachePathForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> cachePathForKey:key inPath:<span class=\"keyword\">self</span>.diskCachePath];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"SDImageCache的初始化\"><a href=\"#SDImageCache的初始化\" class=\"headerlink\" title=\"SDImageCache的初始化\"></a>SDImageCache的初始化</h3><p>自从Xcode8之后，编译器好像做了一些优化，init方法需要去调用其他的NS_DESIGNATED_INITIALIZER标记的初始化方法，SDImageCache显然也是响应了这样的号召，所以提供了俩个自定义的初始化方法initWithNamespace:和initWithNamespace:diskCacheDirectory:，分别支持按照命名空间及存储路径的自定义初始化。但是单例的初始化会调用默认的初始化方法，使用单例的时候，会在App的Cache文件夹下面创建你一个default的文件夹，并在该Default文件夹下创建com.hackmisk.SDWebImageCache.default的一个文件夹，使用该文件夹来存储图片。下面是初始化的一些代码，并不是很复杂。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)sharedImageCache &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> once;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">id</span> instance;</div><div class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;once, ^&#123;</div><div class=\"line\">        instance = [<span class=\"keyword\">self</span> new];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)init &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> initWithNamespace:<span class=\"string\">@\"default\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithNamespace:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span> *)ns &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *path = [<span class=\"keyword\">self</span> makeDiskCachePath:ns];</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> initWithNamespace:ns diskCacheDirectory:path];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithNamespace:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span> *)ns</div><div class=\"line\">                       diskCacheDirectory:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span> *)directory &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init])) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *fullNamespace = [<span class=\"string\">@\"com.hackemist.SDWebImageCache.\"</span> stringByAppendingString:ns];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// Create IO serial queue</span></div><div class=\"line\">        _ioQueue = dispatch_queue_create(<span class=\"string\">\"com.hackemist.SDWebImageCache\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//目前这里使用的都是默认配置</span></div><div class=\"line\">        _config = [[SDImageCacheConfig alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// Init the memory cache</span></div><div class=\"line\">        <span class=\"comment\">// 创建内存缓存</span></div><div class=\"line\">        _memCache = [[AutoPurgeCache alloc] init];</div><div class=\"line\">        _memCache.name = fullNamespace;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Init the disk cache</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (directory != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 单例形式创建的时候，这里肯定是能执行到的，之后就会创建com.hackmisk.SDWebImageCache.default的缓存路径</span></div><div class=\"line\">            _diskCachePath = [directory stringByAppendingPathComponent:fullNamespace];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *path = [<span class=\"keyword\">self</span> makeDiskCachePath:ns];</div><div class=\"line\">            _diskCachePath = path;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 此处需要稍微注意一下，因为io队列主要是对图片进行增删读写等操作，需要保证fileManager创建在io队列上。</span></div><div class=\"line\">        <span class=\"built_in\">dispatch_sync</span>(_ioQueue, ^&#123;</div><div class=\"line\">            _fileManager = [<span class=\"built_in\">NSFileManager</span> new];</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if SD_UIKIT</span></div><div class=\"line\">        <span class=\"comment\">// Subscribe to app events</span></div><div class=\"line\">        [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                                 selector:<span class=\"keyword\">@selector</span>(clearMemory)</div><div class=\"line\">                                                     name:<span class=\"built_in\">UIApplicationDidReceiveMemoryWarningNotification</span></div><div class=\"line\">                                                   object:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\">        [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                                 selector:<span class=\"keyword\">@selector</span>(deleteOldFiles)</div><div class=\"line\">                                                     name:<span class=\"built_in\">UIApplicationWillTerminateNotification</span></div><div class=\"line\">                                                   object:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\">        [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                                 selector:<span class=\"keyword\">@selector</span>(backgroundDeleteOldFiles)</div><div class=\"line\">                                                     name:<span class=\"built_in\">UIApplicationDidEnterBackgroundNotification</span></div><div class=\"line\">                                                   object:<span class=\"literal\">nil</span>];</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//辅助方法，便捷式创建缓存路径</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)makeDiskCachePath:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span>*)fullNamespace &#123;</div><div class=\"line\">    <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *paths = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSCachesDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> [paths[<span class=\"number\">0</span>] stringByAppendingPathComponent:fullNamespace];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"SDImageCache的缓存操作\"><a href=\"#SDImageCache的缓存操作\" class=\"headerlink\" title=\"SDImageCache的缓存操作\"></a>SDImageCache的缓存操作</h3><h4 id=\"存\"><a href=\"#存\" class=\"headerlink\" title=\"存\"></a>存</h4><p>这里同样提供了三个方法方便使用者根据不同的需求进行图片存储功能的选择。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用默认的存储路径，并默认存储到磁盘</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)storeImage:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image</div><div class=\"line\">            forKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key</div><div class=\"line\">        completion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> storeImage:image imageData:<span class=\"literal\">nil</span> forKey:key toDisk:<span class=\"literal\">YES</span> completion:completionBlock];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该方法可供用户选择是否能够保存到磁盘</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)storeImage:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image</div><div class=\"line\">            forKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key</div><div class=\"line\">            toDisk:(<span class=\"built_in\">BOOL</span>)toDisk</div><div class=\"line\">        completion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> storeImage:image imageData:<span class=\"literal\">nil</span> forKey:key toDisk:toDisk completion:completionBlock];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 此处提供了图片的NSdata数据，可供用户直接存储。</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)storeImage:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image</div><div class=\"line\">         imageData:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSData</span> *)imageData</div><div class=\"line\">            forKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key</div><div class=\"line\">            toDisk:(<span class=\"built_in\">BOOL</span>)toDisk</div><div class=\"line\">        completion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class=\"line\">    <span class=\"comment\">// 做下异常校验，如果图片或者key不存在，直接返回    </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!image || !key) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            completionBlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 检验下配置类是否允许将图片保存到内存，如果允许就进行保存处理</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.config.shouldCacheImagesInMemory) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSUInteger</span> cost = SDCacheCostForImage(image);</div><div class=\"line\">        [<span class=\"keyword\">self</span>.memCache setObject:image forKey:key cost:cost];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 是否需要保存到磁盘</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (toDisk) &#123;</div><div class=\"line\">        <span class=\"comment\">// 保存需要在IO队列中进行，先检验图片NSdata是否存在，如果只有UIImage对象，需要先转换成Data类型</span></div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">            <span class=\"built_in\">NSData</span> *data = imageData;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> (!data &amp;&amp; image) &#123;</div><div class=\"line\">                SDImageFormat imageFormatFromData = [<span class=\"built_in\">NSData</span> sd_imageFormatForImageData:data];</div><div class=\"line\">                data = [image sd_imageDataAsFormat:imageFormatFromData];</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            [<span class=\"keyword\">self</span> storeImageDataToDisk:data forKey:key];</div><div class=\"line\">            <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">                <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                    completionBlock();</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            completionBlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 保存数据到磁盘，注意保存操作要在IO队列上进行。并根据是否要保存到iCloud对URL进行设置</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)storeImageDataToDisk:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSData</span> *)imageData forKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!imageData || !key) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 检查下是否是在IO队列上，因为读写操作要在单独的异步队列进行</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> checkIfQueueIsIOQueue];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 检查是否在当前的目录下存在文件夹，如不存在，先创建之</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (![_fileManager fileExistsAtPath:_diskCachePath]) &#123;</div><div class=\"line\">        [_fileManager createDirectoryAtPath:_diskCachePath withIntermediateDirectories:<span class=\"literal\">YES</span> attributes:<span class=\"literal\">nil</span> error:<span class=\"literal\">NULL</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 获取缓存图片地址文件夹路径</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *cachePathForKey = [<span class=\"keyword\">self</span> defaultCachePathForKey:key];</div><div class=\"line\">    <span class=\"comment\">// 转变为文件URL</span></div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *fileURL = [<span class=\"built_in\">NSURL</span> fileURLWithPath:cachePathForKey];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 保存操作</span></div><div class=\"line\">    [_fileManager createFileAtPath:cachePathForKey contents:imageData attributes:<span class=\"literal\">nil</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 阻止图片保存到iCloud</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.config.shouldDisableiCloud) &#123;</div><div class=\"line\">        [fileURL setResourceValue:@YES forKey:<span class=\"built_in\">NSURLIsExcludedFromBackupKey</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"取-amp-查\"><a href=\"#取-amp-查\" class=\"headerlink\" title=\"取&amp;查\"></a>取&amp;查</h4><p>SDWebImageCache提供了查询内存图片、磁盘图片的功能，还提供了查询默认路径和自定义路径下某个key对应的图片。</p>\n<ul>\n<li><p>检测图片是否在磁盘中有缓存</p>\n  <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">void</span>)diskImageExistsWithKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key completion:(<span class=\"keyword\">nullable</span> SDWebImageCheckCacheCompletionBlock)completionBlock &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(_ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">BOOL</span> exists = [_fileManager fileExistsAtPath:[<span class=\"keyword\">self</span> defaultCachePathForKey:key]];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name</span></div><div class=\"line\">        <span class=\"comment\">// checking the key with and without the extension</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!exists) &#123;</div><div class=\"line\">            exists = [_fileManager fileExistsAtPath:[<span class=\"keyword\">self</span> defaultCachePathForKey:key].stringByDeletingPathExtension];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                completionBlock(exists);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>获取内存/磁盘上缓存的图片</p>\n  <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)imageFromMemoryCacheForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span>.memCache objectForKey:key];</div><div class=\"line\">&#125;</div><div class=\"line\">    - (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)imageFromDiskCacheForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *diskImage = [<span class=\"keyword\">self</span> diskImageForKey:key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (diskImage &amp;&amp; <span class=\"keyword\">self</span>.config.shouldCacheImagesInMemory) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSUInteger</span> cost = SDCacheCostForImage(diskImage);</div><div class=\"line\">        [<span class=\"keyword\">self</span>.memCache setObject:diskImage forKey:key cost:cost];</div><div class=\"line\">    &#125;</div><div class=\"line\">    - (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)imageFromCacheForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"comment\">// First check the in-memory cache...</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image = [<span class=\"keyword\">self</span> imageFromMemoryCacheForKey:key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (image) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> image;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Second check the disk cache...</span></div><div class=\"line\">    image = [<span class=\"keyword\">self</span> imageFromDiskCacheForKey:key];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> diskImage;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>辅助方法，获取所有路径下是否有该key缓存的图片</p>\n  <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSData</span> *)diskImageDataBySearchingAllPathsForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *defaultPath = [<span class=\"keyword\">self</span> defaultCachePathForKey:key];</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:defaultPath];</div><div class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name</span></div><div class=\"line\">    <span class=\"comment\">// checking the key with and without the extension</span></div><div class=\"line\">    data = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:defaultPath.stringByDeletingPathExtension];</div><div class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *customPaths = [<span class=\"keyword\">self</span>.customPaths <span class=\"keyword\">copy</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *path <span class=\"keyword\">in</span> customPaths) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *filePath = [<span class=\"keyword\">self</span> cachePathForKey:key inPath:path];</div><div class=\"line\">        <span class=\"built_in\">NSData</span> *imageData = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:filePath];</div><div class=\"line\">        <span class=\"keyword\">if</span> (imageData) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageData;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name</span></div><div class=\"line\">        <span class=\"comment\">// checking the key with and without the extension</span></div><div class=\"line\">        imageData = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:filePath.stringByDeletingPathExtension];</div><div class=\"line\">        <span class=\"keyword\">if</span> (imageData) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageData;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">    - (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)diskImageForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data = [<span class=\"keyword\">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</div><div class=\"line\">        <span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> sd_imageWithData:data];</div><div class=\"line\">        image = [<span class=\"keyword\">self</span> scaledImageForKey:key image:image];</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.config.shouldDecompressImages) &#123;</div><div class=\"line\">            image = [<span class=\"built_in\">UIImage</span> decodedImageWithImage:image];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> image;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>提供供外部调用的，且返回一个Operation对象的查询某Key的图片</p>\n <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSOperation</span> *)queryCacheOperationForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key done:(<span class=\"keyword\">nullable</span> SDCacheQueryCompletedBlock)doneBlock &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!key) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (doneBlock) &#123;</div><div class=\"line\">            doneBlock(<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, SDImageCacheTypeNone);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// First check the in-memory cache...</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image = [<span class=\"keyword\">self</span> imageFromMemoryCacheForKey:key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (image) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSData</span> *diskData = <span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([image isGIF]) &#123;</div><div class=\"line\">            diskData = [<span class=\"keyword\">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (doneBlock) &#123;</div><div class=\"line\">            doneBlock(image, diskData, SDImageCacheTypeMemory);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSOperation</span> *operation = [<span class=\"built_in\">NSOperation</span> new];</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (operation.isCancelled) &#123;</div><div class=\"line\">            <span class=\"comment\">// do not call the completion if cancelled</span></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">NSData</span> *diskData = [<span class=\"keyword\">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class=\"line\">            <span class=\"built_in\">UIImage</span> *diskImage = [<span class=\"keyword\">self</span> diskImageForKey:key];</div><div class=\"line\">            <span class=\"keyword\">if</span> (diskImage &amp;&amp; <span class=\"keyword\">self</span>.config.shouldCacheImagesInMemory) &#123;</div><div class=\"line\">                <span class=\"built_in\">NSUInteger</span> cost = SDCacheCostForImage(diskImage);</div><div class=\"line\">                [<span class=\"keyword\">self</span>.memCache setObject:diskImage forKey:key cost:cost];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (doneBlock) &#123;</div><div class=\"line\">                <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                    doneBlock(diskImage, diskData, SDImageCacheTypeDisk);</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> operation;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h4><p>同样，删除也包括删除内存中的图片和删除磁盘中的图片，俩种，比较简单，下面是源码，可以参考下<br>    <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">     - (<span class=\"keyword\">void</span>)clearMemory &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.memCache removeAllObjects];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    - (<span class=\"keyword\">void</span>)clearDiskOnCompletion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completion &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        [_fileManager removeItemAtPath:<span class=\"keyword\">self</span>.diskCachePath error:<span class=\"literal\">nil</span>];</div><div class=\"line\">        [_fileManager createDirectoryAtPath:<span class=\"keyword\">self</span>.diskCachePath</div><div class=\"line\">                withIntermediateDirectories:<span class=\"literal\">YES</span></div><div class=\"line\">                                 attributes:<span class=\"literal\">nil</span></div><div class=\"line\">                                      error:<span class=\"literal\">NULL</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (completion) &#123;</div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                completion();</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>删除这块，唯一需要特别注意的就是删除过期的文件，以及对文件大小的存储上限做校验，如果超过最大上限，将最老的文件删除掉<br>    <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">void</span>)deleteOldFiles &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> deleteOldFilesWithCompletionBlock:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)deleteOldFilesWithCompletionBlock:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *diskCacheURL = [<span class=\"built_in\">NSURL</span> fileURLWithPath:<span class=\"keyword\">self</span>.diskCachePath isDirectory:<span class=\"literal\">YES</span>];</div><div class=\"line\">        <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *resourceKeys = @[<span class=\"built_in\">NSURLIsDirectoryKey</span>, <span class=\"built_in\">NSURLContentModificationDateKey</span>, <span class=\"built_in\">NSURLTotalFileAllocatedSizeKey</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// This enumerator prefetches useful properties for our cache files.</span></div><div class=\"line\">        <span class=\"built_in\">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL</div><div class=\"line\">                                                   includingPropertiesForKeys:resourceKeys</div><div class=\"line\">                                                                      options:<span class=\"built_in\">NSDirectoryEnumerationSkipsHiddenFiles</span></div><div class=\"line\">                                                                 errorHandler:<span class=\"literal\">NULL</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSDate</span> *expirationDate = [<span class=\"built_in\">NSDate</span> dateWithTimeIntervalSinceNow:-<span class=\"keyword\">self</span>.config.maxCacheAge];</div><div class=\"line\">        <span class=\"built_in\">NSMutableDictionary</span>&lt;<span class=\"built_in\">NSURL</span> *, <span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *&gt; *cacheFiles = [<span class=\"built_in\">NSMutableDictionary</span> dictionary];</div><div class=\"line\">        <span class=\"built_in\">NSUInteger</span> currentCacheSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Enumerate all of the files in the cache directory.  This loop has two purposes:</span></div><div class=\"line\">        <span class=\"comment\">//</span></div><div class=\"line\">        <span class=\"comment\">//  1. Removing files that are older than the expiration date.</span></div><div class=\"line\">        <span class=\"comment\">//  2. Storing file attributes for the size-based cleanup pass.</span></div><div class=\"line\">        <span class=\"built_in\">NSMutableArray</span>&lt;<span class=\"built_in\">NSURL</span> *&gt; *urlsToDelete = [[<span class=\"built_in\">NSMutableArray</span> alloc] init];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSURL</span> *fileURL <span class=\"keyword\">in</span> fileEnumerator) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSError</span> *error;</div><div class=\"line\">            <span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *resourceValues = [fileURL resourceValuesForKeys:resourceKeys error:&amp;error];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Skip directories and errors.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (error || !resourceValues || [resourceValues[<span class=\"built_in\">NSURLIsDirectoryKey</span>] boolValue]) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Remove files that are older than the expiration date;</span></div><div class=\"line\">            <span class=\"built_in\">NSDate</span> *modificationDate = resourceValues[<span class=\"built_in\">NSURLContentModificationDateKey</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> ([[modificationDate laterDate:expirationDate] isEqualToDate:expirationDate]) &#123;</div><div class=\"line\">                [urlsToDelete addObject:fileURL];</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Store a reference to this file and account for its total size.</span></div><div class=\"line\">            <span class=\"built_in\">NSNumber</span> *totalAllocatedSize = resourceValues[<span class=\"built_in\">NSURLTotalFileAllocatedSizeKey</span>];</div><div class=\"line\">            currentCacheSize += totalAllocatedSize.unsignedIntegerValue;</div><div class=\"line\">            cacheFiles[fileURL] = resourceValues;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSURL</span> *fileURL <span class=\"keyword\">in</span> urlsToDelete) &#123;</div><div class=\"line\">            [_fileManager removeItemAtURL:fileURL error:<span class=\"literal\">nil</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// If our remaining disk cache exceeds a configured maximum size, perform a second</span></div><div class=\"line\">        <span class=\"comment\">// size-based cleanup pass.  We delete the oldest files first.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.config.maxCacheSize &gt; <span class=\"number\">0</span> &amp;&amp; currentCacheSize &gt; <span class=\"keyword\">self</span>.config.maxCacheSize) &#123;</div><div class=\"line\">            <span class=\"comment\">// Target half of our maximum cache size for this cleanup pass.</span></div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"built_in\">NSUInteger</span> desiredCacheSize = <span class=\"keyword\">self</span>.config.maxCacheSize / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Sort the remaining cache files by their last modification time (oldest first).</span></div><div class=\"line\">            <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSURL</span> *&gt; *sortedFiles = [cacheFiles keysSortedByValueWithOptions:<span class=\"built_in\">NSSortConcurrent</span></div><div class=\"line\">                                                                     usingComparator:^<span class=\"built_in\">NSComparisonResult</span>(<span class=\"keyword\">id</span> obj1, <span class=\"keyword\">id</span> obj2) &#123;</div><div class=\"line\">                                                                         <span class=\"keyword\">return</span> [obj1[<span class=\"built_in\">NSURLContentModificationDateKey</span>] compare:obj2[<span class=\"built_in\">NSURLContentModificationDateKey</span>]];</div><div class=\"line\">                                                                     &#125;];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Delete files until we fall below our desired cache size.</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">NSURL</span> *fileURL <span class=\"keyword\">in</span> sortedFiles) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ([_fileManager removeItemAtURL:fileURL error:<span class=\"literal\">nil</span>]) &#123;</div><div class=\"line\">                    <span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *resourceValues = cacheFiles[fileURL];</div><div class=\"line\">                    <span class=\"built_in\">NSNumber</span> *totalAllocatedSize = resourceValues[<span class=\"built_in\">NSURLTotalFileAllocatedSizeKey</span>];</div><div class=\"line\">                    currentCacheSize -= totalAllocatedSize.unsignedIntegerValue;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (currentCacheSize &lt; desiredCacheSize) &#123;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                completionBlock();</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对后台删除的支持，当APP在删除的时候，切换到后台，需要支持后台删除文件<br>    <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">void</span>)backgroundDeleteOldFiles &#123;</div><div class=\"line\">    Class <span class=\"built_in\">UIApplicationClass</span> = <span class=\"built_in\">NSClassFromString</span>(<span class=\"string\">@\"UIApplication\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">UIApplicationClass</span> || ![<span class=\"built_in\">UIApplicationClass</span> respondsToSelector:<span class=\"keyword\">@selector</span>(sharedApplication)]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">UIApplication</span> *application = [<span class=\"built_in\">UIApplication</span> performSelector:<span class=\"keyword\">@selector</span>(sharedApplication)];</div><div class=\"line\">    __block <span class=\"built_in\">UIBackgroundTaskIdentifier</span> bgTask = [application beginBackgroundTaskWithExpirationHandler:^&#123;</div><div class=\"line\">        <span class=\"comment\">// Clean up any unfinished task business by marking where you</span></div><div class=\"line\">        <span class=\"comment\">// stopped or ending the task outright.</span></div><div class=\"line\">        [application endBackgroundTask:bgTask];</div><div class=\"line\">        bgTask = <span class=\"built_in\">UIBackgroundTaskInvalid</span>;</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Start the long-running task and return immediately.</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> deleteOldFilesWithCompletionBlock:^&#123;</div><div class=\"line\">        [application endBackgroundTask:bgTask];</div><div class=\"line\">        bgTask = <span class=\"built_in\">UIBackgroundTaskInvalid</span>;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"缓存的信息\"><a href=\"#缓存的信息\" class=\"headerlink\" title=\"缓存的信息\"></a>缓存的信息</h4><p>除了支持存、查、取、删，之外，SDWebImageCache还提供了方便查看缓存的文件数、缓存的总大小、以及实时计算文件大小的block异步回调，代码如下<br>    <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"built_in\">NSUInteger</span>)getSize &#123;</div><div class=\"line\">    __block <span class=\"built_in\">NSUInteger</span> size = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtPath:<span class=\"keyword\">self</span>.diskCachePath];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *fileName <span class=\"keyword\">in</span> fileEnumerator) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *filePath = [<span class=\"keyword\">self</span>.diskCachePath stringByAppendingPathComponent:fileName];</div><div class=\"line\">            <span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *attrs = [[<span class=\"built_in\">NSFileManager</span> defaultManager] attributesOfItemAtPath:filePath error:<span class=\"literal\">nil</span>];</div><div class=\"line\">            size += [attrs fileSize];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> size;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSUInteger</span>)getDiskCount &#123;</div><div class=\"line\">    __block <span class=\"built_in\">NSUInteger</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtPath:<span class=\"keyword\">self</span>.diskCachePath];</div><div class=\"line\">        count = fileEnumerator.allObjects.count;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)calculateSizeWithCompletionBlock:(<span class=\"keyword\">nullable</span> SDWebImageCalculateSizeBlock)completionBlock &#123;</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *diskCacheURL = [<span class=\"built_in\">NSURL</span> fileURLWithPath:<span class=\"keyword\">self</span>.diskCachePath isDirectory:<span class=\"literal\">YES</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSUInteger</span> fileCount = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">NSUInteger</span> totalSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL</div><div class=\"line\">                                                   includingPropertiesForKeys:@[<span class=\"built_in\">NSFileSize</span>]</div><div class=\"line\">                                                                      options:<span class=\"built_in\">NSDirectoryEnumerationSkipsHiddenFiles</span></div><div class=\"line\">                                                                 errorHandler:<span class=\"literal\">NULL</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSURL</span> *fileURL <span class=\"keyword\">in</span> fileEnumerator) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSNumber</span> *fileSize;</div><div class=\"line\">            [fileURL getResourceValue:&amp;fileSize forKey:<span class=\"built_in\">NSURLFileSizeKey</span> error:<span class=\"literal\">NULL</span>];</div><div class=\"line\">            totalSize += fileSize.unsignedIntegerValue;</div><div class=\"line\">            fileCount += <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                completionBlock(fileCount, totalSize);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>通过这一小节对源码的分析，我们大概知道了SDWebImage的缓存工作原理。也对文件操作有了一个更深刻的理解，下一小节将研究下SDWebImageManager是如果对下载和缓存进行综合管理的。</p>\n","excerpt":"<h1 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h1><p>这一小节主要研究下SDWebImage的cache功能是如何实现的，首先找到在SDWebImage中充当缓存功能的类，这一步很简单，直接定位到SDImageCache类。也就是说，接下来主要就研究这个类了。<br></p>","more":"<p></p>\n<h2 id=\"SDImageCacheConfig-缓存配置\"><a href=\"#SDImageCacheConfig-缓存配置\" class=\"headerlink\" title=\"SDImageCacheConfig 缓存配置\"></a>SDImageCacheConfig 缓存配置</h2><p>SDWebImage提供了一个专门的类SDImageCacheConfig，来进行Cache的一些配置工作，主要配置的信息包括以下几点</p>\n<ol>\n<li>是否允许解压原图</li>\n<li>是否支持iCloud，默认不支持</li>\n<li>是否允许将图片缓存到内存，默认支持</li>\n<li><font color=\"red\"><B>最大缓存周期（默认是一周）</B></font></li>\n<li>最大缓存大小（默认不设置）</li>\n</ol>\n<h2 id=\"SDImageCache-缓存类\"><a href=\"#SDImageCache-缓存类\" class=\"headerlink\" title=\"SDImageCache 缓存类\"></a>SDImageCache 缓存类</h2><p>SDImageCache是一个单例，作为执行图片缓存的工具类，整个App只需要有一个全局的实例就可以了，这没毛病。</p>\n<h3 id=\"SDImageCache文件系统\"><a href=\"#SDImageCache文件系统\" class=\"headerlink\" title=\"SDImageCache文件系统\"></a>SDImageCache文件系统</h3><p>在开始缓存操作之前，除了配置项需要配置外，我个人感觉还有一个地方需要提前准备好的就是缓存的文件系统。</p>\n<h4 id=\"默认的文件存储路径\"><a href=\"#默认的文件存储路径\" class=\"headerlink\" title=\"默认的文件存储路径\"></a>默认的文件存储路径</h4><p>SDImageCache的默认文件存储路径是由单例去控制的，在单例初始化的时候，传入了默认的文件夹名称default，这样的话，默认的文件路径就是../cache/default/com.hackemist.SDWebImageCache. default/ 文件夹。</p>\n<h4 id=\"用户自己定义的文件路径\"><a href=\"#用户自己定义的文件路径\" class=\"headerlink\" title=\"用户自己定义的文件路径\"></a>用户自己定义的文件路径</h4><p>SDImageCache还支持用户自己定义的命名空间，所需要做的就是在创建的时候传入namespace，即可，这样的话，假如用户传入了YoukuImages，那么 缓存的文件路径就是../cache/YoukuImages/com.hackemist.SDWebImageCache.YoukuImages/ 文件夹了。</p>\n<h4 id=\"辅助的文件路径方法\"><a href=\"#辅助的文件路径方法\" class=\"headerlink\" title=\"辅助的文件路径方法\"></a>辅助的文件路径方法</h4><p>这个并不是很复杂，之所以要提一嘴，主要是比较赞赏SDWebImage的函数命名，代码如下<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)makeDiskCachePath:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span>*)fullNamespace &#123;</div><div class=\"line\">    <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *paths = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSCachesDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> [paths[<span class=\"number\">0</span>] stringByAppendingPathComponent:fullNamespace];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"图片存储路径\"><a href=\"#图片存储路径\" class=\"headerlink\" title=\"图片存储路径\"></a>图片存储路径</h4><p>图片的存储路径采用了对URL进行MD5加密的方式，进行处理，通过这种方式防止文件被盗链给服务端增加流量损耗。<br>MD5也是很常见的加密方式，下面附上代码，方便自己以后查看。注意，这里稍微和别的MD5加密的不同的就是，会把文件扩展名带上，比如.png,.jpg之类的。这个方法，其实是提供了一个URL到文件名的映射<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)cachedFileNameForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str = key.UTF8String;</div><div class=\"line\">    <span class=\"keyword\">if</span> (str == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        str = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> r[CC_MD5_DIGEST_LENGTH];</div><div class=\"line\">    CC_MD5(str, (CC_LONG)strlen(str), r);</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *filename = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%@\"</span>,</div><div class=\"line\">                          r[<span class=\"number\">0</span>], r[<span class=\"number\">1</span>], r[<span class=\"number\">2</span>], r[<span class=\"number\">3</span>], r[<span class=\"number\">4</span>], r[<span class=\"number\">5</span>], r[<span class=\"number\">6</span>], r[<span class=\"number\">7</span>], r[<span class=\"number\">8</span>], r[<span class=\"number\">9</span>], r[<span class=\"number\">10</span>],</div><div class=\"line\">                          r[<span class=\"number\">11</span>], r[<span class=\"number\">12</span>], r[<span class=\"number\">13</span>], r[<span class=\"number\">14</span>], r[<span class=\"number\">15</span>], [key.pathExtension isEqualToString:<span class=\"string\">@\"\"</span>] ? <span class=\"string\">@\"\"</span> : [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\".%@\"</span>, key.pathExtension]];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> filename;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>另外提供俩个函数，方便获取文件默认存储路径下指定key图片的方法<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取指定路径下名称为key的图片路径</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)cachePathForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key inPath:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span> *)path &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *filename = [<span class=\"keyword\">self</span> cachedFileNameForKey:key];</div><div class=\"line\">    <span class=\"keyword\">return</span> [path stringByAppendingPathComponent:filename];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取默认路径下key的图片路径，一般情况都是直接使用该方法就获取到图片的路径了</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)defaultCachePathForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> cachePathForKey:key inPath:<span class=\"keyword\">self</span>.diskCachePath];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"SDImageCache的初始化\"><a href=\"#SDImageCache的初始化\" class=\"headerlink\" title=\"SDImageCache的初始化\"></a>SDImageCache的初始化</h3><p>自从Xcode8之后，编译器好像做了一些优化，init方法需要去调用其他的NS_DESIGNATED_INITIALIZER标记的初始化方法，SDImageCache显然也是响应了这样的号召，所以提供了俩个自定义的初始化方法initWithNamespace:和initWithNamespace:diskCacheDirectory:，分别支持按照命名空间及存储路径的自定义初始化。但是单例的初始化会调用默认的初始化方法，使用单例的时候，会在App的Cache文件夹下面创建你一个default的文件夹，并在该Default文件夹下创建com.hackmisk.SDWebImageCache.default的一个文件夹，使用该文件夹来存储图片。下面是初始化的一些代码，并不是很复杂。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)sharedImageCache &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> once;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">id</span> instance;</div><div class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;once, ^&#123;</div><div class=\"line\">        instance = [<span class=\"keyword\">self</span> new];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)init &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> initWithNamespace:<span class=\"string\">@\"default\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithNamespace:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span> *)ns &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *path = [<span class=\"keyword\">self</span> makeDiskCachePath:ns];</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> initWithNamespace:ns diskCacheDirectory:path];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithNamespace:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span> *)ns</div><div class=\"line\">                       diskCacheDirectory:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span> *)directory &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init])) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *fullNamespace = [<span class=\"string\">@\"com.hackemist.SDWebImageCache.\"</span> stringByAppendingString:ns];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// Create IO serial queue</span></div><div class=\"line\">        _ioQueue = dispatch_queue_create(<span class=\"string\">\"com.hackemist.SDWebImageCache\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//目前这里使用的都是默认配置</span></div><div class=\"line\">        _config = [[SDImageCacheConfig alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// Init the memory cache</span></div><div class=\"line\">        <span class=\"comment\">// 创建内存缓存</span></div><div class=\"line\">        _memCache = [[AutoPurgeCache alloc] init];</div><div class=\"line\">        _memCache.name = fullNamespace;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Init the disk cache</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (directory != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 单例形式创建的时候，这里肯定是能执行到的，之后就会创建com.hackmisk.SDWebImageCache.default的缓存路径</span></div><div class=\"line\">            _diskCachePath = [directory stringByAppendingPathComponent:fullNamespace];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *path = [<span class=\"keyword\">self</span> makeDiskCachePath:ns];</div><div class=\"line\">            _diskCachePath = path;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 此处需要稍微注意一下，因为io队列主要是对图片进行增删读写等操作，需要保证fileManager创建在io队列上。</span></div><div class=\"line\">        <span class=\"built_in\">dispatch_sync</span>(_ioQueue, ^&#123;</div><div class=\"line\">            _fileManager = [<span class=\"built_in\">NSFileManager</span> new];</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if SD_UIKIT</span></div><div class=\"line\">        <span class=\"comment\">// Subscribe to app events</span></div><div class=\"line\">        [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                                 selector:<span class=\"keyword\">@selector</span>(clearMemory)</div><div class=\"line\">                                                     name:<span class=\"built_in\">UIApplicationDidReceiveMemoryWarningNotification</span></div><div class=\"line\">                                                   object:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\">        [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                                 selector:<span class=\"keyword\">@selector</span>(deleteOldFiles)</div><div class=\"line\">                                                     name:<span class=\"built_in\">UIApplicationWillTerminateNotification</span></div><div class=\"line\">                                                   object:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\">        [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                                 selector:<span class=\"keyword\">@selector</span>(backgroundDeleteOldFiles)</div><div class=\"line\">                                                     name:<span class=\"built_in\">UIApplicationDidEnterBackgroundNotification</span></div><div class=\"line\">                                                   object:<span class=\"literal\">nil</span>];</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//辅助方法，便捷式创建缓存路径</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)makeDiskCachePath:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span>*)fullNamespace &#123;</div><div class=\"line\">    <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *paths = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSCachesDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> [paths[<span class=\"number\">0</span>] stringByAppendingPathComponent:fullNamespace];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"SDImageCache的缓存操作\"><a href=\"#SDImageCache的缓存操作\" class=\"headerlink\" title=\"SDImageCache的缓存操作\"></a>SDImageCache的缓存操作</h3><h4 id=\"存\"><a href=\"#存\" class=\"headerlink\" title=\"存\"></a>存</h4><p>这里同样提供了三个方法方便使用者根据不同的需求进行图片存储功能的选择。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用默认的存储路径，并默认存储到磁盘</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)storeImage:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image</div><div class=\"line\">            forKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key</div><div class=\"line\">        completion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> storeImage:image imageData:<span class=\"literal\">nil</span> forKey:key toDisk:<span class=\"literal\">YES</span> completion:completionBlock];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该方法可供用户选择是否能够保存到磁盘</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)storeImage:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image</div><div class=\"line\">            forKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key</div><div class=\"line\">            toDisk:(<span class=\"built_in\">BOOL</span>)toDisk</div><div class=\"line\">        completion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> storeImage:image imageData:<span class=\"literal\">nil</span> forKey:key toDisk:toDisk completion:completionBlock];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 此处提供了图片的NSdata数据，可供用户直接存储。</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)storeImage:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image</div><div class=\"line\">         imageData:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSData</span> *)imageData</div><div class=\"line\">            forKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key</div><div class=\"line\">            toDisk:(<span class=\"built_in\">BOOL</span>)toDisk</div><div class=\"line\">        completion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class=\"line\">    <span class=\"comment\">// 做下异常校验，如果图片或者key不存在，直接返回    </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!image || !key) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            completionBlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 检验下配置类是否允许将图片保存到内存，如果允许就进行保存处理</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.config.shouldCacheImagesInMemory) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSUInteger</span> cost = SDCacheCostForImage(image);</div><div class=\"line\">        [<span class=\"keyword\">self</span>.memCache setObject:image forKey:key cost:cost];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 是否需要保存到磁盘</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (toDisk) &#123;</div><div class=\"line\">        <span class=\"comment\">// 保存需要在IO队列中进行，先检验图片NSdata是否存在，如果只有UIImage对象，需要先转换成Data类型</span></div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">            <span class=\"built_in\">NSData</span> *data = imageData;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> (!data &amp;&amp; image) &#123;</div><div class=\"line\">                SDImageFormat imageFormatFromData = [<span class=\"built_in\">NSData</span> sd_imageFormatForImageData:data];</div><div class=\"line\">                data = [image sd_imageDataAsFormat:imageFormatFromData];</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            [<span class=\"keyword\">self</span> storeImageDataToDisk:data forKey:key];</div><div class=\"line\">            <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">                <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                    completionBlock();</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            completionBlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 保存数据到磁盘，注意保存操作要在IO队列上进行。并根据是否要保存到iCloud对URL进行设置</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)storeImageDataToDisk:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSData</span> *)imageData forKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!imageData || !key) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 检查下是否是在IO队列上，因为读写操作要在单独的异步队列进行</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> checkIfQueueIsIOQueue];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 检查是否在当前的目录下存在文件夹，如不存在，先创建之</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (![_fileManager fileExistsAtPath:_diskCachePath]) &#123;</div><div class=\"line\">        [_fileManager createDirectoryAtPath:_diskCachePath withIntermediateDirectories:<span class=\"literal\">YES</span> attributes:<span class=\"literal\">nil</span> error:<span class=\"literal\">NULL</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 获取缓存图片地址文件夹路径</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *cachePathForKey = [<span class=\"keyword\">self</span> defaultCachePathForKey:key];</div><div class=\"line\">    <span class=\"comment\">// 转变为文件URL</span></div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *fileURL = [<span class=\"built_in\">NSURL</span> fileURLWithPath:cachePathForKey];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 保存操作</span></div><div class=\"line\">    [_fileManager createFileAtPath:cachePathForKey contents:imageData attributes:<span class=\"literal\">nil</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 阻止图片保存到iCloud</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.config.shouldDisableiCloud) &#123;</div><div class=\"line\">        [fileURL setResourceValue:@YES forKey:<span class=\"built_in\">NSURLIsExcludedFromBackupKey</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"取-amp-查\"><a href=\"#取-amp-查\" class=\"headerlink\" title=\"取&amp;查\"></a>取&amp;查</h4><p>SDWebImageCache提供了查询内存图片、磁盘图片的功能，还提供了查询默认路径和自定义路径下某个key对应的图片。</p>\n<ul>\n<li><p>检测图片是否在磁盘中有缓存</p>\n  <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">void</span>)diskImageExistsWithKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key completion:(<span class=\"keyword\">nullable</span> SDWebImageCheckCacheCompletionBlock)completionBlock &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(_ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">BOOL</span> exists = [_fileManager fileExistsAtPath:[<span class=\"keyword\">self</span> defaultCachePathForKey:key]];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name</span></div><div class=\"line\">        <span class=\"comment\">// checking the key with and without the extension</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!exists) &#123;</div><div class=\"line\">            exists = [_fileManager fileExistsAtPath:[<span class=\"keyword\">self</span> defaultCachePathForKey:key].stringByDeletingPathExtension];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                completionBlock(exists);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>获取内存/磁盘上缓存的图片</p>\n  <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)imageFromMemoryCacheForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span>.memCache objectForKey:key];</div><div class=\"line\">&#125;</div><div class=\"line\">    - (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)imageFromDiskCacheForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *diskImage = [<span class=\"keyword\">self</span> diskImageForKey:key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (diskImage &amp;&amp; <span class=\"keyword\">self</span>.config.shouldCacheImagesInMemory) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSUInteger</span> cost = SDCacheCostForImage(diskImage);</div><div class=\"line\">        [<span class=\"keyword\">self</span>.memCache setObject:diskImage forKey:key cost:cost];</div><div class=\"line\">    &#125;</div><div class=\"line\">    - (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)imageFromCacheForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"comment\">// First check the in-memory cache...</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image = [<span class=\"keyword\">self</span> imageFromMemoryCacheForKey:key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (image) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> image;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Second check the disk cache...</span></div><div class=\"line\">    image = [<span class=\"keyword\">self</span> imageFromDiskCacheForKey:key];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> diskImage;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>辅助方法，获取所有路径下是否有该key缓存的图片</p>\n  <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSData</span> *)diskImageDataBySearchingAllPathsForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *defaultPath = [<span class=\"keyword\">self</span> defaultCachePathForKey:key];</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:defaultPath];</div><div class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name</span></div><div class=\"line\">    <span class=\"comment\">// checking the key with and without the extension</span></div><div class=\"line\">    data = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:defaultPath.stringByDeletingPathExtension];</div><div class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *customPaths = [<span class=\"keyword\">self</span>.customPaths <span class=\"keyword\">copy</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *path <span class=\"keyword\">in</span> customPaths) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *filePath = [<span class=\"keyword\">self</span> cachePathForKey:key inPath:path];</div><div class=\"line\">        <span class=\"built_in\">NSData</span> *imageData = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:filePath];</div><div class=\"line\">        <span class=\"keyword\">if</span> (imageData) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageData;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name</span></div><div class=\"line\">        <span class=\"comment\">// checking the key with and without the extension</span></div><div class=\"line\">        imageData = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:filePath.stringByDeletingPathExtension];</div><div class=\"line\">        <span class=\"keyword\">if</span> (imageData) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageData;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">    - (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)diskImageForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data = [<span class=\"keyword\">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</div><div class=\"line\">        <span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> sd_imageWithData:data];</div><div class=\"line\">        image = [<span class=\"keyword\">self</span> scaledImageForKey:key image:image];</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.config.shouldDecompressImages) &#123;</div><div class=\"line\">            image = [<span class=\"built_in\">UIImage</span> decodedImageWithImage:image];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> image;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>提供供外部调用的，且返回一个Operation对象的查询某Key的图片</p>\n <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSOperation</span> *)queryCacheOperationForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key done:(<span class=\"keyword\">nullable</span> SDCacheQueryCompletedBlock)doneBlock &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!key) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (doneBlock) &#123;</div><div class=\"line\">            doneBlock(<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, SDImageCacheTypeNone);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// First check the in-memory cache...</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image = [<span class=\"keyword\">self</span> imageFromMemoryCacheForKey:key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (image) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSData</span> *diskData = <span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([image isGIF]) &#123;</div><div class=\"line\">            diskData = [<span class=\"keyword\">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (doneBlock) &#123;</div><div class=\"line\">            doneBlock(image, diskData, SDImageCacheTypeMemory);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSOperation</span> *operation = [<span class=\"built_in\">NSOperation</span> new];</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (operation.isCancelled) &#123;</div><div class=\"line\">            <span class=\"comment\">// do not call the completion if cancelled</span></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">NSData</span> *diskData = [<span class=\"keyword\">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class=\"line\">            <span class=\"built_in\">UIImage</span> *diskImage = [<span class=\"keyword\">self</span> diskImageForKey:key];</div><div class=\"line\">            <span class=\"keyword\">if</span> (diskImage &amp;&amp; <span class=\"keyword\">self</span>.config.shouldCacheImagesInMemory) &#123;</div><div class=\"line\">                <span class=\"built_in\">NSUInteger</span> cost = SDCacheCostForImage(diskImage);</div><div class=\"line\">                [<span class=\"keyword\">self</span>.memCache setObject:diskImage forKey:key cost:cost];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (doneBlock) &#123;</div><div class=\"line\">                <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                    doneBlock(diskImage, diskData, SDImageCacheTypeDisk);</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> operation;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h4><p>同样，删除也包括删除内存中的图片和删除磁盘中的图片，俩种，比较简单，下面是源码，可以参考下<br>    <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">     - (<span class=\"keyword\">void</span>)clearMemory &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.memCache removeAllObjects];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    - (<span class=\"keyword\">void</span>)clearDiskOnCompletion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completion &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        [_fileManager removeItemAtPath:<span class=\"keyword\">self</span>.diskCachePath error:<span class=\"literal\">nil</span>];</div><div class=\"line\">        [_fileManager createDirectoryAtPath:<span class=\"keyword\">self</span>.diskCachePath</div><div class=\"line\">                withIntermediateDirectories:<span class=\"literal\">YES</span></div><div class=\"line\">                                 attributes:<span class=\"literal\">nil</span></div><div class=\"line\">                                      error:<span class=\"literal\">NULL</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (completion) &#123;</div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                completion();</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>删除这块，唯一需要特别注意的就是删除过期的文件，以及对文件大小的存储上限做校验，如果超过最大上限，将最老的文件删除掉<br>    <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">void</span>)deleteOldFiles &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> deleteOldFilesWithCompletionBlock:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)deleteOldFilesWithCompletionBlock:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *diskCacheURL = [<span class=\"built_in\">NSURL</span> fileURLWithPath:<span class=\"keyword\">self</span>.diskCachePath isDirectory:<span class=\"literal\">YES</span>];</div><div class=\"line\">        <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *resourceKeys = @[<span class=\"built_in\">NSURLIsDirectoryKey</span>, <span class=\"built_in\">NSURLContentModificationDateKey</span>, <span class=\"built_in\">NSURLTotalFileAllocatedSizeKey</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// This enumerator prefetches useful properties for our cache files.</span></div><div class=\"line\">        <span class=\"built_in\">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL</div><div class=\"line\">                                                   includingPropertiesForKeys:resourceKeys</div><div class=\"line\">                                                                      options:<span class=\"built_in\">NSDirectoryEnumerationSkipsHiddenFiles</span></div><div class=\"line\">                                                                 errorHandler:<span class=\"literal\">NULL</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSDate</span> *expirationDate = [<span class=\"built_in\">NSDate</span> dateWithTimeIntervalSinceNow:-<span class=\"keyword\">self</span>.config.maxCacheAge];</div><div class=\"line\">        <span class=\"built_in\">NSMutableDictionary</span>&lt;<span class=\"built_in\">NSURL</span> *, <span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *&gt; *cacheFiles = [<span class=\"built_in\">NSMutableDictionary</span> dictionary];</div><div class=\"line\">        <span class=\"built_in\">NSUInteger</span> currentCacheSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Enumerate all of the files in the cache directory.  This loop has two purposes:</span></div><div class=\"line\">        <span class=\"comment\">//</span></div><div class=\"line\">        <span class=\"comment\">//  1. Removing files that are older than the expiration date.</span></div><div class=\"line\">        <span class=\"comment\">//  2. Storing file attributes for the size-based cleanup pass.</span></div><div class=\"line\">        <span class=\"built_in\">NSMutableArray</span>&lt;<span class=\"built_in\">NSURL</span> *&gt; *urlsToDelete = [[<span class=\"built_in\">NSMutableArray</span> alloc] init];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSURL</span> *fileURL <span class=\"keyword\">in</span> fileEnumerator) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSError</span> *error;</div><div class=\"line\">            <span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *resourceValues = [fileURL resourceValuesForKeys:resourceKeys error:&amp;error];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Skip directories and errors.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (error || !resourceValues || [resourceValues[<span class=\"built_in\">NSURLIsDirectoryKey</span>] boolValue]) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Remove files that are older than the expiration date;</span></div><div class=\"line\">            <span class=\"built_in\">NSDate</span> *modificationDate = resourceValues[<span class=\"built_in\">NSURLContentModificationDateKey</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> ([[modificationDate laterDate:expirationDate] isEqualToDate:expirationDate]) &#123;</div><div class=\"line\">                [urlsToDelete addObject:fileURL];</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Store a reference to this file and account for its total size.</span></div><div class=\"line\">            <span class=\"built_in\">NSNumber</span> *totalAllocatedSize = resourceValues[<span class=\"built_in\">NSURLTotalFileAllocatedSizeKey</span>];</div><div class=\"line\">            currentCacheSize += totalAllocatedSize.unsignedIntegerValue;</div><div class=\"line\">            cacheFiles[fileURL] = resourceValues;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSURL</span> *fileURL <span class=\"keyword\">in</span> urlsToDelete) &#123;</div><div class=\"line\">            [_fileManager removeItemAtURL:fileURL error:<span class=\"literal\">nil</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// If our remaining disk cache exceeds a configured maximum size, perform a second</span></div><div class=\"line\">        <span class=\"comment\">// size-based cleanup pass.  We delete the oldest files first.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.config.maxCacheSize &gt; <span class=\"number\">0</span> &amp;&amp; currentCacheSize &gt; <span class=\"keyword\">self</span>.config.maxCacheSize) &#123;</div><div class=\"line\">            <span class=\"comment\">// Target half of our maximum cache size for this cleanup pass.</span></div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"built_in\">NSUInteger</span> desiredCacheSize = <span class=\"keyword\">self</span>.config.maxCacheSize / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Sort the remaining cache files by their last modification time (oldest first).</span></div><div class=\"line\">            <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSURL</span> *&gt; *sortedFiles = [cacheFiles keysSortedByValueWithOptions:<span class=\"built_in\">NSSortConcurrent</span></div><div class=\"line\">                                                                     usingComparator:^<span class=\"built_in\">NSComparisonResult</span>(<span class=\"keyword\">id</span> obj1, <span class=\"keyword\">id</span> obj2) &#123;</div><div class=\"line\">                                                                         <span class=\"keyword\">return</span> [obj1[<span class=\"built_in\">NSURLContentModificationDateKey</span>] compare:obj2[<span class=\"built_in\">NSURLContentModificationDateKey</span>]];</div><div class=\"line\">                                                                     &#125;];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Delete files until we fall below our desired cache size.</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">NSURL</span> *fileURL <span class=\"keyword\">in</span> sortedFiles) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ([_fileManager removeItemAtURL:fileURL error:<span class=\"literal\">nil</span>]) &#123;</div><div class=\"line\">                    <span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *resourceValues = cacheFiles[fileURL];</div><div class=\"line\">                    <span class=\"built_in\">NSNumber</span> *totalAllocatedSize = resourceValues[<span class=\"built_in\">NSURLTotalFileAllocatedSizeKey</span>];</div><div class=\"line\">                    currentCacheSize -= totalAllocatedSize.unsignedIntegerValue;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (currentCacheSize &lt; desiredCacheSize) &#123;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                completionBlock();</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对后台删除的支持，当APP在删除的时候，切换到后台，需要支持后台删除文件<br>    <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"keyword\">void</span>)backgroundDeleteOldFiles &#123;</div><div class=\"line\">    Class <span class=\"built_in\">UIApplicationClass</span> = <span class=\"built_in\">NSClassFromString</span>(<span class=\"string\">@\"UIApplication\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">UIApplicationClass</span> || ![<span class=\"built_in\">UIApplicationClass</span> respondsToSelector:<span class=\"keyword\">@selector</span>(sharedApplication)]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">UIApplication</span> *application = [<span class=\"built_in\">UIApplication</span> performSelector:<span class=\"keyword\">@selector</span>(sharedApplication)];</div><div class=\"line\">    __block <span class=\"built_in\">UIBackgroundTaskIdentifier</span> bgTask = [application beginBackgroundTaskWithExpirationHandler:^&#123;</div><div class=\"line\">        <span class=\"comment\">// Clean up any unfinished task business by marking where you</span></div><div class=\"line\">        <span class=\"comment\">// stopped or ending the task outright.</span></div><div class=\"line\">        [application endBackgroundTask:bgTask];</div><div class=\"line\">        bgTask = <span class=\"built_in\">UIBackgroundTaskInvalid</span>;</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Start the long-running task and return immediately.</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> deleteOldFilesWithCompletionBlock:^&#123;</div><div class=\"line\">        [application endBackgroundTask:bgTask];</div><div class=\"line\">        bgTask = <span class=\"built_in\">UIBackgroundTaskInvalid</span>;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"缓存的信息\"><a href=\"#缓存的信息\" class=\"headerlink\" title=\"缓存的信息\"></a>缓存的信息</h4><p>除了支持存、查、取、删，之外，SDWebImageCache还提供了方便查看缓存的文件数、缓存的总大小、以及实时计算文件大小的block异步回调，代码如下<br>    <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">    - (<span class=\"built_in\">NSUInteger</span>)getSize &#123;</div><div class=\"line\">    __block <span class=\"built_in\">NSUInteger</span> size = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtPath:<span class=\"keyword\">self</span>.diskCachePath];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *fileName <span class=\"keyword\">in</span> fileEnumerator) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *filePath = [<span class=\"keyword\">self</span>.diskCachePath stringByAppendingPathComponent:fileName];</div><div class=\"line\">            <span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *attrs = [[<span class=\"built_in\">NSFileManager</span> defaultManager] attributesOfItemAtPath:filePath error:<span class=\"literal\">nil</span>];</div><div class=\"line\">            size += [attrs fileSize];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> size;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSUInteger</span>)getDiskCount &#123;</div><div class=\"line\">    __block <span class=\"built_in\">NSUInteger</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtPath:<span class=\"keyword\">self</span>.diskCachePath];</div><div class=\"line\">        count = fileEnumerator.allObjects.count;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)calculateSizeWithCompletionBlock:(<span class=\"keyword\">nullable</span> SDWebImageCalculateSizeBlock)completionBlock &#123;</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *diskCacheURL = [<span class=\"built_in\">NSURL</span> fileURLWithPath:<span class=\"keyword\">self</span>.diskCachePath isDirectory:<span class=\"literal\">YES</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSUInteger</span> fileCount = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">NSUInteger</span> totalSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL</div><div class=\"line\">                                                   includingPropertiesForKeys:@[<span class=\"built_in\">NSFileSize</span>]</div><div class=\"line\">                                                                      options:<span class=\"built_in\">NSDirectoryEnumerationSkipsHiddenFiles</span></div><div class=\"line\">                                                                 errorHandler:<span class=\"literal\">NULL</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSURL</span> *fileURL <span class=\"keyword\">in</span> fileEnumerator) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSNumber</span> *fileSize;</div><div class=\"line\">            [fileURL getResourceValue:&amp;fileSize forKey:<span class=\"built_in\">NSURLFileSizeKey</span> error:<span class=\"literal\">NULL</span>];</div><div class=\"line\">            totalSize += fileSize.unsignedIntegerValue;</div><div class=\"line\">            fileCount += <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) &#123;</div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                completionBlock(fileCount, totalSize);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>通过这一小节对源码的分析，我们大概知道了SDWebImage的缓存工作原理。也对文件操作有了一个更深刻的理解，下一小节将研究下SDWebImageManager是如果对下载和缓存进行综合管理的。</p>"},{"title":"SDWebImage学习笔记（一）","date":"2016-12-30T02:36:10.000Z","_content":"# 简介\n\nSDWebImage是ios开发中，最常见的图片加载框架，它主要实现了图片异步加载、图片缓存，并提供了UIImageView、UIButton、MKAnnotationview的类目，使用体验很友好，也很方便，成为广大ios开发者加载网络图片的选择，今天我主要是来通过分析其源码来研究下，SDWebimage到底是如何进行设计的，架构的? \n\n<!--more-->\n\n# 特性\n* 提供UIimageview、UIbutton、MKAnnotationview的类目加载网络图片及缓存管理\n* 异步的图片下载\n* <font color=red><B>异步的图片内存+磁盘图片缓存，并支持自动的缓存过期处理</B></font>\n* 图片的后台解压\n* <font color=red><B>确保同一个url不会下载多次（是优点也是缺点）</B></font>\n* 错误的url不会不停的下载\n* 永远不会阻塞主线程\n* 性能提升\n* 采用GCD和ARC\n\n# 支持的图片格式\n* 支持JPEG,PNG,GIF\n* 支持WEBP\n\n# 使用要求\n* ios 7.0 +\n* tvos 9.0 +\n* watchos 2.0 + \n* osx 10.8 + \n* xcode 7.3 +\n\n# 常见问题\n* 如果UITableViewCell使用了动态的图片大小，图片展示可能会有问题，也就是说SDWebImage是根据placeholder的大小来设置UIImageView的大小的，如果要展示的图片大小和placeholder的图片大小不一致就会有一些问题，解决方案[<font color=blue>点击这里</font>](http://www.wrichards.com/blog/2011/11/sdwebimage-fixed-width-cell-images/)\n\n* 手动去刷新图片，SDWebImage使用了暴力的图片缓存方式，不会关注HTTP 的header里面缓存的策略，直接根据图片的URL地址进行缓存，也就是说一个URL会对应一张图片，如果图片地址不发生变化的话，图片永远不会重新下载，因此在某些场景下，你需要手动去刷新图片。\n \n# 架构图\n![架构图](http://ock9zbzms.bkt.clouddn.com/SDWebImageClassDiagram.png)\n\n# 正文\n上文是SDWebImageView官方的一些文档，我这里给简要的翻译了下，可以看的出来，SDWebImage虽然功能很强大，但是依然还是有一些使用中存在的问题。接下来，我将会通过逐个分析代码的方式，将SDWebImageView从下载、缓存、管理等等一层一层剥开它神秘的面纱。在这个过程中，我尽量避免过多的纠结于一些细节，但是同样的，有些时候为了说明一些问题，难免也会贴一些代码。\n\n## 下载\nSDWebimageview的下载是通过NSURLSession的方式，并通过继承NSOperation来异步的进行下载。下载过程中是通过发送通知的方式进行消息通信。\n```objc\nNSString *const SDWebImageDownloadStartNotification = @\"SDWebImageDownloadStartNotification\";\nNSString *const SDWebImageDownloadReceiveResponseNotification = @\"SDWebImageDownloadReceiveResponseNotification\";\nNSString *const SDWebImageDownloadStopNotification = @\"SDWebImageDownloadStopNotification\";\nNSString *const SDWebImageDownloadFinishNotification = @\"SDWebImageDownloadFinishNotification\";\n```\n### SDWebImageDownloaderOperation任务的创建及取消\n SDWebImageDownloaderOperation通过确认下面的这俩个协议实际上执行下载图片的工作，接下来就研究下其内部是怎么工作的。\n```objc\n@protocol SDWebImageDownloaderOperationInterface<NSObject>\n//通过该方法进行Opearation的创建\n- (nonnull instancetype)initWithRequest:(nullable NSURLRequest *)request\n                              inSession:(nullable NSURLSession *)session\n                                options:(SDWebImageDownloaderOptions)options;\n//添加下载过程中需要的回调，主要包括下载进度、下载完成的回调\n- (nullable id)addHandlersForProgress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                            completed:(nullable SDWebImageDownloaderCompletedBlock)completedBlock;\n//是否支持解压图片\n- (BOOL)shouldDecompressImages;\n//设置是否支持解压图片\n- (void)setShouldDecompressImages:(BOOL)value;\n//URL鉴定\n- (nullable NSURLCredential *)credential;\n//设置URL鉴定\n- (void)setCredential:(nullable NSURLCredential *)value;\n\n@end\n\n@protocol SDWebImageOperation <NSObject>\n\n- (void)cancel;\n\n@end\n```\n### SDWebImageDownloaderOperation任务的初始化以及任务的执行\n忽略掉那些细节，这里只关注关键的几个地方，SDWebImageDownloaderOperation，以下简称‘下载操作对象’，通过持有Request，注入session，以及options，创建好下载操作对象。之后通过外部调用start方法，开启下载任务。并通过设置session任务的代理，来监听下载过程，同时发出相应的通知进行对象间的消息通信。\n\n1. 初始化\n```objc\n- (nonnull instancetype)initWithRequest:(nullable NSURLRequest *)request\n                              inSession:(nullable NSURLSession *)session\n                                options:(SDWebImageDownloaderOptions)options {\n    if ((self = [super init])) {\n        _request = [request copy];\n        _shouldDecompressImages = YES;\n        _options = options;\n        _callbackBlocks = [NSMutableArray new];\n        _executing = NO;\n        _finished = NO;\n        _expectedSize = 0;\n        _unownedSession = session;\n        responseFromCached = YES; // Initially wrong until `- URLSession:dataTask:willCacheResponse:completionHandler: is called or not called\n        _barrierQueue = dispatch_queue_create(\"com.hackemist.SDWebImageDownloaderOperationBarrierQueue\", DISPATCH_QUEUE_CONCURRENT);\n    }\n    return self;\n}\n```\n2. 执行任务\n```objc\n- (void)start {\n    @synchronized (self) {\n        if (self.isCancelled) {\n            self.finished = YES;\n            [self reset];\n            return;\n        }\n\n#if SD_UIKIT\n        Class UIApplicationClass = NSClassFromString(@\"UIApplication\");\n        BOOL hasApplication = UIApplicationClass && [UIApplicationClass respondsToSelector:@selector(sharedApplication)];\n        //对后台下载任务的支持，app可以开启后台下载任务，并返回一个后台下载的ID，并设置一个过期的callback，此处注意当任务失效的时候，需要将任务终止，并设置taskid为无效\n        if (hasApplication && [self shouldContinueWhenAppEntersBackground]) {\n            __weak __typeof__ (self) wself = self;\n            UIApplication * app = [UIApplicationClass performSelector:@selector(sharedApplication)];\n            self.backgroundTaskId = [app beginBackgroundTaskWithExpirationHandler:^{\n                __strong __typeof (wself) sself = wself;\n\n                if (sself) {\n                    [sself cancel];\n\n                    [app endBackgroundTask:sself.backgroundTaskId];\n                    sself.backgroundTaskId = UIBackgroundTaskInvalid;\n                }\n            }];\n        }\n#endif\n        //默认是有注入session，如果没有的话，需要内部创建一个session\n        NSURLSession *session = self.unownedSession;\n        if (!self.unownedSession) {\n            NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration];\n            sessionConfig.timeoutIntervalForRequest = 15;\n            \n            /**\n             *  Create the session for this task\n             *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate\n             *  method calls and completion handler calls.\n             */\n            self.ownedSession = [NSURLSession sessionWithConfiguration:sessionConfig\n                                                              delegate:self\n                                                         delegateQueue:nil];\n            session = self.ownedSession;\n        }\n        //此处根据当前的session和request创建datatask\n        self.dataTask = [session dataTaskWithRequest:self.request];\n        self.executing = YES;\n    }\n    \n    //datatask开始工作\n    [self.dataTask resume];\n\n    if (self.dataTask) {\n        //通知所有监听回调，任务开始执行了。俩种方式，一种是callback方式，一种是通知\n        for (SDWebImageDownloaderProgressBlock progressBlock in [self callbacksForKey:kProgressCallbackKey]) {\n            progressBlock(0, NSURLResponseUnknownLength, self.request.URL);\n        }\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:self];\n        });\n    } else {\n        //对异常情况的处理，如果datatask为nil，进行错误的回调\n        [self callCompletionBlocksWithError:[NSError errorWithDomain:NSURLErrorDomain code:0 userInfo:@{NSLocalizedDescriptionKey : @\"Connection can't be initialized\"}]];\n    }\n\n#if SD_UIKIT\n    Class UIApplicationClass = NSClassFromString(@\"UIApplication\");\n    if(!UIApplicationClass || ![UIApplicationClass respondsToSelector:@selector(sharedApplication)]) {\n        return;\n    }\n    if (self.backgroundTaskId != UIBackgroundTaskInvalid) {\n        UIApplication * app = [UIApplication performSelector:@selector(sharedApplication)];\n        [app endBackgroundTask:self.backgroundTaskId];\n        self.backgroundTaskId = UIBackgroundTaskInvalid;\n    }\n#endif\n}\n```\n3. 接下来就是NSURLSession任务的开启、执行中、结束或者错误回调\n这里就不去贴代码了，要不然这篇博文很大篇幅都被代码占据了，其实任务执行开始之后，主要就是各种异常的处理，因为正常的处理其实是比较简单的，之后就会回调到外面去，让外面调用‘下载操作对象’去决定到底该如何处理。\n（补充：经过后面对SDWebImageDownloader的深入研究，发现SDWebImageDownloaderOperation创建好之后，直接扔到SDWebImageDownloader的队列里面去了，此外session由于是注入的，代理设置的是SDWebImageDownloader，回调自然也由SDWebImageDownloader接收，然后分发给各自对应的SDWebImageDownloaderOperation）\n\n### SDWebImageDownloader对下载任务的封装\nSDWebImageDownloader是对SDWebImageDownloaderOperation的进一步管理和封装，通过下载队列对SDWebImageDownloaderOperation的任务并发数(默认并发数为6个)，执行顺序（默认是FIFO）进行管理。这里我简单梳理下任务的下载流程\n* client（此处指的是使用SDWebImageDownloader的客户，可以是用户自己的类，也可以是其他SDWebImage类）首先需要创建一个SDWebImageDownloader，创建好之后，就准备好了下载需要的downloadQueue，下载相关的一些配置（诸如执行顺序、并发数、超时等等）。\n* client之后调用SDWebImageDownloader的downloadImageWithURL:options:progress:completed:进行实际的下载操作。在这里我有一个疑惑了好久的问题，就是session的回调问题，因为SDWebImageDownloaderOperation里面有session，而SDWebImageDownloader也有session，那么任务执行过程中，岂不是俩处都会收到回调？这难道是SDWebImage的BUG？呵呵，其实并不是，直到我看到下面这段代码。\n```objc\n        NSURLSession *session = self.unownedSession;\n        if (!self.unownedSession) {\n            NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration];\n            sessionConfig.timeoutIntervalForRequest = 15;\n            \n            /**\n             *  Create the session for this task\n             *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate\n             *  method calls and completion handler calls.\n             */\n            //注意这里，只有ownedSession才会设置代理为自己，也就是说注入的session不会设置代理。\n            self.ownedSession = [NSURLSession sessionWithConfiguration:sessionConfig\n                                                              delegate:self\n                                                         delegateQueue:nil];\n            session = self.ownedSession;\n        }\n        \n        self.dataTask = [session dataTaskWithRequest:self.request];\n```\n 看了上面的代码自然就明白了，<font color=red>当使用SDWebImageDownloader的时候，session的回调只有SDWebImageDownloader能接收到，这也是为什么SDWebImageDownloader需要在接收到回调之后要进行转发的缘故。</font>\n\n1. SDWebImageDownloader的初始化\n```objc\n- (nonnull instancetype)initWithSessionConfiguration:(nullable NSURLSessionConfiguration *)sessionConfiguration {\n    if ((self = [super init])) {\n        _operationClass = [SDWebImageDownloaderOperation class];\n        _shouldDecompressImages = YES;\n        //设置任务的执行顺序\n        _executionOrder = SDWebImageDownloaderFIFOExecutionOrder;\n        //创建执行任务的操作队列，并对操作队列进行配置\n        _downloadQueue = [NSOperationQueue new];\n        _downloadQueue.maxConcurrentOperationCount = 6;\n        _downloadQueue.name = @\"com.hackemist.SDWebImageDownloader\";\n        _URLOperations = [NSMutableDictionary new];\n#ifdef SD_WEBP\n        _HTTPHeaders = [@{@\"Accept\": @\"image/webp,image/*;q=0.8\"} mutableCopy];\n#else\n        _HTTPHeaders = [@{@\"Accept\": @\"image/*;q=0.8\"} mutableCopy];\n#endif\n        _barrierQueue = dispatch_queue_create(\"com.hackemist.SDWebImageDownloaderBarrierQueue\", DISPATCH_QUEUE_CONCURRENT);\n        _downloadTimeout = 15.0;\n\n        sessionConfiguration.timeoutIntervalForRequest = _downloadTimeout;\n\n        /**\n         *  Create the session for this task\n         *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate\n         *  method calls and completion handler calls.\n         */\n        self.session = [NSURLSession sessionWithConfiguration:sessionConfiguration\n                                                     delegate:self\n                                                delegateQueue:nil];\n    }\n    return self;\n}\n```\n2. SDWebImageDownloader执行下载操作\n这里请原谅我贴上大段的代码，因为这段代码实在是太漂亮了。通过俩个函数的设计将SDWebImageDownloaderOperation的初始化和SDWebImageDownloadToken初始化分割开。并在初始化operation完成之后将任务扔到队列中去执行，还持有了operation的引用，给SDWebImageDownloader有机会保存到字典中。\n\n```objc\n- (nullable SDWebImageDownloadToken *)downloadImageWithURL:(nullable NSURL *)url\n                                                   options:(SDWebImageDownloaderOptions)options\n                                                  progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                                                 completed:(nullable SDWebImageDownloaderCompletedBlock)completedBlock {\n    __weak SDWebImageDownloader *wself = self;\n\n    return [self addProgressCallback:progressBlock completedBlock:completedBlock forURL:url createCallback:^SDWebImageDownloaderOperation *{\n        __strong __typeof (wself) sself = wself;\n        NSTimeInterval timeoutInterval = sself.downloadTimeout;\n        if (timeoutInterval == 0.0) {\n            timeoutInterval = 15.0;\n        }\n\n        // In order to prevent from potential duplicate caching (NSURLCache + SDImageCache) we disable the cache for image requests if told otherwise\n        NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url cachePolicy:(options & SDWebImageDownloaderUseNSURLCache ? NSURLRequestUseProtocolCachePolicy : NSURLRequestReloadIgnoringLocalCacheData) timeoutInterval:timeoutInterval];\n        request.HTTPShouldHandleCookies = (options & SDWebImageDownloaderHandleCookies);\n        request.HTTPShouldUsePipelining = YES;\n        if (sself.headersFilter) {\n            request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders copy]);\n        }\n        else {\n            request.allHTTPHeaderFields = sself.HTTPHeaders;\n        }\n        SDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];\n        operation.shouldDecompressImages = sself.shouldDecompressImages;\n        \n        if (sself.urlCredential) {\n            operation.credential = sself.urlCredential;\n        } else if (sself.username && sself.password) {\n            operation.credential = [NSURLCredential credentialWithUser:sself.username password:sself.password persistence:NSURLCredentialPersistenceForSession];\n        }\n        \n        if (options & SDWebImageDownloaderHighPriority) {\n            operation.queuePriority = NSOperationQueuePriorityHigh;\n        } else if (options & SDWebImageDownloaderLowPriority) {\n            operation.queuePriority = NSOperationQueuePriorityLow;\n        }\n\n        [sself.downloadQueue addOperation:operation];\n        if (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) {\n            // Emulate LIFO execution order by systematically adding new operations as last operation's dependency\n            [sself.lastAddedOperation addDependency:operation];\n            sself.lastAddedOperation = operation;\n        }\n\n        return operation;\n    }];\n}\n```\n这里有对SDWebImageDownloaderOperation进行保存处理，确保同一个URL只会创建一次，避免内存的额外消耗。添加对token的初始化和管理，把operation的初始化和token的初始化进行业务上一些小分离，代码层次立马清晰起来了，赞！\n```objc\n- (nullable SDWebImageDownloadToken *)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock\n                                           completedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock\n                                                   forURL:(nullable NSURL *)url\n                                           createCallback:(SDWebImageDownloaderOperation *(^)())createCallback {\n    // The URL will be used as the key to the callbacks dictionary so it cannot be nil. If it is nil immediately call the completed block with no image or data.\n    if (url == nil) {\n        if (completedBlock != nil) {\n            completedBlock(nil, nil, nil, NO);\n        }\n        return nil;\n    }\n\n    __block SDWebImageDownloadToken *token = nil;\n\n    dispatch_barrier_sync(self.barrierQueue, ^{\n        SDWebImageDownloaderOperation *operation = self.URLOperations[url];\n        if (!operation) {\n            operation = createCallback();\n            self.URLOperations[url] = operation;\n\n            __weak SDWebImageDownloaderOperation *woperation = operation;\n            operation.completionBlock = ^{\n              SDWebImageDownloaderOperation *soperation = woperation;\n              if (!soperation) return;\n              if (self.URLOperations[url] == soperation) {\n                  [self.URLOperations removeObjectForKey:url];\n              };\n            };\n        }\n        id downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];\n\n        token = [SDWebImageDownloadToken new];\n        token.url = url;\n        token.downloadOperationCancelToken = downloadOperationCancelToken;\n    });\n\n    return token;\n}\n```\n\n# 小结\n 好了，SDWebImageView的下载环节就到这里，看来那句话确实没说错，源码面前，没有神秘，哈哈！下一小节主要研究下SDWebImageView是如何对图片进行缓存操作的。\n\n\n\n***\n参考资料\n[1]. [SDWebimage在github上的地址](https://github.com/rs/SDWebImage)\n[2]. [英文版的使用说明](http://cocoadocs.org/docsets/SDWebImage/3.8.2/)\n[3]. [使用SDWebimage的app列表](https://github.com/rs/SDWebImage/wiki/Who-Uses-SDWebImage)\n***","source":"_posts/SDWebImage学习笔记.md","raw":"---\ntitle: SDWebImage学习笔记（一）\ndate: 2016-12-30 10:36:10\ntags: 三方库研究\n---\n# 简介\n\nSDWebImage是ios开发中，最常见的图片加载框架，它主要实现了图片异步加载、图片缓存，并提供了UIImageView、UIButton、MKAnnotationview的类目，使用体验很友好，也很方便，成为广大ios开发者加载网络图片的选择，今天我主要是来通过分析其源码来研究下，SDWebimage到底是如何进行设计的，架构的? \n\n<!--more-->\n\n# 特性\n* 提供UIimageview、UIbutton、MKAnnotationview的类目加载网络图片及缓存管理\n* 异步的图片下载\n* <font color=red><B>异步的图片内存+磁盘图片缓存，并支持自动的缓存过期处理</B></font>\n* 图片的后台解压\n* <font color=red><B>确保同一个url不会下载多次（是优点也是缺点）</B></font>\n* 错误的url不会不停的下载\n* 永远不会阻塞主线程\n* 性能提升\n* 采用GCD和ARC\n\n# 支持的图片格式\n* 支持JPEG,PNG,GIF\n* 支持WEBP\n\n# 使用要求\n* ios 7.0 +\n* tvos 9.0 +\n* watchos 2.0 + \n* osx 10.8 + \n* xcode 7.3 +\n\n# 常见问题\n* 如果UITableViewCell使用了动态的图片大小，图片展示可能会有问题，也就是说SDWebImage是根据placeholder的大小来设置UIImageView的大小的，如果要展示的图片大小和placeholder的图片大小不一致就会有一些问题，解决方案[<font color=blue>点击这里</font>](http://www.wrichards.com/blog/2011/11/sdwebimage-fixed-width-cell-images/)\n\n* 手动去刷新图片，SDWebImage使用了暴力的图片缓存方式，不会关注HTTP 的header里面缓存的策略，直接根据图片的URL地址进行缓存，也就是说一个URL会对应一张图片，如果图片地址不发生变化的话，图片永远不会重新下载，因此在某些场景下，你需要手动去刷新图片。\n \n# 架构图\n![架构图](http://ock9zbzms.bkt.clouddn.com/SDWebImageClassDiagram.png)\n\n# 正文\n上文是SDWebImageView官方的一些文档，我这里给简要的翻译了下，可以看的出来，SDWebImage虽然功能很强大，但是依然还是有一些使用中存在的问题。接下来，我将会通过逐个分析代码的方式，将SDWebImageView从下载、缓存、管理等等一层一层剥开它神秘的面纱。在这个过程中，我尽量避免过多的纠结于一些细节，但是同样的，有些时候为了说明一些问题，难免也会贴一些代码。\n\n## 下载\nSDWebimageview的下载是通过NSURLSession的方式，并通过继承NSOperation来异步的进行下载。下载过程中是通过发送通知的方式进行消息通信。\n```objc\nNSString *const SDWebImageDownloadStartNotification = @\"SDWebImageDownloadStartNotification\";\nNSString *const SDWebImageDownloadReceiveResponseNotification = @\"SDWebImageDownloadReceiveResponseNotification\";\nNSString *const SDWebImageDownloadStopNotification = @\"SDWebImageDownloadStopNotification\";\nNSString *const SDWebImageDownloadFinishNotification = @\"SDWebImageDownloadFinishNotification\";\n```\n### SDWebImageDownloaderOperation任务的创建及取消\n SDWebImageDownloaderOperation通过确认下面的这俩个协议实际上执行下载图片的工作，接下来就研究下其内部是怎么工作的。\n```objc\n@protocol SDWebImageDownloaderOperationInterface<NSObject>\n//通过该方法进行Opearation的创建\n- (nonnull instancetype)initWithRequest:(nullable NSURLRequest *)request\n                              inSession:(nullable NSURLSession *)session\n                                options:(SDWebImageDownloaderOptions)options;\n//添加下载过程中需要的回调，主要包括下载进度、下载完成的回调\n- (nullable id)addHandlersForProgress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                            completed:(nullable SDWebImageDownloaderCompletedBlock)completedBlock;\n//是否支持解压图片\n- (BOOL)shouldDecompressImages;\n//设置是否支持解压图片\n- (void)setShouldDecompressImages:(BOOL)value;\n//URL鉴定\n- (nullable NSURLCredential *)credential;\n//设置URL鉴定\n- (void)setCredential:(nullable NSURLCredential *)value;\n\n@end\n\n@protocol SDWebImageOperation <NSObject>\n\n- (void)cancel;\n\n@end\n```\n### SDWebImageDownloaderOperation任务的初始化以及任务的执行\n忽略掉那些细节，这里只关注关键的几个地方，SDWebImageDownloaderOperation，以下简称‘下载操作对象’，通过持有Request，注入session，以及options，创建好下载操作对象。之后通过外部调用start方法，开启下载任务。并通过设置session任务的代理，来监听下载过程，同时发出相应的通知进行对象间的消息通信。\n\n1. 初始化\n```objc\n- (nonnull instancetype)initWithRequest:(nullable NSURLRequest *)request\n                              inSession:(nullable NSURLSession *)session\n                                options:(SDWebImageDownloaderOptions)options {\n    if ((self = [super init])) {\n        _request = [request copy];\n        _shouldDecompressImages = YES;\n        _options = options;\n        _callbackBlocks = [NSMutableArray new];\n        _executing = NO;\n        _finished = NO;\n        _expectedSize = 0;\n        _unownedSession = session;\n        responseFromCached = YES; // Initially wrong until `- URLSession:dataTask:willCacheResponse:completionHandler: is called or not called\n        _barrierQueue = dispatch_queue_create(\"com.hackemist.SDWebImageDownloaderOperationBarrierQueue\", DISPATCH_QUEUE_CONCURRENT);\n    }\n    return self;\n}\n```\n2. 执行任务\n```objc\n- (void)start {\n    @synchronized (self) {\n        if (self.isCancelled) {\n            self.finished = YES;\n            [self reset];\n            return;\n        }\n\n#if SD_UIKIT\n        Class UIApplicationClass = NSClassFromString(@\"UIApplication\");\n        BOOL hasApplication = UIApplicationClass && [UIApplicationClass respondsToSelector:@selector(sharedApplication)];\n        //对后台下载任务的支持，app可以开启后台下载任务，并返回一个后台下载的ID，并设置一个过期的callback，此处注意当任务失效的时候，需要将任务终止，并设置taskid为无效\n        if (hasApplication && [self shouldContinueWhenAppEntersBackground]) {\n            __weak __typeof__ (self) wself = self;\n            UIApplication * app = [UIApplicationClass performSelector:@selector(sharedApplication)];\n            self.backgroundTaskId = [app beginBackgroundTaskWithExpirationHandler:^{\n                __strong __typeof (wself) sself = wself;\n\n                if (sself) {\n                    [sself cancel];\n\n                    [app endBackgroundTask:sself.backgroundTaskId];\n                    sself.backgroundTaskId = UIBackgroundTaskInvalid;\n                }\n            }];\n        }\n#endif\n        //默认是有注入session，如果没有的话，需要内部创建一个session\n        NSURLSession *session = self.unownedSession;\n        if (!self.unownedSession) {\n            NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration];\n            sessionConfig.timeoutIntervalForRequest = 15;\n            \n            /**\n             *  Create the session for this task\n             *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate\n             *  method calls and completion handler calls.\n             */\n            self.ownedSession = [NSURLSession sessionWithConfiguration:sessionConfig\n                                                              delegate:self\n                                                         delegateQueue:nil];\n            session = self.ownedSession;\n        }\n        //此处根据当前的session和request创建datatask\n        self.dataTask = [session dataTaskWithRequest:self.request];\n        self.executing = YES;\n    }\n    \n    //datatask开始工作\n    [self.dataTask resume];\n\n    if (self.dataTask) {\n        //通知所有监听回调，任务开始执行了。俩种方式，一种是callback方式，一种是通知\n        for (SDWebImageDownloaderProgressBlock progressBlock in [self callbacksForKey:kProgressCallbackKey]) {\n            progressBlock(0, NSURLResponseUnknownLength, self.request.URL);\n        }\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:self];\n        });\n    } else {\n        //对异常情况的处理，如果datatask为nil，进行错误的回调\n        [self callCompletionBlocksWithError:[NSError errorWithDomain:NSURLErrorDomain code:0 userInfo:@{NSLocalizedDescriptionKey : @\"Connection can't be initialized\"}]];\n    }\n\n#if SD_UIKIT\n    Class UIApplicationClass = NSClassFromString(@\"UIApplication\");\n    if(!UIApplicationClass || ![UIApplicationClass respondsToSelector:@selector(sharedApplication)]) {\n        return;\n    }\n    if (self.backgroundTaskId != UIBackgroundTaskInvalid) {\n        UIApplication * app = [UIApplication performSelector:@selector(sharedApplication)];\n        [app endBackgroundTask:self.backgroundTaskId];\n        self.backgroundTaskId = UIBackgroundTaskInvalid;\n    }\n#endif\n}\n```\n3. 接下来就是NSURLSession任务的开启、执行中、结束或者错误回调\n这里就不去贴代码了，要不然这篇博文很大篇幅都被代码占据了，其实任务执行开始之后，主要就是各种异常的处理，因为正常的处理其实是比较简单的，之后就会回调到外面去，让外面调用‘下载操作对象’去决定到底该如何处理。\n（补充：经过后面对SDWebImageDownloader的深入研究，发现SDWebImageDownloaderOperation创建好之后，直接扔到SDWebImageDownloader的队列里面去了，此外session由于是注入的，代理设置的是SDWebImageDownloader，回调自然也由SDWebImageDownloader接收，然后分发给各自对应的SDWebImageDownloaderOperation）\n\n### SDWebImageDownloader对下载任务的封装\nSDWebImageDownloader是对SDWebImageDownloaderOperation的进一步管理和封装，通过下载队列对SDWebImageDownloaderOperation的任务并发数(默认并发数为6个)，执行顺序（默认是FIFO）进行管理。这里我简单梳理下任务的下载流程\n* client（此处指的是使用SDWebImageDownloader的客户，可以是用户自己的类，也可以是其他SDWebImage类）首先需要创建一个SDWebImageDownloader，创建好之后，就准备好了下载需要的downloadQueue，下载相关的一些配置（诸如执行顺序、并发数、超时等等）。\n* client之后调用SDWebImageDownloader的downloadImageWithURL:options:progress:completed:进行实际的下载操作。在这里我有一个疑惑了好久的问题，就是session的回调问题，因为SDWebImageDownloaderOperation里面有session，而SDWebImageDownloader也有session，那么任务执行过程中，岂不是俩处都会收到回调？这难道是SDWebImage的BUG？呵呵，其实并不是，直到我看到下面这段代码。\n```objc\n        NSURLSession *session = self.unownedSession;\n        if (!self.unownedSession) {\n            NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration];\n            sessionConfig.timeoutIntervalForRequest = 15;\n            \n            /**\n             *  Create the session for this task\n             *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate\n             *  method calls and completion handler calls.\n             */\n            //注意这里，只有ownedSession才会设置代理为自己，也就是说注入的session不会设置代理。\n            self.ownedSession = [NSURLSession sessionWithConfiguration:sessionConfig\n                                                              delegate:self\n                                                         delegateQueue:nil];\n            session = self.ownedSession;\n        }\n        \n        self.dataTask = [session dataTaskWithRequest:self.request];\n```\n 看了上面的代码自然就明白了，<font color=red>当使用SDWebImageDownloader的时候，session的回调只有SDWebImageDownloader能接收到，这也是为什么SDWebImageDownloader需要在接收到回调之后要进行转发的缘故。</font>\n\n1. SDWebImageDownloader的初始化\n```objc\n- (nonnull instancetype)initWithSessionConfiguration:(nullable NSURLSessionConfiguration *)sessionConfiguration {\n    if ((self = [super init])) {\n        _operationClass = [SDWebImageDownloaderOperation class];\n        _shouldDecompressImages = YES;\n        //设置任务的执行顺序\n        _executionOrder = SDWebImageDownloaderFIFOExecutionOrder;\n        //创建执行任务的操作队列，并对操作队列进行配置\n        _downloadQueue = [NSOperationQueue new];\n        _downloadQueue.maxConcurrentOperationCount = 6;\n        _downloadQueue.name = @\"com.hackemist.SDWebImageDownloader\";\n        _URLOperations = [NSMutableDictionary new];\n#ifdef SD_WEBP\n        _HTTPHeaders = [@{@\"Accept\": @\"image/webp,image/*;q=0.8\"} mutableCopy];\n#else\n        _HTTPHeaders = [@{@\"Accept\": @\"image/*;q=0.8\"} mutableCopy];\n#endif\n        _barrierQueue = dispatch_queue_create(\"com.hackemist.SDWebImageDownloaderBarrierQueue\", DISPATCH_QUEUE_CONCURRENT);\n        _downloadTimeout = 15.0;\n\n        sessionConfiguration.timeoutIntervalForRequest = _downloadTimeout;\n\n        /**\n         *  Create the session for this task\n         *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate\n         *  method calls and completion handler calls.\n         */\n        self.session = [NSURLSession sessionWithConfiguration:sessionConfiguration\n                                                     delegate:self\n                                                delegateQueue:nil];\n    }\n    return self;\n}\n```\n2. SDWebImageDownloader执行下载操作\n这里请原谅我贴上大段的代码，因为这段代码实在是太漂亮了。通过俩个函数的设计将SDWebImageDownloaderOperation的初始化和SDWebImageDownloadToken初始化分割开。并在初始化operation完成之后将任务扔到队列中去执行，还持有了operation的引用，给SDWebImageDownloader有机会保存到字典中。\n\n```objc\n- (nullable SDWebImageDownloadToken *)downloadImageWithURL:(nullable NSURL *)url\n                                                   options:(SDWebImageDownloaderOptions)options\n                                                  progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock\n                                                 completed:(nullable SDWebImageDownloaderCompletedBlock)completedBlock {\n    __weak SDWebImageDownloader *wself = self;\n\n    return [self addProgressCallback:progressBlock completedBlock:completedBlock forURL:url createCallback:^SDWebImageDownloaderOperation *{\n        __strong __typeof (wself) sself = wself;\n        NSTimeInterval timeoutInterval = sself.downloadTimeout;\n        if (timeoutInterval == 0.0) {\n            timeoutInterval = 15.0;\n        }\n\n        // In order to prevent from potential duplicate caching (NSURLCache + SDImageCache) we disable the cache for image requests if told otherwise\n        NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url cachePolicy:(options & SDWebImageDownloaderUseNSURLCache ? NSURLRequestUseProtocolCachePolicy : NSURLRequestReloadIgnoringLocalCacheData) timeoutInterval:timeoutInterval];\n        request.HTTPShouldHandleCookies = (options & SDWebImageDownloaderHandleCookies);\n        request.HTTPShouldUsePipelining = YES;\n        if (sself.headersFilter) {\n            request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders copy]);\n        }\n        else {\n            request.allHTTPHeaderFields = sself.HTTPHeaders;\n        }\n        SDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];\n        operation.shouldDecompressImages = sself.shouldDecompressImages;\n        \n        if (sself.urlCredential) {\n            operation.credential = sself.urlCredential;\n        } else if (sself.username && sself.password) {\n            operation.credential = [NSURLCredential credentialWithUser:sself.username password:sself.password persistence:NSURLCredentialPersistenceForSession];\n        }\n        \n        if (options & SDWebImageDownloaderHighPriority) {\n            operation.queuePriority = NSOperationQueuePriorityHigh;\n        } else if (options & SDWebImageDownloaderLowPriority) {\n            operation.queuePriority = NSOperationQueuePriorityLow;\n        }\n\n        [sself.downloadQueue addOperation:operation];\n        if (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) {\n            // Emulate LIFO execution order by systematically adding new operations as last operation's dependency\n            [sself.lastAddedOperation addDependency:operation];\n            sself.lastAddedOperation = operation;\n        }\n\n        return operation;\n    }];\n}\n```\n这里有对SDWebImageDownloaderOperation进行保存处理，确保同一个URL只会创建一次，避免内存的额外消耗。添加对token的初始化和管理，把operation的初始化和token的初始化进行业务上一些小分离，代码层次立马清晰起来了，赞！\n```objc\n- (nullable SDWebImageDownloadToken *)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock\n                                           completedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock\n                                                   forURL:(nullable NSURL *)url\n                                           createCallback:(SDWebImageDownloaderOperation *(^)())createCallback {\n    // The URL will be used as the key to the callbacks dictionary so it cannot be nil. If it is nil immediately call the completed block with no image or data.\n    if (url == nil) {\n        if (completedBlock != nil) {\n            completedBlock(nil, nil, nil, NO);\n        }\n        return nil;\n    }\n\n    __block SDWebImageDownloadToken *token = nil;\n\n    dispatch_barrier_sync(self.barrierQueue, ^{\n        SDWebImageDownloaderOperation *operation = self.URLOperations[url];\n        if (!operation) {\n            operation = createCallback();\n            self.URLOperations[url] = operation;\n\n            __weak SDWebImageDownloaderOperation *woperation = operation;\n            operation.completionBlock = ^{\n              SDWebImageDownloaderOperation *soperation = woperation;\n              if (!soperation) return;\n              if (self.URLOperations[url] == soperation) {\n                  [self.URLOperations removeObjectForKey:url];\n              };\n            };\n        }\n        id downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];\n\n        token = [SDWebImageDownloadToken new];\n        token.url = url;\n        token.downloadOperationCancelToken = downloadOperationCancelToken;\n    });\n\n    return token;\n}\n```\n\n# 小结\n 好了，SDWebImageView的下载环节就到这里，看来那句话确实没说错，源码面前，没有神秘，哈哈！下一小节主要研究下SDWebImageView是如何对图片进行缓存操作的。\n\n\n\n***\n参考资料\n[1]. [SDWebimage在github上的地址](https://github.com/rs/SDWebImage)\n[2]. [英文版的使用说明](http://cocoadocs.org/docsets/SDWebImage/3.8.2/)\n[3]. [使用SDWebimage的app列表](https://github.com/rs/SDWebImage/wiki/Who-Uses-SDWebImage)\n***","slug":"SDWebImage学习笔记","published":1,"updated":"2017-01-20T15:15:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yw90009hx5l3d0ih92a","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>SDWebImage是ios开发中，最常见的图片加载框架，它主要实现了图片异步加载、图片缓存，并提供了UIImageView、UIButton、MKAnnotationview的类目，使用体验很友好，也很方便，成为广大ios开发者加载网络图片的选择，今天我主要是来通过分析其源码来研究下，SDWebimage到底是如何进行设计的，架构的? </p>\n<a id=\"more\"></a>\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><ul>\n<li>提供UIimageview、UIbutton、MKAnnotationview的类目加载网络图片及缓存管理</li>\n<li>异步的图片下载</li>\n<li><font color=\"red\"><b>异步的图片内存+磁盘图片缓存，并支持自动的缓存过期处理</b></font></li>\n<li>图片的后台解压</li>\n<li><font color=\"red\"><b>确保同一个url不会下载多次（是优点也是缺点）</b></font></li>\n<li>错误的url不会不停的下载</li>\n<li>永远不会阻塞主线程</li>\n<li>性能提升</li>\n<li>采用GCD和ARC</li>\n</ul>\n<h1 id=\"支持的图片格式\"><a href=\"#支持的图片格式\" class=\"headerlink\" title=\"支持的图片格式\"></a>支持的图片格式</h1><ul>\n<li>支持JPEG,PNG,GIF</li>\n<li>支持WEBP</li>\n</ul>\n<h1 id=\"使用要求\"><a href=\"#使用要求\" class=\"headerlink\" title=\"使用要求\"></a>使用要求</h1><ul>\n<li>ios 7.0 +</li>\n<li>tvos 9.0 +</li>\n<li>watchos 2.0 + </li>\n<li>osx 10.8 + </li>\n<li>xcode 7.3 +</li>\n</ul>\n<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><ul>\n<li><p>如果UITableViewCell使用了动态的图片大小，图片展示可能会有问题，也就是说SDWebImage是根据placeholder的大小来设置UIImageView的大小的，如果要展示的图片大小和placeholder的图片大小不一致就会有一些问题，解决方案<a href=\"http://www.wrichards.com/blog/2011/11/sdwebimage-fixed-width-cell-images/\" target=\"_blank\" rel=\"external\"><font color=\"blue\">点击这里</font></a></p>\n</li>\n<li><p>手动去刷新图片，SDWebImage使用了暴力的图片缓存方式，不会关注HTTP 的header里面缓存的策略，直接根据图片的URL地址进行缓存，也就是说一个URL会对应一张图片，如果图片地址不发生变化的话，图片永远不会重新下载，因此在某些场景下，你需要手动去刷新图片。</p>\n</li>\n</ul>\n<h1 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h1><p><img src=\"http://ock9zbzms.bkt.clouddn.com/SDWebImageClassDiagram.png\" alt=\"架构图\"></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>上文是SDWebImageView官方的一些文档，我这里给简要的翻译了下，可以看的出来，SDWebImage虽然功能很强大，但是依然还是有一些使用中存在的问题。接下来，我将会通过逐个分析代码的方式，将SDWebImageView从下载、缓存、管理等等一层一层剥开它神秘的面纱。在这个过程中，我尽量避免过多的纠结于一些细节，但是同样的，有些时候为了说明一些问题，难免也会贴一些代码。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>SDWebimageview的下载是通过NSURLSession的方式，并通过继承NSOperation来异步的进行下载。下载过程中是通过发送通知的方式进行消息通信。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> SDWebImageDownloadStartNotification = <span class=\"string\">@\"SDWebImageDownloadStartNotification\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> SDWebImageDownloadReceiveResponseNotification = <span class=\"string\">@\"SDWebImageDownloadReceiveResponseNotification\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> SDWebImageDownloadStopNotification = <span class=\"string\">@\"SDWebImageDownloadStopNotification\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> SDWebImageDownloadFinishNotification = <span class=\"string\">@\"SDWebImageDownloadFinishNotification\"</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"SDWebImageDownloaderOperation任务的创建及取消\"><a href=\"#SDWebImageDownloaderOperation任务的创建及取消\" class=\"headerlink\" title=\"SDWebImageDownloaderOperation任务的创建及取消\"></a>SDWebImageDownloaderOperation任务的创建及取消</h3><p> SDWebImageDownloaderOperation通过确认下面的这俩个协议实际上执行下载图片的工作，接下来就研究下其内部是怎么工作的。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">SDWebImageDownloaderOperationInterface</span>&lt;<span class=\"title\">NSObject</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">//通过该方法进行Opearation的创建</span></div><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithRequest:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLRequest</span> *)request</div><div class=\"line\">                              inSession:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLSession</span> *)session</div><div class=\"line\">                                options:(SDWebImageDownloaderOptions)options;</div><div class=\"line\"><span class=\"comment\">//添加下载过程中需要的回调，主要包括下载进度、下载完成的回调</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)addHandlersForProgress:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class=\"line\">                            completed:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock;</div><div class=\"line\"><span class=\"comment\">//是否支持解压图片</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)shouldDecompressImages;</div><div class=\"line\"><span class=\"comment\">//设置是否支持解压图片</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setShouldDecompressImages:(<span class=\"built_in\">BOOL</span>)value;</div><div class=\"line\"><span class=\"comment\">//URL鉴定</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLCredential</span> *)credential;</div><div class=\"line\"><span class=\"comment\">//设置URL鉴定</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setCredential:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLCredential</span> *)value;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">SDWebImageOperation</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cancel;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"SDWebImageDownloaderOperation任务的初始化以及任务的执行\"><a href=\"#SDWebImageDownloaderOperation任务的初始化以及任务的执行\" class=\"headerlink\" title=\"SDWebImageDownloaderOperation任务的初始化以及任务的执行\"></a>SDWebImageDownloaderOperation任务的初始化以及任务的执行</h3><p>忽略掉那些细节，这里只关注关键的几个地方，SDWebImageDownloaderOperation，以下简称‘下载操作对象’，通过持有Request，注入session，以及options，创建好下载操作对象。之后通过外部调用start方法，开启下载任务。并通过设置session任务的代理，来监听下载过程，同时发出相应的通知进行对象间的消息通信。</p>\n<ol>\n<li><p>初始化</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithRequest:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLRequest</span> *)request</div><div class=\"line\">                              inSession:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLSession</span> *)session</div><div class=\"line\">                                options:(SDWebImageDownloaderOptions)options &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init])) &#123;</div><div class=\"line\">        _request = [request <span class=\"keyword\">copy</span>];</div><div class=\"line\">        _shouldDecompressImages = <span class=\"literal\">YES</span>;</div><div class=\"line\">        _options = options;</div><div class=\"line\">        _callbackBlocks = [<span class=\"built_in\">NSMutableArray</span> new];</div><div class=\"line\">        _executing = <span class=\"literal\">NO</span>;</div><div class=\"line\">        _finished = <span class=\"literal\">NO</span>;</div><div class=\"line\">        _expectedSize = <span class=\"number\">0</span>;</div><div class=\"line\">        _unownedSession = session;</div><div class=\"line\">        responseFromCached = <span class=\"literal\">YES</span>; <span class=\"comment\">// Initially wrong until `- URLSession:dataTask:willCacheResponse:completionHandler: is called or not called</span></div><div class=\"line\">        _barrierQueue = dispatch_queue_create(<span class=\"string\">\"com.hackemist.SDWebImageDownloaderOperationBarrierQueue\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行任务</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)start &#123;</div><div class=\"line\">    <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.isCancelled) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>.finished = <span class=\"literal\">YES</span>;</div><div class=\"line\">            [<span class=\"keyword\">self</span> reset];</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if SD_UIKIT</span></div><div class=\"line\">        Class <span class=\"built_in\">UIApplicationClass</span> = <span class=\"built_in\">NSClassFromString</span>(<span class=\"string\">@\"UIApplication\"</span>);</div><div class=\"line\">        <span class=\"built_in\">BOOL</span> hasApplication = <span class=\"built_in\">UIApplicationClass</span> &amp;&amp; [<span class=\"built_in\">UIApplicationClass</span> respondsToSelector:<span class=\"keyword\">@selector</span>(sharedApplication)];</div><div class=\"line\">        <span class=\"comment\">//对后台下载任务的支持，app可以开启后台下载任务，并返回一个后台下载的ID，并设置一个过期的callback，此处注意当任务失效的时候，需要将任务终止，并设置taskid为无效</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (hasApplication &amp;&amp; [<span class=\"keyword\">self</span> shouldContinueWhenAppEntersBackground]) &#123;</div><div class=\"line\">            __<span class=\"keyword\">weak</span> __typeof__ (<span class=\"keyword\">self</span>) wself = <span class=\"keyword\">self</span>;</div><div class=\"line\">            <span class=\"built_in\">UIApplication</span> * app = [<span class=\"built_in\">UIApplicationClass</span> performSelector:<span class=\"keyword\">@selector</span>(sharedApplication)];</div><div class=\"line\">            <span class=\"keyword\">self</span>.backgroundTaskId = [app beginBackgroundTaskWithExpirationHandler:^&#123;</div><div class=\"line\">                __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span> (wself) sself = wself;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (sself) &#123;</div><div class=\"line\">                    [sself cancel];</div><div class=\"line\"></div><div class=\"line\">                    [app endBackgroundTask:sself.backgroundTaskId];</div><div class=\"line\">                    sself.backgroundTaskId = <span class=\"built_in\">UIBackgroundTaskInvalid</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;];</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">        <span class=\"comment\">//默认是有注入session，如果没有的话，需要内部创建一个session</span></div><div class=\"line\">        <span class=\"built_in\">NSURLSession</span> *session = <span class=\"keyword\">self</span>.unownedSession;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.unownedSession) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSURLSessionConfiguration</span> *sessionConfig = [<span class=\"built_in\">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class=\"line\">            sessionConfig.timeoutIntervalForRequest = <span class=\"number\">15</span>;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">/**</span></div><div class=\"line\">             *  Create the session for this task</div><div class=\"line\">             *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate</div><div class=\"line\">             *  method calls and completion handler calls.</div><div class=\"line\">             */</div><div class=\"line\">            <span class=\"keyword\">self</span>.ownedSession = [<span class=\"built_in\">NSURLSession</span> sessionWithConfiguration:sessionConfig</div><div class=\"line\">                                                              delegate:<span class=\"keyword\">self</span></div><div class=\"line\">                                                         delegateQueue:<span class=\"literal\">nil</span>];</div><div class=\"line\">            session = <span class=\"keyword\">self</span>.ownedSession;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//此处根据当前的session和request创建datatask</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.dataTask = [session dataTaskWithRequest:<span class=\"keyword\">self</span>.request];</div><div class=\"line\">        <span class=\"keyword\">self</span>.executing = <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//datatask开始工作</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.dataTask resume];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.dataTask) &#123;</div><div class=\"line\">        <span class=\"comment\">//通知所有监听回调，任务开始执行了。俩种方式，一种是callback方式，一种是通知</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (SDWebImageDownloaderProgressBlock progressBlock <span class=\"keyword\">in</span> [<span class=\"keyword\">self</span> callbacksForKey:kProgressCallbackKey]) &#123;</div><div class=\"line\">            progressBlock(<span class=\"number\">0</span>, <span class=\"built_in\">NSURLResponseUnknownLength</span>, <span class=\"keyword\">self</span>.request.URL);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">            [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:<span class=\"keyword\">self</span>];</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//对异常情况的处理，如果datatask为nil，进行错误的回调</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> callCompletionBlocksWithError:[<span class=\"built_in\">NSError</span> errorWithDomain:<span class=\"built_in\">NSURLErrorDomain</span> code:<span class=\"number\">0</span> userInfo:@&#123;<span class=\"built_in\">NSLocalizedDescriptionKey</span> : <span class=\"string\">@\"Connection can't be initialized\"</span>&#125;]];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if SD_UIKIT</span></div><div class=\"line\">    Class <span class=\"built_in\">UIApplicationClass</span> = <span class=\"built_in\">NSClassFromString</span>(<span class=\"string\">@\"UIApplication\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">UIApplicationClass</span> || ![<span class=\"built_in\">UIApplicationClass</span> respondsToSelector:<span class=\"keyword\">@selector</span>(sharedApplication)]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.backgroundTaskId != <span class=\"built_in\">UIBackgroundTaskInvalid</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">UIApplication</span> * app = [<span class=\"built_in\">UIApplication</span> performSelector:<span class=\"keyword\">@selector</span>(sharedApplication)];</div><div class=\"line\">        [app endBackgroundTask:<span class=\"keyword\">self</span>.backgroundTaskId];</div><div class=\"line\">        <span class=\"keyword\">self</span>.backgroundTaskId = <span class=\"built_in\">UIBackgroundTaskInvalid</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>接下来就是NSURLSession任务的开启、执行中、结束或者错误回调<br>这里就不去贴代码了，要不然这篇博文很大篇幅都被代码占据了，其实任务执行开始之后，主要就是各种异常的处理，因为正常的处理其实是比较简单的，之后就会回调到外面去，让外面调用‘下载操作对象’去决定到底该如何处理。<br>（补充：经过后面对SDWebImageDownloader的深入研究，发现SDWebImageDownloaderOperation创建好之后，直接扔到SDWebImageDownloader的队列里面去了，此外session由于是注入的，代理设置的是SDWebImageDownloader，回调自然也由SDWebImageDownloader接收，然后分发给各自对应的SDWebImageDownloaderOperation）</p>\n</li>\n</ol>\n<h3 id=\"SDWebImageDownloader对下载任务的封装\"><a href=\"#SDWebImageDownloader对下载任务的封装\" class=\"headerlink\" title=\"SDWebImageDownloader对下载任务的封装\"></a>SDWebImageDownloader对下载任务的封装</h3><p>SDWebImageDownloader是对SDWebImageDownloaderOperation的进一步管理和封装，通过下载队列对SDWebImageDownloaderOperation的任务并发数(默认并发数为6个)，执行顺序（默认是FIFO）进行管理。这里我简单梳理下任务的下载流程</p>\n<ul>\n<li>client（此处指的是使用SDWebImageDownloader的客户，可以是用户自己的类，也可以是其他SDWebImage类）首先需要创建一个SDWebImageDownloader，创建好之后，就准备好了下载需要的downloadQueue，下载相关的一些配置（诸如执行顺序、并发数、超时等等）。</li>\n<li><p>client之后调用SDWebImageDownloader的downloadImageWithURL:options:progress:completed:进行实际的下载操作。在这里我有一个疑惑了好久的问题，就是session的回调问题，因为SDWebImageDownloaderOperation里面有session，而SDWebImageDownloader也有session，那么任务执行过程中，岂不是俩处都会收到回调？这难道是SDWebImage的BUG？呵呵，其实并不是，直到我看到下面这段代码。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSURLSession</span> *session = <span class=\"keyword\">self</span>.unownedSession;</div><div class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.unownedSession) &#123;</div><div class=\"line\">    <span class=\"built_in\">NSURLSessionConfiguration</span> *sessionConfig = [<span class=\"built_in\">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class=\"line\">    sessionConfig.timeoutIntervalForRequest = <span class=\"number\">15</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     *  Create the session for this task</div><div class=\"line\">     *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate</div><div class=\"line\">     *  method calls and completion handler calls.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"comment\">//注意这里，只有ownedSession才会设置代理为自己，也就是说注入的session不会设置代理。</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.ownedSession = [<span class=\"built_in\">NSURLSession</span> sessionWithConfiguration:sessionConfig</div><div class=\"line\">                                                      delegate:<span class=\"keyword\">self</span></div><div class=\"line\">                                                 delegateQueue:<span class=\"literal\">nil</span>];</div><div class=\"line\">    session = <span class=\"keyword\">self</span>.ownedSession;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">self</span>.dataTask = [session dataTaskWithRequest:<span class=\"keyword\">self</span>.request];</div></pre></td></tr></table></figure>\n<p>看了上面的代码自然就明白了，<font color=\"red\">当使用SDWebImageDownloader的时候，session的回调只有SDWebImageDownloader能接收到，这也是为什么SDWebImageDownloader需要在接收到回调之后要进行转发的缘故。</font></p>\n</li>\n</ul>\n<ol>\n<li><p>SDWebImageDownloader的初始化</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithSessionConfiguration:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLSessionConfiguration</span> *)sessionConfiguration &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init])) &#123;</div><div class=\"line\">        _operationClass = [SDWebImageDownloaderOperation <span class=\"keyword\">class</span>];</div><div class=\"line\">        _shouldDecompressImages = <span class=\"literal\">YES</span>;</div><div class=\"line\">        <span class=\"comment\">//设置任务的执行顺序</span></div><div class=\"line\">        _executionOrder = SDWebImageDownloaderFIFOExecutionOrder;</div><div class=\"line\">        <span class=\"comment\">//创建执行任务的操作队列，并对操作队列进行配置</span></div><div class=\"line\">        _downloadQueue = [<span class=\"built_in\">NSOperationQueue</span> new];</div><div class=\"line\">        _downloadQueue.maxConcurrentOperationCount = <span class=\"number\">6</span>;</div><div class=\"line\">        _downloadQueue.name = <span class=\"string\">@\"com.hackemist.SDWebImageDownloader\"</span>;</div><div class=\"line\">        _URLOperations = [<span class=\"built_in\">NSMutableDictionary</span> new];</div><div class=\"line\"><span class=\"meta\">#ifdef SD_WEBP</span></div><div class=\"line\">        _HTTPHeaders = [@&#123;<span class=\"string\">@\"Accept\"</span>: <span class=\"string\">@\"image/webp,image/*;q=0.8\"</span>&#125; mutableCopy];</div><div class=\"line\"><span class=\"meta\">#else</span></div><div class=\"line\">        _HTTPHeaders = [@&#123;<span class=\"string\">@\"Accept\"</span>: <span class=\"string\">@\"image/*;q=0.8\"</span>&#125; mutableCopy];</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">        _barrierQueue = dispatch_queue_create(<span class=\"string\">\"com.hackemist.SDWebImageDownloaderBarrierQueue\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">        _downloadTimeout = <span class=\"number\">15.0</span>;</div><div class=\"line\"></div><div class=\"line\">        sessionConfiguration.timeoutIntervalForRequest = _downloadTimeout;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         *  Create the session for this task</div><div class=\"line\">         *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate</div><div class=\"line\">         *  method calls and completion handler calls.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">self</span>.session = [<span class=\"built_in\">NSURLSession</span> sessionWithConfiguration:sessionConfiguration</div><div class=\"line\">                                                     delegate:<span class=\"keyword\">self</span></div><div class=\"line\">                                                delegateQueue:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>SDWebImageDownloader执行下载操作<br>这里请原谅我贴上大段的代码，因为这段代码实在是太漂亮了。通过俩个函数的设计将SDWebImageDownloaderOperation的初始化和SDWebImageDownloadToken初始化分割开。并在初始化operation完成之后将任务扔到队列中去执行，还持有了operation的引用，给SDWebImageDownloader有机会保存到字典中。</p>\n</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> SDWebImageDownloadToken *)downloadImageWithURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url</div><div class=\"line\">                                                   options:(SDWebImageDownloaderOptions)options</div><div class=\"line\">                                                  progress:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class=\"line\">                                                 completed:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock &#123;</div><div class=\"line\">    __<span class=\"keyword\">weak</span> SDWebImageDownloader *wself = <span class=\"keyword\">self</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> addProgressCallback:progressBlock completedBlock:completedBlock forURL:url createCallback:^SDWebImageDownloaderOperation *&#123;</div><div class=\"line\">        __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span> (wself) sself = wself;</div><div class=\"line\">        <span class=\"built_in\">NSTimeInterval</span> timeoutInterval = sself.downloadTimeout;</div><div class=\"line\">        <span class=\"keyword\">if</span> (timeoutInterval == <span class=\"number\">0.0</span>) &#123;</div><div class=\"line\">            timeoutInterval = <span class=\"number\">15.0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// In order to prevent from potential duplicate caching (NSURLCache + SDImageCache) we disable the cache for image requests if told otherwise</span></div><div class=\"line\">        <span class=\"built_in\">NSMutableURLRequest</span> *request = [[<span class=\"built_in\">NSMutableURLRequest</span> alloc] initWithURL:url cachePolicy:(options &amp; SDWebImageDownloaderUseNSURLCache ? <span class=\"built_in\">NSURLRequestUseProtocolCachePolicy</span> : <span class=\"built_in\">NSURLRequestReloadIgnoringLocalCacheData</span>) timeoutInterval:timeoutInterval];</div><div class=\"line\">        request.HTTPShouldHandleCookies = (options &amp; SDWebImageDownloaderHandleCookies);</div><div class=\"line\">        request.HTTPShouldUsePipelining = <span class=\"literal\">YES</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.headersFilter) &#123;</div><div class=\"line\">            request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders <span class=\"keyword\">copy</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            request.allHTTPHeaderFields = sself.HTTPHeaders;</div><div class=\"line\">        &#125;</div><div class=\"line\">        SDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];</div><div class=\"line\">        operation.shouldDecompressImages = sself.shouldDecompressImages;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.urlCredential) &#123;</div><div class=\"line\">            operation.credential = sself.urlCredential;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sself.username &amp;&amp; sself.password) &#123;</div><div class=\"line\">            operation.credential = [<span class=\"built_in\">NSURLCredential</span> credentialWithUser:sself.username password:sself.password persistence:<span class=\"built_in\">NSURLCredentialPersistenceForSession</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (options &amp; SDWebImageDownloaderHighPriority) &#123;</div><div class=\"line\">            operation.queuePriority = <span class=\"built_in\">NSOperationQueuePriorityHigh</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options &amp; SDWebImageDownloaderLowPriority) &#123;</div><div class=\"line\">            operation.queuePriority = <span class=\"built_in\">NSOperationQueuePriorityLow</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        [sself.downloadQueue addOperation:operation];</div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) &#123;</div><div class=\"line\">            <span class=\"comment\">// Emulate LIFO execution order by systematically adding new operations as last operation's dependency</span></div><div class=\"line\">            [sself.lastAddedOperation addDependency:operation];</div><div class=\"line\">            sself.lastAddedOperation = operation;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> operation;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里有对SDWebImageDownloaderOperation进行保存处理，确保同一个URL只会创建一次，避免内存的额外消耗。添加对token的初始化和管理，把operation的初始化和token的初始化进行业务上一些小分离，代码层次立马清晰起来了，赞！<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> SDWebImageDownloadToken *)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock</div><div class=\"line\">                                           completedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock</div><div class=\"line\">                                                   forURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url</div><div class=\"line\">                                           createCallback:(SDWebImageDownloaderOperation *(^)())createCallback &#123;</div><div class=\"line\">    <span class=\"comment\">// The URL will be used as the key to the callbacks dictionary so it cannot be nil. If it is nil immediately call the completed block with no image or data.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (url == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (completedBlock != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">            completedBlock(<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">NO</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    __block SDWebImageDownloadToken *token = <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\">    dispatch_barrier_sync(<span class=\"keyword\">self</span>.barrierQueue, ^&#123;</div><div class=\"line\">        SDWebImageDownloaderOperation *operation = <span class=\"keyword\">self</span>.URLOperations[url];</div><div class=\"line\">        <span class=\"keyword\">if</span> (!operation) &#123;</div><div class=\"line\">            operation = createCallback();</div><div class=\"line\">            <span class=\"keyword\">self</span>.URLOperations[url] = operation;</div><div class=\"line\"></div><div class=\"line\">            __<span class=\"keyword\">weak</span> SDWebImageDownloaderOperation *woperation = operation;</div><div class=\"line\">            operation.completionBlock = ^&#123;</div><div class=\"line\">              SDWebImageDownloaderOperation *soperation = woperation;</div><div class=\"line\">              <span class=\"keyword\">if</span> (!soperation) <span class=\"keyword\">return</span>;</div><div class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.URLOperations[url] == soperation) &#123;</div><div class=\"line\">                  [<span class=\"keyword\">self</span>.URLOperations removeObjectForKey:url];</div><div class=\"line\">              &#125;;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">id</span> downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];</div><div class=\"line\"></div><div class=\"line\">        token = [SDWebImageDownloadToken new];</div><div class=\"line\">        token.url = url;</div><div class=\"line\">        token.downloadOperationCancelToken = downloadOperationCancelToken;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> token;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p> 好了，SDWebImageView的下载环节就到这里，看来那句话确实没说错，源码面前，没有神秘，哈哈！下一小节主要研究下SDWebImageView是如何对图片进行缓存操作的。</p>\n<hr>\n<p>参考资料<br>[1]. <a href=\"https://github.com/rs/SDWebImage\" target=\"_blank\" rel=\"external\">SDWebimage在github上的地址</a><br>[2]. <a href=\"http://cocoadocs.org/docsets/SDWebImage/3.8.2/\" target=\"_blank\" rel=\"external\">英文版的使用说明</a><br>[3]. <a href=\"https://github.com/rs/SDWebImage/wiki/Who-Uses-SDWebImage\" target=\"_blank\" rel=\"external\">使用SDWebimage的app列表</a></p>\n<hr>\n","excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>SDWebImage是ios开发中，最常见的图片加载框架，它主要实现了图片异步加载、图片缓存，并提供了UIImageView、UIButton、MKAnnotationview的类目，使用体验很友好，也很方便，成为广大ios开发者加载网络图片的选择，今天我主要是来通过分析其源码来研究下，SDWebimage到底是如何进行设计的，架构的? </p>","more":"<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><ul>\n<li>提供UIimageview、UIbutton、MKAnnotationview的类目加载网络图片及缓存管理</li>\n<li>异步的图片下载</li>\n<li><font color=\"red\"><B>异步的图片内存+磁盘图片缓存，并支持自动的缓存过期处理</B></font></li>\n<li>图片的后台解压</li>\n<li><font color=\"red\"><B>确保同一个url不会下载多次（是优点也是缺点）</B></font></li>\n<li>错误的url不会不停的下载</li>\n<li>永远不会阻塞主线程</li>\n<li>性能提升</li>\n<li>采用GCD和ARC</li>\n</ul>\n<h1 id=\"支持的图片格式\"><a href=\"#支持的图片格式\" class=\"headerlink\" title=\"支持的图片格式\"></a>支持的图片格式</h1><ul>\n<li>支持JPEG,PNG,GIF</li>\n<li>支持WEBP</li>\n</ul>\n<h1 id=\"使用要求\"><a href=\"#使用要求\" class=\"headerlink\" title=\"使用要求\"></a>使用要求</h1><ul>\n<li>ios 7.0 +</li>\n<li>tvos 9.0 +</li>\n<li>watchos 2.0 + </li>\n<li>osx 10.8 + </li>\n<li>xcode 7.3 +</li>\n</ul>\n<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><ul>\n<li><p>如果UITableViewCell使用了动态的图片大小，图片展示可能会有问题，也就是说SDWebImage是根据placeholder的大小来设置UIImageView的大小的，如果要展示的图片大小和placeholder的图片大小不一致就会有一些问题，解决方案<a href=\"http://www.wrichards.com/blog/2011/11/sdwebimage-fixed-width-cell-images/\"><font color=\"blue\">点击这里</font></a></p>\n</li>\n<li><p>手动去刷新图片，SDWebImage使用了暴力的图片缓存方式，不会关注HTTP 的header里面缓存的策略，直接根据图片的URL地址进行缓存，也就是说一个URL会对应一张图片，如果图片地址不发生变化的话，图片永远不会重新下载，因此在某些场景下，你需要手动去刷新图片。</p>\n</li>\n</ul>\n<h1 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h1><p><img src=\"http://ock9zbzms.bkt.clouddn.com/SDWebImageClassDiagram.png\" alt=\"架构图\"></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>上文是SDWebImageView官方的一些文档，我这里给简要的翻译了下，可以看的出来，SDWebImage虽然功能很强大，但是依然还是有一些使用中存在的问题。接下来，我将会通过逐个分析代码的方式，将SDWebImageView从下载、缓存、管理等等一层一层剥开它神秘的面纱。在这个过程中，我尽量避免过多的纠结于一些细节，但是同样的，有些时候为了说明一些问题，难免也会贴一些代码。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>SDWebimageview的下载是通过NSURLSession的方式，并通过继承NSOperation来异步的进行下载。下载过程中是通过发送通知的方式进行消息通信。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> SDWebImageDownloadStartNotification = <span class=\"string\">@\"SDWebImageDownloadStartNotification\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> SDWebImageDownloadReceiveResponseNotification = <span class=\"string\">@\"SDWebImageDownloadReceiveResponseNotification\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> SDWebImageDownloadStopNotification = <span class=\"string\">@\"SDWebImageDownloadStopNotification\"</span>;</div><div class=\"line\"><span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> SDWebImageDownloadFinishNotification = <span class=\"string\">@\"SDWebImageDownloadFinishNotification\"</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"SDWebImageDownloaderOperation任务的创建及取消\"><a href=\"#SDWebImageDownloaderOperation任务的创建及取消\" class=\"headerlink\" title=\"SDWebImageDownloaderOperation任务的创建及取消\"></a>SDWebImageDownloaderOperation任务的创建及取消</h3><p> SDWebImageDownloaderOperation通过确认下面的这俩个协议实际上执行下载图片的工作，接下来就研究下其内部是怎么工作的。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">SDWebImageDownloaderOperationInterface</span>&lt;<span class=\"title\">NSObject</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">//通过该方法进行Opearation的创建</span></div><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithRequest:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLRequest</span> *)request</div><div class=\"line\">                              inSession:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLSession</span> *)session</div><div class=\"line\">                                options:(SDWebImageDownloaderOptions)options;</div><div class=\"line\"><span class=\"comment\">//添加下载过程中需要的回调，主要包括下载进度、下载完成的回调</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)addHandlersForProgress:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class=\"line\">                            completed:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock;</div><div class=\"line\"><span class=\"comment\">//是否支持解压图片</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)shouldDecompressImages;</div><div class=\"line\"><span class=\"comment\">//设置是否支持解压图片</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setShouldDecompressImages:(<span class=\"built_in\">BOOL</span>)value;</div><div class=\"line\"><span class=\"comment\">//URL鉴定</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLCredential</span> *)credential;</div><div class=\"line\"><span class=\"comment\">//设置URL鉴定</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setCredential:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLCredential</span> *)value;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">SDWebImageOperation</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cancel;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"SDWebImageDownloaderOperation任务的初始化以及任务的执行\"><a href=\"#SDWebImageDownloaderOperation任务的初始化以及任务的执行\" class=\"headerlink\" title=\"SDWebImageDownloaderOperation任务的初始化以及任务的执行\"></a>SDWebImageDownloaderOperation任务的初始化以及任务的执行</h3><p>忽略掉那些细节，这里只关注关键的几个地方，SDWebImageDownloaderOperation，以下简称‘下载操作对象’，通过持有Request，注入session，以及options，创建好下载操作对象。之后通过外部调用start方法，开启下载任务。并通过设置session任务的代理，来监听下载过程，同时发出相应的通知进行对象间的消息通信。</p>\n<ol>\n<li><p>初始化</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithRequest:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLRequest</span> *)request</div><div class=\"line\">                              inSession:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLSession</span> *)session</div><div class=\"line\">                                options:(SDWebImageDownloaderOptions)options &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init])) &#123;</div><div class=\"line\">        _request = [request <span class=\"keyword\">copy</span>];</div><div class=\"line\">        _shouldDecompressImages = <span class=\"literal\">YES</span>;</div><div class=\"line\">        _options = options;</div><div class=\"line\">        _callbackBlocks = [<span class=\"built_in\">NSMutableArray</span> new];</div><div class=\"line\">        _executing = <span class=\"literal\">NO</span>;</div><div class=\"line\">        _finished = <span class=\"literal\">NO</span>;</div><div class=\"line\">        _expectedSize = <span class=\"number\">0</span>;</div><div class=\"line\">        _unownedSession = session;</div><div class=\"line\">        responseFromCached = <span class=\"literal\">YES</span>; <span class=\"comment\">// Initially wrong until `- URLSession:dataTask:willCacheResponse:completionHandler: is called or not called</span></div><div class=\"line\">        _barrierQueue = dispatch_queue_create(<span class=\"string\">\"com.hackemist.SDWebImageDownloaderOperationBarrierQueue\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行任务</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)start &#123;</div><div class=\"line\">    <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.isCancelled) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>.finished = <span class=\"literal\">YES</span>;</div><div class=\"line\">            [<span class=\"keyword\">self</span> reset];</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if SD_UIKIT</span></div><div class=\"line\">        Class <span class=\"built_in\">UIApplicationClass</span> = <span class=\"built_in\">NSClassFromString</span>(<span class=\"string\">@\"UIApplication\"</span>);</div><div class=\"line\">        <span class=\"built_in\">BOOL</span> hasApplication = <span class=\"built_in\">UIApplicationClass</span> &amp;&amp; [<span class=\"built_in\">UIApplicationClass</span> respondsToSelector:<span class=\"keyword\">@selector</span>(sharedApplication)];</div><div class=\"line\">        <span class=\"comment\">//对后台下载任务的支持，app可以开启后台下载任务，并返回一个后台下载的ID，并设置一个过期的callback，此处注意当任务失效的时候，需要将任务终止，并设置taskid为无效</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (hasApplication &amp;&amp; [<span class=\"keyword\">self</span> shouldContinueWhenAppEntersBackground]) &#123;</div><div class=\"line\">            __<span class=\"keyword\">weak</span> __typeof__ (<span class=\"keyword\">self</span>) wself = <span class=\"keyword\">self</span>;</div><div class=\"line\">            <span class=\"built_in\">UIApplication</span> * app = [<span class=\"built_in\">UIApplicationClass</span> performSelector:<span class=\"keyword\">@selector</span>(sharedApplication)];</div><div class=\"line\">            <span class=\"keyword\">self</span>.backgroundTaskId = [app beginBackgroundTaskWithExpirationHandler:^&#123;</div><div class=\"line\">                __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span> (wself) sself = wself;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (sself) &#123;</div><div class=\"line\">                    [sself cancel];</div><div class=\"line\"></div><div class=\"line\">                    [app endBackgroundTask:sself.backgroundTaskId];</div><div class=\"line\">                    sself.backgroundTaskId = <span class=\"built_in\">UIBackgroundTaskInvalid</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;];</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">        <span class=\"comment\">//默认是有注入session，如果没有的话，需要内部创建一个session</span></div><div class=\"line\">        <span class=\"built_in\">NSURLSession</span> *session = <span class=\"keyword\">self</span>.unownedSession;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.unownedSession) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSURLSessionConfiguration</span> *sessionConfig = [<span class=\"built_in\">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class=\"line\">            sessionConfig.timeoutIntervalForRequest = <span class=\"number\">15</span>;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">/**</span></div><div class=\"line\">             *  Create the session for this task</div><div class=\"line\">             *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate</div><div class=\"line\">             *  method calls and completion handler calls.</div><div class=\"line\">             */</div><div class=\"line\">            <span class=\"keyword\">self</span>.ownedSession = [<span class=\"built_in\">NSURLSession</span> sessionWithConfiguration:sessionConfig</div><div class=\"line\">                                                              delegate:<span class=\"keyword\">self</span></div><div class=\"line\">                                                         delegateQueue:<span class=\"literal\">nil</span>];</div><div class=\"line\">            session = <span class=\"keyword\">self</span>.ownedSession;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//此处根据当前的session和request创建datatask</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.dataTask = [session dataTaskWithRequest:<span class=\"keyword\">self</span>.request];</div><div class=\"line\">        <span class=\"keyword\">self</span>.executing = <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//datatask开始工作</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.dataTask resume];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.dataTask) &#123;</div><div class=\"line\">        <span class=\"comment\">//通知所有监听回调，任务开始执行了。俩种方式，一种是callback方式，一种是通知</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (SDWebImageDownloaderProgressBlock progressBlock <span class=\"keyword\">in</span> [<span class=\"keyword\">self</span> callbacksForKey:kProgressCallbackKey]) &#123;</div><div class=\"line\">            progressBlock(<span class=\"number\">0</span>, <span class=\"built_in\">NSURLResponseUnknownLength</span>, <span class=\"keyword\">self</span>.request.URL);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">            [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:<span class=\"keyword\">self</span>];</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//对异常情况的处理，如果datatask为nil，进行错误的回调</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> callCompletionBlocksWithError:[<span class=\"built_in\">NSError</span> errorWithDomain:<span class=\"built_in\">NSURLErrorDomain</span> code:<span class=\"number\">0</span> userInfo:@&#123;<span class=\"built_in\">NSLocalizedDescriptionKey</span> : <span class=\"string\">@\"Connection can't be initialized\"</span>&#125;]];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if SD_UIKIT</span></div><div class=\"line\">    Class <span class=\"built_in\">UIApplicationClass</span> = <span class=\"built_in\">NSClassFromString</span>(<span class=\"string\">@\"UIApplication\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">UIApplicationClass</span> || ![<span class=\"built_in\">UIApplicationClass</span> respondsToSelector:<span class=\"keyword\">@selector</span>(sharedApplication)]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.backgroundTaskId != <span class=\"built_in\">UIBackgroundTaskInvalid</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">UIApplication</span> * app = [<span class=\"built_in\">UIApplication</span> performSelector:<span class=\"keyword\">@selector</span>(sharedApplication)];</div><div class=\"line\">        [app endBackgroundTask:<span class=\"keyword\">self</span>.backgroundTaskId];</div><div class=\"line\">        <span class=\"keyword\">self</span>.backgroundTaskId = <span class=\"built_in\">UIBackgroundTaskInvalid</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>接下来就是NSURLSession任务的开启、执行中、结束或者错误回调<br>这里就不去贴代码了，要不然这篇博文很大篇幅都被代码占据了，其实任务执行开始之后，主要就是各种异常的处理，因为正常的处理其实是比较简单的，之后就会回调到外面去，让外面调用‘下载操作对象’去决定到底该如何处理。<br>（补充：经过后面对SDWebImageDownloader的深入研究，发现SDWebImageDownloaderOperation创建好之后，直接扔到SDWebImageDownloader的队列里面去了，此外session由于是注入的，代理设置的是SDWebImageDownloader，回调自然也由SDWebImageDownloader接收，然后分发给各自对应的SDWebImageDownloaderOperation）</p>\n</li>\n</ol>\n<h3 id=\"SDWebImageDownloader对下载任务的封装\"><a href=\"#SDWebImageDownloader对下载任务的封装\" class=\"headerlink\" title=\"SDWebImageDownloader对下载任务的封装\"></a>SDWebImageDownloader对下载任务的封装</h3><p>SDWebImageDownloader是对SDWebImageDownloaderOperation的进一步管理和封装，通过下载队列对SDWebImageDownloaderOperation的任务并发数(默认并发数为6个)，执行顺序（默认是FIFO）进行管理。这里我简单梳理下任务的下载流程</p>\n<ul>\n<li>client（此处指的是使用SDWebImageDownloader的客户，可以是用户自己的类，也可以是其他SDWebImage类）首先需要创建一个SDWebImageDownloader，创建好之后，就准备好了下载需要的downloadQueue，下载相关的一些配置（诸如执行顺序、并发数、超时等等）。</li>\n<li><p>client之后调用SDWebImageDownloader的downloadImageWithURL:options:progress:completed:进行实际的下载操作。在这里我有一个疑惑了好久的问题，就是session的回调问题，因为SDWebImageDownloaderOperation里面有session，而SDWebImageDownloader也有session，那么任务执行过程中，岂不是俩处都会收到回调？这难道是SDWebImage的BUG？呵呵，其实并不是，直到我看到下面这段代码。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSURLSession</span> *session = <span class=\"keyword\">self</span>.unownedSession;</div><div class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.unownedSession) &#123;</div><div class=\"line\">    <span class=\"built_in\">NSURLSessionConfiguration</span> *sessionConfig = [<span class=\"built_in\">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class=\"line\">    sessionConfig.timeoutIntervalForRequest = <span class=\"number\">15</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     *  Create the session for this task</div><div class=\"line\">     *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate</div><div class=\"line\">     *  method calls and completion handler calls.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"comment\">//注意这里，只有ownedSession才会设置代理为自己，也就是说注入的session不会设置代理。</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.ownedSession = [<span class=\"built_in\">NSURLSession</span> sessionWithConfiguration:sessionConfig</div><div class=\"line\">                                                      delegate:<span class=\"keyword\">self</span></div><div class=\"line\">                                                 delegateQueue:<span class=\"literal\">nil</span>];</div><div class=\"line\">    session = <span class=\"keyword\">self</span>.ownedSession;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">self</span>.dataTask = [session dataTaskWithRequest:<span class=\"keyword\">self</span>.request];</div></pre></td></tr></table></figure>\n<p>看了上面的代码自然就明白了，<font color=\"red\">当使用SDWebImageDownloader的时候，session的回调只有SDWebImageDownloader能接收到，这也是为什么SDWebImageDownloader需要在接收到回调之后要进行转发的缘故。</font></p>\n</li>\n</ul>\n<ol>\n<li><p>SDWebImageDownloader的初始化</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithSessionConfiguration:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURLSessionConfiguration</span> *)sessionConfiguration &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init])) &#123;</div><div class=\"line\">        _operationClass = [SDWebImageDownloaderOperation <span class=\"keyword\">class</span>];</div><div class=\"line\">        _shouldDecompressImages = <span class=\"literal\">YES</span>;</div><div class=\"line\">        <span class=\"comment\">//设置任务的执行顺序</span></div><div class=\"line\">        _executionOrder = SDWebImageDownloaderFIFOExecutionOrder;</div><div class=\"line\">        <span class=\"comment\">//创建执行任务的操作队列，并对操作队列进行配置</span></div><div class=\"line\">        _downloadQueue = [<span class=\"built_in\">NSOperationQueue</span> new];</div><div class=\"line\">        _downloadQueue.maxConcurrentOperationCount = <span class=\"number\">6</span>;</div><div class=\"line\">        _downloadQueue.name = <span class=\"string\">@\"com.hackemist.SDWebImageDownloader\"</span>;</div><div class=\"line\">        _URLOperations = [<span class=\"built_in\">NSMutableDictionary</span> new];</div><div class=\"line\"><span class=\"meta\">#ifdef SD_WEBP</span></div><div class=\"line\">        _HTTPHeaders = [@&#123;<span class=\"string\">@\"Accept\"</span>: <span class=\"string\">@\"image/webp,image/*;q=0.8\"</span>&#125; mutableCopy];</div><div class=\"line\"><span class=\"meta\">#else</span></div><div class=\"line\">        _HTTPHeaders = [@&#123;<span class=\"string\">@\"Accept\"</span>: <span class=\"string\">@\"image/*;q=0.8\"</span>&#125; mutableCopy];</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">        _barrierQueue = dispatch_queue_create(<span class=\"string\">\"com.hackemist.SDWebImageDownloaderBarrierQueue\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">        _downloadTimeout = <span class=\"number\">15.0</span>;</div><div class=\"line\"></div><div class=\"line\">        sessionConfiguration.timeoutIntervalForRequest = _downloadTimeout;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         *  Create the session for this task</div><div class=\"line\">         *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate</div><div class=\"line\">         *  method calls and completion handler calls.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">self</span>.session = [<span class=\"built_in\">NSURLSession</span> sessionWithConfiguration:sessionConfiguration</div><div class=\"line\">                                                     delegate:<span class=\"keyword\">self</span></div><div class=\"line\">                                                delegateQueue:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>SDWebImageDownloader执行下载操作<br>这里请原谅我贴上大段的代码，因为这段代码实在是太漂亮了。通过俩个函数的设计将SDWebImageDownloaderOperation的初始化和SDWebImageDownloadToken初始化分割开。并在初始化operation完成之后将任务扔到队列中去执行，还持有了operation的引用，给SDWebImageDownloader有机会保存到字典中。</p>\n</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> SDWebImageDownloadToken *)downloadImageWithURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url</div><div class=\"line\">                                                   options:(SDWebImageDownloaderOptions)options</div><div class=\"line\">                                                  progress:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class=\"line\">                                                 completed:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock &#123;</div><div class=\"line\">    __<span class=\"keyword\">weak</span> SDWebImageDownloader *wself = <span class=\"keyword\">self</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> addProgressCallback:progressBlock completedBlock:completedBlock forURL:url createCallback:^SDWebImageDownloaderOperation *&#123;</div><div class=\"line\">        __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span> (wself) sself = wself;</div><div class=\"line\">        <span class=\"built_in\">NSTimeInterval</span> timeoutInterval = sself.downloadTimeout;</div><div class=\"line\">        <span class=\"keyword\">if</span> (timeoutInterval == <span class=\"number\">0.0</span>) &#123;</div><div class=\"line\">            timeoutInterval = <span class=\"number\">15.0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// In order to prevent from potential duplicate caching (NSURLCache + SDImageCache) we disable the cache for image requests if told otherwise</span></div><div class=\"line\">        <span class=\"built_in\">NSMutableURLRequest</span> *request = [[<span class=\"built_in\">NSMutableURLRequest</span> alloc] initWithURL:url cachePolicy:(options &amp; SDWebImageDownloaderUseNSURLCache ? <span class=\"built_in\">NSURLRequestUseProtocolCachePolicy</span> : <span class=\"built_in\">NSURLRequestReloadIgnoringLocalCacheData</span>) timeoutInterval:timeoutInterval];</div><div class=\"line\">        request.HTTPShouldHandleCookies = (options &amp; SDWebImageDownloaderHandleCookies);</div><div class=\"line\">        request.HTTPShouldUsePipelining = <span class=\"literal\">YES</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.headersFilter) &#123;</div><div class=\"line\">            request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders <span class=\"keyword\">copy</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            request.allHTTPHeaderFields = sself.HTTPHeaders;</div><div class=\"line\">        &#125;</div><div class=\"line\">        SDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];</div><div class=\"line\">        operation.shouldDecompressImages = sself.shouldDecompressImages;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.urlCredential) &#123;</div><div class=\"line\">            operation.credential = sself.urlCredential;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sself.username &amp;&amp; sself.password) &#123;</div><div class=\"line\">            operation.credential = [<span class=\"built_in\">NSURLCredential</span> credentialWithUser:sself.username password:sself.password persistence:<span class=\"built_in\">NSURLCredentialPersistenceForSession</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (options &amp; SDWebImageDownloaderHighPriority) &#123;</div><div class=\"line\">            operation.queuePriority = <span class=\"built_in\">NSOperationQueuePriorityHigh</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options &amp; SDWebImageDownloaderLowPriority) &#123;</div><div class=\"line\">            operation.queuePriority = <span class=\"built_in\">NSOperationQueuePriorityLow</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        [sself.downloadQueue addOperation:operation];</div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) &#123;</div><div class=\"line\">            <span class=\"comment\">// Emulate LIFO execution order by systematically adding new operations as last operation's dependency</span></div><div class=\"line\">            [sself.lastAddedOperation addDependency:operation];</div><div class=\"line\">            sself.lastAddedOperation = operation;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> operation;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里有对SDWebImageDownloaderOperation进行保存处理，确保同一个URL只会创建一次，避免内存的额外消耗。添加对token的初始化和管理，把operation的初始化和token的初始化进行业务上一些小分离，代码层次立马清晰起来了，赞！<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> SDWebImageDownloadToken *)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock</div><div class=\"line\">                                           completedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock</div><div class=\"line\">                                                   forURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url</div><div class=\"line\">                                           createCallback:(SDWebImageDownloaderOperation *(^)())createCallback &#123;</div><div class=\"line\">    <span class=\"comment\">// The URL will be used as the key to the callbacks dictionary so it cannot be nil. If it is nil immediately call the completed block with no image or data.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (url == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (completedBlock != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">            completedBlock(<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">NO</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    __block SDWebImageDownloadToken *token = <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\">    dispatch_barrier_sync(<span class=\"keyword\">self</span>.barrierQueue, ^&#123;</div><div class=\"line\">        SDWebImageDownloaderOperation *operation = <span class=\"keyword\">self</span>.URLOperations[url];</div><div class=\"line\">        <span class=\"keyword\">if</span> (!operation) &#123;</div><div class=\"line\">            operation = createCallback();</div><div class=\"line\">            <span class=\"keyword\">self</span>.URLOperations[url] = operation;</div><div class=\"line\"></div><div class=\"line\">            __<span class=\"keyword\">weak</span> SDWebImageDownloaderOperation *woperation = operation;</div><div class=\"line\">            operation.completionBlock = ^&#123;</div><div class=\"line\">              SDWebImageDownloaderOperation *soperation = woperation;</div><div class=\"line\">              <span class=\"keyword\">if</span> (!soperation) <span class=\"keyword\">return</span>;</div><div class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.URLOperations[url] == soperation) &#123;</div><div class=\"line\">                  [<span class=\"keyword\">self</span>.URLOperations removeObjectForKey:url];</div><div class=\"line\">              &#125;;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">id</span> downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];</div><div class=\"line\"></div><div class=\"line\">        token = [SDWebImageDownloadToken new];</div><div class=\"line\">        token.url = url;</div><div class=\"line\">        token.downloadOperationCancelToken = downloadOperationCancelToken;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> token;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p> 好了，SDWebImageView的下载环节就到这里，看来那句话确实没说错，源码面前，没有神秘，哈哈！下一小节主要研究下SDWebImageView是如何对图片进行缓存操作的。</p>\n<hr>\n<p>参考资料<br>[1]. <a href=\"https://github.com/rs/SDWebImage\">SDWebimage在github上的地址</a><br>[2]. <a href=\"http://cocoadocs.org/docsets/SDWebImage/3.8.2/\">英文版的使用说明</a><br>[3]. <a href=\"https://github.com/rs/SDWebImage/wiki/Who-Uses-SDWebImage\">使用SDWebimage的app列表</a></p>\n<hr>"},{"title":"hexo本地图片放置问题","date":"2017-05-06T11:00:52.000Z","_content":"\n(转) [ 原 文 地 址 ](http://www.tuicool.com/articles/umEBVfI)\n\n## 起因\n\n在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。\n\n这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。\n\n<!--more-->\n\nhexo 下插入图片现在大概有几个方案\n\n1. **放在根目录**\n\n   早期大部分的方案是把图片放在  `source/img` 下，然后在 markdown 里写  `![img](/source/img/img.png)` 。显然这样在本地的编辑器里完全不能正确识别图片的位置。\n\n2. **asset-image**\n\n   在 hexo 2.x 时出现的插件，后来被吸纳进  `hexo 3 core` ，用法的介绍见  [资源文件夹 | Hexo](https://hexo.io/zh-cn/docs/asset-folders.html) 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似  ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。\n\n## 解决方案\n\n[CodeFalling/hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n\n1. **首先确认  `_config.yml` 中有  `post_asset_folder:true` 。**\n\n   在 hexo 目录，执行\n\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n\n```\n\n假设在\n\n```\nMacGesture2-Publish\n├── apppicker.jpg\n├── logo.jpg\n└── rules.jpg\nMacGesture2-Publish.md\n```\n\n这样的目录结构（目录名和文章名一致），只要使用  `![logo](MacGesture2-Publish/logo.jpg)` 就可以插入图片。 \n\n生成的结构为\n\n```\npublic/2015/10/18/MacGesture2-Publish\n├── apppicker.jpg\n├── index.html\n├── logo.jpg\n└── rules.jpg\n```\n\n同时，生成的 html 是\n\n```\n<img src=\"/2015/10/18/MacGesture2-Publish/logo.jpg\" alt=\"logo\">\n\n```\n\n而不是愚蠢的\n\n```\n<img src=\"MacGesture2-Publish/logo.jpg\" alt=\"logo\">\n\n```\n\n值得一提的是，这个插件对于  [CodeFalling/hexo-renderer-org](https://github.com/CodeFalling/hexo-renderer-org) 同样有效","source":"_posts/hexo本地图片放置问题.md","raw":"---\ntitle: hexo本地图片放置问题\ndate: 2017-05-06 19:00:52\ntags: 工具\ncategory: 转\n---\n\n(转) [ 原 文 地 址 ](http://www.tuicool.com/articles/umEBVfI)\n\n## 起因\n\n在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。\n\n这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。\n\n<!--more-->\n\nhexo 下插入图片现在大概有几个方案\n\n1. **放在根目录**\n\n   早期大部分的方案是把图片放在  `source/img` 下，然后在 markdown 里写  `![img](/source/img/img.png)` 。显然这样在本地的编辑器里完全不能正确识别图片的位置。\n\n2. **asset-image**\n\n   在 hexo 2.x 时出现的插件，后来被吸纳进  `hexo 3 core` ，用法的介绍见  [资源文件夹 | Hexo](https://hexo.io/zh-cn/docs/asset-folders.html) 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似  ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。\n\n## 解决方案\n\n[CodeFalling/hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n\n1. **首先确认  `_config.yml` 中有  `post_asset_folder:true` 。**\n\n   在 hexo 目录，执行\n\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n\n```\n\n假设在\n\n```\nMacGesture2-Publish\n├── apppicker.jpg\n├── logo.jpg\n└── rules.jpg\nMacGesture2-Publish.md\n```\n\n这样的目录结构（目录名和文章名一致），只要使用  `![logo](MacGesture2-Publish/logo.jpg)` 就可以插入图片。 \n\n生成的结构为\n\n```\npublic/2015/10/18/MacGesture2-Publish\n├── apppicker.jpg\n├── index.html\n├── logo.jpg\n└── rules.jpg\n```\n\n同时，生成的 html 是\n\n```\n<img src=\"/2015/10/18/MacGesture2-Publish/logo.jpg\" alt=\"logo\">\n\n```\n\n而不是愚蠢的\n\n```\n<img src=\"MacGesture2-Publish/logo.jpg\" alt=\"logo\">\n\n```\n\n值得一提的是，这个插件对于  [CodeFalling/hexo-renderer-org](https://github.com/CodeFalling/hexo-renderer-org) 同样有效","slug":"hexo本地图片放置问题","published":1,"updated":"2017-05-06T11:24:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8ywb000bhx5l3fhtyx9d","content":"<p>(转) <a href=\"http://www.tuicool.com/articles/umEBVfI\" target=\"_blank\" rel=\"external\"> 原 文 地 址 </a></p>\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。</p>\n<p>这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。</p>\n<a id=\"more\"></a>\n<p>hexo 下插入图片现在大概有几个方案</p>\n<ol>\n<li><p><strong>放在根目录</strong></p>\n<p>早期大部分的方案是把图片放在  <code>source/img</code> 下，然后在 markdown 里写  <code>![img](/source/img/img.png)</code> 。显然这样在本地的编辑器里完全不能正确识别图片的位置。</p>\n</li>\n<li><p><strong>asset-image</strong></p>\n<p>在 hexo 2.x 时出现的插件，后来被吸纳进  <code>hexo 3 core</code> ，用法的介绍见  <a href=\"https://hexo.io/zh-cn/docs/asset-folders.html\" target=\"_blank\" rel=\"external\">资源文件夹 | Hexo</a> 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似  ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。</p>\n</li>\n</ol>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p><a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">CodeFalling/hexo-asset-image</a></p>\n<ol>\n<li><p><strong>首先确认  <code>_config.yml</code> 中有  <code>post_asset_folder:true</code> 。</strong></p>\n<p>在 hexo 目录，执行</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</div></pre></td></tr></table></figure>\n<p>假设在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">MacGesture2-Publish</div><div class=\"line\">├── apppicker.jpg</div><div class=\"line\">├── logo.jpg</div><div class=\"line\">└── rules.jpg</div><div class=\"line\">MacGesture2-Publish.md</div></pre></td></tr></table></figure>\n<p>这样的目录结构（目录名和文章名一致），只要使用  <code>![logo](MacGesture2-Publish/logo.jpg)</code> 就可以插入图片。 </p>\n<p>生成的结构为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public/2015/10/18/MacGesture2-Publish</div><div class=\"line\">├── apppicker.jpg</div><div class=\"line\">├── index.html</div><div class=\"line\">├── logo.jpg</div><div class=\"line\">└── rules.jpg</div></pre></td></tr></table></figure>\n<p>同时，生成的 html 是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;/2015/10/18/MacGesture2-Publish/logo.jpg&quot; alt=&quot;logo&quot;&gt;</div></pre></td></tr></table></figure>\n<p>而不是愚蠢的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;MacGesture2-Publish/logo.jpg&quot; alt=&quot;logo&quot;&gt;</div></pre></td></tr></table></figure>\n<p>值得一提的是，这个插件对于  <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">CodeFalling/hexo-renderer-org</a> 同样有效</p>\n","excerpt":"<p>(转) <a href=\"http://www.tuicool.com/articles/umEBVfI\"> 原 文 地 址 </a></p>\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。</p>\n<p>这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。</p>","more":"<p>hexo 下插入图片现在大概有几个方案</p>\n<ol>\n<li><p><strong>放在根目录</strong></p>\n<p>早期大部分的方案是把图片放在  <code>source/img</code> 下，然后在 markdown 里写  <code>![img](/source/img/img.png)</code> 。显然这样在本地的编辑器里完全不能正确识别图片的位置。</p>\n</li>\n<li><p><strong>asset-image</strong></p>\n<p>在 hexo 2.x 时出现的插件，后来被吸纳进  <code>hexo 3 core</code> ，用法的介绍见  <a href=\"https://hexo.io/zh-cn/docs/asset-folders.html\">资源文件夹 | Hexo</a> 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似  ``的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。</p>\n</li>\n</ol>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p><a href=\"https://github.com/CodeFalling/hexo-asset-image\">CodeFalling/hexo-asset-image</a></p>\n<ol>\n<li><p><strong>首先确认  <code>_config.yml</code> 中有  <code>post_asset_folder:true</code> 。</strong></p>\n<p>在 hexo 目录，执行</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</div></pre></td></tr></table></figure>\n<p>假设在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">MacGesture2-Publish</div><div class=\"line\">├── apppicker.jpg</div><div class=\"line\">├── logo.jpg</div><div class=\"line\">└── rules.jpg</div><div class=\"line\">MacGesture2-Publish.md</div></pre></td></tr></table></figure>\n<p>这样的目录结构（目录名和文章名一致），只要使用  <code>![logo](MacGesture2-Publish/logo.jpg)</code> 就可以插入图片。 </p>\n<p>生成的结构为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public/2015/10/18/MacGesture2-Publish</div><div class=\"line\">├── apppicker.jpg</div><div class=\"line\">├── index.html</div><div class=\"line\">├── logo.jpg</div><div class=\"line\">└── rules.jpg</div></pre></td></tr></table></figure>\n<p>同时，生成的 html 是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;/2015/10/18/MacGesture2-Publish/logo.jpg&quot; alt=&quot;logo&quot;&gt;</div></pre></td></tr></table></figure>\n<p>而不是愚蠢的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;MacGesture2-Publish/logo.jpg&quot; alt=&quot;logo&quot;&gt;</div></pre></td></tr></table></figure>\n<p>值得一提的是，这个插件对于  <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">CodeFalling/hexo-renderer-org</a> 同样有效</p>"},{"title":"译 ios并发编程指南","date":"2016-08-27T13:28:47.000Z","_content":"\n[并发编程指南](#1)\n\n<!--more-->\n\n![](http://ock9zbzms.bkt.clouddn.com/translationconcurrency.png)\n\n# [并发](#1)\n## [1 概述](#2)\n### [1.1 并发的概念](#3)\n并发其实指的是多项任务在同一时间进行，随着多核CPU的普及以及发现任务只在某一核上不停的增加，软件开发者需要一种方式充分的利用多核系统。虽然诸如IOS、MacOS兼容多项程序同时执行，但是大多数的程序运行在后台，并且执行任务只需要很短的CPU时间。这是因为前台应用同时获取了用户的关注并且是设备处于忙的状态。如果一个程序有很多的任务需要处理，但是又只获得了很少的碎片CPU时间，那些额外的处理资源将被浪费。 在过去，在应用中引入并发要求创建一个或者多个额外的线程，遗憾的是，编写线程代码是一项非常有挑战性的事情，线程是一种‘低级’的工具，并且需要手动去管理，获取多少个线程是最优的，动态取决于当前的系统以及底层硬件的支持。实现一个完美的线程解决方案，变的极其困难或者说不可能实现。另外，采取添加线程的方式实现同步的机制，不仅给软件开发带来了复杂性和风险性，而且也并不能确保提升性能。 OSX和iOS采取了一种比传统的基于线程的系统和程序，更加异步的方式去执行并发任务。并不是直接去创建线程，应用需要做的是定义一些特殊的任务，然后让系统去执行它们，让操作系统去管理线程，程序获得了原生线程更强的伸缩性，而程序开发者也获得了更加简单更加高效的编程模型。 本文档就是描述这项技术和技艺，你应该使用这项技术来实现并发。这项技术同时使用于iOS和OSX。\n\n## [1.2 文档的组织](#3)\n本文档包括以下章节 \n1、并发和程序设计——介绍异步程序设计的一些基本概念和异步的执行自定义任务的技术 \n2、操作队列——展示怎样用OC去组装和执行一个任务 \n3、分发队列——展示怎样在基于C的应用程序中去并发地执行任务\n4、资源分发——展示如何异步的处理系统事件 \n5、从线程变成用迁移到新的技术——提供一些技术帮助从旧的线程变成迁移到新的变成技术 本文当同时也包括一些相关章节的专业术语的定义\n\n## [1.3 一些专业名词](#3)\n在开始讨论并发之前，非常有必要去定义一些相关的专业名词来避免混淆，一些开发UNIX或者早先开发OSX的程序员，可能会对任务，队列处理、线程有一些新的任务，本文档对这几个概念有如下定义 \n1、在本文中，线程专指一个分离的支线去执行一段代码，而在老的OSX中特指基于POSIX的API 2、在本文中，执行专指可执行的任务正在执行中，可能包裹着多个线程。\n3、在本文中，任务专指一个需要被执行的抽象工作 关于完整的类似这些概念的定义，参见词汇定义\n\n## [1.4 其他](#3)\n本文档专注于如何在你的程序中实现并发编程，而不包括如何使用线程，如果你需要更多的有关线程开发的只是，请去参考线程编程指导\n\n# [2 并发及程序设计](#2)\n## [2.1 并发编程和程序设计](#3)\n在以前的计算机运行的时候，计算机单位时间最大执行数量的任务取决于CPU的时钟速度，但是随着技术的发展和中央处理器设计的更加紧凑，热量和物理因素开始限制中央处理器的最大时钟速度，所以，主板供应商也在寻找其他的方式去提升他们主板的总体性能，他们发现的解决方案是增加主板上的处理器个数，通过增加处理器个数，一个主板可以在单位时间内执行更多的任务，而并不需要去增加CPU的时钟速度，或是改变主板的大小或考虑热量参数，现在剩下的唯一问题就是如何去充分的利用这些多核。 为了利用这些多核，计算机需要程序设计者能够去同时执行多项任务，在当代，多核操作系统，如OSX或者IOS，可能有几百或者更多的程序在同时运行，所以根据时序安排程序在不同的中央处理器上变得成为可能，然而，大多数的时候，这些程序要么是系统守护进程，要么是那些消费很小处理时间的后台应用程序，取而代之的是，真正需要多核开发的是，独立的前台运行的程序更高效的获取更多核心。 传统的使应用获取多核的方式是创建多线程，然而，随着多核的增加，线程方案有一些问题，最大的问题是线程开发的方式对多核系统不具备很好的伸缩性，你不能仅靠创建更多的行程就能确保程序和处理器运行良好，你需要知道的是，如何高效的利用这些中央处理器。对于程序来讲，如何计算它自身是一件有挑战的事情，尽管你可以正确的管理这些线程，程序去管理这些线程也依然是一项挑战，去确保他们高效运行、确保他们不被别的线程干扰。 所以，总结这些问题，程序需要一种方式去充分应用多核，单个程序可伸缩的执行大量工作，而且这个解决方案需要足够简单，去面对单个处理器任务的任务增长，好消息是，苹果已经提供了解决方案对处理所有这些问题，本章节先睹为快，去看看这项技术的组成以及牛逼的设计，你可以使你的代码从中获益。\n\n## [2.2 从线程开发中走出来](#3)\n尽管线程开发已经应用了多年，而且它们在某些地方还将有用武之地，但是它们并没有可伸缩的解决多核场景，如果你使用线程开发，那么创建一个可伸缩的解决方案的麻烦就落在你肩上了，开发者，你需要去动态的根据系统的多核个数去决定创建多少个线程，此外，你的应用将花费很多消耗在创建和管理这些线程本身的消耗上。 取代线程开发，OSX和IOS使用异步设计的方式解决并发问题，异步方法已经在操作系统中提供了很多年，而且一般都是应用在创建很耗时的任务上，如从磁盘读取文件。当调用的时候，一个异步任务开始在后台执行，并立即返回在任务执行完之前。通常，这项任务会调用一个后台线程，开始这项任务在该后台线程上，然后在任务完成的时候发送一个消息给调用者（通常使用回调的方式）。在过去，如果没有一个你需要的异步方法，你需要自己去写一个异步方法还需要创建自己的线程，但是现在，OSX和iOS提供技术，你可以不用自己去管理线程就可以异步执行任务。 一种开启异步任务的技术叫 GCD，一项将过去需要在你程序中自己写管理线程代码移交给系统去管理。所有你需要做的事情仅仅是创建任务，然后将任务提交给合适的系统的GCD队列。GCD去创建和管理这些线程，因为这些线程已经提交给系统去管理，GCD提供全套的任务管理和执行，比传统的线程管理更加高效。 操作队列是非常类似于分发队列的一种OC对象管理方式，你可以定义你想执行的任务，然后把他们扔到操作队列中，当执行这些安排好的任务时，类似于GCD，操作队列为你执行所有的管理。确保在系统长执行的高效且迅速。 下面的段落提供了更多的信息关于操作队列、分发队列、以及一些你可能在异步编程中用到的技术\n\n### [2.2.1 分发队列](#4)\n分发队列是一套C的机制，为可执行自定义任务。分发队列要么是串行的要么是并行的，但是通常都是按照FIFO的方式去调度任务，一个串行的队列，一次只能运行一个任务，只有等前一个任务完成之后，下个任务才能开启。作为对比，并行的队列可以同时开启尽可能多的任务而并不需要前面的任务执行完毕。 分发队列有下面几个好处 \n\n\t1、提供了简单的直观的编程接口 \n\t2、提供了自动的和完全的线程池管理 \n\t3、任务执行速度提升 \n\t4、更多的内存方面的优化 \n\t5、他们不会增加内核的负载 \n\t6、不会导致队列死锁 \n\t7、伸缩性强（对多核系统来讲） \n\t8、串行队列提供了比过去线程同步更为优秀的一种选择 \n\n你提供给分发队列的任务必须是封装好的一个方法或者是一个Block对象，Block是一种具有C语言特性的，开始引进与OSX 10.6,IOS 4.0的一个新特性。但是相比C语言有一些别的好处。不同于在Block的语法区域定义Block对象，你通常在别的方法或者是函数中去定义，这样可以去捕获到别的方法或者函数中的变量，Block同样可以移动到他们的作用区域以外，拷贝到堆上，这通常发生在你将任务添加到一个分发队列上的时候，所有这些语法特性，使得通过添加少量代码就可以获得非常好的实现。 分发队列是GCD技术的一部分，也是C运行时的一部分，要想获取更多的有关分发队列相关的信息，请参见 分发队列，要获取更多关于Block的信息和他们的好处，参见Block 程序编程观点。\n\n### [2.2.2 分发资源](#4)\n分发资源是异步的处理系统分发资源的一种C语言机制，分发资源封装了一个特殊类型的系统事件，并将这个特殊的系统事件提交给一个特殊的Block对象，或者函数，当系统事件发生的时候，你可以使用分发资源去监测如下特殊系统事件 定时器 信号事件 描述符相关事件 进程相关事件 端口匹配相关事件 自定义的事件，并由你来触发 分发资源也是GCD技术的一部分，要获取更多有关分发资源相关的信息，参见分发资源\n\n### [2.2.3 操作队列](#4)\n操作队列是cocoa环境的一种并发队列，由NSOperationQueueClass 实现，操作队列总是按照FIFO的方式去执行任务，操作队列考虑其他因素去影响执行队列的顺序，在这些因素中，优先考虑一个任务的执行是否是依赖于其他任务，你可以给自己的任务设置依赖关系，然后创建一个复杂的执行顺序图。 任务添加到操作队列中的，必须是NSOperation的子类，一个操作对象是一个OC类型的封装了你要执行的数据和任务的对象，由于NSOperation是一个抽象基类，所以你通常需要去自定义子类去执行你的任务，然而，Foundation Framework已经提供了一些相关的子类，你可以使用它们去执行任务。 操作的对象产生KVO通知，这个是非常有用的，当监视你的任务进度的时候，虽然任务执行通常是并发的，但是可以利用依赖是的任务有序。 关于更多操作队列的信息，参见操作队列\n\n## [2.3 异步编程技术](#3)\n在你开始考虑重新用并发编程的方式重新设计程序的时候，你最好先问下自己这么做是否必要，并发可以提高你代码的可响应性，去确保主线程能相应更多的用户事件，它同样可以提高你代码的性能，通过促进多核去执行更多的任务，但是它也同时带来了上层复杂性，从而使你的代码更加难调试。 由于它带来了复杂性，并发并不是一个在你程序开周期中考虑的特性，当把它嫁接到应用中。做对这件事需要你好好考虑你程序执行的任务以及向这些任务提交的数据结构。如果做错的话，你可能发现你的代码运行缓慢，甚至还不如从前，因此，在你开始程序设计的时候，你就应该考虑你要实现的目标和通过何种方式来达到它。 每个应用都包含有不同的要求和不同的任务需要它去执行，这不可能靠一个文档就告诉你，怎么去设计你的程序和管理任务，然而，下面几段可以给你提供一些指导，帮助你去在程序设计的时候做出好的选择。\n\n### [2.3.1 明确程序期望的表现](#4)\n在你决定是否要将并发引导到应用中的时候，你应当开始思考你的应用程序想要达到的一个什么表现。明白了应用要达到的表现之后，会给你是否使用并发提供一个参考。同样的，也会给你一些引入并发之后程序能获取的性能收益方面的启发。 首先、你需要列举应用程序所要执行的任务和数据结构之间的关系。开始，你可能通过点击一个菜单或者一个按钮开启一个任务并执行，这些任务可能是一些离散的任务，并有明确的开始和结束点。你还需要列举出应用程序可能执行的其他类型的任务，而不仅仅是用户行为相关的，比如说基于时间的一些任务 在你有了自己任务列表之后，开始把任务进行更加的分组集合，确保这些任务能够成功执行。在这个层面，你优先考虑的是那些数据或对象修改如何对应用状态进行修改的。你同样需要考虑不同任务之间的相互依赖关系，例如：如果一个任务牵涉到一个数组中所有对象的修改，对于其中一个数据的修改，会对其他数据产生任何影响。如果一个数据的修改，独立于其他的数据，那么这个时候你可以考虑使用并发去做提升性能，创建多个任务去做。\n\n### [2.3.2 单位工作的可执行因子](#4)\n在明白你程序执行的任务类型之后，你应该明白在什么地方去使用并发会有好处了。如果在一个任务中改变一个或者多个的顺序，会影响到执行结果。你应该还是需要考虑到使用串行的方式去执行这些任务，如果改变执行顺序之后，并不会影响到执行结果，你可以考虑将这些任务用并发的方式去做，在这俩种情形下，你定义可执行的单位工作，并让它们执行，这些工作单元，就成为你封装好的Block对象或者操作对象或者分发队列。 对于每个单独的可执行任务，并不需要过多的担心任务执行的数量，在最后，分到线程中总是会有开销，但是分发队列或者操作队列相比传统的线程开发还是有很多优势的，因此，执行一些单元工作使用操作队列还是要比直接操作线程要好很多，当然，你常常应该确保任务执行的性能和你开启的任务恰好如你所需，但是，任务并不是越小就越好。\n\n### [2.3.3 区分你需要什么队列](#4)\n此时，你的任务已经切割为一些可执行的单元，并且封装成了Block对象或者是操作对象，你需要去定义你要执行的队列以执行这些任务。对一个任务来讲，测试这些Block或者是操作任务，能够在队列中执行正确。 如果你使用Block去实现你的任务,你可以添加任务到串行或者并行的队列里，如果对顺序有要求的话，你只能添加到一个串行队列中，如果没有要求，根据你的要求，你可以添加的并行队列中，或者添加到多个队列中去。 如果你是用操作队列去执行任务，那么选择的队列并不对添加到里面的任务的配置感兴趣，如果要串行去执行任务，那么你需要给相关的任务设置依赖关系，依赖会阻止任务开始执行，直到它依赖的任务执行完成。\n\n### [2.3.4 提升执行效率的贴士](#4)\n在把任务分割为更小的任务并将他们添加到队列中后，这里还有一些使用队列提升程序性能的小Tips 如果内存考虑是一个因素的话，那么在任务里面直接计算。如果你的应用已经内存警告了，那么在任务中直接计算会比从内存中加载要快一些。运用在寄存器或者是该核上的内存计算，会比从主内存加载要快一些。当然，你也可以通过测试来选择哪种方案会好一些。 将串行的任务，可能的话改变为并发。如果一个任务由于共享资源必须串行去执行，可以考虑将共享资源移除使得可以并发执行，可以考虑把这些资源给每个客户都拷贝一份。 避免使用锁，操作队列和分发队列的支持在大多数情况下并不需要锁。做为取代，可以使用一个串行的队列或者使用依赖去保证顺序正确。 如果可能的话依赖系统框架，最好的方式去实现并发就是使用系统提供的框架，许多框架使用线程或者其他技术来实现并发，当定义你的任务的时候，看看系统框架中是否已经有方法或者函数能够实现并发，使用系统接口会提升你的效率，而且帮你做到更多的并发可能性。\n\n## [2.4 性能相关](#3)\n操作队列、分发队列、资源分发提供了一种执行并发更加容易的方式。但是这些技术并不保证提升程序的性能和可响应性。具体来讲，根据你的需要同时兼顾性能提升和不要影响到其他资源仍然是你自己需要衡量的一件事。举个例子来讲，尽管你创建了10000个任务并把他们都提交到操作队列中，这么干的话，肯定会导致你的程序分配潜在的大量内存，这个会导致增加调度和减少性能。 引入并发到你的程序中前--是使用队列还是线程，你需要根据程序当前的性能来设置一个参考的标准。在引入并发之后，也同样需要做个列表对性能方面的改变进行比较，来确保程序是真的性能提升了，如果引入并发并不能给性能带来大的提升，你应该考虑其他的性能工具来检测潜在的原因。 关于性能的介绍和可用的性能工具，参见性能概览。\n\n## [2.5 并发和其他技术](#3)\n将你的代码分解为模块任务是一种最好的提升应用并发的方式，但是这种设计方式并不是对每个应用每个情况都很适合，取决于你执行的任务，也可能存在其他的选择来提升程序的整体并发，下面的俩小节提供了其他的并发技术供你参考\n\n### [2.5.1 OpenGL和并发](#4)\n在OSX中，OpenGC技术是图形计算方便最基础和核心的技术，OpenGL是非常棒的计算大数据集合的一种技术，举个例子来讲，你可能使用OpenGL技术来给图片做像素级别的滤镜，或者用它来计算复杂的数学计算。换而言之，OpenGL可以用来计算大量数据集合是并行的。 尽管OpenGL在大量数据并行执行方面有着非常好的性能优势，但是它并不合适执行自定义的计算，在任务提交给GPU处理之前，有大量的准备工做，而且要将数据和其他必要的核心操作转换图形卡片。同样的，要想获取OpenGL的产生结果也需要偶很多其他的努力。因此，所有跟系统交互相关的任务不建议提交给OpenGL去执行，举个例子，你不应该用OpenGL去运算从文件中或者网络流中拿到的数据，取而代之的是，你要用OpenGL执行的任务，必然是自己已经持有的这样相对来讲传递给GPU运算更加独立。 更多关于OpenGL的只是，参见OpenGL开发指导。\n\n### [2.5.2 何时使用线程](#4)\n尽管操作队列和分发队列是执行并发任务的更优选择，但是它们不是万能的，取决于你的应用程序，这里仍然后一些情况是需要创建线程去开发的，如果你创建了自定义的线程，那么你要确保尽量少的开启线程，并且确保这些线程只执行特定的任务，而不去干别的事情。 线程仍然是一种较好的解决方案，当执行实时任务的时候，分发队列会确保尽快的去执行他们的任务，但是并不能实时的去开线程去做。如果你需要可预测的后台代码执行，那么线程仍是一种选择。 作为线程编程，你还是需要去使用线程，当必须和完全必要的时候，关于更多线程方面的知识，参见线程开发指导。\n\n# [3 操作队列](#2)\ncocoa的操作都是原生的对象封装的可执行异步任务。这些操作同时可提交给操作队列去执行，也可以直接自己执行。由于是基于OC的框架，那么操作可应用在IOS和OSX中。本章节将介绍如何去使用和定义操作。\n\n## [3.1 关于操作对象](#3)\n一个操作对象是一个NSOperation类的实例，你可以用它来封装你要执行的任务。NSOperation类本身是一个抽象基类。所以要想执行可用的任务，必须得使用它的子类。尽管是一个抽象类，它还是提供了一些有用的基本操作，而省去了你在自己定义的子类中去做的麻烦。此外，Foundation 框架还提供了俩个具体的子类，可以用它们来执行你的任务，下表列出了这俩个类，还有如何使用它们的介绍。 NSInvocationOperation ：这是一个基于你的类和要执行的Seletor的类，你可以在已经定义过这个任务的地方去调用它，然后执行异步操作。由于它并不要强制你去做继承，所以可以使用该类去实现一个更加动态的风格。 NSBlockOperation：这是一个执行block封装任务的操作类，因为它可以执行多个block。block任务执行任务使用了组的语法，当所有的相关的block执行完之后，这个block操作才被任务是执行完成 NSOperation：这是定义其他操作任务的基类，继承它给你自定义操作类带来了完成的并发控制以及实现。包含可以完全控制任务的执行能力和执行状态。 所有上述的操作对象都包含以下核心的特性 支持建立图形化的任务间相互依赖，这些依赖将会阻止任务开始，直到它依赖的任务完成之后。 支持可选的完成回调block。指的是当所有的执行任务结束之后的回调方法。 支持检测任务执行状态（使用KVO） 支持对操作顺序进行调整，并影响他们的执行顺序。 支持取消语义，也即允许你半路对任务执行终止操作。 操作对象是设计来帮助你提升程序的并发水平，操作也是一种不错的组织和包装你的应用为几个独立的分支的一种手段，作为取代提交一些任务给主线程的开发方式，可以将任务分割为一个或多个不同的操作，然后提交给队列，使相关的工作可以在一个或多个线程中去并发的执行。\n\n## [3.2 同时VS非同时操作](#3)\n尽管，你通常将任务添加到操作队列中，但是做这个并不是必须的。你也可以直接调用它的start方法去开始一个操作。但是执行这个操作，并不能保证你的操作同步的运行在你当前代码所在的线程中。那么NSOperation类的这个isConcurrent方法会告知你，当前运行的操作是同步还是异步的在你调用Start方法的线程中，默认情况下这个方法会返回NO，也就是说这个操作是在当前调用的线程中同步去执行的。 如果你想去实现一个异步执行的操作，也就是调度任务的线程和任务执行的线程是异步的。你需要写额外的代码去异步的开启它。举个例子，你可以创建一个独立的线程，调用一个系统的异步方法，去执行其他的事情以保证start函数的调用时异步去执行。 大多数的开发并不需要去实现一个并发操作对象，如果你总是将你的操作去添加到一个操作队列中，你并不需要实现这些并发操作，当你添加一个操作对象到操作队列中的时候，操作队列自己就会创建一个线程去执行你的操作，因此，将一个并不是异步的任务添加到操作队列中去，结果还是会以异步的方式去执行代码，去定义一个异步任务这种费力不讨好的工作，也只是你就是想创建异步执行任务，而不是将它添加到队列中去的时候才有必要。 关于更多有关异步任务的信息，参见设置任务去异步执行。\n\n## [3.3 创建一个NSInocationOperation对象](#3)\nNSInvocationOperation是NSOperation的具体子类，当它运行的时候，会执行它的selector里面，指派给它的任务。使用该类时，应该避免将大量的自定义的操作给每个任务。尤其是当你需要改变一个已经存在的应用程序和这些对象已经存在任务，还有很多必备要执行的任务时。你可以使用它来改变依赖环境的时候。举个例子，你可以使用一个Invocation对象来执行一个选择器，这个选择器是基于获取用户的输入信息动态的选择。 创建一个Invocation操作的步骤是很简单的，你可以创建并实例化一个该对象，然后传递需要的对象和selector去执行指定的代码，下面提供了俩个方法去举例说明这个操作步骤，taskWithData：方法创建一个操作对象，然后通过另外一个方法去执行任务。 \n```objc\n\n@implementation MyCustomClass \n\n- (NSOperation*)taskWithData:(id)data { \n\tNSInvocationOperation* theOp = [[NSInvocationOperation alloc] initWithTarget:self \n\tselector:@selector(myTaskMethod:) \n\tobject:data]; \nreturn theOp;\n } // This is the method that does the actual work of the task. \n\n- (void)myTaskMethod:(id)data { // Perform the task. } \n@end\n```\n\n## [3.4 创建一个NSBlockOperation对象](#3)\nNSBlockOperation是NSOperation的具体子类，作为一个或者多个Block对象的封装器，这个类提供了对象层面的封装，而且它已经使用了操作分发队列，所以并不需要创建分发队列，但是你也可以使用其他的诸如操作任务的依赖、KVO通知或者其他特性，而这些特性是分发队列所没有的。 当你创建一个block操作的时候，在创建他的时候，你至少已经添加了一个block，你也可以在之后再添加更多的block进去。当执行NSBlockOperation对象的时间来临的时候，该对象会将它的所有block都提交给默认优先级的异步分发队列，然后这个对象等待它的block全部执行完，之后会把自己标记为isfinish。因此，你可以使用一个Block操作去监听一组任务的完成，非常像用一个线程去管理多个线程的结果。而不同之处在于block操作自己运行在一个分离的线程，而你的程序可以干其他的活儿，在这个block等待它的任务执行完成之前。 下面的代码介绍了如何去创建一个BlockOperation，这个Block没带参数且没有返回什么有意义的结果 NSBlockOperation* theOp = [NSBlockOperation blockOperationWithBlock: ^{ NSLog(@\"Beginning operation.\\n\"); // Do some work. }]; 当创建一个block操作之后，你可以添加更多的block给它，通过 addExecutionBlock：方法，如果你想让添加的任务线性去执行，那么你必须直接将它提交给指定的串行队列中去。\n\n## [3.5 定义一个自定义的操作](#3)\n如果一个Block操作对象或者Invocation操作对象没法完全满足你的需求的时候，你可以考虑自己定义个继承自NSOperation的操作对象，NSOperation对象提供了一系列的继承点给所有的操作对象，这个类已经实现了大量的基础的函数或方法，满足那些依赖或者KVO的操作，然而，还是有一些地方需要你自己的自定义实现确保你的操作对象能够正确的执行，具体的工作量的大小取决于你要自定义的是一个同步操作对象还是异步操作对象。 定义个同步操作对象要比定义一个异步操作对象简单的多，对于一个同步操作对象来讲，所有你要做的工作就是实现main执行函数和响应取消操作事件。父类已经帮你做了所有其他该做的工作，而对于一个异步操作对象来将，你需要替换一些父类已经做过的工作，在你自己定义的操作对象上。下面的俩小节将介绍如何去实现这俩种不同的操作对象。\n\n### [3.5.1 执行main任务](#4)\n至少一个操作对象需要实现下面的函数 一个自定义的初始化函数 main 你需要自定义个初始化函数去初始化一个操作对象，以及一个自定义的main函数去执行任务，你也可以根据需要执行其他的函数，如下所示 自定义函数供你的main函数去调用 属性方法去访问数据 实现NSCoding协议去固化一个操作对象 下面的模板，展示了一个自定义的操作对象，下面的代码并不展示如何去实现取消方法，但是也实现了你通常要实现的方法，具体怎么取消任务，参见取消任务介绍，下面的初始化函数初始化了一个对象，携带一个数据参数并把它存到了类内部方便以后访问，main函数将会显式的去操作这个对象，在你的应用将结果返回给你之前。 \n```objc\n@interface MyNonConcurrentOperation : NSOperation\n@property id (strong) myData; \n-(id)initWithData:(id)data;\n@end \n@implementation MyNonConcurrentOperation \n- (id)initWithData:(id)data { \n\tif(self = [super init]) \n\tmyData = data;\n\treturn self; \n}\n\n-(void)main { \n\t@try {\n\t // Do some work on myData and report the results. \n\t} \n\t@catch(...)\n\t {\n\t  // Do not rethrow exceptions.\n\t  } \n\t} \n@end 更多的细节参见NSOperationSample\n```\n\n### [3.5.2 响应取消事件](#4)\n当一个操作开始执行的时候，它将持续执行任务直到结束或者任务被显式的取消掉，取消操作可能发生在任何时候，甚至是操作开始执行的时候，尽管NSOperation对象提供了一个方式供子类去使用，指出取消事件是完全必要的。如果一个操作完全结束了，那么也可以提供一个方式去清理之前分配的资源等等，所以，一个操作对象需要去检测是否已经取消了，然后就可以优雅的结束任务。 操作对象支持取消操作，你应该做的事情就是频繁的去检查是否任务已经被取消了，支持取消是非常重要的，对于你自定义的任务和系统给的那俩个子类操作对象来说，isCancel方法是非常轻量级的，可以频繁去访问而不会造成内存方面的空扰，当设计一个操作对象的时候，你可以在如下几个地方去访问iscancel 1、在你开始执行任务之前 2、在开启一个loop之前，或者是更加频繁的在每个循环之前 3、在你的每个可能导致任务退出的地方 下面的代码介绍了在main函数中如何去调用cancel，在这个例子中，iscancel在每次while loop前都会调用，使得任务可以快速的退出，且获取了一个定期的间隔。 \n```objc\n- (void)main { \n@try { BOOL isDone = NO; \nwhile (![self isCancelled] && !isDone) \n{ // Do some work and set isDone to YES when finished } } \n@catch(...) { // Do not rethrow exceptions. } } \n```\n尽管上面的代码，并不包含清理数据的工作，但是你自己的代码还是要保证资源被及时的释放。\n\n### [3.5.3 定义一个可并发执行的操作](#4)\n一个操作对象默认情况是按照同步的方式去执行任务，也就是说他们执行任务的线程也就是start调用的线程。因为操作队列会对操作任务提供开启的线程，因此，大多数的任务就会异步运行，然而，如果你计划手动去执行一个任务，而且还希望这个任务异步的去运行，你必须得采取一些手段来保证能够这么干，你需要把你的操作对象定义为一个可并发执行的操作对象。下面列出来的函数就是你需要重写的并发操作。 start：（必须重写）所有的自定义并发操作必须重写这个函数，从而替换之前这个函数的默认实现。要手动的执行一个操作，你就可以调用start函数，因此从，你对该方法的实现就是自定义操作对象的开启任务的节点，也就是你要提交你的任务到线程中去执行的节点，你的实现在任何时候都不应该去调用super start。 main：（可选的）这个函数通常用来实现与操作对象相关的任务。虽然你可以把执行任务的任务放到start中去执行，利用mian方法去执行任务会对你的任务开始和清理工作有好处。 isExecuting：（必须的） isFinish：（必须） 并发操作非常有必要向使用它的客户报告配置环境和执行状态，因此一个并发操作必须得包含执行的状态信息包括何时开始执行任务，何时结束任务，如果要报告状态，那么必须使用这些方法。 当别的线程在同时调用上述方法的时候，你必须得保证这些方法是安全的。同时，你也必须得实现KVO通知，以报告这些状态。 isConcurrent：（必须）区分一个操作是否是并发操作，重写该方法，并返回YES 本小节的剩余部分将展示一个MyOperationClass的例子，这个类列举了实现一个并发操作的基本函数，MyOperation 类将在它自己开启的线程中执行任务，而正在的执行任务将与操作类是不相干的，下面例子将的几点，就是你在定义一个并发操作时需要提供的一些基础函数。 下面的代码显示了部分MyOperation的接口和实现函数，这些实现包括isConcurrent、isExecuting，isFinish，等函数。其中isConcurrent函数非常简单，只需要返回YES去指明本操作是一个并发操作就可以了，isExecuting 和 isFinished 也比较简单，返回在类中存储的成员变量的值就可以了。 \n\n```objc\n@interface MyOperation : NSOperation \n{ \n\tBOOL executing;\n\tBOOL finished; \n}\n- (void)completeOperation;\n@end \n@implementation MyOperation \n- (id)init {\n self = [super init]; \n if (self) {\n  executing = NO; \n  finished = NO;\n   } \n return self; \n}\n- (BOOL)isConcurrent { return YES; } \n- (BOOL)isExecuting { return executing; } \n- (BOOL)isFinished { return finished; } \n@end\n```\n下面的方法展示了MyOperation的 start函数，下面的实现是一个start函数，执行任务至少要实现的内容。在这种情况下，start函数简单的开启一个新的线程，然后让这个线程去调用main函数。这个函数同样要更新executing成员变量，而且要对isExecuting关键路径产生KVO通知，当这些工作完成之后，就会离开函数，并去到新的线程中去执行任务。 \n```objc\n- (void)start { // Always check for cancellation before launching the task. \nif ([self isCancelled]) { // Must move the operation to the finished state if it is canceled. [self willChangeValueForKey:@\"isFinished\"]; \nfinished = YES; \n[self didChangeValueForKey:@\"isFinished\"]; return; }\n// If the operation is not canceled, begin executing the task. \n[self willChangeValueForKey:@\"isExecuting\"]; \n[NSThread detachNewThreadSelector:@selector(main) toTarget:self withObject:nil]; executing = YES; [self didChangeValueForKey:@\"isExecuting\"]; \n} \n```\n下面展示了MyOperation剩下的实现，在上面的代码已经知道 main函数将作为新的线程开启任务的节点，它将执行操作对象带来的任务，并且要执行completeOperation函数来说明任务已经结束，completeoperation函数将对isExecuting和isFinished关键路径发送KVO通知，来反应操作对象的状态已经改变。\n\n```objc\n- (void)main { \n\t@try { \n\t\t// Do the main work of the operation here. \n\t\t[self completeOperation]; \n\t} \n\t@catch(...) { \n\t// Do not rethrow exceptions.\n\t }\n} \n- (void)completeOperation { \n\t[self willChangeValueForKey:@\"isFinished\"]; \n\t[self willChangeValueForKey:@\"isExecuting\"]; \n\texecuting = NO; \n\tfinished = YES; \n\t[self didChangeValueForKey:@\"isExecuting\"]; \n\t[self didChangeValueForKey:@\"isFinished\"]; \n}\n```\n尽管是操作对象被取消掉了，你也应该发送KVO通知，来通知你的任务已经完成，当一个操作对象的执行时依赖其他操作对象的时候，它将检测isFinished状态，只有当它依赖的所有isfinished状态都变为YES的时候，如果无法发送isFinshed通知将会阻止其他依赖他的操作对象的执行。\n\n### [3.5.4 维护KVO的兼容](#4)\nNSOperation类是服从下列关键字的KVO isCanceled isConcurrent isExecuting isFinished isReady dependencies queuePriority completeBlock 如果你重写了start函数，和自定义了一些其他比较重要的函数，而不是单单重写main函数，你必须保证自定义的对象能够响应KVO，当重写start函数，其中你最需要关注的就是isExecuting和isFInished，这里有大量的方法会受到这俩个函数的影响。 如果你想实现支持依赖关系，以对其他一些操作对象的时候，你也可以重写isReady函数，并强制返回NO，直到你自定义的依赖关系满足。（如果你仍然想支持系统提供的依赖关系的时候，请保证调用super的函数）当你操作对象的isReady状态发生变化的时候，请发送KVO通知去报告这个状态，不过幸运的是，除非你去重写addDependency和removeDependency:，你并不需要担心KVO通知的发送。 虽然你可以发送其他关键字的KVO通知，但是通常你并不需要这么做，如果你想取消一个任务，你可以简单的调用cancel函数就好了。同样的，你也不需要去修改队列的优先级在操作对象上，最后，除非你的操作对象支持动态的修改isConcurrent，你也不需要发送KVO通知给isConcurrent关键路径。 如果要知道更多关于KVO的操作，请参见KVO编程指导。\n\n## [3.6 自定义一个操作对象的执行行为](#3)\n在添加一个操作对象到操作队列里面之前，需要将一个操作对象设置好，这些对操作对象设置的信息将会对所有的操作对象有效，不仅是自定义的操作对象，还包括系统定义的那俩个操作对象。\n\n### [3.6.1 设置依赖关系](#4)\n依赖是一种限制操作对象执行顺序的一种手段，一个操作对象的执行，必须得在它依赖的所有对象执行完成之后才能进行。也就是说，你可以创建简单的一对一的或者是负责的依赖关系树。 在俩个操作对象之间创建依赖关系，你可以使用addDependency：方法，这个方法可以在你传的目标对象和自己之间创建一个依赖关系。也就是说在目标对象没有执行完成之前，你的这个对象是不会执行的。依赖还不仅仅限制在一个操作队列中，因为是操作对象管理依赖关系，所以在不同的操作队列之中，依赖也是可以起到作用的。但是有一种情况是不允许的，那就是设置依赖环，这是一种语法错误，会导致任务永远得不到执行。 当操作对象所依赖的所有操作对象都执行完成之后，操作对象就变成ready状态，准备执行。（如果是你自己定义的操作对象 ，并自定义了isReady函数，那么准备状态就和你设置的条件有关系了）如果一个操作对象是在操作队列中，那么isReady状态的操作对象在任何时候都可能被执行，如果你计划手动去执行一个操作对象的话，那么可以调用他的start方法。 重要:你应当在将操作对象提交到操作队列之前就去设置依赖关系，如果在之后去设置依赖，也许将不会阻止该任务的执行。 依赖基于的是操作对象间在任何时候都可能发生变化的KVO通知，如果你自定义了操作对象的话，你需要自己去发送KVO通知，以防出现依赖方面的问题。关于更多KVO的信息，参考维护KVO兼容，关于更多设置依赖的信息，参考NSOperation 类\n\n### [3.6.2 改变操作对象的执行优先级](#4)\n对于添加到队列中的操作对象，是否能够执行，首先是受操作对象的isReady状态控制，其次是他们的优先级，是否准备好执行，是由操作对象的依赖对象是否执行完来限制的，但是这个优先级是操作对象的一个属性值，默认情况下，所有新创建的操作对象都是普通优先级，但是你可以增加或者是减少操作对象的优先级，通过setQueuePriority方法 优先级只对同一个队列中的操作对象起作用，如果你的应用有多个操作队列，不同队列中的操作对象的优先级是相互独立的，也就是说，在不同队列里面，存在低优先级的操作比高优先级的操作先执行。 优先级并不是依赖的替代，优先级决定的是那些在队列中已经是准备状态的操作对象的执行顺序，举个例子，如果一个队列中同时有高优先级和低优先级的操作对象准备好了，那么操作队列先执行高优先级的操作对象，然而，如果高优先级的没有准备好，但是低优先级的准备好了，那么将先执行低优先级的，如果你想阻止一个操作任务在另外一个操作对象执行完之后再执行，你需要使用依赖关系去 做\n\n### [3.6.3 改变依附线程的优先级](#4)\n在OSX 10.6及以后，设置一个操作对象所在的线程的优先级成为可能，系统的线程策略是依靠内核去管理，但是高优先级的线程将获得更高的执行机会，对一个操作对象，你可以显式的指定它的线程优先级，通过设置一个浮点型的数值，0-1.0之前。0是优先级最低、1是优先级最高。如果不显式设置的话，系统默认的线程优先级是0.5. 要设置线程优先级的话，你需要在讲操作对象添加到操作队列之前，调用setThreadPriority函数。当它的执行时间到来的时候，默认的start函数就会设置你之前指定的线程优先级来修改优先级。这个优先级只在你执行的main函数执行过程用有效。所有的其他代码包括你的完成回调，仍然是运行在默认的优先级下的。如果你自定义了一个并发的操作，那么你需要重写start函数，并手动去修改线程的优先级。\n\n### [3.6.4 设置一个完成后的回调block](#4)\n在OSX 10.6及以后，一个操作对象可以在它的所有任务执行完成之后去执行一个完成的block，你可以用这个完成的block执行任何与main函数执行的任务里面不相关的的block。举个例子，你可能需要告诉客户这个操作对象的任务都执行完成了，一个并发的操作对象可能会使用这个block去执行它最后的KVO通知 要设置一个完成block，你可以使用setCompleteBlock：函数，这个函数不需要传任何参数，也没有返回值。\n\n## [3.7 关于实现一个操作对象的一些Tips](#3)\n尽管一个操作对象可能非常容易去实现，但是有一些事情在你自定义的操作对象上还是要注意一下，下面的小段描述了这么几个方面。\n\n### [3.7.1 管理操作对象的内存](#4)\n下面的小段，描述了几个在操作对象中管理内存的关键元素，关于更多的OC的内存管理，参见内存管理开发指导。\n#### [3.7.1.1 避免依靠线程存储数据](#5)\n尽管大多是的操作都是在一个线程中执行的，在同步操作对象中，这个线程通常是由操作队列分配给它的，如果一个操作队列将线程分配给操作对象，那么你需要知道这个线程它是属于操作队列的，你不应该和你的操作对象有任何瓜葛，尤其是，你不应该有任何数据相关的在这个线程中，而这些数据并不是你创建和管理的数据，因为线程的生存和死亡是有操作队列或者系统来控制的，因此在线程间数据传递通过线程来传递将是不可靠，也是容易失败的。 在操作队列上，没有任何的理由可以使用线程存储数据，当你初始化一个操作对象，你应该提供给它所有执行任务需要的数据去做这件事，因此，操作对象要提供所有数据，所有来的、去的数据都应该存在操作对象上，知道任务结束或者应用不在需要它。\n\n#### [3.7.1.2 如果需要的话保持操作对象的引用](#5)\n因为操作对象是异步运行的，你不应该认为你可以创建或者忘记他们，它们也只是对象而已，也需要你去管理他们，尤其是你需要在它完成之后获取数据的情况下。 你需要保持对操作对象的引用，主要还有可能你再没有机会获取这个操作对象的引用的机会了，操作对象是执行很快的，在很多情况下，操作任务一旦添加到操作队列中，就会被执行，当你的代码获取到从操作队列中拿到的操作对象的时候，很可能，这个操作对象已经结束了，并从操作队列移除了，释放了。\n\n### [3.7.2 处理错误和异常](#4)\n由于操作对象在你的应用里面是完全独立的实例，因此有必要去处理那些异常和错误，在OSX 10.6及以后，默认的start的函数不在提供捕获异常。你自己的代码需要去直接的捕获和处理异常，如果需要也要检测错误代码并通知给应用程序，如果你替换了start函数，那么你的代码需要在程序离开底层线程之前就去处理这些异常。 你可能处理的错误可能有一下几种情况 检测UNIX errno 类型的错误 检测显式的由代码返回的错误 捕获来自你自己的代码和系统框架带来的异常 当一个操作对象没有准备好，start方法就开始执行的时候 当一个操作已经在执行或者执行完成了，或取消了，start函数被再次调用的。 当添加一个block任务，但是它已经被执行或者完成的。 当你准备从NSInvocationOperation对象获取数据，但是它已经被取消的情况。 如果你自定义的代码遇到异常或者错误，你需要提供操作步骤给你的应用去处理，Operation对象不会显式的把错误代码或者异常传递给你应用的其他地方，因此，如果对于应用程序是比较重要的信息，你需要提供相关必要的代码去处理这些错误。\n\n## [3.8 决定操作对象合适的数量，不要太多，也不要太少](#3)\n虽然可以给一个操作队列中，添加大量的操作对象，但是这么做，往往并不太好，像其他对象一样，创建NSOperation对象也是需要消耗内存，并且他们的执行也是需要开销的。如果你的每个任务都是很小的，而你又创建了成千上万个，你会发现你会消耗更多的时间在分发操作对象上，而不是在执行真正的任务，而如果你的设备已经内存不足时，你会发现成千上万的任务会严重影响程序的性能。 高效的应用操作对象的关键在于，在充分利用设备和执行一定数量的操作任务之间找到平衡点，尝试去找到你的设备执行任务的一个真正的数量值。举个例子，如果你的应用创建了100个操作对象去处理100个不同的值，那么你可以考虑使用10个操作对象，去处理10个值去代替。 同时，你也需要避免一次性的给操作队列中添加大量的任务，也要避免不停的给操作队列以比它处理速度更快的添加更多的任务，相比于一次泛哄式的添加任务，不如批量式的去添加，然后利用完成block回调去执行下一批次的任务。这样可以避免内存过多的消耗。 当然，创建操作对象的数量、以及没个操作对象需要执行的任务量，是由你的程序动态去管理的。你应该是用性能测试工具，例如Instruments去找到性能处理和速度的平衡点，关于Instruments 和其他性能工具的更多信息，参见性能。\n\n## [3.9 操作对象的执行](#3)\n最后，你的应用需要执行这些操作对象以真正的处理任务，在这一小节，你将学到就像你熟练的执行你的操作一样，去执行这些操作。\n\n### [3.9.1 添加操作对象到操作队列中](#4)\n到目前为止，最容易的执行操作的方式是使用操作队列，即NSOperationQueue类的实例，你的应用有责任去创建和维护这些操作队列。一个应用程序可以有任意数量的操作队列，但是实际上在同一时间有多少个操作会被执行还是有限制的，被系统调用的操作队列会根据可利用的CPU和系统的载入量来进行限制单位时间执行的操作对象，因此，创建更多的操作队列并不意味着可以执行更多的操作对象 就想创建其他的对象一样，在你的应用中创建操作队列\n```objc\nNSOperationQueue* aQueue = [[NSOperationQueue alloc] init];\n```\n添加一个操作对象到操作队列中，你可以使用addOperation方法，在OSX 10.6以后，你还可以添加操作对象组，通过\n```objc\naddOperations：waitUntilFinished：\n```\n方法，你也可以直接添加blocl对像到操作队列中（而不需要与一个操作对象关联），通过\n```objc\naddOperationWithBlock：\n```\n方法，上面的这些方法，队列都会入一个操作对象并通知队列去执行他们，在大多数情况下，操作对象将会被很快执行，但是有时候，操作队列也可能延迟执行操作对象，大概有这么几个原因，最普遍的就是，操作对象间可能有依赖关系，还有可能是操作队列自己可能被挂起，或者是操作队列执行操作任务的数量达到了上限。下面的代码展示了最基础的添加操作到操作队列的语法 \n```objc\n[aQueue addOperation:anOp]; // Add a single operation \n[aQueue addOperations:anArrayOfOps waitUntilFinished:NO]; // Add multiple operations \n[aQueue addOperationWithBlock:^{ /* Do something. */\n }];\n```\n 重要 千万不要在一个操作对象进入操作队列之后再去修改它，因为当操作在操作队列中等待执行的时候，它可能在任何时候去执行任务，改变它的依赖和数据，可能会起到坏的作用。如果你想知道一个操作对象的状态，请使用操作对象的属性 去获取。\n\n### [3.9.2 手动执行操作对象](#4)\n尽管操作队列对于运行操作对象已经很方便了，但是还是有一种可能不使用操作队列去执行一个操作对象，如果你选择手动去执行操作对象，那么有一些注意事项，最主要的是，操作对象必须得是ready，而且你需要用start函数去启动它。 一个操作对象如果不是ready状态的话不应该去执行，isReady函数被Operation对象的依赖关系封装到了上层，只有当它的依赖关系都清除的时候，一个操作才能够被执行、 当执行一个操作对象，应该去使用start函数去做。用这个函数而不是用main，是因为start函数会在执行之前执行一个安全检查，尤其是，默认的start函数还会产生KVO通知，以保证依赖关系能够正确进行，这个函数同时也避免当你的操作对象被取消的时候，再去执行，以及当操作对象没有准备好的时候就去调用导致的异常抛出 。 如果你的程序定义了并发的操作对象，你同时需要在启动任务之前考虑isConcurrent。当这个方法返回NO的时候，你就可以考虑是在当前线程中同步的执行还是创建一个新的子线程。然而，这些方法的检测完全取决于你。 下面展示了一个比较简单的，手动开启并发操作对象的一个例子。如果这个函数返回NO，你可以启动一个timer，在之后再去调用它。然后直到它返回YES之后，取消掉Timer。因为这种情况可能在操作对象被取消的时候发生。 \n```objc\n- (BOOL)performOperation:(NSOperation*)anOp { \n\tBOOL ranIt = NO; \n\tif ([anOp isReady] && ![anOp isCancelled]) { \n\t\tif (![anOp isConcurrent]) \n\t\t[anOp start]; \n\t\telse [NSThread detachNewThreadSelector:@selector(start) toTarget:anOp withObject:nil]; \n\t\tranIt = YES; \n\t}else if ([anOp isCancelled]){ \n\t\t// If it was canceled before it was started, // move the operation to the finished state. \n\t \t[self willChangeValueForKey:@\"isFinished\"]; \n\t \t[self willChangeValueForKey:@\"isExecuting\"];\n\t  \texecuting = NO; \n\t  \tfinished = YES; \n\t  \t[self didChangeValueForKey:@\"isExecuting\"]; \n\t  \t[self didChangeValueForKey:@\"isFinished\"]; \n\t  \t// Set ranIt to YES to prevent the operation from \n\t  \t// being passed to this method again in the future. \n\t  \tranIt = YES; \n\t} return ranIt; \n}\n```\n\n### [3.9.3 取消操作对象](#4)\n当将操作对象添加到操作队列里面的时候，一个操作对象的管理就交给了操作队列，也不能被移除了，唯一使操作对象出列的方法就是调用它的cancel函数，你也可以取消所有的操作对象，通过调用操作队列的cancelAllOperations 你可以在确保你不在需要操作对象的时候取消掉它。发出一个cancel命令，会将操作对象的关键路径变为canceled状态，这将阻止任务继续执行，由于canceled的操作对象也认为是完成的，那么依赖它的操作对象就可以移除依赖关系。然而，更多情况下，更常用的是取消所有操作独享，在某些重要的时候，比如应用退出、或者用户发出了取消指令，这比一个个取消要好很多。\n\n### [3.9.4 等待操作对象的完成](#4)\n为了获取最佳的性能，你应该尽可能的让操作对象并发执行，让系统去干更多的事情，在你执行操作对象任务的时候，如果创建一个操作对象的时候，同时希望获得了操作对象的结果，你可以使用waitUntilFinished：方法来阻塞代码继续执行，直到这个操作对象执行完成。通常来讲，这是最好的方式去避免你能帮到它的时候，阻塞当前线程也许是一个比较好的解决方法。但这也带来了更多的同步性，而限制了整体的可并发性。 你绝不允许在主线程中调用这个方法，你最好在子线程或者其他的线程操作中这么做，阻塞主线程将会降低程序的可响应性。 除了等待一个任务完成，你可以等待一个操作队列所有的任务执行完成，通过调用waitUntilAllOperationsAreFinished，当你等待一个操作队列任务完成的时候，避免在别的线程中添加任务给它，以防延长等待时间。\n\n### [3.9.5 挂起和恢复操作队列](#4)\n如果你想中途终止一个操作队列的话，你可以挂起相应的操作队列，使用setSuspended方法，挂起一个操作队列并不会导致正在执行的操作任务终止。它只是会阻止别的操作对象（操作队列中的）不去执行，你可能会在用户想暂停任务的时候挂起所有操作，因为用户还期望在某个时候恢复这些任务。","source":"_posts/[译] ios并发编程指南.md","raw":"---\ntitle: 译 ios并发编程指南\ndate: 2016-08-27 21:28:47\ntags: 翻译\n---\n\n[并发编程指南](#1)\n\n<!--more-->\n\n![](http://ock9zbzms.bkt.clouddn.com/translationconcurrency.png)\n\n# [并发](#1)\n## [1 概述](#2)\n### [1.1 并发的概念](#3)\n并发其实指的是多项任务在同一时间进行，随着多核CPU的普及以及发现任务只在某一核上不停的增加，软件开发者需要一种方式充分的利用多核系统。虽然诸如IOS、MacOS兼容多项程序同时执行，但是大多数的程序运行在后台，并且执行任务只需要很短的CPU时间。这是因为前台应用同时获取了用户的关注并且是设备处于忙的状态。如果一个程序有很多的任务需要处理，但是又只获得了很少的碎片CPU时间，那些额外的处理资源将被浪费。 在过去，在应用中引入并发要求创建一个或者多个额外的线程，遗憾的是，编写线程代码是一项非常有挑战性的事情，线程是一种‘低级’的工具，并且需要手动去管理，获取多少个线程是最优的，动态取决于当前的系统以及底层硬件的支持。实现一个完美的线程解决方案，变的极其困难或者说不可能实现。另外，采取添加线程的方式实现同步的机制，不仅给软件开发带来了复杂性和风险性，而且也并不能确保提升性能。 OSX和iOS采取了一种比传统的基于线程的系统和程序，更加异步的方式去执行并发任务。并不是直接去创建线程，应用需要做的是定义一些特殊的任务，然后让系统去执行它们，让操作系统去管理线程，程序获得了原生线程更强的伸缩性，而程序开发者也获得了更加简单更加高效的编程模型。 本文档就是描述这项技术和技艺，你应该使用这项技术来实现并发。这项技术同时使用于iOS和OSX。\n\n## [1.2 文档的组织](#3)\n本文档包括以下章节 \n1、并发和程序设计——介绍异步程序设计的一些基本概念和异步的执行自定义任务的技术 \n2、操作队列——展示怎样用OC去组装和执行一个任务 \n3、分发队列——展示怎样在基于C的应用程序中去并发地执行任务\n4、资源分发——展示如何异步的处理系统事件 \n5、从线程变成用迁移到新的技术——提供一些技术帮助从旧的线程变成迁移到新的变成技术 本文当同时也包括一些相关章节的专业术语的定义\n\n## [1.3 一些专业名词](#3)\n在开始讨论并发之前，非常有必要去定义一些相关的专业名词来避免混淆，一些开发UNIX或者早先开发OSX的程序员，可能会对任务，队列处理、线程有一些新的任务，本文档对这几个概念有如下定义 \n1、在本文中，线程专指一个分离的支线去执行一段代码，而在老的OSX中特指基于POSIX的API 2、在本文中，执行专指可执行的任务正在执行中，可能包裹着多个线程。\n3、在本文中，任务专指一个需要被执行的抽象工作 关于完整的类似这些概念的定义，参见词汇定义\n\n## [1.4 其他](#3)\n本文档专注于如何在你的程序中实现并发编程，而不包括如何使用线程，如果你需要更多的有关线程开发的只是，请去参考线程编程指导\n\n# [2 并发及程序设计](#2)\n## [2.1 并发编程和程序设计](#3)\n在以前的计算机运行的时候，计算机单位时间最大执行数量的任务取决于CPU的时钟速度，但是随着技术的发展和中央处理器设计的更加紧凑，热量和物理因素开始限制中央处理器的最大时钟速度，所以，主板供应商也在寻找其他的方式去提升他们主板的总体性能，他们发现的解决方案是增加主板上的处理器个数，通过增加处理器个数，一个主板可以在单位时间内执行更多的任务，而并不需要去增加CPU的时钟速度，或是改变主板的大小或考虑热量参数，现在剩下的唯一问题就是如何去充分的利用这些多核。 为了利用这些多核，计算机需要程序设计者能够去同时执行多项任务，在当代，多核操作系统，如OSX或者IOS，可能有几百或者更多的程序在同时运行，所以根据时序安排程序在不同的中央处理器上变得成为可能，然而，大多数的时候，这些程序要么是系统守护进程，要么是那些消费很小处理时间的后台应用程序，取而代之的是，真正需要多核开发的是，独立的前台运行的程序更高效的获取更多核心。 传统的使应用获取多核的方式是创建多线程，然而，随着多核的增加，线程方案有一些问题，最大的问题是线程开发的方式对多核系统不具备很好的伸缩性，你不能仅靠创建更多的行程就能确保程序和处理器运行良好，你需要知道的是，如何高效的利用这些中央处理器。对于程序来讲，如何计算它自身是一件有挑战的事情，尽管你可以正确的管理这些线程，程序去管理这些线程也依然是一项挑战，去确保他们高效运行、确保他们不被别的线程干扰。 所以，总结这些问题，程序需要一种方式去充分应用多核，单个程序可伸缩的执行大量工作，而且这个解决方案需要足够简单，去面对单个处理器任务的任务增长，好消息是，苹果已经提供了解决方案对处理所有这些问题，本章节先睹为快，去看看这项技术的组成以及牛逼的设计，你可以使你的代码从中获益。\n\n## [2.2 从线程开发中走出来](#3)\n尽管线程开发已经应用了多年，而且它们在某些地方还将有用武之地，但是它们并没有可伸缩的解决多核场景，如果你使用线程开发，那么创建一个可伸缩的解决方案的麻烦就落在你肩上了，开发者，你需要去动态的根据系统的多核个数去决定创建多少个线程，此外，你的应用将花费很多消耗在创建和管理这些线程本身的消耗上。 取代线程开发，OSX和IOS使用异步设计的方式解决并发问题，异步方法已经在操作系统中提供了很多年，而且一般都是应用在创建很耗时的任务上，如从磁盘读取文件。当调用的时候，一个异步任务开始在后台执行，并立即返回在任务执行完之前。通常，这项任务会调用一个后台线程，开始这项任务在该后台线程上，然后在任务完成的时候发送一个消息给调用者（通常使用回调的方式）。在过去，如果没有一个你需要的异步方法，你需要自己去写一个异步方法还需要创建自己的线程，但是现在，OSX和iOS提供技术，你可以不用自己去管理线程就可以异步执行任务。 一种开启异步任务的技术叫 GCD，一项将过去需要在你程序中自己写管理线程代码移交给系统去管理。所有你需要做的事情仅仅是创建任务，然后将任务提交给合适的系统的GCD队列。GCD去创建和管理这些线程，因为这些线程已经提交给系统去管理，GCD提供全套的任务管理和执行，比传统的线程管理更加高效。 操作队列是非常类似于分发队列的一种OC对象管理方式，你可以定义你想执行的任务，然后把他们扔到操作队列中，当执行这些安排好的任务时，类似于GCD，操作队列为你执行所有的管理。确保在系统长执行的高效且迅速。 下面的段落提供了更多的信息关于操作队列、分发队列、以及一些你可能在异步编程中用到的技术\n\n### [2.2.1 分发队列](#4)\n分发队列是一套C的机制，为可执行自定义任务。分发队列要么是串行的要么是并行的，但是通常都是按照FIFO的方式去调度任务，一个串行的队列，一次只能运行一个任务，只有等前一个任务完成之后，下个任务才能开启。作为对比，并行的队列可以同时开启尽可能多的任务而并不需要前面的任务执行完毕。 分发队列有下面几个好处 \n\n\t1、提供了简单的直观的编程接口 \n\t2、提供了自动的和完全的线程池管理 \n\t3、任务执行速度提升 \n\t4、更多的内存方面的优化 \n\t5、他们不会增加内核的负载 \n\t6、不会导致队列死锁 \n\t7、伸缩性强（对多核系统来讲） \n\t8、串行队列提供了比过去线程同步更为优秀的一种选择 \n\n你提供给分发队列的任务必须是封装好的一个方法或者是一个Block对象，Block是一种具有C语言特性的，开始引进与OSX 10.6,IOS 4.0的一个新特性。但是相比C语言有一些别的好处。不同于在Block的语法区域定义Block对象，你通常在别的方法或者是函数中去定义，这样可以去捕获到别的方法或者函数中的变量，Block同样可以移动到他们的作用区域以外，拷贝到堆上，这通常发生在你将任务添加到一个分发队列上的时候，所有这些语法特性，使得通过添加少量代码就可以获得非常好的实现。 分发队列是GCD技术的一部分，也是C运行时的一部分，要想获取更多的有关分发队列相关的信息，请参见 分发队列，要获取更多关于Block的信息和他们的好处，参见Block 程序编程观点。\n\n### [2.2.2 分发资源](#4)\n分发资源是异步的处理系统分发资源的一种C语言机制，分发资源封装了一个特殊类型的系统事件，并将这个特殊的系统事件提交给一个特殊的Block对象，或者函数，当系统事件发生的时候，你可以使用分发资源去监测如下特殊系统事件 定时器 信号事件 描述符相关事件 进程相关事件 端口匹配相关事件 自定义的事件，并由你来触发 分发资源也是GCD技术的一部分，要获取更多有关分发资源相关的信息，参见分发资源\n\n### [2.2.3 操作队列](#4)\n操作队列是cocoa环境的一种并发队列，由NSOperationQueueClass 实现，操作队列总是按照FIFO的方式去执行任务，操作队列考虑其他因素去影响执行队列的顺序，在这些因素中，优先考虑一个任务的执行是否是依赖于其他任务，你可以给自己的任务设置依赖关系，然后创建一个复杂的执行顺序图。 任务添加到操作队列中的，必须是NSOperation的子类，一个操作对象是一个OC类型的封装了你要执行的数据和任务的对象，由于NSOperation是一个抽象基类，所以你通常需要去自定义子类去执行你的任务，然而，Foundation Framework已经提供了一些相关的子类，你可以使用它们去执行任务。 操作的对象产生KVO通知，这个是非常有用的，当监视你的任务进度的时候，虽然任务执行通常是并发的，但是可以利用依赖是的任务有序。 关于更多操作队列的信息，参见操作队列\n\n## [2.3 异步编程技术](#3)\n在你开始考虑重新用并发编程的方式重新设计程序的时候，你最好先问下自己这么做是否必要，并发可以提高你代码的可响应性，去确保主线程能相应更多的用户事件，它同样可以提高你代码的性能，通过促进多核去执行更多的任务，但是它也同时带来了上层复杂性，从而使你的代码更加难调试。 由于它带来了复杂性，并发并不是一个在你程序开周期中考虑的特性，当把它嫁接到应用中。做对这件事需要你好好考虑你程序执行的任务以及向这些任务提交的数据结构。如果做错的话，你可能发现你的代码运行缓慢，甚至还不如从前，因此，在你开始程序设计的时候，你就应该考虑你要实现的目标和通过何种方式来达到它。 每个应用都包含有不同的要求和不同的任务需要它去执行，这不可能靠一个文档就告诉你，怎么去设计你的程序和管理任务，然而，下面几段可以给你提供一些指导，帮助你去在程序设计的时候做出好的选择。\n\n### [2.3.1 明确程序期望的表现](#4)\n在你决定是否要将并发引导到应用中的时候，你应当开始思考你的应用程序想要达到的一个什么表现。明白了应用要达到的表现之后，会给你是否使用并发提供一个参考。同样的，也会给你一些引入并发之后程序能获取的性能收益方面的启发。 首先、你需要列举应用程序所要执行的任务和数据结构之间的关系。开始，你可能通过点击一个菜单或者一个按钮开启一个任务并执行，这些任务可能是一些离散的任务，并有明确的开始和结束点。你还需要列举出应用程序可能执行的其他类型的任务，而不仅仅是用户行为相关的，比如说基于时间的一些任务 在你有了自己任务列表之后，开始把任务进行更加的分组集合，确保这些任务能够成功执行。在这个层面，你优先考虑的是那些数据或对象修改如何对应用状态进行修改的。你同样需要考虑不同任务之间的相互依赖关系，例如：如果一个任务牵涉到一个数组中所有对象的修改，对于其中一个数据的修改，会对其他数据产生任何影响。如果一个数据的修改，独立于其他的数据，那么这个时候你可以考虑使用并发去做提升性能，创建多个任务去做。\n\n### [2.3.2 单位工作的可执行因子](#4)\n在明白你程序执行的任务类型之后，你应该明白在什么地方去使用并发会有好处了。如果在一个任务中改变一个或者多个的顺序，会影响到执行结果。你应该还是需要考虑到使用串行的方式去执行这些任务，如果改变执行顺序之后，并不会影响到执行结果，你可以考虑将这些任务用并发的方式去做，在这俩种情形下，你定义可执行的单位工作，并让它们执行，这些工作单元，就成为你封装好的Block对象或者操作对象或者分发队列。 对于每个单独的可执行任务，并不需要过多的担心任务执行的数量，在最后，分到线程中总是会有开销，但是分发队列或者操作队列相比传统的线程开发还是有很多优势的，因此，执行一些单元工作使用操作队列还是要比直接操作线程要好很多，当然，你常常应该确保任务执行的性能和你开启的任务恰好如你所需，但是，任务并不是越小就越好。\n\n### [2.3.3 区分你需要什么队列](#4)\n此时，你的任务已经切割为一些可执行的单元，并且封装成了Block对象或者是操作对象，你需要去定义你要执行的队列以执行这些任务。对一个任务来讲，测试这些Block或者是操作任务，能够在队列中执行正确。 如果你使用Block去实现你的任务,你可以添加任务到串行或者并行的队列里，如果对顺序有要求的话，你只能添加到一个串行队列中，如果没有要求，根据你的要求，你可以添加的并行队列中，或者添加到多个队列中去。 如果你是用操作队列去执行任务，那么选择的队列并不对添加到里面的任务的配置感兴趣，如果要串行去执行任务，那么你需要给相关的任务设置依赖关系，依赖会阻止任务开始执行，直到它依赖的任务执行完成。\n\n### [2.3.4 提升执行效率的贴士](#4)\n在把任务分割为更小的任务并将他们添加到队列中后，这里还有一些使用队列提升程序性能的小Tips 如果内存考虑是一个因素的话，那么在任务里面直接计算。如果你的应用已经内存警告了，那么在任务中直接计算会比从内存中加载要快一些。运用在寄存器或者是该核上的内存计算，会比从主内存加载要快一些。当然，你也可以通过测试来选择哪种方案会好一些。 将串行的任务，可能的话改变为并发。如果一个任务由于共享资源必须串行去执行，可以考虑将共享资源移除使得可以并发执行，可以考虑把这些资源给每个客户都拷贝一份。 避免使用锁，操作队列和分发队列的支持在大多数情况下并不需要锁。做为取代，可以使用一个串行的队列或者使用依赖去保证顺序正确。 如果可能的话依赖系统框架，最好的方式去实现并发就是使用系统提供的框架，许多框架使用线程或者其他技术来实现并发，当定义你的任务的时候，看看系统框架中是否已经有方法或者函数能够实现并发，使用系统接口会提升你的效率，而且帮你做到更多的并发可能性。\n\n## [2.4 性能相关](#3)\n操作队列、分发队列、资源分发提供了一种执行并发更加容易的方式。但是这些技术并不保证提升程序的性能和可响应性。具体来讲，根据你的需要同时兼顾性能提升和不要影响到其他资源仍然是你自己需要衡量的一件事。举个例子来讲，尽管你创建了10000个任务并把他们都提交到操作队列中，这么干的话，肯定会导致你的程序分配潜在的大量内存，这个会导致增加调度和减少性能。 引入并发到你的程序中前--是使用队列还是线程，你需要根据程序当前的性能来设置一个参考的标准。在引入并发之后，也同样需要做个列表对性能方面的改变进行比较，来确保程序是真的性能提升了，如果引入并发并不能给性能带来大的提升，你应该考虑其他的性能工具来检测潜在的原因。 关于性能的介绍和可用的性能工具，参见性能概览。\n\n## [2.5 并发和其他技术](#3)\n将你的代码分解为模块任务是一种最好的提升应用并发的方式，但是这种设计方式并不是对每个应用每个情况都很适合，取决于你执行的任务，也可能存在其他的选择来提升程序的整体并发，下面的俩小节提供了其他的并发技术供你参考\n\n### [2.5.1 OpenGL和并发](#4)\n在OSX中，OpenGC技术是图形计算方便最基础和核心的技术，OpenGL是非常棒的计算大数据集合的一种技术，举个例子来讲，你可能使用OpenGL技术来给图片做像素级别的滤镜，或者用它来计算复杂的数学计算。换而言之，OpenGL可以用来计算大量数据集合是并行的。 尽管OpenGL在大量数据并行执行方面有着非常好的性能优势，但是它并不合适执行自定义的计算，在任务提交给GPU处理之前，有大量的准备工做，而且要将数据和其他必要的核心操作转换图形卡片。同样的，要想获取OpenGL的产生结果也需要偶很多其他的努力。因此，所有跟系统交互相关的任务不建议提交给OpenGL去执行，举个例子，你不应该用OpenGL去运算从文件中或者网络流中拿到的数据，取而代之的是，你要用OpenGL执行的任务，必然是自己已经持有的这样相对来讲传递给GPU运算更加独立。 更多关于OpenGL的只是，参见OpenGL开发指导。\n\n### [2.5.2 何时使用线程](#4)\n尽管操作队列和分发队列是执行并发任务的更优选择，但是它们不是万能的，取决于你的应用程序，这里仍然后一些情况是需要创建线程去开发的，如果你创建了自定义的线程，那么你要确保尽量少的开启线程，并且确保这些线程只执行特定的任务，而不去干别的事情。 线程仍然是一种较好的解决方案，当执行实时任务的时候，分发队列会确保尽快的去执行他们的任务，但是并不能实时的去开线程去做。如果你需要可预测的后台代码执行，那么线程仍是一种选择。 作为线程编程，你还是需要去使用线程，当必须和完全必要的时候，关于更多线程方面的知识，参见线程开发指导。\n\n# [3 操作队列](#2)\ncocoa的操作都是原生的对象封装的可执行异步任务。这些操作同时可提交给操作队列去执行，也可以直接自己执行。由于是基于OC的框架，那么操作可应用在IOS和OSX中。本章节将介绍如何去使用和定义操作。\n\n## [3.1 关于操作对象](#3)\n一个操作对象是一个NSOperation类的实例，你可以用它来封装你要执行的任务。NSOperation类本身是一个抽象基类。所以要想执行可用的任务，必须得使用它的子类。尽管是一个抽象类，它还是提供了一些有用的基本操作，而省去了你在自己定义的子类中去做的麻烦。此外，Foundation 框架还提供了俩个具体的子类，可以用它们来执行你的任务，下表列出了这俩个类，还有如何使用它们的介绍。 NSInvocationOperation ：这是一个基于你的类和要执行的Seletor的类，你可以在已经定义过这个任务的地方去调用它，然后执行异步操作。由于它并不要强制你去做继承，所以可以使用该类去实现一个更加动态的风格。 NSBlockOperation：这是一个执行block封装任务的操作类，因为它可以执行多个block。block任务执行任务使用了组的语法，当所有的相关的block执行完之后，这个block操作才被任务是执行完成 NSOperation：这是定义其他操作任务的基类，继承它给你自定义操作类带来了完成的并发控制以及实现。包含可以完全控制任务的执行能力和执行状态。 所有上述的操作对象都包含以下核心的特性 支持建立图形化的任务间相互依赖，这些依赖将会阻止任务开始，直到它依赖的任务完成之后。 支持可选的完成回调block。指的是当所有的执行任务结束之后的回调方法。 支持检测任务执行状态（使用KVO） 支持对操作顺序进行调整，并影响他们的执行顺序。 支持取消语义，也即允许你半路对任务执行终止操作。 操作对象是设计来帮助你提升程序的并发水平，操作也是一种不错的组织和包装你的应用为几个独立的分支的一种手段，作为取代提交一些任务给主线程的开发方式，可以将任务分割为一个或多个不同的操作，然后提交给队列，使相关的工作可以在一个或多个线程中去并发的执行。\n\n## [3.2 同时VS非同时操作](#3)\n尽管，你通常将任务添加到操作队列中，但是做这个并不是必须的。你也可以直接调用它的start方法去开始一个操作。但是执行这个操作，并不能保证你的操作同步的运行在你当前代码所在的线程中。那么NSOperation类的这个isConcurrent方法会告知你，当前运行的操作是同步还是异步的在你调用Start方法的线程中，默认情况下这个方法会返回NO，也就是说这个操作是在当前调用的线程中同步去执行的。 如果你想去实现一个异步执行的操作，也就是调度任务的线程和任务执行的线程是异步的。你需要写额外的代码去异步的开启它。举个例子，你可以创建一个独立的线程，调用一个系统的异步方法，去执行其他的事情以保证start函数的调用时异步去执行。 大多数的开发并不需要去实现一个并发操作对象，如果你总是将你的操作去添加到一个操作队列中，你并不需要实现这些并发操作，当你添加一个操作对象到操作队列中的时候，操作队列自己就会创建一个线程去执行你的操作，因此，将一个并不是异步的任务添加到操作队列中去，结果还是会以异步的方式去执行代码，去定义一个异步任务这种费力不讨好的工作，也只是你就是想创建异步执行任务，而不是将它添加到队列中去的时候才有必要。 关于更多有关异步任务的信息，参见设置任务去异步执行。\n\n## [3.3 创建一个NSInocationOperation对象](#3)\nNSInvocationOperation是NSOperation的具体子类，当它运行的时候，会执行它的selector里面，指派给它的任务。使用该类时，应该避免将大量的自定义的操作给每个任务。尤其是当你需要改变一个已经存在的应用程序和这些对象已经存在任务，还有很多必备要执行的任务时。你可以使用它来改变依赖环境的时候。举个例子，你可以使用一个Invocation对象来执行一个选择器，这个选择器是基于获取用户的输入信息动态的选择。 创建一个Invocation操作的步骤是很简单的，你可以创建并实例化一个该对象，然后传递需要的对象和selector去执行指定的代码，下面提供了俩个方法去举例说明这个操作步骤，taskWithData：方法创建一个操作对象，然后通过另外一个方法去执行任务。 \n```objc\n\n@implementation MyCustomClass \n\n- (NSOperation*)taskWithData:(id)data { \n\tNSInvocationOperation* theOp = [[NSInvocationOperation alloc] initWithTarget:self \n\tselector:@selector(myTaskMethod:) \n\tobject:data]; \nreturn theOp;\n } // This is the method that does the actual work of the task. \n\n- (void)myTaskMethod:(id)data { // Perform the task. } \n@end\n```\n\n## [3.4 创建一个NSBlockOperation对象](#3)\nNSBlockOperation是NSOperation的具体子类，作为一个或者多个Block对象的封装器，这个类提供了对象层面的封装，而且它已经使用了操作分发队列，所以并不需要创建分发队列，但是你也可以使用其他的诸如操作任务的依赖、KVO通知或者其他特性，而这些特性是分发队列所没有的。 当你创建一个block操作的时候，在创建他的时候，你至少已经添加了一个block，你也可以在之后再添加更多的block进去。当执行NSBlockOperation对象的时间来临的时候，该对象会将它的所有block都提交给默认优先级的异步分发队列，然后这个对象等待它的block全部执行完，之后会把自己标记为isfinish。因此，你可以使用一个Block操作去监听一组任务的完成，非常像用一个线程去管理多个线程的结果。而不同之处在于block操作自己运行在一个分离的线程，而你的程序可以干其他的活儿，在这个block等待它的任务执行完成之前。 下面的代码介绍了如何去创建一个BlockOperation，这个Block没带参数且没有返回什么有意义的结果 NSBlockOperation* theOp = [NSBlockOperation blockOperationWithBlock: ^{ NSLog(@\"Beginning operation.\\n\"); // Do some work. }]; 当创建一个block操作之后，你可以添加更多的block给它，通过 addExecutionBlock：方法，如果你想让添加的任务线性去执行，那么你必须直接将它提交给指定的串行队列中去。\n\n## [3.5 定义一个自定义的操作](#3)\n如果一个Block操作对象或者Invocation操作对象没法完全满足你的需求的时候，你可以考虑自己定义个继承自NSOperation的操作对象，NSOperation对象提供了一系列的继承点给所有的操作对象，这个类已经实现了大量的基础的函数或方法，满足那些依赖或者KVO的操作，然而，还是有一些地方需要你自己的自定义实现确保你的操作对象能够正确的执行，具体的工作量的大小取决于你要自定义的是一个同步操作对象还是异步操作对象。 定义个同步操作对象要比定义一个异步操作对象简单的多，对于一个同步操作对象来讲，所有你要做的工作就是实现main执行函数和响应取消操作事件。父类已经帮你做了所有其他该做的工作，而对于一个异步操作对象来将，你需要替换一些父类已经做过的工作，在你自己定义的操作对象上。下面的俩小节将介绍如何去实现这俩种不同的操作对象。\n\n### [3.5.1 执行main任务](#4)\n至少一个操作对象需要实现下面的函数 一个自定义的初始化函数 main 你需要自定义个初始化函数去初始化一个操作对象，以及一个自定义的main函数去执行任务，你也可以根据需要执行其他的函数，如下所示 自定义函数供你的main函数去调用 属性方法去访问数据 实现NSCoding协议去固化一个操作对象 下面的模板，展示了一个自定义的操作对象，下面的代码并不展示如何去实现取消方法，但是也实现了你通常要实现的方法，具体怎么取消任务，参见取消任务介绍，下面的初始化函数初始化了一个对象，携带一个数据参数并把它存到了类内部方便以后访问，main函数将会显式的去操作这个对象，在你的应用将结果返回给你之前。 \n```objc\n@interface MyNonConcurrentOperation : NSOperation\n@property id (strong) myData; \n-(id)initWithData:(id)data;\n@end \n@implementation MyNonConcurrentOperation \n- (id)initWithData:(id)data { \n\tif(self = [super init]) \n\tmyData = data;\n\treturn self; \n}\n\n-(void)main { \n\t@try {\n\t // Do some work on myData and report the results. \n\t} \n\t@catch(...)\n\t {\n\t  // Do not rethrow exceptions.\n\t  } \n\t} \n@end 更多的细节参见NSOperationSample\n```\n\n### [3.5.2 响应取消事件](#4)\n当一个操作开始执行的时候，它将持续执行任务直到结束或者任务被显式的取消掉，取消操作可能发生在任何时候，甚至是操作开始执行的时候，尽管NSOperation对象提供了一个方式供子类去使用，指出取消事件是完全必要的。如果一个操作完全结束了，那么也可以提供一个方式去清理之前分配的资源等等，所以，一个操作对象需要去检测是否已经取消了，然后就可以优雅的结束任务。 操作对象支持取消操作，你应该做的事情就是频繁的去检查是否任务已经被取消了，支持取消是非常重要的，对于你自定义的任务和系统给的那俩个子类操作对象来说，isCancel方法是非常轻量级的，可以频繁去访问而不会造成内存方面的空扰，当设计一个操作对象的时候，你可以在如下几个地方去访问iscancel 1、在你开始执行任务之前 2、在开启一个loop之前，或者是更加频繁的在每个循环之前 3、在你的每个可能导致任务退出的地方 下面的代码介绍了在main函数中如何去调用cancel，在这个例子中，iscancel在每次while loop前都会调用，使得任务可以快速的退出，且获取了一个定期的间隔。 \n```objc\n- (void)main { \n@try { BOOL isDone = NO; \nwhile (![self isCancelled] && !isDone) \n{ // Do some work and set isDone to YES when finished } } \n@catch(...) { // Do not rethrow exceptions. } } \n```\n尽管上面的代码，并不包含清理数据的工作，但是你自己的代码还是要保证资源被及时的释放。\n\n### [3.5.3 定义一个可并发执行的操作](#4)\n一个操作对象默认情况是按照同步的方式去执行任务，也就是说他们执行任务的线程也就是start调用的线程。因为操作队列会对操作任务提供开启的线程，因此，大多数的任务就会异步运行，然而，如果你计划手动去执行一个任务，而且还希望这个任务异步的去运行，你必须得采取一些手段来保证能够这么干，你需要把你的操作对象定义为一个可并发执行的操作对象。下面列出来的函数就是你需要重写的并发操作。 start：（必须重写）所有的自定义并发操作必须重写这个函数，从而替换之前这个函数的默认实现。要手动的执行一个操作，你就可以调用start函数，因此从，你对该方法的实现就是自定义操作对象的开启任务的节点，也就是你要提交你的任务到线程中去执行的节点，你的实现在任何时候都不应该去调用super start。 main：（可选的）这个函数通常用来实现与操作对象相关的任务。虽然你可以把执行任务的任务放到start中去执行，利用mian方法去执行任务会对你的任务开始和清理工作有好处。 isExecuting：（必须的） isFinish：（必须） 并发操作非常有必要向使用它的客户报告配置环境和执行状态，因此一个并发操作必须得包含执行的状态信息包括何时开始执行任务，何时结束任务，如果要报告状态，那么必须使用这些方法。 当别的线程在同时调用上述方法的时候，你必须得保证这些方法是安全的。同时，你也必须得实现KVO通知，以报告这些状态。 isConcurrent：（必须）区分一个操作是否是并发操作，重写该方法，并返回YES 本小节的剩余部分将展示一个MyOperationClass的例子，这个类列举了实现一个并发操作的基本函数，MyOperation 类将在它自己开启的线程中执行任务，而正在的执行任务将与操作类是不相干的，下面例子将的几点，就是你在定义一个并发操作时需要提供的一些基础函数。 下面的代码显示了部分MyOperation的接口和实现函数，这些实现包括isConcurrent、isExecuting，isFinish，等函数。其中isConcurrent函数非常简单，只需要返回YES去指明本操作是一个并发操作就可以了，isExecuting 和 isFinished 也比较简单，返回在类中存储的成员变量的值就可以了。 \n\n```objc\n@interface MyOperation : NSOperation \n{ \n\tBOOL executing;\n\tBOOL finished; \n}\n- (void)completeOperation;\n@end \n@implementation MyOperation \n- (id)init {\n self = [super init]; \n if (self) {\n  executing = NO; \n  finished = NO;\n   } \n return self; \n}\n- (BOOL)isConcurrent { return YES; } \n- (BOOL)isExecuting { return executing; } \n- (BOOL)isFinished { return finished; } \n@end\n```\n下面的方法展示了MyOperation的 start函数，下面的实现是一个start函数，执行任务至少要实现的内容。在这种情况下，start函数简单的开启一个新的线程，然后让这个线程去调用main函数。这个函数同样要更新executing成员变量，而且要对isExecuting关键路径产生KVO通知，当这些工作完成之后，就会离开函数，并去到新的线程中去执行任务。 \n```objc\n- (void)start { // Always check for cancellation before launching the task. \nif ([self isCancelled]) { // Must move the operation to the finished state if it is canceled. [self willChangeValueForKey:@\"isFinished\"]; \nfinished = YES; \n[self didChangeValueForKey:@\"isFinished\"]; return; }\n// If the operation is not canceled, begin executing the task. \n[self willChangeValueForKey:@\"isExecuting\"]; \n[NSThread detachNewThreadSelector:@selector(main) toTarget:self withObject:nil]; executing = YES; [self didChangeValueForKey:@\"isExecuting\"]; \n} \n```\n下面展示了MyOperation剩下的实现，在上面的代码已经知道 main函数将作为新的线程开启任务的节点，它将执行操作对象带来的任务，并且要执行completeOperation函数来说明任务已经结束，completeoperation函数将对isExecuting和isFinished关键路径发送KVO通知，来反应操作对象的状态已经改变。\n\n```objc\n- (void)main { \n\t@try { \n\t\t// Do the main work of the operation here. \n\t\t[self completeOperation]; \n\t} \n\t@catch(...) { \n\t// Do not rethrow exceptions.\n\t }\n} \n- (void)completeOperation { \n\t[self willChangeValueForKey:@\"isFinished\"]; \n\t[self willChangeValueForKey:@\"isExecuting\"]; \n\texecuting = NO; \n\tfinished = YES; \n\t[self didChangeValueForKey:@\"isExecuting\"]; \n\t[self didChangeValueForKey:@\"isFinished\"]; \n}\n```\n尽管是操作对象被取消掉了，你也应该发送KVO通知，来通知你的任务已经完成，当一个操作对象的执行时依赖其他操作对象的时候，它将检测isFinished状态，只有当它依赖的所有isfinished状态都变为YES的时候，如果无法发送isFinshed通知将会阻止其他依赖他的操作对象的执行。\n\n### [3.5.4 维护KVO的兼容](#4)\nNSOperation类是服从下列关键字的KVO isCanceled isConcurrent isExecuting isFinished isReady dependencies queuePriority completeBlock 如果你重写了start函数，和自定义了一些其他比较重要的函数，而不是单单重写main函数，你必须保证自定义的对象能够响应KVO，当重写start函数，其中你最需要关注的就是isExecuting和isFInished，这里有大量的方法会受到这俩个函数的影响。 如果你想实现支持依赖关系，以对其他一些操作对象的时候，你也可以重写isReady函数，并强制返回NO，直到你自定义的依赖关系满足。（如果你仍然想支持系统提供的依赖关系的时候，请保证调用super的函数）当你操作对象的isReady状态发生变化的时候，请发送KVO通知去报告这个状态，不过幸运的是，除非你去重写addDependency和removeDependency:，你并不需要担心KVO通知的发送。 虽然你可以发送其他关键字的KVO通知，但是通常你并不需要这么做，如果你想取消一个任务，你可以简单的调用cancel函数就好了。同样的，你也不需要去修改队列的优先级在操作对象上，最后，除非你的操作对象支持动态的修改isConcurrent，你也不需要发送KVO通知给isConcurrent关键路径。 如果要知道更多关于KVO的操作，请参见KVO编程指导。\n\n## [3.6 自定义一个操作对象的执行行为](#3)\n在添加一个操作对象到操作队列里面之前，需要将一个操作对象设置好，这些对操作对象设置的信息将会对所有的操作对象有效，不仅是自定义的操作对象，还包括系统定义的那俩个操作对象。\n\n### [3.6.1 设置依赖关系](#4)\n依赖是一种限制操作对象执行顺序的一种手段，一个操作对象的执行，必须得在它依赖的所有对象执行完成之后才能进行。也就是说，你可以创建简单的一对一的或者是负责的依赖关系树。 在俩个操作对象之间创建依赖关系，你可以使用addDependency：方法，这个方法可以在你传的目标对象和自己之间创建一个依赖关系。也就是说在目标对象没有执行完成之前，你的这个对象是不会执行的。依赖还不仅仅限制在一个操作队列中，因为是操作对象管理依赖关系，所以在不同的操作队列之中，依赖也是可以起到作用的。但是有一种情况是不允许的，那就是设置依赖环，这是一种语法错误，会导致任务永远得不到执行。 当操作对象所依赖的所有操作对象都执行完成之后，操作对象就变成ready状态，准备执行。（如果是你自己定义的操作对象 ，并自定义了isReady函数，那么准备状态就和你设置的条件有关系了）如果一个操作对象是在操作队列中，那么isReady状态的操作对象在任何时候都可能被执行，如果你计划手动去执行一个操作对象的话，那么可以调用他的start方法。 重要:你应当在将操作对象提交到操作队列之前就去设置依赖关系，如果在之后去设置依赖，也许将不会阻止该任务的执行。 依赖基于的是操作对象间在任何时候都可能发生变化的KVO通知，如果你自定义了操作对象的话，你需要自己去发送KVO通知，以防出现依赖方面的问题。关于更多KVO的信息，参考维护KVO兼容，关于更多设置依赖的信息，参考NSOperation 类\n\n### [3.6.2 改变操作对象的执行优先级](#4)\n对于添加到队列中的操作对象，是否能够执行，首先是受操作对象的isReady状态控制，其次是他们的优先级，是否准备好执行，是由操作对象的依赖对象是否执行完来限制的，但是这个优先级是操作对象的一个属性值，默认情况下，所有新创建的操作对象都是普通优先级，但是你可以增加或者是减少操作对象的优先级，通过setQueuePriority方法 优先级只对同一个队列中的操作对象起作用，如果你的应用有多个操作队列，不同队列中的操作对象的优先级是相互独立的，也就是说，在不同队列里面，存在低优先级的操作比高优先级的操作先执行。 优先级并不是依赖的替代，优先级决定的是那些在队列中已经是准备状态的操作对象的执行顺序，举个例子，如果一个队列中同时有高优先级和低优先级的操作对象准备好了，那么操作队列先执行高优先级的操作对象，然而，如果高优先级的没有准备好，但是低优先级的准备好了，那么将先执行低优先级的，如果你想阻止一个操作任务在另外一个操作对象执行完之后再执行，你需要使用依赖关系去 做\n\n### [3.6.3 改变依附线程的优先级](#4)\n在OSX 10.6及以后，设置一个操作对象所在的线程的优先级成为可能，系统的线程策略是依靠内核去管理，但是高优先级的线程将获得更高的执行机会，对一个操作对象，你可以显式的指定它的线程优先级，通过设置一个浮点型的数值，0-1.0之前。0是优先级最低、1是优先级最高。如果不显式设置的话，系统默认的线程优先级是0.5. 要设置线程优先级的话，你需要在讲操作对象添加到操作队列之前，调用setThreadPriority函数。当它的执行时间到来的时候，默认的start函数就会设置你之前指定的线程优先级来修改优先级。这个优先级只在你执行的main函数执行过程用有效。所有的其他代码包括你的完成回调，仍然是运行在默认的优先级下的。如果你自定义了一个并发的操作，那么你需要重写start函数，并手动去修改线程的优先级。\n\n### [3.6.4 设置一个完成后的回调block](#4)\n在OSX 10.6及以后，一个操作对象可以在它的所有任务执行完成之后去执行一个完成的block，你可以用这个完成的block执行任何与main函数执行的任务里面不相关的的block。举个例子，你可能需要告诉客户这个操作对象的任务都执行完成了，一个并发的操作对象可能会使用这个block去执行它最后的KVO通知 要设置一个完成block，你可以使用setCompleteBlock：函数，这个函数不需要传任何参数，也没有返回值。\n\n## [3.7 关于实现一个操作对象的一些Tips](#3)\n尽管一个操作对象可能非常容易去实现，但是有一些事情在你自定义的操作对象上还是要注意一下，下面的小段描述了这么几个方面。\n\n### [3.7.1 管理操作对象的内存](#4)\n下面的小段，描述了几个在操作对象中管理内存的关键元素，关于更多的OC的内存管理，参见内存管理开发指导。\n#### [3.7.1.1 避免依靠线程存储数据](#5)\n尽管大多是的操作都是在一个线程中执行的，在同步操作对象中，这个线程通常是由操作队列分配给它的，如果一个操作队列将线程分配给操作对象，那么你需要知道这个线程它是属于操作队列的，你不应该和你的操作对象有任何瓜葛，尤其是，你不应该有任何数据相关的在这个线程中，而这些数据并不是你创建和管理的数据，因为线程的生存和死亡是有操作队列或者系统来控制的，因此在线程间数据传递通过线程来传递将是不可靠，也是容易失败的。 在操作队列上，没有任何的理由可以使用线程存储数据，当你初始化一个操作对象，你应该提供给它所有执行任务需要的数据去做这件事，因此，操作对象要提供所有数据，所有来的、去的数据都应该存在操作对象上，知道任务结束或者应用不在需要它。\n\n#### [3.7.1.2 如果需要的话保持操作对象的引用](#5)\n因为操作对象是异步运行的，你不应该认为你可以创建或者忘记他们，它们也只是对象而已，也需要你去管理他们，尤其是你需要在它完成之后获取数据的情况下。 你需要保持对操作对象的引用，主要还有可能你再没有机会获取这个操作对象的引用的机会了，操作对象是执行很快的，在很多情况下，操作任务一旦添加到操作队列中，就会被执行，当你的代码获取到从操作队列中拿到的操作对象的时候，很可能，这个操作对象已经结束了，并从操作队列移除了，释放了。\n\n### [3.7.2 处理错误和异常](#4)\n由于操作对象在你的应用里面是完全独立的实例，因此有必要去处理那些异常和错误，在OSX 10.6及以后，默认的start的函数不在提供捕获异常。你自己的代码需要去直接的捕获和处理异常，如果需要也要检测错误代码并通知给应用程序，如果你替换了start函数，那么你的代码需要在程序离开底层线程之前就去处理这些异常。 你可能处理的错误可能有一下几种情况 检测UNIX errno 类型的错误 检测显式的由代码返回的错误 捕获来自你自己的代码和系统框架带来的异常 当一个操作对象没有准备好，start方法就开始执行的时候 当一个操作已经在执行或者执行完成了，或取消了，start函数被再次调用的。 当添加一个block任务，但是它已经被执行或者完成的。 当你准备从NSInvocationOperation对象获取数据，但是它已经被取消的情况。 如果你自定义的代码遇到异常或者错误，你需要提供操作步骤给你的应用去处理，Operation对象不会显式的把错误代码或者异常传递给你应用的其他地方，因此，如果对于应用程序是比较重要的信息，你需要提供相关必要的代码去处理这些错误。\n\n## [3.8 决定操作对象合适的数量，不要太多，也不要太少](#3)\n虽然可以给一个操作队列中，添加大量的操作对象，但是这么做，往往并不太好，像其他对象一样，创建NSOperation对象也是需要消耗内存，并且他们的执行也是需要开销的。如果你的每个任务都是很小的，而你又创建了成千上万个，你会发现你会消耗更多的时间在分发操作对象上，而不是在执行真正的任务，而如果你的设备已经内存不足时，你会发现成千上万的任务会严重影响程序的性能。 高效的应用操作对象的关键在于，在充分利用设备和执行一定数量的操作任务之间找到平衡点，尝试去找到你的设备执行任务的一个真正的数量值。举个例子，如果你的应用创建了100个操作对象去处理100个不同的值，那么你可以考虑使用10个操作对象，去处理10个值去代替。 同时，你也需要避免一次性的给操作队列中添加大量的任务，也要避免不停的给操作队列以比它处理速度更快的添加更多的任务，相比于一次泛哄式的添加任务，不如批量式的去添加，然后利用完成block回调去执行下一批次的任务。这样可以避免内存过多的消耗。 当然，创建操作对象的数量、以及没个操作对象需要执行的任务量，是由你的程序动态去管理的。你应该是用性能测试工具，例如Instruments去找到性能处理和速度的平衡点，关于Instruments 和其他性能工具的更多信息，参见性能。\n\n## [3.9 操作对象的执行](#3)\n最后，你的应用需要执行这些操作对象以真正的处理任务，在这一小节，你将学到就像你熟练的执行你的操作一样，去执行这些操作。\n\n### [3.9.1 添加操作对象到操作队列中](#4)\n到目前为止，最容易的执行操作的方式是使用操作队列，即NSOperationQueue类的实例，你的应用有责任去创建和维护这些操作队列。一个应用程序可以有任意数量的操作队列，但是实际上在同一时间有多少个操作会被执行还是有限制的，被系统调用的操作队列会根据可利用的CPU和系统的载入量来进行限制单位时间执行的操作对象，因此，创建更多的操作队列并不意味着可以执行更多的操作对象 就想创建其他的对象一样，在你的应用中创建操作队列\n```objc\nNSOperationQueue* aQueue = [[NSOperationQueue alloc] init];\n```\n添加一个操作对象到操作队列中，你可以使用addOperation方法，在OSX 10.6以后，你还可以添加操作对象组，通过\n```objc\naddOperations：waitUntilFinished：\n```\n方法，你也可以直接添加blocl对像到操作队列中（而不需要与一个操作对象关联），通过\n```objc\naddOperationWithBlock：\n```\n方法，上面的这些方法，队列都会入一个操作对象并通知队列去执行他们，在大多数情况下，操作对象将会被很快执行，但是有时候，操作队列也可能延迟执行操作对象，大概有这么几个原因，最普遍的就是，操作对象间可能有依赖关系，还有可能是操作队列自己可能被挂起，或者是操作队列执行操作任务的数量达到了上限。下面的代码展示了最基础的添加操作到操作队列的语法 \n```objc\n[aQueue addOperation:anOp]; // Add a single operation \n[aQueue addOperations:anArrayOfOps waitUntilFinished:NO]; // Add multiple operations \n[aQueue addOperationWithBlock:^{ /* Do something. */\n }];\n```\n 重要 千万不要在一个操作对象进入操作队列之后再去修改它，因为当操作在操作队列中等待执行的时候，它可能在任何时候去执行任务，改变它的依赖和数据，可能会起到坏的作用。如果你想知道一个操作对象的状态，请使用操作对象的属性 去获取。\n\n### [3.9.2 手动执行操作对象](#4)\n尽管操作队列对于运行操作对象已经很方便了，但是还是有一种可能不使用操作队列去执行一个操作对象，如果你选择手动去执行操作对象，那么有一些注意事项，最主要的是，操作对象必须得是ready，而且你需要用start函数去启动它。 一个操作对象如果不是ready状态的话不应该去执行，isReady函数被Operation对象的依赖关系封装到了上层，只有当它的依赖关系都清除的时候，一个操作才能够被执行、 当执行一个操作对象，应该去使用start函数去做。用这个函数而不是用main，是因为start函数会在执行之前执行一个安全检查，尤其是，默认的start函数还会产生KVO通知，以保证依赖关系能够正确进行，这个函数同时也避免当你的操作对象被取消的时候，再去执行，以及当操作对象没有准备好的时候就去调用导致的异常抛出 。 如果你的程序定义了并发的操作对象，你同时需要在启动任务之前考虑isConcurrent。当这个方法返回NO的时候，你就可以考虑是在当前线程中同步的执行还是创建一个新的子线程。然而，这些方法的检测完全取决于你。 下面展示了一个比较简单的，手动开启并发操作对象的一个例子。如果这个函数返回NO，你可以启动一个timer，在之后再去调用它。然后直到它返回YES之后，取消掉Timer。因为这种情况可能在操作对象被取消的时候发生。 \n```objc\n- (BOOL)performOperation:(NSOperation*)anOp { \n\tBOOL ranIt = NO; \n\tif ([anOp isReady] && ![anOp isCancelled]) { \n\t\tif (![anOp isConcurrent]) \n\t\t[anOp start]; \n\t\telse [NSThread detachNewThreadSelector:@selector(start) toTarget:anOp withObject:nil]; \n\t\tranIt = YES; \n\t}else if ([anOp isCancelled]){ \n\t\t// If it was canceled before it was started, // move the operation to the finished state. \n\t \t[self willChangeValueForKey:@\"isFinished\"]; \n\t \t[self willChangeValueForKey:@\"isExecuting\"];\n\t  \texecuting = NO; \n\t  \tfinished = YES; \n\t  \t[self didChangeValueForKey:@\"isExecuting\"]; \n\t  \t[self didChangeValueForKey:@\"isFinished\"]; \n\t  \t// Set ranIt to YES to prevent the operation from \n\t  \t// being passed to this method again in the future. \n\t  \tranIt = YES; \n\t} return ranIt; \n}\n```\n\n### [3.9.3 取消操作对象](#4)\n当将操作对象添加到操作队列里面的时候，一个操作对象的管理就交给了操作队列，也不能被移除了，唯一使操作对象出列的方法就是调用它的cancel函数，你也可以取消所有的操作对象，通过调用操作队列的cancelAllOperations 你可以在确保你不在需要操作对象的时候取消掉它。发出一个cancel命令，会将操作对象的关键路径变为canceled状态，这将阻止任务继续执行，由于canceled的操作对象也认为是完成的，那么依赖它的操作对象就可以移除依赖关系。然而，更多情况下，更常用的是取消所有操作独享，在某些重要的时候，比如应用退出、或者用户发出了取消指令，这比一个个取消要好很多。\n\n### [3.9.4 等待操作对象的完成](#4)\n为了获取最佳的性能，你应该尽可能的让操作对象并发执行，让系统去干更多的事情，在你执行操作对象任务的时候，如果创建一个操作对象的时候，同时希望获得了操作对象的结果，你可以使用waitUntilFinished：方法来阻塞代码继续执行，直到这个操作对象执行完成。通常来讲，这是最好的方式去避免你能帮到它的时候，阻塞当前线程也许是一个比较好的解决方法。但这也带来了更多的同步性，而限制了整体的可并发性。 你绝不允许在主线程中调用这个方法，你最好在子线程或者其他的线程操作中这么做，阻塞主线程将会降低程序的可响应性。 除了等待一个任务完成，你可以等待一个操作队列所有的任务执行完成，通过调用waitUntilAllOperationsAreFinished，当你等待一个操作队列任务完成的时候，避免在别的线程中添加任务给它，以防延长等待时间。\n\n### [3.9.5 挂起和恢复操作队列](#4)\n如果你想中途终止一个操作队列的话，你可以挂起相应的操作队列，使用setSuspended方法，挂起一个操作队列并不会导致正在执行的操作任务终止。它只是会阻止别的操作对象（操作队列中的）不去执行，你可能会在用户想暂停任务的时候挂起所有操作，因为用户还期望在某个时候恢复这些任务。","slug":"[译] ios并发编程指南","published":1,"updated":"2017-01-20T15:15:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8ywc000dhx5lot5ekm2u","content":"<p><a href=\"#1\">并发编程指南</a></p>\n<a id=\"more\"></a>\n<p><img src=\"http://ock9zbzms.bkt.clouddn.com/translationconcurrency.png\" alt=\"\"></p>\n<h1 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a><a href=\"#1\">并发</a></h1><h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1 概述\"></a><a href=\"#2\">1 概述</a></h2><h3 id=\"1-1-并发的概念\"><a href=\"#1-1-并发的概念\" class=\"headerlink\" title=\"1.1 并发的概念\"></a><a href=\"#3\">1.1 并发的概念</a></h3><p>并发其实指的是多项任务在同一时间进行，随着多核CPU的普及以及发现任务只在某一核上不停的增加，软件开发者需要一种方式充分的利用多核系统。虽然诸如IOS、MacOS兼容多项程序同时执行，但是大多数的程序运行在后台，并且执行任务只需要很短的CPU时间。这是因为前台应用同时获取了用户的关注并且是设备处于忙的状态。如果一个程序有很多的任务需要处理，但是又只获得了很少的碎片CPU时间，那些额外的处理资源将被浪费。 在过去，在应用中引入并发要求创建一个或者多个额外的线程，遗憾的是，编写线程代码是一项非常有挑战性的事情，线程是一种‘低级’的工具，并且需要手动去管理，获取多少个线程是最优的，动态取决于当前的系统以及底层硬件的支持。实现一个完美的线程解决方案，变的极其困难或者说不可能实现。另外，采取添加线程的方式实现同步的机制，不仅给软件开发带来了复杂性和风险性，而且也并不能确保提升性能。 OSX和iOS采取了一种比传统的基于线程的系统和程序，更加异步的方式去执行并发任务。并不是直接去创建线程，应用需要做的是定义一些特殊的任务，然后让系统去执行它们，让操作系统去管理线程，程序获得了原生线程更强的伸缩性，而程序开发者也获得了更加简单更加高效的编程模型。 本文档就是描述这项技术和技艺，你应该使用这项技术来实现并发。这项技术同时使用于iOS和OSX。</p>\n<h2 id=\"1-2-文档的组织\"><a href=\"#1-2-文档的组织\" class=\"headerlink\" title=\"1.2 文档的组织\"></a><a href=\"#3\">1.2 文档的组织</a></h2><p>本文档包括以下章节<br>1、并发和程序设计——介绍异步程序设计的一些基本概念和异步的执行自定义任务的技术<br>2、操作队列——展示怎样用OC去组装和执行一个任务<br>3、分发队列——展示怎样在基于C的应用程序中去并发地执行任务<br>4、资源分发——展示如何异步的处理系统事件<br>5、从线程变成用迁移到新的技术——提供一些技术帮助从旧的线程变成迁移到新的变成技术 本文当同时也包括一些相关章节的专业术语的定义</p>\n<h2 id=\"1-3-一些专业名词\"><a href=\"#1-3-一些专业名词\" class=\"headerlink\" title=\"1.3 一些专业名词\"></a><a href=\"#3\">1.3 一些专业名词</a></h2><p>在开始讨论并发之前，非常有必要去定义一些相关的专业名词来避免混淆，一些开发UNIX或者早先开发OSX的程序员，可能会对任务，队列处理、线程有一些新的任务，本文档对这几个概念有如下定义<br>1、在本文中，线程专指一个分离的支线去执行一段代码，而在老的OSX中特指基于POSIX的API 2、在本文中，执行专指可执行的任务正在执行中，可能包裹着多个线程。<br>3、在本文中，任务专指一个需要被执行的抽象工作 关于完整的类似这些概念的定义，参见词汇定义</p>\n<h2 id=\"1-4-其他\"><a href=\"#1-4-其他\" class=\"headerlink\" title=\"1.4 其他\"></a><a href=\"#3\">1.4 其他</a></h2><p>本文档专注于如何在你的程序中实现并发编程，而不包括如何使用线程，如果你需要更多的有关线程开发的只是，请去参考线程编程指导</p>\n<h1 id=\"2-并发及程序设计\"><a href=\"#2-并发及程序设计\" class=\"headerlink\" title=\"2 并发及程序设计\"></a><a href=\"#2\">2 并发及程序设计</a></h1><h2 id=\"2-1-并发编程和程序设计\"><a href=\"#2-1-并发编程和程序设计\" class=\"headerlink\" title=\"2.1 并发编程和程序设计\"></a><a href=\"#3\">2.1 并发编程和程序设计</a></h2><p>在以前的计算机运行的时候，计算机单位时间最大执行数量的任务取决于CPU的时钟速度，但是随着技术的发展和中央处理器设计的更加紧凑，热量和物理因素开始限制中央处理器的最大时钟速度，所以，主板供应商也在寻找其他的方式去提升他们主板的总体性能，他们发现的解决方案是增加主板上的处理器个数，通过增加处理器个数，一个主板可以在单位时间内执行更多的任务，而并不需要去增加CPU的时钟速度，或是改变主板的大小或考虑热量参数，现在剩下的唯一问题就是如何去充分的利用这些多核。 为了利用这些多核，计算机需要程序设计者能够去同时执行多项任务，在当代，多核操作系统，如OSX或者IOS，可能有几百或者更多的程序在同时运行，所以根据时序安排程序在不同的中央处理器上变得成为可能，然而，大多数的时候，这些程序要么是系统守护进程，要么是那些消费很小处理时间的后台应用程序，取而代之的是，真正需要多核开发的是，独立的前台运行的程序更高效的获取更多核心。 传统的使应用获取多核的方式是创建多线程，然而，随着多核的增加，线程方案有一些问题，最大的问题是线程开发的方式对多核系统不具备很好的伸缩性，你不能仅靠创建更多的行程就能确保程序和处理器运行良好，你需要知道的是，如何高效的利用这些中央处理器。对于程序来讲，如何计算它自身是一件有挑战的事情，尽管你可以正确的管理这些线程，程序去管理这些线程也依然是一项挑战，去确保他们高效运行、确保他们不被别的线程干扰。 所以，总结这些问题，程序需要一种方式去充分应用多核，单个程序可伸缩的执行大量工作，而且这个解决方案需要足够简单，去面对单个处理器任务的任务增长，好消息是，苹果已经提供了解决方案对处理所有这些问题，本章节先睹为快，去看看这项技术的组成以及牛逼的设计，你可以使你的代码从中获益。</p>\n<h2 id=\"2-2-从线程开发中走出来\"><a href=\"#2-2-从线程开发中走出来\" class=\"headerlink\" title=\"2.2 从线程开发中走出来\"></a><a href=\"#3\">2.2 从线程开发中走出来</a></h2><p>尽管线程开发已经应用了多年，而且它们在某些地方还将有用武之地，但是它们并没有可伸缩的解决多核场景，如果你使用线程开发，那么创建一个可伸缩的解决方案的麻烦就落在你肩上了，开发者，你需要去动态的根据系统的多核个数去决定创建多少个线程，此外，你的应用将花费很多消耗在创建和管理这些线程本身的消耗上。 取代线程开发，OSX和IOS使用异步设计的方式解决并发问题，异步方法已经在操作系统中提供了很多年，而且一般都是应用在创建很耗时的任务上，如从磁盘读取文件。当调用的时候，一个异步任务开始在后台执行，并立即返回在任务执行完之前。通常，这项任务会调用一个后台线程，开始这项任务在该后台线程上，然后在任务完成的时候发送一个消息给调用者（通常使用回调的方式）。在过去，如果没有一个你需要的异步方法，你需要自己去写一个异步方法还需要创建自己的线程，但是现在，OSX和iOS提供技术，你可以不用自己去管理线程就可以异步执行任务。 一种开启异步任务的技术叫 GCD，一项将过去需要在你程序中自己写管理线程代码移交给系统去管理。所有你需要做的事情仅仅是创建任务，然后将任务提交给合适的系统的GCD队列。GCD去创建和管理这些线程，因为这些线程已经提交给系统去管理，GCD提供全套的任务管理和执行，比传统的线程管理更加高效。 操作队列是非常类似于分发队列的一种OC对象管理方式，你可以定义你想执行的任务，然后把他们扔到操作队列中，当执行这些安排好的任务时，类似于GCD，操作队列为你执行所有的管理。确保在系统长执行的高效且迅速。 下面的段落提供了更多的信息关于操作队列、分发队列、以及一些你可能在异步编程中用到的技术</p>\n<h3 id=\"2-2-1-分发队列\"><a href=\"#2-2-1-分发队列\" class=\"headerlink\" title=\"2.2.1 分发队列\"></a><a href=\"#4\">2.2.1 分发队列</a></h3><p>分发队列是一套C的机制，为可执行自定义任务。分发队列要么是串行的要么是并行的，但是通常都是按照FIFO的方式去调度任务，一个串行的队列，一次只能运行一个任务，只有等前一个任务完成之后，下个任务才能开启。作为对比，并行的队列可以同时开启尽可能多的任务而并不需要前面的任务执行完毕。 分发队列有下面几个好处 </p>\n<pre><code>1、提供了简单的直观的编程接口 \n2、提供了自动的和完全的线程池管理 \n3、任务执行速度提升 \n4、更多的内存方面的优化 \n5、他们不会增加内核的负载 \n6、不会导致队列死锁 \n7、伸缩性强（对多核系统来讲） \n8、串行队列提供了比过去线程同步更为优秀的一种选择 \n</code></pre><p>你提供给分发队列的任务必须是封装好的一个方法或者是一个Block对象，Block是一种具有C语言特性的，开始引进与OSX 10.6,IOS 4.0的一个新特性。但是相比C语言有一些别的好处。不同于在Block的语法区域定义Block对象，你通常在别的方法或者是函数中去定义，这样可以去捕获到别的方法或者函数中的变量，Block同样可以移动到他们的作用区域以外，拷贝到堆上，这通常发生在你将任务添加到一个分发队列上的时候，所有这些语法特性，使得通过添加少量代码就可以获得非常好的实现。 分发队列是GCD技术的一部分，也是C运行时的一部分，要想获取更多的有关分发队列相关的信息，请参见 分发队列，要获取更多关于Block的信息和他们的好处，参见Block 程序编程观点。</p>\n<h3 id=\"2-2-2-分发资源\"><a href=\"#2-2-2-分发资源\" class=\"headerlink\" title=\"2.2.2 分发资源\"></a><a href=\"#4\">2.2.2 分发资源</a></h3><p>分发资源是异步的处理系统分发资源的一种C语言机制，分发资源封装了一个特殊类型的系统事件，并将这个特殊的系统事件提交给一个特殊的Block对象，或者函数，当系统事件发生的时候，你可以使用分发资源去监测如下特殊系统事件 定时器 信号事件 描述符相关事件 进程相关事件 端口匹配相关事件 自定义的事件，并由你来触发 分发资源也是GCD技术的一部分，要获取更多有关分发资源相关的信息，参见分发资源</p>\n<h3 id=\"2-2-3-操作队列\"><a href=\"#2-2-3-操作队列\" class=\"headerlink\" title=\"2.2.3 操作队列\"></a><a href=\"#4\">2.2.3 操作队列</a></h3><p>操作队列是cocoa环境的一种并发队列，由NSOperationQueueClass 实现，操作队列总是按照FIFO的方式去执行任务，操作队列考虑其他因素去影响执行队列的顺序，在这些因素中，优先考虑一个任务的执行是否是依赖于其他任务，你可以给自己的任务设置依赖关系，然后创建一个复杂的执行顺序图。 任务添加到操作队列中的，必须是NSOperation的子类，一个操作对象是一个OC类型的封装了你要执行的数据和任务的对象，由于NSOperation是一个抽象基类，所以你通常需要去自定义子类去执行你的任务，然而，Foundation Framework已经提供了一些相关的子类，你可以使用它们去执行任务。 操作的对象产生KVO通知，这个是非常有用的，当监视你的任务进度的时候，虽然任务执行通常是并发的，但是可以利用依赖是的任务有序。 关于更多操作队列的信息，参见操作队列</p>\n<h2 id=\"2-3-异步编程技术\"><a href=\"#2-3-异步编程技术\" class=\"headerlink\" title=\"2.3 异步编程技术\"></a><a href=\"#3\">2.3 异步编程技术</a></h2><p>在你开始考虑重新用并发编程的方式重新设计程序的时候，你最好先问下自己这么做是否必要，并发可以提高你代码的可响应性，去确保主线程能相应更多的用户事件，它同样可以提高你代码的性能，通过促进多核去执行更多的任务，但是它也同时带来了上层复杂性，从而使你的代码更加难调试。 由于它带来了复杂性，并发并不是一个在你程序开周期中考虑的特性，当把它嫁接到应用中。做对这件事需要你好好考虑你程序执行的任务以及向这些任务提交的数据结构。如果做错的话，你可能发现你的代码运行缓慢，甚至还不如从前，因此，在你开始程序设计的时候，你就应该考虑你要实现的目标和通过何种方式来达到它。 每个应用都包含有不同的要求和不同的任务需要它去执行，这不可能靠一个文档就告诉你，怎么去设计你的程序和管理任务，然而，下面几段可以给你提供一些指导，帮助你去在程序设计的时候做出好的选择。</p>\n<h3 id=\"2-3-1-明确程序期望的表现\"><a href=\"#2-3-1-明确程序期望的表现\" class=\"headerlink\" title=\"2.3.1 明确程序期望的表现\"></a><a href=\"#4\">2.3.1 明确程序期望的表现</a></h3><p>在你决定是否要将并发引导到应用中的时候，你应当开始思考你的应用程序想要达到的一个什么表现。明白了应用要达到的表现之后，会给你是否使用并发提供一个参考。同样的，也会给你一些引入并发之后程序能获取的性能收益方面的启发。 首先、你需要列举应用程序所要执行的任务和数据结构之间的关系。开始，你可能通过点击一个菜单或者一个按钮开启一个任务并执行，这些任务可能是一些离散的任务，并有明确的开始和结束点。你还需要列举出应用程序可能执行的其他类型的任务，而不仅仅是用户行为相关的，比如说基于时间的一些任务 在你有了自己任务列表之后，开始把任务进行更加的分组集合，确保这些任务能够成功执行。在这个层面，你优先考虑的是那些数据或对象修改如何对应用状态进行修改的。你同样需要考虑不同任务之间的相互依赖关系，例如：如果一个任务牵涉到一个数组中所有对象的修改，对于其中一个数据的修改，会对其他数据产生任何影响。如果一个数据的修改，独立于其他的数据，那么这个时候你可以考虑使用并发去做提升性能，创建多个任务去做。</p>\n<h3 id=\"2-3-2-单位工作的可执行因子\"><a href=\"#2-3-2-单位工作的可执行因子\" class=\"headerlink\" title=\"2.3.2 单位工作的可执行因子\"></a><a href=\"#4\">2.3.2 单位工作的可执行因子</a></h3><p>在明白你程序执行的任务类型之后，你应该明白在什么地方去使用并发会有好处了。如果在一个任务中改变一个或者多个的顺序，会影响到执行结果。你应该还是需要考虑到使用串行的方式去执行这些任务，如果改变执行顺序之后，并不会影响到执行结果，你可以考虑将这些任务用并发的方式去做，在这俩种情形下，你定义可执行的单位工作，并让它们执行，这些工作单元，就成为你封装好的Block对象或者操作对象或者分发队列。 对于每个单独的可执行任务，并不需要过多的担心任务执行的数量，在最后，分到线程中总是会有开销，但是分发队列或者操作队列相比传统的线程开发还是有很多优势的，因此，执行一些单元工作使用操作队列还是要比直接操作线程要好很多，当然，你常常应该确保任务执行的性能和你开启的任务恰好如你所需，但是，任务并不是越小就越好。</p>\n<h3 id=\"2-3-3-区分你需要什么队列\"><a href=\"#2-3-3-区分你需要什么队列\" class=\"headerlink\" title=\"2.3.3 区分你需要什么队列\"></a><a href=\"#4\">2.3.3 区分你需要什么队列</a></h3><p>此时，你的任务已经切割为一些可执行的单元，并且封装成了Block对象或者是操作对象，你需要去定义你要执行的队列以执行这些任务。对一个任务来讲，测试这些Block或者是操作任务，能够在队列中执行正确。 如果你使用Block去实现你的任务,你可以添加任务到串行或者并行的队列里，如果对顺序有要求的话，你只能添加到一个串行队列中，如果没有要求，根据你的要求，你可以添加的并行队列中，或者添加到多个队列中去。 如果你是用操作队列去执行任务，那么选择的队列并不对添加到里面的任务的配置感兴趣，如果要串行去执行任务，那么你需要给相关的任务设置依赖关系，依赖会阻止任务开始执行，直到它依赖的任务执行完成。</p>\n<h3 id=\"2-3-4-提升执行效率的贴士\"><a href=\"#2-3-4-提升执行效率的贴士\" class=\"headerlink\" title=\"2.3.4 提升执行效率的贴士\"></a><a href=\"#4\">2.3.4 提升执行效率的贴士</a></h3><p>在把任务分割为更小的任务并将他们添加到队列中后，这里还有一些使用队列提升程序性能的小Tips 如果内存考虑是一个因素的话，那么在任务里面直接计算。如果你的应用已经内存警告了，那么在任务中直接计算会比从内存中加载要快一些。运用在寄存器或者是该核上的内存计算，会比从主内存加载要快一些。当然，你也可以通过测试来选择哪种方案会好一些。 将串行的任务，可能的话改变为并发。如果一个任务由于共享资源必须串行去执行，可以考虑将共享资源移除使得可以并发执行，可以考虑把这些资源给每个客户都拷贝一份。 避免使用锁，操作队列和分发队列的支持在大多数情况下并不需要锁。做为取代，可以使用一个串行的队列或者使用依赖去保证顺序正确。 如果可能的话依赖系统框架，最好的方式去实现并发就是使用系统提供的框架，许多框架使用线程或者其他技术来实现并发，当定义你的任务的时候，看看系统框架中是否已经有方法或者函数能够实现并发，使用系统接口会提升你的效率，而且帮你做到更多的并发可能性。</p>\n<h2 id=\"2-4-性能相关\"><a href=\"#2-4-性能相关\" class=\"headerlink\" title=\"2.4 性能相关\"></a><a href=\"#3\">2.4 性能相关</a></h2><p>操作队列、分发队列、资源分发提供了一种执行并发更加容易的方式。但是这些技术并不保证提升程序的性能和可响应性。具体来讲，根据你的需要同时兼顾性能提升和不要影响到其他资源仍然是你自己需要衡量的一件事。举个例子来讲，尽管你创建了10000个任务并把他们都提交到操作队列中，这么干的话，肯定会导致你的程序分配潜在的大量内存，这个会导致增加调度和减少性能。 引入并发到你的程序中前–是使用队列还是线程，你需要根据程序当前的性能来设置一个参考的标准。在引入并发之后，也同样需要做个列表对性能方面的改变进行比较，来确保程序是真的性能提升了，如果引入并发并不能给性能带来大的提升，你应该考虑其他的性能工具来检测潜在的原因。 关于性能的介绍和可用的性能工具，参见性能概览。</p>\n<h2 id=\"2-5-并发和其他技术\"><a href=\"#2-5-并发和其他技术\" class=\"headerlink\" title=\"2.5 并发和其他技术\"></a><a href=\"#3\">2.5 并发和其他技术</a></h2><p>将你的代码分解为模块任务是一种最好的提升应用并发的方式，但是这种设计方式并不是对每个应用每个情况都很适合，取决于你执行的任务，也可能存在其他的选择来提升程序的整体并发，下面的俩小节提供了其他的并发技术供你参考</p>\n<h3 id=\"2-5-1-OpenGL和并发\"><a href=\"#2-5-1-OpenGL和并发\" class=\"headerlink\" title=\"2.5.1 OpenGL和并发\"></a><a href=\"#4\">2.5.1 OpenGL和并发</a></h3><p>在OSX中，OpenGC技术是图形计算方便最基础和核心的技术，OpenGL是非常棒的计算大数据集合的一种技术，举个例子来讲，你可能使用OpenGL技术来给图片做像素级别的滤镜，或者用它来计算复杂的数学计算。换而言之，OpenGL可以用来计算大量数据集合是并行的。 尽管OpenGL在大量数据并行执行方面有着非常好的性能优势，但是它并不合适执行自定义的计算，在任务提交给GPU处理之前，有大量的准备工做，而且要将数据和其他必要的核心操作转换图形卡片。同样的，要想获取OpenGL的产生结果也需要偶很多其他的努力。因此，所有跟系统交互相关的任务不建议提交给OpenGL去执行，举个例子，你不应该用OpenGL去运算从文件中或者网络流中拿到的数据，取而代之的是，你要用OpenGL执行的任务，必然是自己已经持有的这样相对来讲传递给GPU运算更加独立。 更多关于OpenGL的只是，参见OpenGL开发指导。</p>\n<h3 id=\"2-5-2-何时使用线程\"><a href=\"#2-5-2-何时使用线程\" class=\"headerlink\" title=\"2.5.2 何时使用线程\"></a><a href=\"#4\">2.5.2 何时使用线程</a></h3><p>尽管操作队列和分发队列是执行并发任务的更优选择，但是它们不是万能的，取决于你的应用程序，这里仍然后一些情况是需要创建线程去开发的，如果你创建了自定义的线程，那么你要确保尽量少的开启线程，并且确保这些线程只执行特定的任务，而不去干别的事情。 线程仍然是一种较好的解决方案，当执行实时任务的时候，分发队列会确保尽快的去执行他们的任务，但是并不能实时的去开线程去做。如果你需要可预测的后台代码执行，那么线程仍是一种选择。 作为线程编程，你还是需要去使用线程，当必须和完全必要的时候，关于更多线程方面的知识，参见线程开发指导。</p>\n<h1 id=\"3-操作队列\"><a href=\"#3-操作队列\" class=\"headerlink\" title=\"3 操作队列\"></a><a href=\"#2\">3 操作队列</a></h1><p>cocoa的操作都是原生的对象封装的可执行异步任务。这些操作同时可提交给操作队列去执行，也可以直接自己执行。由于是基于OC的框架，那么操作可应用在IOS和OSX中。本章节将介绍如何去使用和定义操作。</p>\n<h2 id=\"3-1-关于操作对象\"><a href=\"#3-1-关于操作对象\" class=\"headerlink\" title=\"3.1 关于操作对象\"></a><a href=\"#3\">3.1 关于操作对象</a></h2><p>一个操作对象是一个NSOperation类的实例，你可以用它来封装你要执行的任务。NSOperation类本身是一个抽象基类。所以要想执行可用的任务，必须得使用它的子类。尽管是一个抽象类，它还是提供了一些有用的基本操作，而省去了你在自己定义的子类中去做的麻烦。此外，Foundation 框架还提供了俩个具体的子类，可以用它们来执行你的任务，下表列出了这俩个类，还有如何使用它们的介绍。 NSInvocationOperation ：这是一个基于你的类和要执行的Seletor的类，你可以在已经定义过这个任务的地方去调用它，然后执行异步操作。由于它并不要强制你去做继承，所以可以使用该类去实现一个更加动态的风格。 NSBlockOperation：这是一个执行block封装任务的操作类，因为它可以执行多个block。block任务执行任务使用了组的语法，当所有的相关的block执行完之后，这个block操作才被任务是执行完成 NSOperation：这是定义其他操作任务的基类，继承它给你自定义操作类带来了完成的并发控制以及实现。包含可以完全控制任务的执行能力和执行状态。 所有上述的操作对象都包含以下核心的特性 支持建立图形化的任务间相互依赖，这些依赖将会阻止任务开始，直到它依赖的任务完成之后。 支持可选的完成回调block。指的是当所有的执行任务结束之后的回调方法。 支持检测任务执行状态（使用KVO） 支持对操作顺序进行调整，并影响他们的执行顺序。 支持取消语义，也即允许你半路对任务执行终止操作。 操作对象是设计来帮助你提升程序的并发水平，操作也是一种不错的组织和包装你的应用为几个独立的分支的一种手段，作为取代提交一些任务给主线程的开发方式，可以将任务分割为一个或多个不同的操作，然后提交给队列，使相关的工作可以在一个或多个线程中去并发的执行。</p>\n<h2 id=\"3-2-同时VS非同时操作\"><a href=\"#3-2-同时VS非同时操作\" class=\"headerlink\" title=\"3.2 同时VS非同时操作\"></a><a href=\"#3\">3.2 同时VS非同时操作</a></h2><p>尽管，你通常将任务添加到操作队列中，但是做这个并不是必须的。你也可以直接调用它的start方法去开始一个操作。但是执行这个操作，并不能保证你的操作同步的运行在你当前代码所在的线程中。那么NSOperation类的这个isConcurrent方法会告知你，当前运行的操作是同步还是异步的在你调用Start方法的线程中，默认情况下这个方法会返回NO，也就是说这个操作是在当前调用的线程中同步去执行的。 如果你想去实现一个异步执行的操作，也就是调度任务的线程和任务执行的线程是异步的。你需要写额外的代码去异步的开启它。举个例子，你可以创建一个独立的线程，调用一个系统的异步方法，去执行其他的事情以保证start函数的调用时异步去执行。 大多数的开发并不需要去实现一个并发操作对象，如果你总是将你的操作去添加到一个操作队列中，你并不需要实现这些并发操作，当你添加一个操作对象到操作队列中的时候，操作队列自己就会创建一个线程去执行你的操作，因此，将一个并不是异步的任务添加到操作队列中去，结果还是会以异步的方式去执行代码，去定义一个异步任务这种费力不讨好的工作，也只是你就是想创建异步执行任务，而不是将它添加到队列中去的时候才有必要。 关于更多有关异步任务的信息，参见设置任务去异步执行。</p>\n<h2 id=\"3-3-创建一个NSInocationOperation对象\"><a href=\"#3-3-创建一个NSInocationOperation对象\" class=\"headerlink\" title=\"3.3 创建一个NSInocationOperation对象\"></a><a href=\"#3\">3.3 创建一个NSInocationOperation对象</a></h2><p>NSInvocationOperation是NSOperation的具体子类，当它运行的时候，会执行它的selector里面，指派给它的任务。使用该类时，应该避免将大量的自定义的操作给每个任务。尤其是当你需要改变一个已经存在的应用程序和这些对象已经存在任务，还有很多必备要执行的任务时。你可以使用它来改变依赖环境的时候。举个例子，你可以使用一个Invocation对象来执行一个选择器，这个选择器是基于获取用户的输入信息动态的选择。 创建一个Invocation操作的步骤是很简单的，你可以创建并实例化一个该对象，然后传递需要的对象和selector去执行指定的代码，下面提供了俩个方法去举例说明这个操作步骤，taskWithData：方法创建一个操作对象，然后通过另外一个方法去执行任务。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyCustomClass</span> </span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSOperation</span>*)taskWithData:(<span class=\"keyword\">id</span>)data &#123; </div><div class=\"line\">\t<span class=\"built_in\">NSInvocationOperation</span>* theOp = [[<span class=\"built_in\">NSInvocationOperation</span> alloc] initWithTarget:<span class=\"keyword\">self</span> </div><div class=\"line\">\tselector:<span class=\"keyword\">@selector</span>(myTaskMethod:) </div><div class=\"line\">\tobject:data]; </div><div class=\"line\"><span class=\"keyword\">return</span> theOp;</div><div class=\"line\"> &#125; <span class=\"comment\">// This is the method that does the actual work of the task. </span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)myTaskMethod:(<span class=\"keyword\">id</span>)data &#123; <span class=\"comment\">// Perform the task. &#125; </span></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-4-创建一个NSBlockOperation对象\"><a href=\"#3-4-创建一个NSBlockOperation对象\" class=\"headerlink\" title=\"3.4 创建一个NSBlockOperation对象\"></a><a href=\"#3\">3.4 创建一个NSBlockOperation对象</a></h2><p>NSBlockOperation是NSOperation的具体子类，作为一个或者多个Block对象的封装器，这个类提供了对象层面的封装，而且它已经使用了操作分发队列，所以并不需要创建分发队列，但是你也可以使用其他的诸如操作任务的依赖、KVO通知或者其他特性，而这些特性是分发队列所没有的。 当你创建一个block操作的时候，在创建他的时候，你至少已经添加了一个block，你也可以在之后再添加更多的block进去。当执行NSBlockOperation对象的时间来临的时候，该对象会将它的所有block都提交给默认优先级的异步分发队列，然后这个对象等待它的block全部执行完，之后会把自己标记为isfinish。因此，你可以使用一个Block操作去监听一组任务的完成，非常像用一个线程去管理多个线程的结果。而不同之处在于block操作自己运行在一个分离的线程，而你的程序可以干其他的活儿，在这个block等待它的任务执行完成之前。 下面的代码介绍了如何去创建一个BlockOperation，这个Block没带参数且没有返回什么有意义的结果 NSBlockOperation* theOp = [NSBlockOperation blockOperationWithBlock: ^{ NSLog(@”Beginning operation.\\n”); // Do some work. }]; 当创建一个block操作之后，你可以添加更多的block给它，通过 addExecutionBlock：方法，如果你想让添加的任务线性去执行，那么你必须直接将它提交给指定的串行队列中去。</p>\n<h2 id=\"3-5-定义一个自定义的操作\"><a href=\"#3-5-定义一个自定义的操作\" class=\"headerlink\" title=\"3.5 定义一个自定义的操作\"></a><a href=\"#3\">3.5 定义一个自定义的操作</a></h2><p>如果一个Block操作对象或者Invocation操作对象没法完全满足你的需求的时候，你可以考虑自己定义个继承自NSOperation的操作对象，NSOperation对象提供了一系列的继承点给所有的操作对象，这个类已经实现了大量的基础的函数或方法，满足那些依赖或者KVO的操作，然而，还是有一些地方需要你自己的自定义实现确保你的操作对象能够正确的执行，具体的工作量的大小取决于你要自定义的是一个同步操作对象还是异步操作对象。 定义个同步操作对象要比定义一个异步操作对象简单的多，对于一个同步操作对象来讲，所有你要做的工作就是实现main执行函数和响应取消操作事件。父类已经帮你做了所有其他该做的工作，而对于一个异步操作对象来将，你需要替换一些父类已经做过的工作，在你自己定义的操作对象上。下面的俩小节将介绍如何去实现这俩种不同的操作对象。</p>\n<h3 id=\"3-5-1-执行main任务\"><a href=\"#3-5-1-执行main任务\" class=\"headerlink\" title=\"3.5.1 执行main任务\"></a><a href=\"#4\">3.5.1 执行main任务</a></h3><p>至少一个操作对象需要实现下面的函数 一个自定义的初始化函数 main 你需要自定义个初始化函数去初始化一个操作对象，以及一个自定义的main函数去执行任务，你也可以根据需要执行其他的函数，如下所示 自定义函数供你的main函数去调用 属性方法去访问数据 实现NSCoding协议去固化一个操作对象 下面的模板，展示了一个自定义的操作对象，下面的代码并不展示如何去实现取消方法，但是也实现了你通常要实现的方法，具体怎么取消任务，参见取消任务介绍，下面的初始化函数初始化了一个对象，携带一个数据参数并把它存到了类内部方便以后访问，main函数将会显式的去操作这个对象，在你的应用将结果返回给你之前。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyNonConcurrentOperation</span> : <span class=\"title\">NSOperation</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">id</span> (<span class=\"keyword\">strong</span>) myData; </div><div class=\"line\">-(<span class=\"keyword\">id</span>)initWithData:(<span class=\"keyword\">id</span>)data;</div><div class=\"line\"><span class=\"keyword\">@end</span> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyNonConcurrentOperation</span> </span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithData:(<span class=\"keyword\">id</span>)data &#123; </div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]) </div><div class=\"line\">\tmyData = data;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">self</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)main &#123; </div><div class=\"line\">\t<span class=\"keyword\">@try</span> &#123;</div><div class=\"line\">\t <span class=\"comment\">// Do some work on myData and report the results. </span></div><div class=\"line\">\t&#125; </div><div class=\"line\">\t<span class=\"keyword\">@catch</span>(...)</div><div class=\"line\">\t &#123;</div><div class=\"line\">\t  <span class=\"comment\">// Do not rethrow exceptions.</span></div><div class=\"line\">\t  &#125; </div><div class=\"line\">\t&#125; </div><div class=\"line\"><span class=\"keyword\">@end</span> 更多的细节参见<span class=\"built_in\">NSOperationSample</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-5-2-响应取消事件\"><a href=\"#3-5-2-响应取消事件\" class=\"headerlink\" title=\"3.5.2 响应取消事件\"></a><a href=\"#4\">3.5.2 响应取消事件</a></h3><p>当一个操作开始执行的时候，它将持续执行任务直到结束或者任务被显式的取消掉，取消操作可能发生在任何时候，甚至是操作开始执行的时候，尽管NSOperation对象提供了一个方式供子类去使用，指出取消事件是完全必要的。如果一个操作完全结束了，那么也可以提供一个方式去清理之前分配的资源等等，所以，一个操作对象需要去检测是否已经取消了，然后就可以优雅的结束任务。 操作对象支持取消操作，你应该做的事情就是频繁的去检查是否任务已经被取消了，支持取消是非常重要的，对于你自定义的任务和系统给的那俩个子类操作对象来说，isCancel方法是非常轻量级的，可以频繁去访问而不会造成内存方面的空扰，当设计一个操作对象的时候，你可以在如下几个地方去访问iscancel 1、在你开始执行任务之前 2、在开启一个loop之前，或者是更加频繁的在每个循环之前 3、在你的每个可能导致任务退出的地方 下面的代码介绍了在main函数中如何去调用cancel，在这个例子中，iscancel在每次while loop前都会调用，使得任务可以快速的退出，且获取了一个定期的间隔。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)main &#123; </div><div class=\"line\"><span class=\"keyword\">@try</span> &#123; <span class=\"built_in\">BOOL</span> isDone = <span class=\"literal\">NO</span>; </div><div class=\"line\"><span class=\"keyword\">while</span> (![<span class=\"keyword\">self</span> isCancelled] &amp;&amp; !isDone) </div><div class=\"line\">&#123; <span class=\"comment\">// Do some work and set isDone to YES when finished &#125; &#125; </span></div><div class=\"line\"><span class=\"keyword\">@catch</span>(...) &#123; <span class=\"comment\">// Do not rethrow exceptions. &#125; &#125;</span></div></pre></td></tr></table></figure></p>\n<p>尽管上面的代码，并不包含清理数据的工作，但是你自己的代码还是要保证资源被及时的释放。</p>\n<h3 id=\"3-5-3-定义一个可并发执行的操作\"><a href=\"#3-5-3-定义一个可并发执行的操作\" class=\"headerlink\" title=\"3.5.3 定义一个可并发执行的操作\"></a><a href=\"#4\">3.5.3 定义一个可并发执行的操作</a></h3><p>一个操作对象默认情况是按照同步的方式去执行任务，也就是说他们执行任务的线程也就是start调用的线程。因为操作队列会对操作任务提供开启的线程，因此，大多数的任务就会异步运行，然而，如果你计划手动去执行一个任务，而且还希望这个任务异步的去运行，你必须得采取一些手段来保证能够这么干，你需要把你的操作对象定义为一个可并发执行的操作对象。下面列出来的函数就是你需要重写的并发操作。 start：（必须重写）所有的自定义并发操作必须重写这个函数，从而替换之前这个函数的默认实现。要手动的执行一个操作，你就可以调用start函数，因此从，你对该方法的实现就是自定义操作对象的开启任务的节点，也就是你要提交你的任务到线程中去执行的节点，你的实现在任何时候都不应该去调用super start。 main：（可选的）这个函数通常用来实现与操作对象相关的任务。虽然你可以把执行任务的任务放到start中去执行，利用mian方法去执行任务会对你的任务开始和清理工作有好处。 isExecuting：（必须的） isFinish：（必须） 并发操作非常有必要向使用它的客户报告配置环境和执行状态，因此一个并发操作必须得包含执行的状态信息包括何时开始执行任务，何时结束任务，如果要报告状态，那么必须使用这些方法。 当别的线程在同时调用上述方法的时候，你必须得保证这些方法是安全的。同时，你也必须得实现KVO通知，以报告这些状态。 isConcurrent：（必须）区分一个操作是否是并发操作，重写该方法，并返回YES 本小节的剩余部分将展示一个MyOperationClass的例子，这个类列举了实现一个并发操作的基本函数，MyOperation 类将在它自己开启的线程中执行任务，而正在的执行任务将与操作类是不相干的，下面例子将的几点，就是你在定义一个并发操作时需要提供的一些基础函数。 下面的代码显示了部分MyOperation的接口和实现函数，这些实现包括isConcurrent、isExecuting，isFinish，等函数。其中isConcurrent函数非常简单，只需要返回YES去指明本操作是一个并发操作就可以了，isExecuting 和 isFinished 也比较简单，返回在类中存储的成员变量的值就可以了。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyOperation</span> : <span class=\"title\">NSOperation</span> </span></div><div class=\"line\">&#123; </div><div class=\"line\">\t<span class=\"built_in\">BOOL</span> executing;</div><div class=\"line\">\t<span class=\"built_in\">BOOL</span> finished; </div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)completeOperation;</div><div class=\"line\"><span class=\"keyword\">@end</span> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyOperation</span> </span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init &#123;</div><div class=\"line\"> <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]; </div><div class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">  executing = <span class=\"literal\">NO</span>; </div><div class=\"line\">  finished = <span class=\"literal\">NO</span>;</div><div class=\"line\">   &#125; </div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>; </div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isConcurrent &#123; <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>; &#125; </div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isExecuting &#123; <span class=\"keyword\">return</span> executing; &#125; </div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isFinished &#123; <span class=\"keyword\">return</span> finished; &#125; </div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>下面的方法展示了MyOperation的 start函数，下面的实现是一个start函数，执行任务至少要实现的内容。在这种情况下，start函数简单的开启一个新的线程，然后让这个线程去调用main函数。这个函数同样要更新executing成员变量，而且要对isExecuting关键路径产生KVO通知，当这些工作完成之后，就会离开函数，并去到新的线程中去执行任务。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)start &#123; <span class=\"comment\">// Always check for cancellation before launching the task. </span></div><div class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> isCancelled]) &#123; <span class=\"comment\">// Must move the operation to the finished state if it is canceled. [self willChangeValueForKey:@\"isFinished\"]; </span></div><div class=\"line\">finished = <span class=\"literal\">YES</span>; </div><div class=\"line\">[<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isFinished\"</span>]; <span class=\"keyword\">return</span>; &#125;</div><div class=\"line\"><span class=\"comment\">// If the operation is not canceled, begin executing the task. </span></div><div class=\"line\">[<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@\"isExecuting\"</span>]; </div><div class=\"line\">[<span class=\"built_in\">NSThread</span> detachNewThreadSelector:<span class=\"keyword\">@selector</span>(main) toTarget:<span class=\"keyword\">self</span> withObject:<span class=\"literal\">nil</span>]; executing = <span class=\"literal\">YES</span>; [<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isExecuting\"</span>]; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面展示了MyOperation剩下的实现，在上面的代码已经知道 main函数将作为新的线程开启任务的节点，它将执行操作对象带来的任务，并且要执行completeOperation函数来说明任务已经结束，completeoperation函数将对isExecuting和isFinished关键路径发送KVO通知，来反应操作对象的状态已经改变。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)main &#123; </div><div class=\"line\">\t<span class=\"keyword\">@try</span> &#123; </div><div class=\"line\">\t\t<span class=\"comment\">// Do the main work of the operation here. </span></div><div class=\"line\">\t\t[<span class=\"keyword\">self</span> completeOperation]; </div><div class=\"line\">\t&#125; </div><div class=\"line\">\t<span class=\"keyword\">@catch</span>(...) &#123; </div><div class=\"line\">\t<span class=\"comment\">// Do not rethrow exceptions.</span></div><div class=\"line\">\t &#125;</div><div class=\"line\">&#125; </div><div class=\"line\">- (<span class=\"keyword\">void</span>)completeOperation &#123; </div><div class=\"line\">\t[<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@\"isFinished\"</span>]; </div><div class=\"line\">\t[<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@\"isExecuting\"</span>]; </div><div class=\"line\">\texecuting = <span class=\"literal\">NO</span>; </div><div class=\"line\">\tfinished = <span class=\"literal\">YES</span>; </div><div class=\"line\">\t[<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isExecuting\"</span>]; </div><div class=\"line\">\t[<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isFinished\"</span>]; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>尽管是操作对象被取消掉了，你也应该发送KVO通知，来通知你的任务已经完成，当一个操作对象的执行时依赖其他操作对象的时候，它将检测isFinished状态，只有当它依赖的所有isfinished状态都变为YES的时候，如果无法发送isFinshed通知将会阻止其他依赖他的操作对象的执行。</p>\n<h3 id=\"3-5-4-维护KVO的兼容\"><a href=\"#3-5-4-维护KVO的兼容\" class=\"headerlink\" title=\"3.5.4 维护KVO的兼容\"></a><a href=\"#4\">3.5.4 维护KVO的兼容</a></h3><p>NSOperation类是服从下列关键字的KVO isCanceled isConcurrent isExecuting isFinished isReady dependencies queuePriority completeBlock 如果你重写了start函数，和自定义了一些其他比较重要的函数，而不是单单重写main函数，你必须保证自定义的对象能够响应KVO，当重写start函数，其中你最需要关注的就是isExecuting和isFInished，这里有大量的方法会受到这俩个函数的影响。 如果你想实现支持依赖关系，以对其他一些操作对象的时候，你也可以重写isReady函数，并强制返回NO，直到你自定义的依赖关系满足。（如果你仍然想支持系统提供的依赖关系的时候，请保证调用super的函数）当你操作对象的isReady状态发生变化的时候，请发送KVO通知去报告这个状态，不过幸运的是，除非你去重写addDependency和removeDependency:，你并不需要担心KVO通知的发送。 虽然你可以发送其他关键字的KVO通知，但是通常你并不需要这么做，如果你想取消一个任务，你可以简单的调用cancel函数就好了。同样的，你也不需要去修改队列的优先级在操作对象上，最后，除非你的操作对象支持动态的修改isConcurrent，你也不需要发送KVO通知给isConcurrent关键路径。 如果要知道更多关于KVO的操作，请参见KVO编程指导。</p>\n<h2 id=\"3-6-自定义一个操作对象的执行行为\"><a href=\"#3-6-自定义一个操作对象的执行行为\" class=\"headerlink\" title=\"3.6 自定义一个操作对象的执行行为\"></a><a href=\"#3\">3.6 自定义一个操作对象的执行行为</a></h2><p>在添加一个操作对象到操作队列里面之前，需要将一个操作对象设置好，这些对操作对象设置的信息将会对所有的操作对象有效，不仅是自定义的操作对象，还包括系统定义的那俩个操作对象。</p>\n<h3 id=\"3-6-1-设置依赖关系\"><a href=\"#3-6-1-设置依赖关系\" class=\"headerlink\" title=\"3.6.1 设置依赖关系\"></a><a href=\"#4\">3.6.1 设置依赖关系</a></h3><p>依赖是一种限制操作对象执行顺序的一种手段，一个操作对象的执行，必须得在它依赖的所有对象执行完成之后才能进行。也就是说，你可以创建简单的一对一的或者是负责的依赖关系树。 在俩个操作对象之间创建依赖关系，你可以使用addDependency：方法，这个方法可以在你传的目标对象和自己之间创建一个依赖关系。也就是说在目标对象没有执行完成之前，你的这个对象是不会执行的。依赖还不仅仅限制在一个操作队列中，因为是操作对象管理依赖关系，所以在不同的操作队列之中，依赖也是可以起到作用的。但是有一种情况是不允许的，那就是设置依赖环，这是一种语法错误，会导致任务永远得不到执行。 当操作对象所依赖的所有操作对象都执行完成之后，操作对象就变成ready状态，准备执行。（如果是你自己定义的操作对象 ，并自定义了isReady函数，那么准备状态就和你设置的条件有关系了）如果一个操作对象是在操作队列中，那么isReady状态的操作对象在任何时候都可能被执行，如果你计划手动去执行一个操作对象的话，那么可以调用他的start方法。 重要:你应当在将操作对象提交到操作队列之前就去设置依赖关系，如果在之后去设置依赖，也许将不会阻止该任务的执行。 依赖基于的是操作对象间在任何时候都可能发生变化的KVO通知，如果你自定义了操作对象的话，你需要自己去发送KVO通知，以防出现依赖方面的问题。关于更多KVO的信息，参考维护KVO兼容，关于更多设置依赖的信息，参考NSOperation 类</p>\n<h3 id=\"3-6-2-改变操作对象的执行优先级\"><a href=\"#3-6-2-改变操作对象的执行优先级\" class=\"headerlink\" title=\"3.6.2 改变操作对象的执行优先级\"></a><a href=\"#4\">3.6.2 改变操作对象的执行优先级</a></h3><p>对于添加到队列中的操作对象，是否能够执行，首先是受操作对象的isReady状态控制，其次是他们的优先级，是否准备好执行，是由操作对象的依赖对象是否执行完来限制的，但是这个优先级是操作对象的一个属性值，默认情况下，所有新创建的操作对象都是普通优先级，但是你可以增加或者是减少操作对象的优先级，通过setQueuePriority方法 优先级只对同一个队列中的操作对象起作用，如果你的应用有多个操作队列，不同队列中的操作对象的优先级是相互独立的，也就是说，在不同队列里面，存在低优先级的操作比高优先级的操作先执行。 优先级并不是依赖的替代，优先级决定的是那些在队列中已经是准备状态的操作对象的执行顺序，举个例子，如果一个队列中同时有高优先级和低优先级的操作对象准备好了，那么操作队列先执行高优先级的操作对象，然而，如果高优先级的没有准备好，但是低优先级的准备好了，那么将先执行低优先级的，如果你想阻止一个操作任务在另外一个操作对象执行完之后再执行，你需要使用依赖关系去 做</p>\n<h3 id=\"3-6-3-改变依附线程的优先级\"><a href=\"#3-6-3-改变依附线程的优先级\" class=\"headerlink\" title=\"3.6.3 改变依附线程的优先级\"></a><a href=\"#4\">3.6.3 改变依附线程的优先级</a></h3><p>在OSX 10.6及以后，设置一个操作对象所在的线程的优先级成为可能，系统的线程策略是依靠内核去管理，但是高优先级的线程将获得更高的执行机会，对一个操作对象，你可以显式的指定它的线程优先级，通过设置一个浮点型的数值，0-1.0之前。0是优先级最低、1是优先级最高。如果不显式设置的话，系统默认的线程优先级是0.5. 要设置线程优先级的话，你需要在讲操作对象添加到操作队列之前，调用setThreadPriority函数。当它的执行时间到来的时候，默认的start函数就会设置你之前指定的线程优先级来修改优先级。这个优先级只在你执行的main函数执行过程用有效。所有的其他代码包括你的完成回调，仍然是运行在默认的优先级下的。如果你自定义了一个并发的操作，那么你需要重写start函数，并手动去修改线程的优先级。</p>\n<h3 id=\"3-6-4-设置一个完成后的回调block\"><a href=\"#3-6-4-设置一个完成后的回调block\" class=\"headerlink\" title=\"3.6.4 设置一个完成后的回调block\"></a><a href=\"#4\">3.6.4 设置一个完成后的回调block</a></h3><p>在OSX 10.6及以后，一个操作对象可以在它的所有任务执行完成之后去执行一个完成的block，你可以用这个完成的block执行任何与main函数执行的任务里面不相关的的block。举个例子，你可能需要告诉客户这个操作对象的任务都执行完成了，一个并发的操作对象可能会使用这个block去执行它最后的KVO通知 要设置一个完成block，你可以使用setCompleteBlock：函数，这个函数不需要传任何参数，也没有返回值。</p>\n<h2 id=\"3-7-关于实现一个操作对象的一些Tips\"><a href=\"#3-7-关于实现一个操作对象的一些Tips\" class=\"headerlink\" title=\"3.7 关于实现一个操作对象的一些Tips\"></a><a href=\"#3\">3.7 关于实现一个操作对象的一些Tips</a></h2><p>尽管一个操作对象可能非常容易去实现，但是有一些事情在你自定义的操作对象上还是要注意一下，下面的小段描述了这么几个方面。</p>\n<h3 id=\"3-7-1-管理操作对象的内存\"><a href=\"#3-7-1-管理操作对象的内存\" class=\"headerlink\" title=\"3.7.1 管理操作对象的内存\"></a><a href=\"#4\">3.7.1 管理操作对象的内存</a></h3><p>下面的小段，描述了几个在操作对象中管理内存的关键元素，关于更多的OC的内存管理，参见内存管理开发指导。</p>\n<h4 id=\"3-7-1-1-避免依靠线程存储数据\"><a href=\"#3-7-1-1-避免依靠线程存储数据\" class=\"headerlink\" title=\"3.7.1.1 避免依靠线程存储数据\"></a><a href=\"#5\">3.7.1.1 避免依靠线程存储数据</a></h4><p>尽管大多是的操作都是在一个线程中执行的，在同步操作对象中，这个线程通常是由操作队列分配给它的，如果一个操作队列将线程分配给操作对象，那么你需要知道这个线程它是属于操作队列的，你不应该和你的操作对象有任何瓜葛，尤其是，你不应该有任何数据相关的在这个线程中，而这些数据并不是你创建和管理的数据，因为线程的生存和死亡是有操作队列或者系统来控制的，因此在线程间数据传递通过线程来传递将是不可靠，也是容易失败的。 在操作队列上，没有任何的理由可以使用线程存储数据，当你初始化一个操作对象，你应该提供给它所有执行任务需要的数据去做这件事，因此，操作对象要提供所有数据，所有来的、去的数据都应该存在操作对象上，知道任务结束或者应用不在需要它。</p>\n<h4 id=\"3-7-1-2-如果需要的话保持操作对象的引用\"><a href=\"#3-7-1-2-如果需要的话保持操作对象的引用\" class=\"headerlink\" title=\"3.7.1.2 如果需要的话保持操作对象的引用\"></a><a href=\"#5\">3.7.1.2 如果需要的话保持操作对象的引用</a></h4><p>因为操作对象是异步运行的，你不应该认为你可以创建或者忘记他们，它们也只是对象而已，也需要你去管理他们，尤其是你需要在它完成之后获取数据的情况下。 你需要保持对操作对象的引用，主要还有可能你再没有机会获取这个操作对象的引用的机会了，操作对象是执行很快的，在很多情况下，操作任务一旦添加到操作队列中，就会被执行，当你的代码获取到从操作队列中拿到的操作对象的时候，很可能，这个操作对象已经结束了，并从操作队列移除了，释放了。</p>\n<h3 id=\"3-7-2-处理错误和异常\"><a href=\"#3-7-2-处理错误和异常\" class=\"headerlink\" title=\"3.7.2 处理错误和异常\"></a><a href=\"#4\">3.7.2 处理错误和异常</a></h3><p>由于操作对象在你的应用里面是完全独立的实例，因此有必要去处理那些异常和错误，在OSX 10.6及以后，默认的start的函数不在提供捕获异常。你自己的代码需要去直接的捕获和处理异常，如果需要也要检测错误代码并通知给应用程序，如果你替换了start函数，那么你的代码需要在程序离开底层线程之前就去处理这些异常。 你可能处理的错误可能有一下几种情况 检测UNIX errno 类型的错误 检测显式的由代码返回的错误 捕获来自你自己的代码和系统框架带来的异常 当一个操作对象没有准备好，start方法就开始执行的时候 当一个操作已经在执行或者执行完成了，或取消了，start函数被再次调用的。 当添加一个block任务，但是它已经被执行或者完成的。 当你准备从NSInvocationOperation对象获取数据，但是它已经被取消的情况。 如果你自定义的代码遇到异常或者错误，你需要提供操作步骤给你的应用去处理，Operation对象不会显式的把错误代码或者异常传递给你应用的其他地方，因此，如果对于应用程序是比较重要的信息，你需要提供相关必要的代码去处理这些错误。</p>\n<h2 id=\"3-8-决定操作对象合适的数量，不要太多，也不要太少\"><a href=\"#3-8-决定操作对象合适的数量，不要太多，也不要太少\" class=\"headerlink\" title=\"3.8 决定操作对象合适的数量，不要太多，也不要太少\"></a><a href=\"#3\">3.8 决定操作对象合适的数量，不要太多，也不要太少</a></h2><p>虽然可以给一个操作队列中，添加大量的操作对象，但是这么做，往往并不太好，像其他对象一样，创建NSOperation对象也是需要消耗内存，并且他们的执行也是需要开销的。如果你的每个任务都是很小的，而你又创建了成千上万个，你会发现你会消耗更多的时间在分发操作对象上，而不是在执行真正的任务，而如果你的设备已经内存不足时，你会发现成千上万的任务会严重影响程序的性能。 高效的应用操作对象的关键在于，在充分利用设备和执行一定数量的操作任务之间找到平衡点，尝试去找到你的设备执行任务的一个真正的数量值。举个例子，如果你的应用创建了100个操作对象去处理100个不同的值，那么你可以考虑使用10个操作对象，去处理10个值去代替。 同时，你也需要避免一次性的给操作队列中添加大量的任务，也要避免不停的给操作队列以比它处理速度更快的添加更多的任务，相比于一次泛哄式的添加任务，不如批量式的去添加，然后利用完成block回调去执行下一批次的任务。这样可以避免内存过多的消耗。 当然，创建操作对象的数量、以及没个操作对象需要执行的任务量，是由你的程序动态去管理的。你应该是用性能测试工具，例如Instruments去找到性能处理和速度的平衡点，关于Instruments 和其他性能工具的更多信息，参见性能。</p>\n<h2 id=\"3-9-操作对象的执行\"><a href=\"#3-9-操作对象的执行\" class=\"headerlink\" title=\"3.9 操作对象的执行\"></a><a href=\"#3\">3.9 操作对象的执行</a></h2><p>最后，你的应用需要执行这些操作对象以真正的处理任务，在这一小节，你将学到就像你熟练的执行你的操作一样，去执行这些操作。</p>\n<h3 id=\"3-9-1-添加操作对象到操作队列中\"><a href=\"#3-9-1-添加操作对象到操作队列中\" class=\"headerlink\" title=\"3.9.1 添加操作对象到操作队列中\"></a><a href=\"#4\">3.9.1 添加操作对象到操作队列中</a></h3><p>到目前为止，最容易的执行操作的方式是使用操作队列，即NSOperationQueue类的实例，你的应用有责任去创建和维护这些操作队列。一个应用程序可以有任意数量的操作队列，但是实际上在同一时间有多少个操作会被执行还是有限制的，被系统调用的操作队列会根据可利用的CPU和系统的载入量来进行限制单位时间执行的操作对象，因此，创建更多的操作队列并不意味着可以执行更多的操作对象 就想创建其他的对象一样，在你的应用中创建操作队列<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSOperationQueue</span>* aQueue = [[<span class=\"built_in\">NSOperationQueue</span> alloc] init];</div></pre></td></tr></table></figure></p>\n<p>添加一个操作对象到操作队列中，你可以使用addOperation方法，在OSX 10.6以后，你还可以添加操作对象组，通过<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">addOperations：waitUntilFinished：</div></pre></td></tr></table></figure></p>\n<p>方法，你也可以直接添加blocl对像到操作队列中（而不需要与一个操作对象关联），通过<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">addOperationWithBlock：</div></pre></td></tr></table></figure></p>\n<p>方法，上面的这些方法，队列都会入一个操作对象并通知队列去执行他们，在大多数情况下，操作对象将会被很快执行，但是有时候，操作队列也可能延迟执行操作对象，大概有这么几个原因，最普遍的就是，操作对象间可能有依赖关系，还有可能是操作队列自己可能被挂起，或者是操作队列执行操作任务的数量达到了上限。下面的代码展示了最基础的添加操作到操作队列的语法<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[aQueue addOperation:anOp]; <span class=\"comment\">// Add a single operation </span></div><div class=\"line\">[aQueue addOperations:anArrayOfOps waitUntilFinished:<span class=\"literal\">NO</span>]; <span class=\"comment\">// Add multiple operations </span></div><div class=\"line\">[aQueue addOperationWithBlock:^&#123; <span class=\"comment\">/* Do something. */</span></div><div class=\"line\"> &#125;];</div></pre></td></tr></table></figure></p>\n<p> 重要 千万不要在一个操作对象进入操作队列之后再去修改它，因为当操作在操作队列中等待执行的时候，它可能在任何时候去执行任务，改变它的依赖和数据，可能会起到坏的作用。如果你想知道一个操作对象的状态，请使用操作对象的属性 去获取。</p>\n<h3 id=\"3-9-2-手动执行操作对象\"><a href=\"#3-9-2-手动执行操作对象\" class=\"headerlink\" title=\"3.9.2 手动执行操作对象\"></a><a href=\"#4\">3.9.2 手动执行操作对象</a></h3><p>尽管操作队列对于运行操作对象已经很方便了，但是还是有一种可能不使用操作队列去执行一个操作对象，如果你选择手动去执行操作对象，那么有一些注意事项，最主要的是，操作对象必须得是ready，而且你需要用start函数去启动它。 一个操作对象如果不是ready状态的话不应该去执行，isReady函数被Operation对象的依赖关系封装到了上层，只有当它的依赖关系都清除的时候，一个操作才能够被执行、 当执行一个操作对象，应该去使用start函数去做。用这个函数而不是用main，是因为start函数会在执行之前执行一个安全检查，尤其是，默认的start函数还会产生KVO通知，以保证依赖关系能够正确进行，这个函数同时也避免当你的操作对象被取消的时候，再去执行，以及当操作对象没有准备好的时候就去调用导致的异常抛出 。 如果你的程序定义了并发的操作对象，你同时需要在启动任务之前考虑isConcurrent。当这个方法返回NO的时候，你就可以考虑是在当前线程中同步的执行还是创建一个新的子线程。然而，这些方法的检测完全取决于你。 下面展示了一个比较简单的，手动开启并发操作对象的一个例子。如果这个函数返回NO，你可以启动一个timer，在之后再去调用它。然后直到它返回YES之后，取消掉Timer。因为这种情况可能在操作对象被取消的时候发生。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)performOperation:(<span class=\"built_in\">NSOperation</span>*)anOp &#123; </div><div class=\"line\">\t<span class=\"built_in\">BOOL</span> ranIt = <span class=\"literal\">NO</span>; </div><div class=\"line\">\t<span class=\"keyword\">if</span> ([anOp isReady] &amp;&amp; ![anOp isCancelled]) &#123; </div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (![anOp isConcurrent]) </div><div class=\"line\">\t\t[anOp start]; </div><div class=\"line\">\t\t<span class=\"keyword\">else</span> [<span class=\"built_in\">NSThread</span> detachNewThreadSelector:<span class=\"keyword\">@selector</span>(start) toTarget:anOp withObject:<span class=\"literal\">nil</span>]; </div><div class=\"line\">\t\tranIt = <span class=\"literal\">YES</span>; </div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([anOp isCancelled])&#123; </div><div class=\"line\">\t\t<span class=\"comment\">// If it was canceled before it was started, // move the operation to the finished state. </span></div><div class=\"line\">\t \t[<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@\"isFinished\"</span>]; </div><div class=\"line\">\t \t[<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@\"isExecuting\"</span>];</div><div class=\"line\">\t  \texecuting = <span class=\"literal\">NO</span>; </div><div class=\"line\">\t  \tfinished = <span class=\"literal\">YES</span>; </div><div class=\"line\">\t  \t[<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isExecuting\"</span>]; </div><div class=\"line\">\t  \t[<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isFinished\"</span>]; </div><div class=\"line\">\t  \t<span class=\"comment\">// Set ranIt to YES to prevent the operation from </span></div><div class=\"line\">\t  \t<span class=\"comment\">// being passed to this method again in the future. </span></div><div class=\"line\">\t  \tranIt = <span class=\"literal\">YES</span>; </div><div class=\"line\">\t&#125; <span class=\"keyword\">return</span> ranIt; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-9-3-取消操作对象\"><a href=\"#3-9-3-取消操作对象\" class=\"headerlink\" title=\"3.9.3 取消操作对象\"></a><a href=\"#4\">3.9.3 取消操作对象</a></h3><p>当将操作对象添加到操作队列里面的时候，一个操作对象的管理就交给了操作队列，也不能被移除了，唯一使操作对象出列的方法就是调用它的cancel函数，你也可以取消所有的操作对象，通过调用操作队列的cancelAllOperations 你可以在确保你不在需要操作对象的时候取消掉它。发出一个cancel命令，会将操作对象的关键路径变为canceled状态，这将阻止任务继续执行，由于canceled的操作对象也认为是完成的，那么依赖它的操作对象就可以移除依赖关系。然而，更多情况下，更常用的是取消所有操作独享，在某些重要的时候，比如应用退出、或者用户发出了取消指令，这比一个个取消要好很多。</p>\n<h3 id=\"3-9-4-等待操作对象的完成\"><a href=\"#3-9-4-等待操作对象的完成\" class=\"headerlink\" title=\"3.9.4 等待操作对象的完成\"></a><a href=\"#4\">3.9.4 等待操作对象的完成</a></h3><p>为了获取最佳的性能，你应该尽可能的让操作对象并发执行，让系统去干更多的事情，在你执行操作对象任务的时候，如果创建一个操作对象的时候，同时希望获得了操作对象的结果，你可以使用waitUntilFinished：方法来阻塞代码继续执行，直到这个操作对象执行完成。通常来讲，这是最好的方式去避免你能帮到它的时候，阻塞当前线程也许是一个比较好的解决方法。但这也带来了更多的同步性，而限制了整体的可并发性。 你绝不允许在主线程中调用这个方法，你最好在子线程或者其他的线程操作中这么做，阻塞主线程将会降低程序的可响应性。 除了等待一个任务完成，你可以等待一个操作队列所有的任务执行完成，通过调用waitUntilAllOperationsAreFinished，当你等待一个操作队列任务完成的时候，避免在别的线程中添加任务给它，以防延长等待时间。</p>\n<h3 id=\"3-9-5-挂起和恢复操作队列\"><a href=\"#3-9-5-挂起和恢复操作队列\" class=\"headerlink\" title=\"3.9.5 挂起和恢复操作队列\"></a><a href=\"#4\">3.9.5 挂起和恢复操作队列</a></h3><p>如果你想中途终止一个操作队列的话，你可以挂起相应的操作队列，使用setSuspended方法，挂起一个操作队列并不会导致正在执行的操作任务终止。它只是会阻止别的操作对象（操作队列中的）不去执行，你可能会在用户想暂停任务的时候挂起所有操作，因为用户还期望在某个时候恢复这些任务。</p>\n","excerpt":"<p><a href=\"#1\">并发编程指南</a></p>","more":"<p><img src=\"http://ock9zbzms.bkt.clouddn.com/translationconcurrency.png\" alt=\"\"></p>\n<h1 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a><a href=\"#1\">并发</a></h1><h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1 概述\"></a><a href=\"#2\">1 概述</a></h2><h3 id=\"1-1-并发的概念\"><a href=\"#1-1-并发的概念\" class=\"headerlink\" title=\"1.1 并发的概念\"></a><a href=\"#3\">1.1 并发的概念</a></h3><p>并发其实指的是多项任务在同一时间进行，随着多核CPU的普及以及发现任务只在某一核上不停的增加，软件开发者需要一种方式充分的利用多核系统。虽然诸如IOS、MacOS兼容多项程序同时执行，但是大多数的程序运行在后台，并且执行任务只需要很短的CPU时间。这是因为前台应用同时获取了用户的关注并且是设备处于忙的状态。如果一个程序有很多的任务需要处理，但是又只获得了很少的碎片CPU时间，那些额外的处理资源将被浪费。 在过去，在应用中引入并发要求创建一个或者多个额外的线程，遗憾的是，编写线程代码是一项非常有挑战性的事情，线程是一种‘低级’的工具，并且需要手动去管理，获取多少个线程是最优的，动态取决于当前的系统以及底层硬件的支持。实现一个完美的线程解决方案，变的极其困难或者说不可能实现。另外，采取添加线程的方式实现同步的机制，不仅给软件开发带来了复杂性和风险性，而且也并不能确保提升性能。 OSX和iOS采取了一种比传统的基于线程的系统和程序，更加异步的方式去执行并发任务。并不是直接去创建线程，应用需要做的是定义一些特殊的任务，然后让系统去执行它们，让操作系统去管理线程，程序获得了原生线程更强的伸缩性，而程序开发者也获得了更加简单更加高效的编程模型。 本文档就是描述这项技术和技艺，你应该使用这项技术来实现并发。这项技术同时使用于iOS和OSX。</p>\n<h2 id=\"1-2-文档的组织\"><a href=\"#1-2-文档的组织\" class=\"headerlink\" title=\"1.2 文档的组织\"></a><a href=\"#3\">1.2 文档的组织</a></h2><p>本文档包括以下章节<br>1、并发和程序设计——介绍异步程序设计的一些基本概念和异步的执行自定义任务的技术<br>2、操作队列——展示怎样用OC去组装和执行一个任务<br>3、分发队列——展示怎样在基于C的应用程序中去并发地执行任务<br>4、资源分发——展示如何异步的处理系统事件<br>5、从线程变成用迁移到新的技术——提供一些技术帮助从旧的线程变成迁移到新的变成技术 本文当同时也包括一些相关章节的专业术语的定义</p>\n<h2 id=\"1-3-一些专业名词\"><a href=\"#1-3-一些专业名词\" class=\"headerlink\" title=\"1.3 一些专业名词\"></a><a href=\"#3\">1.3 一些专业名词</a></h2><p>在开始讨论并发之前，非常有必要去定义一些相关的专业名词来避免混淆，一些开发UNIX或者早先开发OSX的程序员，可能会对任务，队列处理、线程有一些新的任务，本文档对这几个概念有如下定义<br>1、在本文中，线程专指一个分离的支线去执行一段代码，而在老的OSX中特指基于POSIX的API 2、在本文中，执行专指可执行的任务正在执行中，可能包裹着多个线程。<br>3、在本文中，任务专指一个需要被执行的抽象工作 关于完整的类似这些概念的定义，参见词汇定义</p>\n<h2 id=\"1-4-其他\"><a href=\"#1-4-其他\" class=\"headerlink\" title=\"1.4 其他\"></a><a href=\"#3\">1.4 其他</a></h2><p>本文档专注于如何在你的程序中实现并发编程，而不包括如何使用线程，如果你需要更多的有关线程开发的只是，请去参考线程编程指导</p>\n<h1 id=\"2-并发及程序设计\"><a href=\"#2-并发及程序设计\" class=\"headerlink\" title=\"2 并发及程序设计\"></a><a href=\"#2\">2 并发及程序设计</a></h1><h2 id=\"2-1-并发编程和程序设计\"><a href=\"#2-1-并发编程和程序设计\" class=\"headerlink\" title=\"2.1 并发编程和程序设计\"></a><a href=\"#3\">2.1 并发编程和程序设计</a></h2><p>在以前的计算机运行的时候，计算机单位时间最大执行数量的任务取决于CPU的时钟速度，但是随着技术的发展和中央处理器设计的更加紧凑，热量和物理因素开始限制中央处理器的最大时钟速度，所以，主板供应商也在寻找其他的方式去提升他们主板的总体性能，他们发现的解决方案是增加主板上的处理器个数，通过增加处理器个数，一个主板可以在单位时间内执行更多的任务，而并不需要去增加CPU的时钟速度，或是改变主板的大小或考虑热量参数，现在剩下的唯一问题就是如何去充分的利用这些多核。 为了利用这些多核，计算机需要程序设计者能够去同时执行多项任务，在当代，多核操作系统，如OSX或者IOS，可能有几百或者更多的程序在同时运行，所以根据时序安排程序在不同的中央处理器上变得成为可能，然而，大多数的时候，这些程序要么是系统守护进程，要么是那些消费很小处理时间的后台应用程序，取而代之的是，真正需要多核开发的是，独立的前台运行的程序更高效的获取更多核心。 传统的使应用获取多核的方式是创建多线程，然而，随着多核的增加，线程方案有一些问题，最大的问题是线程开发的方式对多核系统不具备很好的伸缩性，你不能仅靠创建更多的行程就能确保程序和处理器运行良好，你需要知道的是，如何高效的利用这些中央处理器。对于程序来讲，如何计算它自身是一件有挑战的事情，尽管你可以正确的管理这些线程，程序去管理这些线程也依然是一项挑战，去确保他们高效运行、确保他们不被别的线程干扰。 所以，总结这些问题，程序需要一种方式去充分应用多核，单个程序可伸缩的执行大量工作，而且这个解决方案需要足够简单，去面对单个处理器任务的任务增长，好消息是，苹果已经提供了解决方案对处理所有这些问题，本章节先睹为快，去看看这项技术的组成以及牛逼的设计，你可以使你的代码从中获益。</p>\n<h2 id=\"2-2-从线程开发中走出来\"><a href=\"#2-2-从线程开发中走出来\" class=\"headerlink\" title=\"2.2 从线程开发中走出来\"></a><a href=\"#3\">2.2 从线程开发中走出来</a></h2><p>尽管线程开发已经应用了多年，而且它们在某些地方还将有用武之地，但是它们并没有可伸缩的解决多核场景，如果你使用线程开发，那么创建一个可伸缩的解决方案的麻烦就落在你肩上了，开发者，你需要去动态的根据系统的多核个数去决定创建多少个线程，此外，你的应用将花费很多消耗在创建和管理这些线程本身的消耗上。 取代线程开发，OSX和IOS使用异步设计的方式解决并发问题，异步方法已经在操作系统中提供了很多年，而且一般都是应用在创建很耗时的任务上，如从磁盘读取文件。当调用的时候，一个异步任务开始在后台执行，并立即返回在任务执行完之前。通常，这项任务会调用一个后台线程，开始这项任务在该后台线程上，然后在任务完成的时候发送一个消息给调用者（通常使用回调的方式）。在过去，如果没有一个你需要的异步方法，你需要自己去写一个异步方法还需要创建自己的线程，但是现在，OSX和iOS提供技术，你可以不用自己去管理线程就可以异步执行任务。 一种开启异步任务的技术叫 GCD，一项将过去需要在你程序中自己写管理线程代码移交给系统去管理。所有你需要做的事情仅仅是创建任务，然后将任务提交给合适的系统的GCD队列。GCD去创建和管理这些线程，因为这些线程已经提交给系统去管理，GCD提供全套的任务管理和执行，比传统的线程管理更加高效。 操作队列是非常类似于分发队列的一种OC对象管理方式，你可以定义你想执行的任务，然后把他们扔到操作队列中，当执行这些安排好的任务时，类似于GCD，操作队列为你执行所有的管理。确保在系统长执行的高效且迅速。 下面的段落提供了更多的信息关于操作队列、分发队列、以及一些你可能在异步编程中用到的技术</p>\n<h3 id=\"2-2-1-分发队列\"><a href=\"#2-2-1-分发队列\" class=\"headerlink\" title=\"2.2.1 分发队列\"></a><a href=\"#4\">2.2.1 分发队列</a></h3><p>分发队列是一套C的机制，为可执行自定义任务。分发队列要么是串行的要么是并行的，但是通常都是按照FIFO的方式去调度任务，一个串行的队列，一次只能运行一个任务，只有等前一个任务完成之后，下个任务才能开启。作为对比，并行的队列可以同时开启尽可能多的任务而并不需要前面的任务执行完毕。 分发队列有下面几个好处 </p>\n<pre><code>1、提供了简单的直观的编程接口 \n2、提供了自动的和完全的线程池管理 \n3、任务执行速度提升 \n4、更多的内存方面的优化 \n5、他们不会增加内核的负载 \n6、不会导致队列死锁 \n7、伸缩性强（对多核系统来讲） \n8、串行队列提供了比过去线程同步更为优秀的一种选择 \n</code></pre><p>你提供给分发队列的任务必须是封装好的一个方法或者是一个Block对象，Block是一种具有C语言特性的，开始引进与OSX 10.6,IOS 4.0的一个新特性。但是相比C语言有一些别的好处。不同于在Block的语法区域定义Block对象，你通常在别的方法或者是函数中去定义，这样可以去捕获到别的方法或者函数中的变量，Block同样可以移动到他们的作用区域以外，拷贝到堆上，这通常发生在你将任务添加到一个分发队列上的时候，所有这些语法特性，使得通过添加少量代码就可以获得非常好的实现。 分发队列是GCD技术的一部分，也是C运行时的一部分，要想获取更多的有关分发队列相关的信息，请参见 分发队列，要获取更多关于Block的信息和他们的好处，参见Block 程序编程观点。</p>\n<h3 id=\"2-2-2-分发资源\"><a href=\"#2-2-2-分发资源\" class=\"headerlink\" title=\"2.2.2 分发资源\"></a><a href=\"#4\">2.2.2 分发资源</a></h3><p>分发资源是异步的处理系统分发资源的一种C语言机制，分发资源封装了一个特殊类型的系统事件，并将这个特殊的系统事件提交给一个特殊的Block对象，或者函数，当系统事件发生的时候，你可以使用分发资源去监测如下特殊系统事件 定时器 信号事件 描述符相关事件 进程相关事件 端口匹配相关事件 自定义的事件，并由你来触发 分发资源也是GCD技术的一部分，要获取更多有关分发资源相关的信息，参见分发资源</p>\n<h3 id=\"2-2-3-操作队列\"><a href=\"#2-2-3-操作队列\" class=\"headerlink\" title=\"2.2.3 操作队列\"></a><a href=\"#4\">2.2.3 操作队列</a></h3><p>操作队列是cocoa环境的一种并发队列，由NSOperationQueueClass 实现，操作队列总是按照FIFO的方式去执行任务，操作队列考虑其他因素去影响执行队列的顺序，在这些因素中，优先考虑一个任务的执行是否是依赖于其他任务，你可以给自己的任务设置依赖关系，然后创建一个复杂的执行顺序图。 任务添加到操作队列中的，必须是NSOperation的子类，一个操作对象是一个OC类型的封装了你要执行的数据和任务的对象，由于NSOperation是一个抽象基类，所以你通常需要去自定义子类去执行你的任务，然而，Foundation Framework已经提供了一些相关的子类，你可以使用它们去执行任务。 操作的对象产生KVO通知，这个是非常有用的，当监视你的任务进度的时候，虽然任务执行通常是并发的，但是可以利用依赖是的任务有序。 关于更多操作队列的信息，参见操作队列</p>\n<h2 id=\"2-3-异步编程技术\"><a href=\"#2-3-异步编程技术\" class=\"headerlink\" title=\"2.3 异步编程技术\"></a><a href=\"#3\">2.3 异步编程技术</a></h2><p>在你开始考虑重新用并发编程的方式重新设计程序的时候，你最好先问下自己这么做是否必要，并发可以提高你代码的可响应性，去确保主线程能相应更多的用户事件，它同样可以提高你代码的性能，通过促进多核去执行更多的任务，但是它也同时带来了上层复杂性，从而使你的代码更加难调试。 由于它带来了复杂性，并发并不是一个在你程序开周期中考虑的特性，当把它嫁接到应用中。做对这件事需要你好好考虑你程序执行的任务以及向这些任务提交的数据结构。如果做错的话，你可能发现你的代码运行缓慢，甚至还不如从前，因此，在你开始程序设计的时候，你就应该考虑你要实现的目标和通过何种方式来达到它。 每个应用都包含有不同的要求和不同的任务需要它去执行，这不可能靠一个文档就告诉你，怎么去设计你的程序和管理任务，然而，下面几段可以给你提供一些指导，帮助你去在程序设计的时候做出好的选择。</p>\n<h3 id=\"2-3-1-明确程序期望的表现\"><a href=\"#2-3-1-明确程序期望的表现\" class=\"headerlink\" title=\"2.3.1 明确程序期望的表现\"></a><a href=\"#4\">2.3.1 明确程序期望的表现</a></h3><p>在你决定是否要将并发引导到应用中的时候，你应当开始思考你的应用程序想要达到的一个什么表现。明白了应用要达到的表现之后，会给你是否使用并发提供一个参考。同样的，也会给你一些引入并发之后程序能获取的性能收益方面的启发。 首先、你需要列举应用程序所要执行的任务和数据结构之间的关系。开始，你可能通过点击一个菜单或者一个按钮开启一个任务并执行，这些任务可能是一些离散的任务，并有明确的开始和结束点。你还需要列举出应用程序可能执行的其他类型的任务，而不仅仅是用户行为相关的，比如说基于时间的一些任务 在你有了自己任务列表之后，开始把任务进行更加的分组集合，确保这些任务能够成功执行。在这个层面，你优先考虑的是那些数据或对象修改如何对应用状态进行修改的。你同样需要考虑不同任务之间的相互依赖关系，例如：如果一个任务牵涉到一个数组中所有对象的修改，对于其中一个数据的修改，会对其他数据产生任何影响。如果一个数据的修改，独立于其他的数据，那么这个时候你可以考虑使用并发去做提升性能，创建多个任务去做。</p>\n<h3 id=\"2-3-2-单位工作的可执行因子\"><a href=\"#2-3-2-单位工作的可执行因子\" class=\"headerlink\" title=\"2.3.2 单位工作的可执行因子\"></a><a href=\"#4\">2.3.2 单位工作的可执行因子</a></h3><p>在明白你程序执行的任务类型之后，你应该明白在什么地方去使用并发会有好处了。如果在一个任务中改变一个或者多个的顺序，会影响到执行结果。你应该还是需要考虑到使用串行的方式去执行这些任务，如果改变执行顺序之后，并不会影响到执行结果，你可以考虑将这些任务用并发的方式去做，在这俩种情形下，你定义可执行的单位工作，并让它们执行，这些工作单元，就成为你封装好的Block对象或者操作对象或者分发队列。 对于每个单独的可执行任务，并不需要过多的担心任务执行的数量，在最后，分到线程中总是会有开销，但是分发队列或者操作队列相比传统的线程开发还是有很多优势的，因此，执行一些单元工作使用操作队列还是要比直接操作线程要好很多，当然，你常常应该确保任务执行的性能和你开启的任务恰好如你所需，但是，任务并不是越小就越好。</p>\n<h3 id=\"2-3-3-区分你需要什么队列\"><a href=\"#2-3-3-区分你需要什么队列\" class=\"headerlink\" title=\"2.3.3 区分你需要什么队列\"></a><a href=\"#4\">2.3.3 区分你需要什么队列</a></h3><p>此时，你的任务已经切割为一些可执行的单元，并且封装成了Block对象或者是操作对象，你需要去定义你要执行的队列以执行这些任务。对一个任务来讲，测试这些Block或者是操作任务，能够在队列中执行正确。 如果你使用Block去实现你的任务,你可以添加任务到串行或者并行的队列里，如果对顺序有要求的话，你只能添加到一个串行队列中，如果没有要求，根据你的要求，你可以添加的并行队列中，或者添加到多个队列中去。 如果你是用操作队列去执行任务，那么选择的队列并不对添加到里面的任务的配置感兴趣，如果要串行去执行任务，那么你需要给相关的任务设置依赖关系，依赖会阻止任务开始执行，直到它依赖的任务执行完成。</p>\n<h3 id=\"2-3-4-提升执行效率的贴士\"><a href=\"#2-3-4-提升执行效率的贴士\" class=\"headerlink\" title=\"2.3.4 提升执行效率的贴士\"></a><a href=\"#4\">2.3.4 提升执行效率的贴士</a></h3><p>在把任务分割为更小的任务并将他们添加到队列中后，这里还有一些使用队列提升程序性能的小Tips 如果内存考虑是一个因素的话，那么在任务里面直接计算。如果你的应用已经内存警告了，那么在任务中直接计算会比从内存中加载要快一些。运用在寄存器或者是该核上的内存计算，会比从主内存加载要快一些。当然，你也可以通过测试来选择哪种方案会好一些。 将串行的任务，可能的话改变为并发。如果一个任务由于共享资源必须串行去执行，可以考虑将共享资源移除使得可以并发执行，可以考虑把这些资源给每个客户都拷贝一份。 避免使用锁，操作队列和分发队列的支持在大多数情况下并不需要锁。做为取代，可以使用一个串行的队列或者使用依赖去保证顺序正确。 如果可能的话依赖系统框架，最好的方式去实现并发就是使用系统提供的框架，许多框架使用线程或者其他技术来实现并发，当定义你的任务的时候，看看系统框架中是否已经有方法或者函数能够实现并发，使用系统接口会提升你的效率，而且帮你做到更多的并发可能性。</p>\n<h2 id=\"2-4-性能相关\"><a href=\"#2-4-性能相关\" class=\"headerlink\" title=\"2.4 性能相关\"></a><a href=\"#3\">2.4 性能相关</a></h2><p>操作队列、分发队列、资源分发提供了一种执行并发更加容易的方式。但是这些技术并不保证提升程序的性能和可响应性。具体来讲，根据你的需要同时兼顾性能提升和不要影响到其他资源仍然是你自己需要衡量的一件事。举个例子来讲，尽管你创建了10000个任务并把他们都提交到操作队列中，这么干的话，肯定会导致你的程序分配潜在的大量内存，这个会导致增加调度和减少性能。 引入并发到你的程序中前–是使用队列还是线程，你需要根据程序当前的性能来设置一个参考的标准。在引入并发之后，也同样需要做个列表对性能方面的改变进行比较，来确保程序是真的性能提升了，如果引入并发并不能给性能带来大的提升，你应该考虑其他的性能工具来检测潜在的原因。 关于性能的介绍和可用的性能工具，参见性能概览。</p>\n<h2 id=\"2-5-并发和其他技术\"><a href=\"#2-5-并发和其他技术\" class=\"headerlink\" title=\"2.5 并发和其他技术\"></a><a href=\"#3\">2.5 并发和其他技术</a></h2><p>将你的代码分解为模块任务是一种最好的提升应用并发的方式，但是这种设计方式并不是对每个应用每个情况都很适合，取决于你执行的任务，也可能存在其他的选择来提升程序的整体并发，下面的俩小节提供了其他的并发技术供你参考</p>\n<h3 id=\"2-5-1-OpenGL和并发\"><a href=\"#2-5-1-OpenGL和并发\" class=\"headerlink\" title=\"2.5.1 OpenGL和并发\"></a><a href=\"#4\">2.5.1 OpenGL和并发</a></h3><p>在OSX中，OpenGC技术是图形计算方便最基础和核心的技术，OpenGL是非常棒的计算大数据集合的一种技术，举个例子来讲，你可能使用OpenGL技术来给图片做像素级别的滤镜，或者用它来计算复杂的数学计算。换而言之，OpenGL可以用来计算大量数据集合是并行的。 尽管OpenGL在大量数据并行执行方面有着非常好的性能优势，但是它并不合适执行自定义的计算，在任务提交给GPU处理之前，有大量的准备工做，而且要将数据和其他必要的核心操作转换图形卡片。同样的，要想获取OpenGL的产生结果也需要偶很多其他的努力。因此，所有跟系统交互相关的任务不建议提交给OpenGL去执行，举个例子，你不应该用OpenGL去运算从文件中或者网络流中拿到的数据，取而代之的是，你要用OpenGL执行的任务，必然是自己已经持有的这样相对来讲传递给GPU运算更加独立。 更多关于OpenGL的只是，参见OpenGL开发指导。</p>\n<h3 id=\"2-5-2-何时使用线程\"><a href=\"#2-5-2-何时使用线程\" class=\"headerlink\" title=\"2.5.2 何时使用线程\"></a><a href=\"#4\">2.5.2 何时使用线程</a></h3><p>尽管操作队列和分发队列是执行并发任务的更优选择，但是它们不是万能的，取决于你的应用程序，这里仍然后一些情况是需要创建线程去开发的，如果你创建了自定义的线程，那么你要确保尽量少的开启线程，并且确保这些线程只执行特定的任务，而不去干别的事情。 线程仍然是一种较好的解决方案，当执行实时任务的时候，分发队列会确保尽快的去执行他们的任务，但是并不能实时的去开线程去做。如果你需要可预测的后台代码执行，那么线程仍是一种选择。 作为线程编程，你还是需要去使用线程，当必须和完全必要的时候，关于更多线程方面的知识，参见线程开发指导。</p>\n<h1 id=\"3-操作队列\"><a href=\"#3-操作队列\" class=\"headerlink\" title=\"3 操作队列\"></a><a href=\"#2\">3 操作队列</a></h1><p>cocoa的操作都是原生的对象封装的可执行异步任务。这些操作同时可提交给操作队列去执行，也可以直接自己执行。由于是基于OC的框架，那么操作可应用在IOS和OSX中。本章节将介绍如何去使用和定义操作。</p>\n<h2 id=\"3-1-关于操作对象\"><a href=\"#3-1-关于操作对象\" class=\"headerlink\" title=\"3.1 关于操作对象\"></a><a href=\"#3\">3.1 关于操作对象</a></h2><p>一个操作对象是一个NSOperation类的实例，你可以用它来封装你要执行的任务。NSOperation类本身是一个抽象基类。所以要想执行可用的任务，必须得使用它的子类。尽管是一个抽象类，它还是提供了一些有用的基本操作，而省去了你在自己定义的子类中去做的麻烦。此外，Foundation 框架还提供了俩个具体的子类，可以用它们来执行你的任务，下表列出了这俩个类，还有如何使用它们的介绍。 NSInvocationOperation ：这是一个基于你的类和要执行的Seletor的类，你可以在已经定义过这个任务的地方去调用它，然后执行异步操作。由于它并不要强制你去做继承，所以可以使用该类去实现一个更加动态的风格。 NSBlockOperation：这是一个执行block封装任务的操作类，因为它可以执行多个block。block任务执行任务使用了组的语法，当所有的相关的block执行完之后，这个block操作才被任务是执行完成 NSOperation：这是定义其他操作任务的基类，继承它给你自定义操作类带来了完成的并发控制以及实现。包含可以完全控制任务的执行能力和执行状态。 所有上述的操作对象都包含以下核心的特性 支持建立图形化的任务间相互依赖，这些依赖将会阻止任务开始，直到它依赖的任务完成之后。 支持可选的完成回调block。指的是当所有的执行任务结束之后的回调方法。 支持检测任务执行状态（使用KVO） 支持对操作顺序进行调整，并影响他们的执行顺序。 支持取消语义，也即允许你半路对任务执行终止操作。 操作对象是设计来帮助你提升程序的并发水平，操作也是一种不错的组织和包装你的应用为几个独立的分支的一种手段，作为取代提交一些任务给主线程的开发方式，可以将任务分割为一个或多个不同的操作，然后提交给队列，使相关的工作可以在一个或多个线程中去并发的执行。</p>\n<h2 id=\"3-2-同时VS非同时操作\"><a href=\"#3-2-同时VS非同时操作\" class=\"headerlink\" title=\"3.2 同时VS非同时操作\"></a><a href=\"#3\">3.2 同时VS非同时操作</a></h2><p>尽管，你通常将任务添加到操作队列中，但是做这个并不是必须的。你也可以直接调用它的start方法去开始一个操作。但是执行这个操作，并不能保证你的操作同步的运行在你当前代码所在的线程中。那么NSOperation类的这个isConcurrent方法会告知你，当前运行的操作是同步还是异步的在你调用Start方法的线程中，默认情况下这个方法会返回NO，也就是说这个操作是在当前调用的线程中同步去执行的。 如果你想去实现一个异步执行的操作，也就是调度任务的线程和任务执行的线程是异步的。你需要写额外的代码去异步的开启它。举个例子，你可以创建一个独立的线程，调用一个系统的异步方法，去执行其他的事情以保证start函数的调用时异步去执行。 大多数的开发并不需要去实现一个并发操作对象，如果你总是将你的操作去添加到一个操作队列中，你并不需要实现这些并发操作，当你添加一个操作对象到操作队列中的时候，操作队列自己就会创建一个线程去执行你的操作，因此，将一个并不是异步的任务添加到操作队列中去，结果还是会以异步的方式去执行代码，去定义一个异步任务这种费力不讨好的工作，也只是你就是想创建异步执行任务，而不是将它添加到队列中去的时候才有必要。 关于更多有关异步任务的信息，参见设置任务去异步执行。</p>\n<h2 id=\"3-3-创建一个NSInocationOperation对象\"><a href=\"#3-3-创建一个NSInocationOperation对象\" class=\"headerlink\" title=\"3.3 创建一个NSInocationOperation对象\"></a><a href=\"#3\">3.3 创建一个NSInocationOperation对象</a></h2><p>NSInvocationOperation是NSOperation的具体子类，当它运行的时候，会执行它的selector里面，指派给它的任务。使用该类时，应该避免将大量的自定义的操作给每个任务。尤其是当你需要改变一个已经存在的应用程序和这些对象已经存在任务，还有很多必备要执行的任务时。你可以使用它来改变依赖环境的时候。举个例子，你可以使用一个Invocation对象来执行一个选择器，这个选择器是基于获取用户的输入信息动态的选择。 创建一个Invocation操作的步骤是很简单的，你可以创建并实例化一个该对象，然后传递需要的对象和selector去执行指定的代码，下面提供了俩个方法去举例说明这个操作步骤，taskWithData：方法创建一个操作对象，然后通过另外一个方法去执行任务。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyCustomClass</span> </span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSOperation</span>*)taskWithData:(<span class=\"keyword\">id</span>)data &#123; </div><div class=\"line\">\t<span class=\"built_in\">NSInvocationOperation</span>* theOp = [[<span class=\"built_in\">NSInvocationOperation</span> alloc] initWithTarget:<span class=\"keyword\">self</span> </div><div class=\"line\">\tselector:<span class=\"keyword\">@selector</span>(myTaskMethod:) </div><div class=\"line\">\tobject:data]; </div><div class=\"line\"><span class=\"keyword\">return</span> theOp;</div><div class=\"line\"> &#125; <span class=\"comment\">// This is the method that does the actual work of the task. </span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)myTaskMethod:(<span class=\"keyword\">id</span>)data &#123; <span class=\"comment\">// Perform the task. &#125; </span></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-4-创建一个NSBlockOperation对象\"><a href=\"#3-4-创建一个NSBlockOperation对象\" class=\"headerlink\" title=\"3.4 创建一个NSBlockOperation对象\"></a><a href=\"#3\">3.4 创建一个NSBlockOperation对象</a></h2><p>NSBlockOperation是NSOperation的具体子类，作为一个或者多个Block对象的封装器，这个类提供了对象层面的封装，而且它已经使用了操作分发队列，所以并不需要创建分发队列，但是你也可以使用其他的诸如操作任务的依赖、KVO通知或者其他特性，而这些特性是分发队列所没有的。 当你创建一个block操作的时候，在创建他的时候，你至少已经添加了一个block，你也可以在之后再添加更多的block进去。当执行NSBlockOperation对象的时间来临的时候，该对象会将它的所有block都提交给默认优先级的异步分发队列，然后这个对象等待它的block全部执行完，之后会把自己标记为isfinish。因此，你可以使用一个Block操作去监听一组任务的完成，非常像用一个线程去管理多个线程的结果。而不同之处在于block操作自己运行在一个分离的线程，而你的程序可以干其他的活儿，在这个block等待它的任务执行完成之前。 下面的代码介绍了如何去创建一个BlockOperation，这个Block没带参数且没有返回什么有意义的结果 NSBlockOperation* theOp = [NSBlockOperation blockOperationWithBlock: ^{ NSLog(@”Beginning operation.\\n”); // Do some work. }]; 当创建一个block操作之后，你可以添加更多的block给它，通过 addExecutionBlock：方法，如果你想让添加的任务线性去执行，那么你必须直接将它提交给指定的串行队列中去。</p>\n<h2 id=\"3-5-定义一个自定义的操作\"><a href=\"#3-5-定义一个自定义的操作\" class=\"headerlink\" title=\"3.5 定义一个自定义的操作\"></a><a href=\"#3\">3.5 定义一个自定义的操作</a></h2><p>如果一个Block操作对象或者Invocation操作对象没法完全满足你的需求的时候，你可以考虑自己定义个继承自NSOperation的操作对象，NSOperation对象提供了一系列的继承点给所有的操作对象，这个类已经实现了大量的基础的函数或方法，满足那些依赖或者KVO的操作，然而，还是有一些地方需要你自己的自定义实现确保你的操作对象能够正确的执行，具体的工作量的大小取决于你要自定义的是一个同步操作对象还是异步操作对象。 定义个同步操作对象要比定义一个异步操作对象简单的多，对于一个同步操作对象来讲，所有你要做的工作就是实现main执行函数和响应取消操作事件。父类已经帮你做了所有其他该做的工作，而对于一个异步操作对象来将，你需要替换一些父类已经做过的工作，在你自己定义的操作对象上。下面的俩小节将介绍如何去实现这俩种不同的操作对象。</p>\n<h3 id=\"3-5-1-执行main任务\"><a href=\"#3-5-1-执行main任务\" class=\"headerlink\" title=\"3.5.1 执行main任务\"></a><a href=\"#4\">3.5.1 执行main任务</a></h3><p>至少一个操作对象需要实现下面的函数 一个自定义的初始化函数 main 你需要自定义个初始化函数去初始化一个操作对象，以及一个自定义的main函数去执行任务，你也可以根据需要执行其他的函数，如下所示 自定义函数供你的main函数去调用 属性方法去访问数据 实现NSCoding协议去固化一个操作对象 下面的模板，展示了一个自定义的操作对象，下面的代码并不展示如何去实现取消方法，但是也实现了你通常要实现的方法，具体怎么取消任务，参见取消任务介绍，下面的初始化函数初始化了一个对象，携带一个数据参数并把它存到了类内部方便以后访问，main函数将会显式的去操作这个对象，在你的应用将结果返回给你之前。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyNonConcurrentOperation</span> : <span class=\"title\">NSOperation</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">id</span> (<span class=\"keyword\">strong</span>) myData; </div><div class=\"line\">-(<span class=\"keyword\">id</span>)initWithData:(<span class=\"keyword\">id</span>)data;</div><div class=\"line\"><span class=\"keyword\">@end</span> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyNonConcurrentOperation</span> </span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithData:(<span class=\"keyword\">id</span>)data &#123; </div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]) </div><div class=\"line\">\tmyData = data;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">self</span>; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)main &#123; </div><div class=\"line\">\t<span class=\"keyword\">@try</span> &#123;</div><div class=\"line\">\t <span class=\"comment\">// Do some work on myData and report the results. </span></div><div class=\"line\">\t&#125; </div><div class=\"line\">\t<span class=\"keyword\">@catch</span>(...)</div><div class=\"line\">\t &#123;</div><div class=\"line\">\t  <span class=\"comment\">// Do not rethrow exceptions.</span></div><div class=\"line\">\t  &#125; </div><div class=\"line\">\t&#125; </div><div class=\"line\"><span class=\"keyword\">@end</span> 更多的细节参见<span class=\"built_in\">NSOperationSample</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-5-2-响应取消事件\"><a href=\"#3-5-2-响应取消事件\" class=\"headerlink\" title=\"3.5.2 响应取消事件\"></a><a href=\"#4\">3.5.2 响应取消事件</a></h3><p>当一个操作开始执行的时候，它将持续执行任务直到结束或者任务被显式的取消掉，取消操作可能发生在任何时候，甚至是操作开始执行的时候，尽管NSOperation对象提供了一个方式供子类去使用，指出取消事件是完全必要的。如果一个操作完全结束了，那么也可以提供一个方式去清理之前分配的资源等等，所以，一个操作对象需要去检测是否已经取消了，然后就可以优雅的结束任务。 操作对象支持取消操作，你应该做的事情就是频繁的去检查是否任务已经被取消了，支持取消是非常重要的，对于你自定义的任务和系统给的那俩个子类操作对象来说，isCancel方法是非常轻量级的，可以频繁去访问而不会造成内存方面的空扰，当设计一个操作对象的时候，你可以在如下几个地方去访问iscancel 1、在你开始执行任务之前 2、在开启一个loop之前，或者是更加频繁的在每个循环之前 3、在你的每个可能导致任务退出的地方 下面的代码介绍了在main函数中如何去调用cancel，在这个例子中，iscancel在每次while loop前都会调用，使得任务可以快速的退出，且获取了一个定期的间隔。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)main &#123; </div><div class=\"line\"><span class=\"keyword\">@try</span> &#123; <span class=\"built_in\">BOOL</span> isDone = <span class=\"literal\">NO</span>; </div><div class=\"line\"><span class=\"keyword\">while</span> (![<span class=\"keyword\">self</span> isCancelled] &amp;&amp; !isDone) </div><div class=\"line\">&#123; <span class=\"comment\">// Do some work and set isDone to YES when finished &#125; &#125; </span></div><div class=\"line\"><span class=\"keyword\">@catch</span>(...) &#123; <span class=\"comment\">// Do not rethrow exceptions. &#125; &#125;</span></div></pre></td></tr></table></figure></p>\n<p>尽管上面的代码，并不包含清理数据的工作，但是你自己的代码还是要保证资源被及时的释放。</p>\n<h3 id=\"3-5-3-定义一个可并发执行的操作\"><a href=\"#3-5-3-定义一个可并发执行的操作\" class=\"headerlink\" title=\"3.5.3 定义一个可并发执行的操作\"></a><a href=\"#4\">3.5.3 定义一个可并发执行的操作</a></h3><p>一个操作对象默认情况是按照同步的方式去执行任务，也就是说他们执行任务的线程也就是start调用的线程。因为操作队列会对操作任务提供开启的线程，因此，大多数的任务就会异步运行，然而，如果你计划手动去执行一个任务，而且还希望这个任务异步的去运行，你必须得采取一些手段来保证能够这么干，你需要把你的操作对象定义为一个可并发执行的操作对象。下面列出来的函数就是你需要重写的并发操作。 start：（必须重写）所有的自定义并发操作必须重写这个函数，从而替换之前这个函数的默认实现。要手动的执行一个操作，你就可以调用start函数，因此从，你对该方法的实现就是自定义操作对象的开启任务的节点，也就是你要提交你的任务到线程中去执行的节点，你的实现在任何时候都不应该去调用super start。 main：（可选的）这个函数通常用来实现与操作对象相关的任务。虽然你可以把执行任务的任务放到start中去执行，利用mian方法去执行任务会对你的任务开始和清理工作有好处。 isExecuting：（必须的） isFinish：（必须） 并发操作非常有必要向使用它的客户报告配置环境和执行状态，因此一个并发操作必须得包含执行的状态信息包括何时开始执行任务，何时结束任务，如果要报告状态，那么必须使用这些方法。 当别的线程在同时调用上述方法的时候，你必须得保证这些方法是安全的。同时，你也必须得实现KVO通知，以报告这些状态。 isConcurrent：（必须）区分一个操作是否是并发操作，重写该方法，并返回YES 本小节的剩余部分将展示一个MyOperationClass的例子，这个类列举了实现一个并发操作的基本函数，MyOperation 类将在它自己开启的线程中执行任务，而正在的执行任务将与操作类是不相干的，下面例子将的几点，就是你在定义一个并发操作时需要提供的一些基础函数。 下面的代码显示了部分MyOperation的接口和实现函数，这些实现包括isConcurrent、isExecuting，isFinish，等函数。其中isConcurrent函数非常简单，只需要返回YES去指明本操作是一个并发操作就可以了，isExecuting 和 isFinished 也比较简单，返回在类中存储的成员变量的值就可以了。 </p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyOperation</span> : <span class=\"title\">NSOperation</span> </span></div><div class=\"line\">&#123; </div><div class=\"line\">\t<span class=\"built_in\">BOOL</span> executing;</div><div class=\"line\">\t<span class=\"built_in\">BOOL</span> finished; </div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)completeOperation;</div><div class=\"line\"><span class=\"keyword\">@end</span> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyOperation</span> </span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init &#123;</div><div class=\"line\"> <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]; </div><div class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">  executing = <span class=\"literal\">NO</span>; </div><div class=\"line\">  finished = <span class=\"literal\">NO</span>;</div><div class=\"line\">   &#125; </div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>; </div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isConcurrent &#123; <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>; &#125; </div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isExecuting &#123; <span class=\"keyword\">return</span> executing; &#125; </div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isFinished &#123; <span class=\"keyword\">return</span> finished; &#125; </div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>下面的方法展示了MyOperation的 start函数，下面的实现是一个start函数，执行任务至少要实现的内容。在这种情况下，start函数简单的开启一个新的线程，然后让这个线程去调用main函数。这个函数同样要更新executing成员变量，而且要对isExecuting关键路径产生KVO通知，当这些工作完成之后，就会离开函数，并去到新的线程中去执行任务。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)start &#123; <span class=\"comment\">// Always check for cancellation before launching the task. </span></div><div class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> isCancelled]) &#123; <span class=\"comment\">// Must move the operation to the finished state if it is canceled. [self willChangeValueForKey:@\"isFinished\"]; </span></div><div class=\"line\">finished = <span class=\"literal\">YES</span>; </div><div class=\"line\">[<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isFinished\"</span>]; <span class=\"keyword\">return</span>; &#125;</div><div class=\"line\"><span class=\"comment\">// If the operation is not canceled, begin executing the task. </span></div><div class=\"line\">[<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@\"isExecuting\"</span>]; </div><div class=\"line\">[<span class=\"built_in\">NSThread</span> detachNewThreadSelector:<span class=\"keyword\">@selector</span>(main) toTarget:<span class=\"keyword\">self</span> withObject:<span class=\"literal\">nil</span>]; executing = <span class=\"literal\">YES</span>; [<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isExecuting\"</span>]; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面展示了MyOperation剩下的实现，在上面的代码已经知道 main函数将作为新的线程开启任务的节点，它将执行操作对象带来的任务，并且要执行completeOperation函数来说明任务已经结束，completeoperation函数将对isExecuting和isFinished关键路径发送KVO通知，来反应操作对象的状态已经改变。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)main &#123; </div><div class=\"line\">\t<span class=\"keyword\">@try</span> &#123; </div><div class=\"line\">\t\t<span class=\"comment\">// Do the main work of the operation here. </span></div><div class=\"line\">\t\t[<span class=\"keyword\">self</span> completeOperation]; </div><div class=\"line\">\t&#125; </div><div class=\"line\">\t<span class=\"keyword\">@catch</span>(...) &#123; </div><div class=\"line\">\t<span class=\"comment\">// Do not rethrow exceptions.</span></div><div class=\"line\">\t &#125;</div><div class=\"line\">&#125; </div><div class=\"line\">- (<span class=\"keyword\">void</span>)completeOperation &#123; </div><div class=\"line\">\t[<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@\"isFinished\"</span>]; </div><div class=\"line\">\t[<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@\"isExecuting\"</span>]; </div><div class=\"line\">\texecuting = <span class=\"literal\">NO</span>; </div><div class=\"line\">\tfinished = <span class=\"literal\">YES</span>; </div><div class=\"line\">\t[<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isExecuting\"</span>]; </div><div class=\"line\">\t[<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isFinished\"</span>]; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>尽管是操作对象被取消掉了，你也应该发送KVO通知，来通知你的任务已经完成，当一个操作对象的执行时依赖其他操作对象的时候，它将检测isFinished状态，只有当它依赖的所有isfinished状态都变为YES的时候，如果无法发送isFinshed通知将会阻止其他依赖他的操作对象的执行。</p>\n<h3 id=\"3-5-4-维护KVO的兼容\"><a href=\"#3-5-4-维护KVO的兼容\" class=\"headerlink\" title=\"3.5.4 维护KVO的兼容\"></a><a href=\"#4\">3.5.4 维护KVO的兼容</a></h3><p>NSOperation类是服从下列关键字的KVO isCanceled isConcurrent isExecuting isFinished isReady dependencies queuePriority completeBlock 如果你重写了start函数，和自定义了一些其他比较重要的函数，而不是单单重写main函数，你必须保证自定义的对象能够响应KVO，当重写start函数，其中你最需要关注的就是isExecuting和isFInished，这里有大量的方法会受到这俩个函数的影响。 如果你想实现支持依赖关系，以对其他一些操作对象的时候，你也可以重写isReady函数，并强制返回NO，直到你自定义的依赖关系满足。（如果你仍然想支持系统提供的依赖关系的时候，请保证调用super的函数）当你操作对象的isReady状态发生变化的时候，请发送KVO通知去报告这个状态，不过幸运的是，除非你去重写addDependency和removeDependency:，你并不需要担心KVO通知的发送。 虽然你可以发送其他关键字的KVO通知，但是通常你并不需要这么做，如果你想取消一个任务，你可以简单的调用cancel函数就好了。同样的，你也不需要去修改队列的优先级在操作对象上，最后，除非你的操作对象支持动态的修改isConcurrent，你也不需要发送KVO通知给isConcurrent关键路径。 如果要知道更多关于KVO的操作，请参见KVO编程指导。</p>\n<h2 id=\"3-6-自定义一个操作对象的执行行为\"><a href=\"#3-6-自定义一个操作对象的执行行为\" class=\"headerlink\" title=\"3.6 自定义一个操作对象的执行行为\"></a><a href=\"#3\">3.6 自定义一个操作对象的执行行为</a></h2><p>在添加一个操作对象到操作队列里面之前，需要将一个操作对象设置好，这些对操作对象设置的信息将会对所有的操作对象有效，不仅是自定义的操作对象，还包括系统定义的那俩个操作对象。</p>\n<h3 id=\"3-6-1-设置依赖关系\"><a href=\"#3-6-1-设置依赖关系\" class=\"headerlink\" title=\"3.6.1 设置依赖关系\"></a><a href=\"#4\">3.6.1 设置依赖关系</a></h3><p>依赖是一种限制操作对象执行顺序的一种手段，一个操作对象的执行，必须得在它依赖的所有对象执行完成之后才能进行。也就是说，你可以创建简单的一对一的或者是负责的依赖关系树。 在俩个操作对象之间创建依赖关系，你可以使用addDependency：方法，这个方法可以在你传的目标对象和自己之间创建一个依赖关系。也就是说在目标对象没有执行完成之前，你的这个对象是不会执行的。依赖还不仅仅限制在一个操作队列中，因为是操作对象管理依赖关系，所以在不同的操作队列之中，依赖也是可以起到作用的。但是有一种情况是不允许的，那就是设置依赖环，这是一种语法错误，会导致任务永远得不到执行。 当操作对象所依赖的所有操作对象都执行完成之后，操作对象就变成ready状态，准备执行。（如果是你自己定义的操作对象 ，并自定义了isReady函数，那么准备状态就和你设置的条件有关系了）如果一个操作对象是在操作队列中，那么isReady状态的操作对象在任何时候都可能被执行，如果你计划手动去执行一个操作对象的话，那么可以调用他的start方法。 重要:你应当在将操作对象提交到操作队列之前就去设置依赖关系，如果在之后去设置依赖，也许将不会阻止该任务的执行。 依赖基于的是操作对象间在任何时候都可能发生变化的KVO通知，如果你自定义了操作对象的话，你需要自己去发送KVO通知，以防出现依赖方面的问题。关于更多KVO的信息，参考维护KVO兼容，关于更多设置依赖的信息，参考NSOperation 类</p>\n<h3 id=\"3-6-2-改变操作对象的执行优先级\"><a href=\"#3-6-2-改变操作对象的执行优先级\" class=\"headerlink\" title=\"3.6.2 改变操作对象的执行优先级\"></a><a href=\"#4\">3.6.2 改变操作对象的执行优先级</a></h3><p>对于添加到队列中的操作对象，是否能够执行，首先是受操作对象的isReady状态控制，其次是他们的优先级，是否准备好执行，是由操作对象的依赖对象是否执行完来限制的，但是这个优先级是操作对象的一个属性值，默认情况下，所有新创建的操作对象都是普通优先级，但是你可以增加或者是减少操作对象的优先级，通过setQueuePriority方法 优先级只对同一个队列中的操作对象起作用，如果你的应用有多个操作队列，不同队列中的操作对象的优先级是相互独立的，也就是说，在不同队列里面，存在低优先级的操作比高优先级的操作先执行。 优先级并不是依赖的替代，优先级决定的是那些在队列中已经是准备状态的操作对象的执行顺序，举个例子，如果一个队列中同时有高优先级和低优先级的操作对象准备好了，那么操作队列先执行高优先级的操作对象，然而，如果高优先级的没有准备好，但是低优先级的准备好了，那么将先执行低优先级的，如果你想阻止一个操作任务在另外一个操作对象执行完之后再执行，你需要使用依赖关系去 做</p>\n<h3 id=\"3-6-3-改变依附线程的优先级\"><a href=\"#3-6-3-改变依附线程的优先级\" class=\"headerlink\" title=\"3.6.3 改变依附线程的优先级\"></a><a href=\"#4\">3.6.3 改变依附线程的优先级</a></h3><p>在OSX 10.6及以后，设置一个操作对象所在的线程的优先级成为可能，系统的线程策略是依靠内核去管理，但是高优先级的线程将获得更高的执行机会，对一个操作对象，你可以显式的指定它的线程优先级，通过设置一个浮点型的数值，0-1.0之前。0是优先级最低、1是优先级最高。如果不显式设置的话，系统默认的线程优先级是0.5. 要设置线程优先级的话，你需要在讲操作对象添加到操作队列之前，调用setThreadPriority函数。当它的执行时间到来的时候，默认的start函数就会设置你之前指定的线程优先级来修改优先级。这个优先级只在你执行的main函数执行过程用有效。所有的其他代码包括你的完成回调，仍然是运行在默认的优先级下的。如果你自定义了一个并发的操作，那么你需要重写start函数，并手动去修改线程的优先级。</p>\n<h3 id=\"3-6-4-设置一个完成后的回调block\"><a href=\"#3-6-4-设置一个完成后的回调block\" class=\"headerlink\" title=\"3.6.4 设置一个完成后的回调block\"></a><a href=\"#4\">3.6.4 设置一个完成后的回调block</a></h3><p>在OSX 10.6及以后，一个操作对象可以在它的所有任务执行完成之后去执行一个完成的block，你可以用这个完成的block执行任何与main函数执行的任务里面不相关的的block。举个例子，你可能需要告诉客户这个操作对象的任务都执行完成了，一个并发的操作对象可能会使用这个block去执行它最后的KVO通知 要设置一个完成block，你可以使用setCompleteBlock：函数，这个函数不需要传任何参数，也没有返回值。</p>\n<h2 id=\"3-7-关于实现一个操作对象的一些Tips\"><a href=\"#3-7-关于实现一个操作对象的一些Tips\" class=\"headerlink\" title=\"3.7 关于实现一个操作对象的一些Tips\"></a><a href=\"#3\">3.7 关于实现一个操作对象的一些Tips</a></h2><p>尽管一个操作对象可能非常容易去实现，但是有一些事情在你自定义的操作对象上还是要注意一下，下面的小段描述了这么几个方面。</p>\n<h3 id=\"3-7-1-管理操作对象的内存\"><a href=\"#3-7-1-管理操作对象的内存\" class=\"headerlink\" title=\"3.7.1 管理操作对象的内存\"></a><a href=\"#4\">3.7.1 管理操作对象的内存</a></h3><p>下面的小段，描述了几个在操作对象中管理内存的关键元素，关于更多的OC的内存管理，参见内存管理开发指导。</p>\n<h4 id=\"3-7-1-1-避免依靠线程存储数据\"><a href=\"#3-7-1-1-避免依靠线程存储数据\" class=\"headerlink\" title=\"3.7.1.1 避免依靠线程存储数据\"></a><a href=\"#5\">3.7.1.1 避免依靠线程存储数据</a></h4><p>尽管大多是的操作都是在一个线程中执行的，在同步操作对象中，这个线程通常是由操作队列分配给它的，如果一个操作队列将线程分配给操作对象，那么你需要知道这个线程它是属于操作队列的，你不应该和你的操作对象有任何瓜葛，尤其是，你不应该有任何数据相关的在这个线程中，而这些数据并不是你创建和管理的数据，因为线程的生存和死亡是有操作队列或者系统来控制的，因此在线程间数据传递通过线程来传递将是不可靠，也是容易失败的。 在操作队列上，没有任何的理由可以使用线程存储数据，当你初始化一个操作对象，你应该提供给它所有执行任务需要的数据去做这件事，因此，操作对象要提供所有数据，所有来的、去的数据都应该存在操作对象上，知道任务结束或者应用不在需要它。</p>\n<h4 id=\"3-7-1-2-如果需要的话保持操作对象的引用\"><a href=\"#3-7-1-2-如果需要的话保持操作对象的引用\" class=\"headerlink\" title=\"3.7.1.2 如果需要的话保持操作对象的引用\"></a><a href=\"#5\">3.7.1.2 如果需要的话保持操作对象的引用</a></h4><p>因为操作对象是异步运行的，你不应该认为你可以创建或者忘记他们，它们也只是对象而已，也需要你去管理他们，尤其是你需要在它完成之后获取数据的情况下。 你需要保持对操作对象的引用，主要还有可能你再没有机会获取这个操作对象的引用的机会了，操作对象是执行很快的，在很多情况下，操作任务一旦添加到操作队列中，就会被执行，当你的代码获取到从操作队列中拿到的操作对象的时候，很可能，这个操作对象已经结束了，并从操作队列移除了，释放了。</p>\n<h3 id=\"3-7-2-处理错误和异常\"><a href=\"#3-7-2-处理错误和异常\" class=\"headerlink\" title=\"3.7.2 处理错误和异常\"></a><a href=\"#4\">3.7.2 处理错误和异常</a></h3><p>由于操作对象在你的应用里面是完全独立的实例，因此有必要去处理那些异常和错误，在OSX 10.6及以后，默认的start的函数不在提供捕获异常。你自己的代码需要去直接的捕获和处理异常，如果需要也要检测错误代码并通知给应用程序，如果你替换了start函数，那么你的代码需要在程序离开底层线程之前就去处理这些异常。 你可能处理的错误可能有一下几种情况 检测UNIX errno 类型的错误 检测显式的由代码返回的错误 捕获来自你自己的代码和系统框架带来的异常 当一个操作对象没有准备好，start方法就开始执行的时候 当一个操作已经在执行或者执行完成了，或取消了，start函数被再次调用的。 当添加一个block任务，但是它已经被执行或者完成的。 当你准备从NSInvocationOperation对象获取数据，但是它已经被取消的情况。 如果你自定义的代码遇到异常或者错误，你需要提供操作步骤给你的应用去处理，Operation对象不会显式的把错误代码或者异常传递给你应用的其他地方，因此，如果对于应用程序是比较重要的信息，你需要提供相关必要的代码去处理这些错误。</p>\n<h2 id=\"3-8-决定操作对象合适的数量，不要太多，也不要太少\"><a href=\"#3-8-决定操作对象合适的数量，不要太多，也不要太少\" class=\"headerlink\" title=\"3.8 决定操作对象合适的数量，不要太多，也不要太少\"></a><a href=\"#3\">3.8 决定操作对象合适的数量，不要太多，也不要太少</a></h2><p>虽然可以给一个操作队列中，添加大量的操作对象，但是这么做，往往并不太好，像其他对象一样，创建NSOperation对象也是需要消耗内存，并且他们的执行也是需要开销的。如果你的每个任务都是很小的，而你又创建了成千上万个，你会发现你会消耗更多的时间在分发操作对象上，而不是在执行真正的任务，而如果你的设备已经内存不足时，你会发现成千上万的任务会严重影响程序的性能。 高效的应用操作对象的关键在于，在充分利用设备和执行一定数量的操作任务之间找到平衡点，尝试去找到你的设备执行任务的一个真正的数量值。举个例子，如果你的应用创建了100个操作对象去处理100个不同的值，那么你可以考虑使用10个操作对象，去处理10个值去代替。 同时，你也需要避免一次性的给操作队列中添加大量的任务，也要避免不停的给操作队列以比它处理速度更快的添加更多的任务，相比于一次泛哄式的添加任务，不如批量式的去添加，然后利用完成block回调去执行下一批次的任务。这样可以避免内存过多的消耗。 当然，创建操作对象的数量、以及没个操作对象需要执行的任务量，是由你的程序动态去管理的。你应该是用性能测试工具，例如Instruments去找到性能处理和速度的平衡点，关于Instruments 和其他性能工具的更多信息，参见性能。</p>\n<h2 id=\"3-9-操作对象的执行\"><a href=\"#3-9-操作对象的执行\" class=\"headerlink\" title=\"3.9 操作对象的执行\"></a><a href=\"#3\">3.9 操作对象的执行</a></h2><p>最后，你的应用需要执行这些操作对象以真正的处理任务，在这一小节，你将学到就像你熟练的执行你的操作一样，去执行这些操作。</p>\n<h3 id=\"3-9-1-添加操作对象到操作队列中\"><a href=\"#3-9-1-添加操作对象到操作队列中\" class=\"headerlink\" title=\"3.9.1 添加操作对象到操作队列中\"></a><a href=\"#4\">3.9.1 添加操作对象到操作队列中</a></h3><p>到目前为止，最容易的执行操作的方式是使用操作队列，即NSOperationQueue类的实例，你的应用有责任去创建和维护这些操作队列。一个应用程序可以有任意数量的操作队列，但是实际上在同一时间有多少个操作会被执行还是有限制的，被系统调用的操作队列会根据可利用的CPU和系统的载入量来进行限制单位时间执行的操作对象，因此，创建更多的操作队列并不意味着可以执行更多的操作对象 就想创建其他的对象一样，在你的应用中创建操作队列<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSOperationQueue</span>* aQueue = [[<span class=\"built_in\">NSOperationQueue</span> alloc] init];</div></pre></td></tr></table></figure></p>\n<p>添加一个操作对象到操作队列中，你可以使用addOperation方法，在OSX 10.6以后，你还可以添加操作对象组，通过<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">addOperations：waitUntilFinished：</div></pre></td></tr></table></figure></p>\n<p>方法，你也可以直接添加blocl对像到操作队列中（而不需要与一个操作对象关联），通过<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">addOperationWithBlock：</div></pre></td></tr></table></figure></p>\n<p>方法，上面的这些方法，队列都会入一个操作对象并通知队列去执行他们，在大多数情况下，操作对象将会被很快执行，但是有时候，操作队列也可能延迟执行操作对象，大概有这么几个原因，最普遍的就是，操作对象间可能有依赖关系，还有可能是操作队列自己可能被挂起，或者是操作队列执行操作任务的数量达到了上限。下面的代码展示了最基础的添加操作到操作队列的语法<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[aQueue addOperation:anOp]; <span class=\"comment\">// Add a single operation </span></div><div class=\"line\">[aQueue addOperations:anArrayOfOps waitUntilFinished:<span class=\"literal\">NO</span>]; <span class=\"comment\">// Add multiple operations </span></div><div class=\"line\">[aQueue addOperationWithBlock:^&#123; <span class=\"comment\">/* Do something. */</span></div><div class=\"line\"> &#125;];</div></pre></td></tr></table></figure></p>\n<p> 重要 千万不要在一个操作对象进入操作队列之后再去修改它，因为当操作在操作队列中等待执行的时候，它可能在任何时候去执行任务，改变它的依赖和数据，可能会起到坏的作用。如果你想知道一个操作对象的状态，请使用操作对象的属性 去获取。</p>\n<h3 id=\"3-9-2-手动执行操作对象\"><a href=\"#3-9-2-手动执行操作对象\" class=\"headerlink\" title=\"3.9.2 手动执行操作对象\"></a><a href=\"#4\">3.9.2 手动执行操作对象</a></h3><p>尽管操作队列对于运行操作对象已经很方便了，但是还是有一种可能不使用操作队列去执行一个操作对象，如果你选择手动去执行操作对象，那么有一些注意事项，最主要的是，操作对象必须得是ready，而且你需要用start函数去启动它。 一个操作对象如果不是ready状态的话不应该去执行，isReady函数被Operation对象的依赖关系封装到了上层，只有当它的依赖关系都清除的时候，一个操作才能够被执行、 当执行一个操作对象，应该去使用start函数去做。用这个函数而不是用main，是因为start函数会在执行之前执行一个安全检查，尤其是，默认的start函数还会产生KVO通知，以保证依赖关系能够正确进行，这个函数同时也避免当你的操作对象被取消的时候，再去执行，以及当操作对象没有准备好的时候就去调用导致的异常抛出 。 如果你的程序定义了并发的操作对象，你同时需要在启动任务之前考虑isConcurrent。当这个方法返回NO的时候，你就可以考虑是在当前线程中同步的执行还是创建一个新的子线程。然而，这些方法的检测完全取决于你。 下面展示了一个比较简单的，手动开启并发操作对象的一个例子。如果这个函数返回NO，你可以启动一个timer，在之后再去调用它。然后直到它返回YES之后，取消掉Timer。因为这种情况可能在操作对象被取消的时候发生。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)performOperation:(<span class=\"built_in\">NSOperation</span>*)anOp &#123; </div><div class=\"line\">\t<span class=\"built_in\">BOOL</span> ranIt = <span class=\"literal\">NO</span>; </div><div class=\"line\">\t<span class=\"keyword\">if</span> ([anOp isReady] &amp;&amp; ![anOp isCancelled]) &#123; </div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (![anOp isConcurrent]) </div><div class=\"line\">\t\t[anOp start]; </div><div class=\"line\">\t\t<span class=\"keyword\">else</span> [<span class=\"built_in\">NSThread</span> detachNewThreadSelector:<span class=\"keyword\">@selector</span>(start) toTarget:anOp withObject:<span class=\"literal\">nil</span>]; </div><div class=\"line\">\t\tranIt = <span class=\"literal\">YES</span>; </div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([anOp isCancelled])&#123; </div><div class=\"line\">\t\t<span class=\"comment\">// If it was canceled before it was started, // move the operation to the finished state. </span></div><div class=\"line\">\t \t[<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@\"isFinished\"</span>]; </div><div class=\"line\">\t \t[<span class=\"keyword\">self</span> willChangeValueForKey:<span class=\"string\">@\"isExecuting\"</span>];</div><div class=\"line\">\t  \texecuting = <span class=\"literal\">NO</span>; </div><div class=\"line\">\t  \tfinished = <span class=\"literal\">YES</span>; </div><div class=\"line\">\t  \t[<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isExecuting\"</span>]; </div><div class=\"line\">\t  \t[<span class=\"keyword\">self</span> didChangeValueForKey:<span class=\"string\">@\"isFinished\"</span>]; </div><div class=\"line\">\t  \t<span class=\"comment\">// Set ranIt to YES to prevent the operation from </span></div><div class=\"line\">\t  \t<span class=\"comment\">// being passed to this method again in the future. </span></div><div class=\"line\">\t  \tranIt = <span class=\"literal\">YES</span>; </div><div class=\"line\">\t&#125; <span class=\"keyword\">return</span> ranIt; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-9-3-取消操作对象\"><a href=\"#3-9-3-取消操作对象\" class=\"headerlink\" title=\"3.9.3 取消操作对象\"></a><a href=\"#4\">3.9.3 取消操作对象</a></h3><p>当将操作对象添加到操作队列里面的时候，一个操作对象的管理就交给了操作队列，也不能被移除了，唯一使操作对象出列的方法就是调用它的cancel函数，你也可以取消所有的操作对象，通过调用操作队列的cancelAllOperations 你可以在确保你不在需要操作对象的时候取消掉它。发出一个cancel命令，会将操作对象的关键路径变为canceled状态，这将阻止任务继续执行，由于canceled的操作对象也认为是完成的，那么依赖它的操作对象就可以移除依赖关系。然而，更多情况下，更常用的是取消所有操作独享，在某些重要的时候，比如应用退出、或者用户发出了取消指令，这比一个个取消要好很多。</p>\n<h3 id=\"3-9-4-等待操作对象的完成\"><a href=\"#3-9-4-等待操作对象的完成\" class=\"headerlink\" title=\"3.9.4 等待操作对象的完成\"></a><a href=\"#4\">3.9.4 等待操作对象的完成</a></h3><p>为了获取最佳的性能，你应该尽可能的让操作对象并发执行，让系统去干更多的事情，在你执行操作对象任务的时候，如果创建一个操作对象的时候，同时希望获得了操作对象的结果，你可以使用waitUntilFinished：方法来阻塞代码继续执行，直到这个操作对象执行完成。通常来讲，这是最好的方式去避免你能帮到它的时候，阻塞当前线程也许是一个比较好的解决方法。但这也带来了更多的同步性，而限制了整体的可并发性。 你绝不允许在主线程中调用这个方法，你最好在子线程或者其他的线程操作中这么做，阻塞主线程将会降低程序的可响应性。 除了等待一个任务完成，你可以等待一个操作队列所有的任务执行完成，通过调用waitUntilAllOperationsAreFinished，当你等待一个操作队列任务完成的时候，避免在别的线程中添加任务给它，以防延长等待时间。</p>\n<h3 id=\"3-9-5-挂起和恢复操作队列\"><a href=\"#3-9-5-挂起和恢复操作队列\" class=\"headerlink\" title=\"3.9.5 挂起和恢复操作队列\"></a><a href=\"#4\">3.9.5 挂起和恢复操作队列</a></h3><p>如果你想中途终止一个操作队列的话，你可以挂起相应的操作队列，使用setSuspended方法，挂起一个操作队列并不会导致正在执行的操作任务终止。它只是会阻止别的操作对象（操作队列中的）不去执行，你可能会在用户想暂停任务的时候挂起所有操作，因为用户还期望在某个时候恢复这些任务。</p>"},{"title":"《CoreData》系列（一）","date":"2016-08-27T08:47:45.000Z","comments":1,"_content":"\n\n\n## 《题外篇》\n\n<!---more-->\n\n学习这个东西贵在日积月累，而且事情往往说起来容易，做起来难，我是一个资深dota玩家，从dota1到dota2，从大学到工作，从2008年到2015年。一直看2009的视频，经常吐槽09视频更新速度慢，但是细细想想，09能保持优酷更新401（最近查看）期视频。又有多少人能做的到。\n故而最近下了一个决定，每周五务必更新一篇技术博客，就看看自己能坚持多久。\n\n## 《正文》\n\n[1 概述](#1)\n本系列研究讨论的是iOS开发中的一种数据持久化技术－coredata。coredata、sqlite、fmdb的优缺点不是我要讨论的重点\n\n这个系列的blog主要会研究讨论以下几点\n\t1.快速搭建coredata环境，主要是连接数据库、创建数据库托管对象模型（NSManagerObject）、如何保存数据、查询数据？\n\t2.coredata升级以及数据迁移的三种方式。\n\t3.coredata与viewcontroller的结合，通过NSFetchedResultController使用coredata数据。\n\t4.导入默认数据和前后台context。\n\t5.关系\n\n[2 环境搭建](#1)\n\n[2.1 导入《CoreData》的framework](#2)\n默认读者知道如何创建一个空白的项目，建立好空白项目之后，搜索coredata按图2-1操作，点击添加完成framework的引入。\n![图 2-1](http://ock9zbzms.bkt.clouddn.com/20151030175726289.jpg)\n\n[2.2 创建Model](#2)\n完成上述第一步，意味着我们已经可以使用CoreData提供的接口API了，接下来就是如何使用的事儿了。创建一个CoreData文件夹，专门用来放CoreData引擎，创建好文件夹后，右键点击选择newfile，然后按照图2-2所示创建数据库模型文件，并将其命名为Model,然后点击Model,添加Entity（表\\Class）,添加Attribute（字段\\属性），到这一部，基本上就把Model，创建出来了。并且里面有了数据模型结构，接下来的问题就是，连接数据库，根据模型创建托管对象了\n![图 2-2](http://ock9zbzms.bkt.clouddn.com/20151030180051371.jpg)\n\n[2.3 代码连接数据库](#2)\n好啦，前面只是开胃菜，真正的大餐马上就要来了，在吃大餐前，有一些名称需要说明下\n\n1.NSManagedObjectContext - 托管对象上下文，用来干嘛的呢？望文生意，用来管理托管对象的，负责从数据库中获取对象、保存对象、删除对象等等操作。\n2.NSManagedObjectModel - 对象模型， 根据我们上面创建的数据模型，创建出托管对象模型，（类似于加工厂的概念，能够用来生产对象的模子）\n3.NSPersistentStoreCoordinator - 持久化存储协调器，包含数据库的名称、存储数据类型（Sqlite、Xml、内存）、位置等信息\n4.NSPersistentStore - 持久化存储区\n\n另外再附一张图来说明这几者的依赖关系\n![](http://ock9zbzms.bkt.clouddn.com/20151030232125923.png)\n\n由于CoreData管理数据的过程较为通用，个人觉的还是封装成一个管理对象较好，方便以后代码复用，这里创建一个CoreDataHelper的类，专门用来管理数据对象，该类的头文件如下\n\n```objc\n#import <Foundation/Foundation.h>  \n#import <CoreData/CoreData.h>  \n@interface CoreDataHelper : NSObject  \n@property (nonatomic, strong) NSManagedObjectContext       *context;//托管对象上下文  \n@property (nonatomic, strong) NSManagedObjectModel         *model;//托管对象模型  \n@property (nonatomic, strong) NSPersistentStoreCoordinator *coordinate;//持久化存储协调器  \n@property (nonatomic, strong) NSPersistentStore            *store;//持久化存储区  \n- (id)init;             //初始化  \n- (void)loadStore;      //加载cordite  \n- (void)setupCoreData;  //设置cordite相关信息  \n- (void)saveContext;    //保存context  \n```\nCoreDataHelp的实现文件如下\n\n```objc\n#import \"CoreDataHelper.h\"  \nstatic NSString *storeFileName = @\"demo.sqlite\";    //测试数据库  \n  \n@implementation CoreDataHelper  \n  \n#pragma mark - PATHS  \n  \n- (NSString *)applicationDocumentDirectory  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ '%@'\",[self class],NSStringFromSelector(_cmd));  \n    }  \n      \n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);  \n    return [paths lastObject];  \n}  \n  \n- (NSURL *)applicationStoreDirectory  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ '%@'\",[self class],NSStringFromSelector(_cmd));  \n    }  \n      \n    NSURL *url = [[NSURL fileURLWithPath:[self applicationDocumentDirectory]] URLByAppendingPathComponent:@\"stores\"];  \n    if (![[NSFileManager defaultManager]fileExistsAtPath:[url path]]) {  \n        NSError *error = nil;  \n        BOOL success   = [[NSFileManager defaultManager]createDirectoryAtURL:url  \n                                               withIntermediateDirectories:YES  \n                                                                attributes:nil  \n                                                                     error:&error];  \n        if (success) {  \n            if (debug) {  \n                NSLog(@\"success create directory!\");  \n            }  \n        }else{  \n            NSLog(@\"failed create directory!\");  \n        }  \n    }  \n      \n    return url;  \n}  \n  \n- (NSURL *)storeUrl  \n{  \n    NSURL *storeUrl = [[self applicationStoreDirectory]URLByAppendingPathComponent:storeFileName];  \n    NSLog(@\"storeurl = %@\",storeUrl);  \n    return storeUrl;  \n}  \n  \n#pragma mark - SETUP  \n- (id)init  \n{  \n    if (self) {  \n        _model      = [NSManagedObjectModel mergedModelFromBundles:nil];  \n        _coordinate = [[NSPersistentStoreCoordinator alloc]initWithManagedObjectModel:_model];  \n        _context    = [[NSManagedObjectContext alloc]initWithConcurrencyType:NSMainQueueConcurrencyType];  \n        [_context setMergePolicy:NSMergeByPropertyObjectTrumpMergePolicy];  \n        [_context setPersistentStoreCoordinator:_coordinate];  \n          \n        _importContext = [[NSManagedObjectContext alloc]initWithConcurrencyType:NSPrivateQueueConcurrencyType];  \n          \n        [_importContext performBlock:^{  \n            [_importContext setPersistentStoreCoordinator:_coordinate];  \n            [_importContext setMergePolicy:NSMergeByPropertyObjectTrumpMergePolicy];  \n            [_importContext setUndoManager:nil];  \n        }];  \n    }  \n    return self;  \n}  \n  \n- (void)loadStore  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ ,'%@'\",[self class], NSStringFromSelector(_cmd));  \n    }  \n      \n    if (_store) {  \n        return;  \n    }  \n  \n    NSError *error;  \n          \n        //NSMigratePersistentStoresAutomaticallyOption coreData尝试将低版本的数据模型向高版本进行迁移  \n        //NSInferMappingModelAutomaticallyOption    coredata会自动创建迁移模型，会去自动尝试  \n        NSDictionary *option = @{NSMigratePersistentStoresAutomaticallyOption:@(YES),  \n                                 NSInferMappingModelAutomaticallyOption:@(YES),  \n                                 NSSQLitePragmasOption:@{@\"journal_mode\":@\"DELETE\"}};  \n          \n        _store = [_coordinate addPersistentStoreWithType:NSSQLiteStoreType  \n                                           configuration:nil  \n                                                     URL:[self storeUrl]  \n                                                 options:option  \n                                                   error:&error];  \n        if (!_store) {  \n            if (debug) {  \n                NSLog(@\"failed load store,error = %@\",error);  \n                abort();  \n            }  \n        }  \n        else/**/{  \n            NSLog(@\"successfully add store : %@\",_store);  \n        }  \n}  \n  \n- (void)setupCoreData  \n{  \n    [self loadStore];  \n}  \n  \n- (void)saveContext  \n{  \n    if ([_context hasChanges]) {  \n        NSError *error = nil;  \n        if ([_context save:&error]) {  \n            NSLog(@\"context save successfully\");  \n        }else{  \n            NSLog(@\"failed save %@\",error);  \n        }  \n    }else{  \n        NSLog(@\"skipped context save , there is no changes\");  \n    }  \n}  \n  \n@end  \n```\n[2.4 最后附上查询和保存数据库的代码](#2)\n在AppDelegate.m文件里写一个方法，用来初始化CoreData数据库\n\n```objc\n- (CoreDataHelper *)cdh  \n{  \n    if (!_cdh) {  \n        static dispatch_once_t onceToken;  \n        dispatch_once(&onceToken, ^{  \n            _cdh = [CoreDataHelper new];  \n              \n        });  \n        [_cdh setupCoreData];  \n    }  \n    return _cdh;  \n}  \n```\n\n下面是插入数据，查询、保存数据的方法\n```objc\n- (void)demo  \n{  \n    Item *bananer = [NSEntityDescription insertNewObjectForEntityForName:@\"Item\" inManagedObjectContext:[[self cdh] context]];  \n    bananer.unit = kg;  \n    bananer.name = @\"bananer\";  \n      \n    Item *oranger = [NSEntityDescription insertNewObjectForEntityForName:@\"Item\" inManagedObjectContext:[[self cdh] context]];  \n    oranger.unit = kg;  \n    oranger.name = @\"Oranger\";  \n      \n    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"Item\"];  \n    NSArray *result = [[[self cdh]context] executeFetchRequest:request error:nil];  \n    for (Item *item in result) {  \n        if (debug) {  \n            NSLog(@\"item.name = %@\",item.name);  \n        }  \n    }  \n    [[self cdh]saveContext];  \n} \n```\n[2.5 小结](#2)\n经过这么一番下来，终于将CoreData技术应用到我们的项目中了，我们现在能做到，把数据插入到数据库、也能从数据库中读取出数据来，也能保存数据。但是要注意这才是刚刚开始，接下来还有更多的coredata问题等着我们，比方说下节要介绍的数据迁移问题。\n","source":"_posts/《CoreData》系列（一）.md","raw":"---\ntitle: 《CoreData》系列（一）\ndate: 2016-08-27 16:47:45\ntags: coredata学习\ncomments: true\n---\n\n\n\n## 《题外篇》\n\n<!---more-->\n\n学习这个东西贵在日积月累，而且事情往往说起来容易，做起来难，我是一个资深dota玩家，从dota1到dota2，从大学到工作，从2008年到2015年。一直看2009的视频，经常吐槽09视频更新速度慢，但是细细想想，09能保持优酷更新401（最近查看）期视频。又有多少人能做的到。\n故而最近下了一个决定，每周五务必更新一篇技术博客，就看看自己能坚持多久。\n\n## 《正文》\n\n[1 概述](#1)\n本系列研究讨论的是iOS开发中的一种数据持久化技术－coredata。coredata、sqlite、fmdb的优缺点不是我要讨论的重点\n\n这个系列的blog主要会研究讨论以下几点\n\t1.快速搭建coredata环境，主要是连接数据库、创建数据库托管对象模型（NSManagerObject）、如何保存数据、查询数据？\n\t2.coredata升级以及数据迁移的三种方式。\n\t3.coredata与viewcontroller的结合，通过NSFetchedResultController使用coredata数据。\n\t4.导入默认数据和前后台context。\n\t5.关系\n\n[2 环境搭建](#1)\n\n[2.1 导入《CoreData》的framework](#2)\n默认读者知道如何创建一个空白的项目，建立好空白项目之后，搜索coredata按图2-1操作，点击添加完成framework的引入。\n![图 2-1](http://ock9zbzms.bkt.clouddn.com/20151030175726289.jpg)\n\n[2.2 创建Model](#2)\n完成上述第一步，意味着我们已经可以使用CoreData提供的接口API了，接下来就是如何使用的事儿了。创建一个CoreData文件夹，专门用来放CoreData引擎，创建好文件夹后，右键点击选择newfile，然后按照图2-2所示创建数据库模型文件，并将其命名为Model,然后点击Model,添加Entity（表\\Class）,添加Attribute（字段\\属性），到这一部，基本上就把Model，创建出来了。并且里面有了数据模型结构，接下来的问题就是，连接数据库，根据模型创建托管对象了\n![图 2-2](http://ock9zbzms.bkt.clouddn.com/20151030180051371.jpg)\n\n[2.3 代码连接数据库](#2)\n好啦，前面只是开胃菜，真正的大餐马上就要来了，在吃大餐前，有一些名称需要说明下\n\n1.NSManagedObjectContext - 托管对象上下文，用来干嘛的呢？望文生意，用来管理托管对象的，负责从数据库中获取对象、保存对象、删除对象等等操作。\n2.NSManagedObjectModel - 对象模型， 根据我们上面创建的数据模型，创建出托管对象模型，（类似于加工厂的概念，能够用来生产对象的模子）\n3.NSPersistentStoreCoordinator - 持久化存储协调器，包含数据库的名称、存储数据类型（Sqlite、Xml、内存）、位置等信息\n4.NSPersistentStore - 持久化存储区\n\n另外再附一张图来说明这几者的依赖关系\n![](http://ock9zbzms.bkt.clouddn.com/20151030232125923.png)\n\n由于CoreData管理数据的过程较为通用，个人觉的还是封装成一个管理对象较好，方便以后代码复用，这里创建一个CoreDataHelper的类，专门用来管理数据对象，该类的头文件如下\n\n```objc\n#import <Foundation/Foundation.h>  \n#import <CoreData/CoreData.h>  \n@interface CoreDataHelper : NSObject  \n@property (nonatomic, strong) NSManagedObjectContext       *context;//托管对象上下文  \n@property (nonatomic, strong) NSManagedObjectModel         *model;//托管对象模型  \n@property (nonatomic, strong) NSPersistentStoreCoordinator *coordinate;//持久化存储协调器  \n@property (nonatomic, strong) NSPersistentStore            *store;//持久化存储区  \n- (id)init;             //初始化  \n- (void)loadStore;      //加载cordite  \n- (void)setupCoreData;  //设置cordite相关信息  \n- (void)saveContext;    //保存context  \n```\nCoreDataHelp的实现文件如下\n\n```objc\n#import \"CoreDataHelper.h\"  \nstatic NSString *storeFileName = @\"demo.sqlite\";    //测试数据库  \n  \n@implementation CoreDataHelper  \n  \n#pragma mark - PATHS  \n  \n- (NSString *)applicationDocumentDirectory  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ '%@'\",[self class],NSStringFromSelector(_cmd));  \n    }  \n      \n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);  \n    return [paths lastObject];  \n}  \n  \n- (NSURL *)applicationStoreDirectory  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ '%@'\",[self class],NSStringFromSelector(_cmd));  \n    }  \n      \n    NSURL *url = [[NSURL fileURLWithPath:[self applicationDocumentDirectory]] URLByAppendingPathComponent:@\"stores\"];  \n    if (![[NSFileManager defaultManager]fileExistsAtPath:[url path]]) {  \n        NSError *error = nil;  \n        BOOL success   = [[NSFileManager defaultManager]createDirectoryAtURL:url  \n                                               withIntermediateDirectories:YES  \n                                                                attributes:nil  \n                                                                     error:&error];  \n        if (success) {  \n            if (debug) {  \n                NSLog(@\"success create directory!\");  \n            }  \n        }else{  \n            NSLog(@\"failed create directory!\");  \n        }  \n    }  \n      \n    return url;  \n}  \n  \n- (NSURL *)storeUrl  \n{  \n    NSURL *storeUrl = [[self applicationStoreDirectory]URLByAppendingPathComponent:storeFileName];  \n    NSLog(@\"storeurl = %@\",storeUrl);  \n    return storeUrl;  \n}  \n  \n#pragma mark - SETUP  \n- (id)init  \n{  \n    if (self) {  \n        _model      = [NSManagedObjectModel mergedModelFromBundles:nil];  \n        _coordinate = [[NSPersistentStoreCoordinator alloc]initWithManagedObjectModel:_model];  \n        _context    = [[NSManagedObjectContext alloc]initWithConcurrencyType:NSMainQueueConcurrencyType];  \n        [_context setMergePolicy:NSMergeByPropertyObjectTrumpMergePolicy];  \n        [_context setPersistentStoreCoordinator:_coordinate];  \n          \n        _importContext = [[NSManagedObjectContext alloc]initWithConcurrencyType:NSPrivateQueueConcurrencyType];  \n          \n        [_importContext performBlock:^{  \n            [_importContext setPersistentStoreCoordinator:_coordinate];  \n            [_importContext setMergePolicy:NSMergeByPropertyObjectTrumpMergePolicy];  \n            [_importContext setUndoManager:nil];  \n        }];  \n    }  \n    return self;  \n}  \n  \n- (void)loadStore  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ ,'%@'\",[self class], NSStringFromSelector(_cmd));  \n    }  \n      \n    if (_store) {  \n        return;  \n    }  \n  \n    NSError *error;  \n          \n        //NSMigratePersistentStoresAutomaticallyOption coreData尝试将低版本的数据模型向高版本进行迁移  \n        //NSInferMappingModelAutomaticallyOption    coredata会自动创建迁移模型，会去自动尝试  \n        NSDictionary *option = @{NSMigratePersistentStoresAutomaticallyOption:@(YES),  \n                                 NSInferMappingModelAutomaticallyOption:@(YES),  \n                                 NSSQLitePragmasOption:@{@\"journal_mode\":@\"DELETE\"}};  \n          \n        _store = [_coordinate addPersistentStoreWithType:NSSQLiteStoreType  \n                                           configuration:nil  \n                                                     URL:[self storeUrl]  \n                                                 options:option  \n                                                   error:&error];  \n        if (!_store) {  \n            if (debug) {  \n                NSLog(@\"failed load store,error = %@\",error);  \n                abort();  \n            }  \n        }  \n        else/**/{  \n            NSLog(@\"successfully add store : %@\",_store);  \n        }  \n}  \n  \n- (void)setupCoreData  \n{  \n    [self loadStore];  \n}  \n  \n- (void)saveContext  \n{  \n    if ([_context hasChanges]) {  \n        NSError *error = nil;  \n        if ([_context save:&error]) {  \n            NSLog(@\"context save successfully\");  \n        }else{  \n            NSLog(@\"failed save %@\",error);  \n        }  \n    }else{  \n        NSLog(@\"skipped context save , there is no changes\");  \n    }  \n}  \n  \n@end  \n```\n[2.4 最后附上查询和保存数据库的代码](#2)\n在AppDelegate.m文件里写一个方法，用来初始化CoreData数据库\n\n```objc\n- (CoreDataHelper *)cdh  \n{  \n    if (!_cdh) {  \n        static dispatch_once_t onceToken;  \n        dispatch_once(&onceToken, ^{  \n            _cdh = [CoreDataHelper new];  \n              \n        });  \n        [_cdh setupCoreData];  \n    }  \n    return _cdh;  \n}  \n```\n\n下面是插入数据，查询、保存数据的方法\n```objc\n- (void)demo  \n{  \n    Item *bananer = [NSEntityDescription insertNewObjectForEntityForName:@\"Item\" inManagedObjectContext:[[self cdh] context]];  \n    bananer.unit = kg;  \n    bananer.name = @\"bananer\";  \n      \n    Item *oranger = [NSEntityDescription insertNewObjectForEntityForName:@\"Item\" inManagedObjectContext:[[self cdh] context]];  \n    oranger.unit = kg;  \n    oranger.name = @\"Oranger\";  \n      \n    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"Item\"];  \n    NSArray *result = [[[self cdh]context] executeFetchRequest:request error:nil];  \n    for (Item *item in result) {  \n        if (debug) {  \n            NSLog(@\"item.name = %@\",item.name);  \n        }  \n    }  \n    [[self cdh]saveContext];  \n} \n```\n[2.5 小结](#2)\n经过这么一番下来，终于将CoreData技术应用到我们的项目中了，我们现在能做到，把数据插入到数据库、也能从数据库中读取出数据来，也能保存数据。但是要注意这才是刚刚开始，接下来还有更多的coredata问题等着我们，比方说下节要介绍的数据迁移问题。\n","slug":"《CoreData》系列（一）","published":1,"updated":"2017-06-08T15:48:46.000Z","layout":"post","photos":[],"link":"","_id":"ck14o8ywf000fhx5l6cqc0537","content":"<h2 id=\"《题外篇》\"><a href=\"#《题外篇》\" class=\"headerlink\" title=\"《题外篇》\"></a>《题外篇》</h2><a id=\"more\"></a>\n<p>学习这个东西贵在日积月累，而且事情往往说起来容易，做起来难，我是一个资深dota玩家，从dota1到dota2，从大学到工作，从2008年到2015年。一直看2009的视频，经常吐槽09视频更新速度慢，但是细细想想，09能保持优酷更新401（最近查看）期视频。又有多少人能做的到。<br>故而最近下了一个决定，每周五务必更新一篇技术博客，就看看自己能坚持多久。</p>\n<h2 id=\"《正文》\"><a href=\"#《正文》\" class=\"headerlink\" title=\"《正文》\"></a>《正文》</h2><p><a href=\"#1\">1 概述</a><br>本系列研究讨论的是iOS开发中的一种数据持久化技术－coredata。coredata、sqlite、fmdb的优缺点不是我要讨论的重点</p>\n<p>这个系列的blog主要会研究讨论以下几点<br>    1.快速搭建coredata环境，主要是连接数据库、创建数据库托管对象模型（NSManagerObject）、如何保存数据、查询数据？<br>    2.coredata升级以及数据迁移的三种方式。<br>    3.coredata与viewcontroller的结合，通过NSFetchedResultController使用coredata数据。<br>    4.导入默认数据和前后台context。<br>    5.关系</p>\n<p><a href=\"#1\">2 环境搭建</a></p>\n<p><a href=\"#2\">2.1 导入《CoreData》的framework</a><br>默认读者知道如何创建一个空白的项目，建立好空白项目之后，搜索coredata按图2-1操作，点击添加完成framework的引入。<br><img src=\"http://ock9zbzms.bkt.clouddn.com/20151030175726289.jpg\" alt=\"图 2-1\"></p>\n<p><a href=\"#2\">2.2 创建Model</a><br>完成上述第一步，意味着我们已经可以使用CoreData提供的接口API了，接下来就是如何使用的事儿了。创建一个CoreData文件夹，专门用来放CoreData引擎，创建好文件夹后，右键点击选择newfile，然后按照图2-2所示创建数据库模型文件，并将其命名为Model,然后点击Model,添加Entity（表\\Class）,添加Attribute（字段\\属性），到这一部，基本上就把Model，创建出来了。并且里面有了数据模型结构，接下来的问题就是，连接数据库，根据模型创建托管对象了<br><img src=\"http://ock9zbzms.bkt.clouddn.com/20151030180051371.jpg\" alt=\"图 2-2\"></p>\n<p><a href=\"#2\">2.3 代码连接数据库</a><br>好啦，前面只是开胃菜，真正的大餐马上就要来了，在吃大餐前，有一些名称需要说明下</p>\n<p>1.NSManagedObjectContext - 托管对象上下文，用来干嘛的呢？望文生意，用来管理托管对象的，负责从数据库中获取对象、保存对象、删除对象等等操作。<br>2.NSManagedObjectModel - 对象模型， 根据我们上面创建的数据模型，创建出托管对象模型，（类似于加工厂的概念，能够用来生产对象的模子）<br>3.NSPersistentStoreCoordinator - 持久化存储协调器，包含数据库的名称、存储数据类型（Sqlite、Xml、内存）、位置等信息<br>4.NSPersistentStore - 持久化存储区</p>\n<p>另外再附一张图来说明这几者的依赖关系<br><img src=\"http://ock9zbzms.bkt.clouddn.com/20151030232125923.png\" alt=\"\"></p>\n<p>由于CoreData管理数据的过程较为通用，个人觉的还是封装成一个管理对象较好，方便以后代码复用，这里创建一个CoreDataHelper的类，专门用来管理数据对象，该类的头文件如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;CoreData/CoreData.h&gt;</span>  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CoreDataHelper</span> : <span class=\"title\">NSObject</span>  </span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSManagedObjectContext</span>       *context;<span class=\"comment\">//托管对象上下文  </span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSManagedObjectModel</span>         *model;<span class=\"comment\">//托管对象模型  </span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSPersistentStoreCoordinator</span> *coordinate;<span class=\"comment\">//持久化存储协调器  </span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSPersistentStore</span>            *store;<span class=\"comment\">//持久化存储区  </span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init;             <span class=\"comment\">//初始化  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)loadStore;      <span class=\"comment\">//加载cordite  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setupCoreData;  <span class=\"comment\">//设置cordite相关信息  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)saveContext;    <span class=\"comment\">//保存context</span></div></pre></td></tr></table></figure>\n<p>CoreDataHelp的实现文件如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"CoreDataHelper.h\"</span>  </span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">NSString</span> *storeFileName = <span class=\"string\">@\"demo.sqlite\"</span>;    <span class=\"comment\">//测试数据库  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CoreDataHelper</span>  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"meta\">#pragma mark - PATHS  </span></div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)applicationDocumentDirectory  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ '%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>],<span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *paths = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>);  </div><div class=\"line\">    <span class=\"keyword\">return</span> [paths lastObject];  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"built_in\">NSURL</span> *)applicationStoreDirectory  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ '%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>],<span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url = [[<span class=\"built_in\">NSURL</span> fileURLWithPath:[<span class=\"keyword\">self</span> applicationDocumentDirectory]] URLByAppendingPathComponent:<span class=\"string\">@\"stores\"</span>];  </div><div class=\"line\">    <span class=\"keyword\">if</span> (![[<span class=\"built_in\">NSFileManager</span> defaultManager]fileExistsAtPath:[url path]]) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error = <span class=\"literal\">nil</span>;  </div><div class=\"line\">        <span class=\"built_in\">BOOL</span> success   = [[<span class=\"built_in\">NSFileManager</span> defaultManager]createDirectoryAtURL:url  </div><div class=\"line\">                                               withIntermediateDirectories:<span class=\"literal\">YES</span>  </div><div class=\"line\">                                                                attributes:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                                     error:&amp;error];  </div><div class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"success create directory!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed create directory!\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">return</span> url;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"built_in\">NSURL</span> *)storeUrl  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *storeUrl = [[<span class=\"keyword\">self</span> applicationStoreDirectory]URLByAppendingPathComponent:storeFileName];  </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"storeurl = %@\"</span>,storeUrl);  </div><div class=\"line\">    <span class=\"keyword\">return</span> storeUrl;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"meta\">#pragma mark - SETUP  </span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;  </div><div class=\"line\">        _model      = [<span class=\"built_in\">NSManagedObjectModel</span> mergedModelFromBundles:<span class=\"literal\">nil</span>];  </div><div class=\"line\">        _coordinate = [[<span class=\"built_in\">NSPersistentStoreCoordinator</span> alloc]initWithManagedObjectModel:_model];  </div><div class=\"line\">        _context    = [[<span class=\"built_in\">NSManagedObjectContext</span> alloc]initWithConcurrencyType:<span class=\"built_in\">NSMainQueueConcurrencyType</span>];  </div><div class=\"line\">        [_context setMergePolicy:<span class=\"built_in\">NSMergeByPropertyObjectTrumpMergePolicy</span>];  </div><div class=\"line\">        [_context setPersistentStoreCoordinator:_coordinate];  </div><div class=\"line\">          </div><div class=\"line\">        _importContext = [[<span class=\"built_in\">NSManagedObjectContext</span> alloc]initWithConcurrencyType:<span class=\"built_in\">NSPrivateQueueConcurrencyType</span>];  </div><div class=\"line\">          </div><div class=\"line\">        [_importContext performBlock:^&#123;  </div><div class=\"line\">            [_importContext setPersistentStoreCoordinator:_coordinate];  </div><div class=\"line\">            [_importContext setMergePolicy:<span class=\"built_in\">NSMergeByPropertyObjectTrumpMergePolicy</span>];  </div><div class=\"line\">            [_importContext setUndoManager:<span class=\"literal\">nil</span>];  </div><div class=\"line\">        &#125;];  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"keyword\">void</span>)loadStore  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ ,'%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], <span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">if</span> (_store) &#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">NSError</span> *error;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//NSMigratePersistentStoresAutomaticallyOption coreData尝试将低版本的数据模型向高版本进行迁移  </span></div><div class=\"line\">        <span class=\"comment\">//NSInferMappingModelAutomaticallyOption    coredata会自动创建迁移模型，会去自动尝试  </span></div><div class=\"line\">        <span class=\"built_in\">NSDictionary</span> *option = @&#123;<span class=\"built_in\">NSMigratePersistentStoresAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                                 <span class=\"built_in\">NSInferMappingModelAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                                 <span class=\"built_in\">NSSQLitePragmasOption</span>:@&#123;<span class=\"string\">@\"journal_mode\"</span>:<span class=\"string\">@\"DELETE\"</span>&#125;&#125;;  </div><div class=\"line\">          </div><div class=\"line\">        _store = [_coordinate addPersistentStoreWithType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                           configuration:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                     URL:[<span class=\"keyword\">self</span> storeUrl]  </div><div class=\"line\">                                                 options:option  </div><div class=\"line\">                                                   error:&amp;error];  </div><div class=\"line\">        <span class=\"keyword\">if</span> (!_store) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed load store,error = %@\"</span>,error);  </div><div class=\"line\">                abort();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span><span class=\"comment\">/**/</span>&#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"successfully add store : %@\"</span>,_store);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"keyword\">void</span>)setupCoreData  </div><div class=\"line\">&#123;  </div><div class=\"line\">    [<span class=\"keyword\">self</span> loadStore];  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"keyword\">void</span>)saveContext  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> ([_context hasChanges]) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error = <span class=\"literal\">nil</span>;  </div><div class=\"line\">        <span class=\"keyword\">if</span> ([_context save:&amp;error]) &#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"context save successfully\"</span>);  </div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed save %@\"</span>,error);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"skipped context save , there is no changes\"</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p><a href=\"#2\">2.4 最后附上查询和保存数据库的代码</a><br>在AppDelegate.m文件里写一个方法，用来初始化CoreData数据库</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (CoreDataHelper *)cdh  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (!_cdh) &#123;  </div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;  </div><div class=\"line\">        <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;  </div><div class=\"line\">            _cdh = [CoreDataHelper new];  </div><div class=\"line\">              </div><div class=\"line\">        &#125;);  </div><div class=\"line\">        [_cdh setupCoreData];  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> _cdh;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面是插入数据，查询、保存数据的方法<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)demo  </div><div class=\"line\">&#123;  </div><div class=\"line\">    Item *bananer = [<span class=\"built_in\">NSEntityDescription</span> insertNewObjectForEntityForName:<span class=\"string\">@\"Item\"</span> inManagedObjectContext:[[<span class=\"keyword\">self</span> cdh] context]];  </div><div class=\"line\">    bananer.unit = kg;  </div><div class=\"line\">    bananer.name = <span class=\"string\">@\"bananer\"</span>;  </div><div class=\"line\">      </div><div class=\"line\">    Item *oranger = [<span class=\"built_in\">NSEntityDescription</span> insertNewObjectForEntityForName:<span class=\"string\">@\"Item\"</span> inManagedObjectContext:[[<span class=\"keyword\">self</span> cdh] context]];  </div><div class=\"line\">    oranger.unit = kg;  </div><div class=\"line\">    oranger.name = <span class=\"string\">@\"Oranger\"</span>;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">NSFetchRequest</span> *request = [<span class=\"built_in\">NSFetchRequest</span> fetchRequestWithEntityName:<span class=\"string\">@\"Item\"</span>];  </div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *result = [[[<span class=\"keyword\">self</span> cdh]context] executeFetchRequest:request error:<span class=\"literal\">nil</span>];  </div><div class=\"line\">    <span class=\"keyword\">for</span> (Item *item <span class=\"keyword\">in</span> result) &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"item.name = %@\"</span>,item.name);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    [[<span class=\"keyword\">self</span> cdh]saveContext];  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"#2\">2.5 小结</a><br>经过这么一番下来，终于将CoreData技术应用到我们的项目中了，我们现在能做到，把数据插入到数据库、也能从数据库中读取出数据来，也能保存数据。但是要注意这才是刚刚开始，接下来还有更多的coredata问题等着我们，比方说下节要介绍的数据迁移问题。</p>\n","excerpt":"<h2 id=\"《题外篇》\"><a href=\"#《题外篇》\" class=\"headerlink\" title=\"《题外篇》\"></a>《题外篇》</h2>","more":"<p>学习这个东西贵在日积月累，而且事情往往说起来容易，做起来难，我是一个资深dota玩家，从dota1到dota2，从大学到工作，从2008年到2015年。一直看2009的视频，经常吐槽09视频更新速度慢，但是细细想想，09能保持优酷更新401（最近查看）期视频。又有多少人能做的到。<br>故而最近下了一个决定，每周五务必更新一篇技术博客，就看看自己能坚持多久。</p>\n<h2 id=\"《正文》\"><a href=\"#《正文》\" class=\"headerlink\" title=\"《正文》\"></a>《正文》</h2><p><a href=\"#1\">1 概述</a><br>本系列研究讨论的是iOS开发中的一种数据持久化技术－coredata。coredata、sqlite、fmdb的优缺点不是我要讨论的重点</p>\n<p>这个系列的blog主要会研究讨论以下几点<br>    1.快速搭建coredata环境，主要是连接数据库、创建数据库托管对象模型（NSManagerObject）、如何保存数据、查询数据？<br>    2.coredata升级以及数据迁移的三种方式。<br>    3.coredata与viewcontroller的结合，通过NSFetchedResultController使用coredata数据。<br>    4.导入默认数据和前后台context。<br>    5.关系</p>\n<p><a href=\"#1\">2 环境搭建</a></p>\n<p><a href=\"#2\">2.1 导入《CoreData》的framework</a><br>默认读者知道如何创建一个空白的项目，建立好空白项目之后，搜索coredata按图2-1操作，点击添加完成framework的引入。<br><img src=\"http://ock9zbzms.bkt.clouddn.com/20151030175726289.jpg\" alt=\"图 2-1\"></p>\n<p><a href=\"#2\">2.2 创建Model</a><br>完成上述第一步，意味着我们已经可以使用CoreData提供的接口API了，接下来就是如何使用的事儿了。创建一个CoreData文件夹，专门用来放CoreData引擎，创建好文件夹后，右键点击选择newfile，然后按照图2-2所示创建数据库模型文件，并将其命名为Model,然后点击Model,添加Entity（表\\Class）,添加Attribute（字段\\属性），到这一部，基本上就把Model，创建出来了。并且里面有了数据模型结构，接下来的问题就是，连接数据库，根据模型创建托管对象了<br><img src=\"http://ock9zbzms.bkt.clouddn.com/20151030180051371.jpg\" alt=\"图 2-2\"></p>\n<p><a href=\"#2\">2.3 代码连接数据库</a><br>好啦，前面只是开胃菜，真正的大餐马上就要来了，在吃大餐前，有一些名称需要说明下</p>\n<p>1.NSManagedObjectContext - 托管对象上下文，用来干嘛的呢？望文生意，用来管理托管对象的，负责从数据库中获取对象、保存对象、删除对象等等操作。<br>2.NSManagedObjectModel - 对象模型， 根据我们上面创建的数据模型，创建出托管对象模型，（类似于加工厂的概念，能够用来生产对象的模子）<br>3.NSPersistentStoreCoordinator - 持久化存储协调器，包含数据库的名称、存储数据类型（Sqlite、Xml、内存）、位置等信息<br>4.NSPersistentStore - 持久化存储区</p>\n<p>另外再附一张图来说明这几者的依赖关系<br><img src=\"http://ock9zbzms.bkt.clouddn.com/20151030232125923.png\" alt=\"\"></p>\n<p>由于CoreData管理数据的过程较为通用，个人觉的还是封装成一个管理对象较好，方便以后代码复用，这里创建一个CoreDataHelper的类，专门用来管理数据对象，该类的头文件如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;CoreData/CoreData.h&gt;</span>  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CoreDataHelper</span> : <span class=\"title\">NSObject</span>  </span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSManagedObjectContext</span>       *context;<span class=\"comment\">//托管对象上下文  </span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSManagedObjectModel</span>         *model;<span class=\"comment\">//托管对象模型  </span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSPersistentStoreCoordinator</span> *coordinate;<span class=\"comment\">//持久化存储协调器  </span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSPersistentStore</span>            *store;<span class=\"comment\">//持久化存储区  </span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init;             <span class=\"comment\">//初始化  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)loadStore;      <span class=\"comment\">//加载cordite  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setupCoreData;  <span class=\"comment\">//设置cordite相关信息  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)saveContext;    <span class=\"comment\">//保存context</span></div></pre></td></tr></table></figure>\n<p>CoreDataHelp的实现文件如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"CoreDataHelper.h\"</span>  </span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">NSString</span> *storeFileName = <span class=\"string\">@\"demo.sqlite\"</span>;    <span class=\"comment\">//测试数据库  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CoreDataHelper</span>  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"meta\">#pragma mark - PATHS  </span></div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)applicationDocumentDirectory  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ '%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>],<span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *paths = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>);  </div><div class=\"line\">    <span class=\"keyword\">return</span> [paths lastObject];  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"built_in\">NSURL</span> *)applicationStoreDirectory  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ '%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>],<span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url = [[<span class=\"built_in\">NSURL</span> fileURLWithPath:[<span class=\"keyword\">self</span> applicationDocumentDirectory]] URLByAppendingPathComponent:<span class=\"string\">@\"stores\"</span>];  </div><div class=\"line\">    <span class=\"keyword\">if</span> (![[<span class=\"built_in\">NSFileManager</span> defaultManager]fileExistsAtPath:[url path]]) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error = <span class=\"literal\">nil</span>;  </div><div class=\"line\">        <span class=\"built_in\">BOOL</span> success   = [[<span class=\"built_in\">NSFileManager</span> defaultManager]createDirectoryAtURL:url  </div><div class=\"line\">                                               withIntermediateDirectories:<span class=\"literal\">YES</span>  </div><div class=\"line\">                                                                attributes:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                                     error:&amp;error];  </div><div class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"success create directory!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed create directory!\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">return</span> url;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"built_in\">NSURL</span> *)storeUrl  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *storeUrl = [[<span class=\"keyword\">self</span> applicationStoreDirectory]URLByAppendingPathComponent:storeFileName];  </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"storeurl = %@\"</span>,storeUrl);  </div><div class=\"line\">    <span class=\"keyword\">return</span> storeUrl;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"meta\">#pragma mark - SETUP  </span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;  </div><div class=\"line\">        _model      = [<span class=\"built_in\">NSManagedObjectModel</span> mergedModelFromBundles:<span class=\"literal\">nil</span>];  </div><div class=\"line\">        _coordinate = [[<span class=\"built_in\">NSPersistentStoreCoordinator</span> alloc]initWithManagedObjectModel:_model];  </div><div class=\"line\">        _context    = [[<span class=\"built_in\">NSManagedObjectContext</span> alloc]initWithConcurrencyType:<span class=\"built_in\">NSMainQueueConcurrencyType</span>];  </div><div class=\"line\">        [_context setMergePolicy:<span class=\"built_in\">NSMergeByPropertyObjectTrumpMergePolicy</span>];  </div><div class=\"line\">        [_context setPersistentStoreCoordinator:_coordinate];  </div><div class=\"line\">          </div><div class=\"line\">        _importContext = [[<span class=\"built_in\">NSManagedObjectContext</span> alloc]initWithConcurrencyType:<span class=\"built_in\">NSPrivateQueueConcurrencyType</span>];  </div><div class=\"line\">          </div><div class=\"line\">        [_importContext performBlock:^&#123;  </div><div class=\"line\">            [_importContext setPersistentStoreCoordinator:_coordinate];  </div><div class=\"line\">            [_importContext setMergePolicy:<span class=\"built_in\">NSMergeByPropertyObjectTrumpMergePolicy</span>];  </div><div class=\"line\">            [_importContext setUndoManager:<span class=\"literal\">nil</span>];  </div><div class=\"line\">        &#125;];  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"keyword\">void</span>)loadStore  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ ,'%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], <span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">if</span> (_store) &#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">NSError</span> *error;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//NSMigratePersistentStoresAutomaticallyOption coreData尝试将低版本的数据模型向高版本进行迁移  </span></div><div class=\"line\">        <span class=\"comment\">//NSInferMappingModelAutomaticallyOption    coredata会自动创建迁移模型，会去自动尝试  </span></div><div class=\"line\">        <span class=\"built_in\">NSDictionary</span> *option = @&#123;<span class=\"built_in\">NSMigratePersistentStoresAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                                 <span class=\"built_in\">NSInferMappingModelAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                                 <span class=\"built_in\">NSSQLitePragmasOption</span>:@&#123;<span class=\"string\">@\"journal_mode\"</span>:<span class=\"string\">@\"DELETE\"</span>&#125;&#125;;  </div><div class=\"line\">          </div><div class=\"line\">        _store = [_coordinate addPersistentStoreWithType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                           configuration:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                     URL:[<span class=\"keyword\">self</span> storeUrl]  </div><div class=\"line\">                                                 options:option  </div><div class=\"line\">                                                   error:&amp;error];  </div><div class=\"line\">        <span class=\"keyword\">if</span> (!_store) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed load store,error = %@\"</span>,error);  </div><div class=\"line\">                abort();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span><span class=\"comment\">/**/</span>&#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"successfully add store : %@\"</span>,_store);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"keyword\">void</span>)setupCoreData  </div><div class=\"line\">&#123;  </div><div class=\"line\">    [<span class=\"keyword\">self</span> loadStore];  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"keyword\">void</span>)saveContext  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> ([_context hasChanges]) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error = <span class=\"literal\">nil</span>;  </div><div class=\"line\">        <span class=\"keyword\">if</span> ([_context save:&amp;error]) &#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"context save successfully\"</span>);  </div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed save %@\"</span>,error);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"skipped context save , there is no changes\"</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p><a href=\"#2\">2.4 最后附上查询和保存数据库的代码</a><br>在AppDelegate.m文件里写一个方法，用来初始化CoreData数据库</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (CoreDataHelper *)cdh  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (!_cdh) &#123;  </div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;  </div><div class=\"line\">        <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;  </div><div class=\"line\">            _cdh = [CoreDataHelper new];  </div><div class=\"line\">              </div><div class=\"line\">        &#125;);  </div><div class=\"line\">        [_cdh setupCoreData];  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> _cdh;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面是插入数据，查询、保存数据的方法<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)demo  </div><div class=\"line\">&#123;  </div><div class=\"line\">    Item *bananer = [<span class=\"built_in\">NSEntityDescription</span> insertNewObjectForEntityForName:<span class=\"string\">@\"Item\"</span> inManagedObjectContext:[[<span class=\"keyword\">self</span> cdh] context]];  </div><div class=\"line\">    bananer.unit = kg;  </div><div class=\"line\">    bananer.name = <span class=\"string\">@\"bananer\"</span>;  </div><div class=\"line\">      </div><div class=\"line\">    Item *oranger = [<span class=\"built_in\">NSEntityDescription</span> insertNewObjectForEntityForName:<span class=\"string\">@\"Item\"</span> inManagedObjectContext:[[<span class=\"keyword\">self</span> cdh] context]];  </div><div class=\"line\">    oranger.unit = kg;  </div><div class=\"line\">    oranger.name = <span class=\"string\">@\"Oranger\"</span>;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">NSFetchRequest</span> *request = [<span class=\"built_in\">NSFetchRequest</span> fetchRequestWithEntityName:<span class=\"string\">@\"Item\"</span>];  </div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *result = [[[<span class=\"keyword\">self</span> cdh]context] executeFetchRequest:request error:<span class=\"literal\">nil</span>];  </div><div class=\"line\">    <span class=\"keyword\">for</span> (Item *item <span class=\"keyword\">in</span> result) &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"item.name = %@\"</span>,item.name);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    [[<span class=\"keyword\">self</span> cdh]saveContext];  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"#2\">2.5 小结</a><br>经过这么一番下来，终于将CoreData技术应用到我们的项目中了，我们现在能做到，把数据插入到数据库、也能从数据库中读取出数据来，也能保存数据。但是要注意这才是刚刚开始，接下来还有更多的coredata问题等着我们，比方说下节要介绍的数据迁移问题。</p>"},{"title":"iOS开发中遇到的同步机制","date":"2017-05-02T12:39:43.000Z","_content":"\n​\t今天主要是来讨论下，线程同步机制的问题。说到线程同步，一般人可能会想到**“NSLock”**、**“@synchronized”**、**“GCD信号量”**等等，好吧，其实这是我想到的，然而我要说的是，如果在面试中只答到这么几个可是远远不够的。所以我查找了下资料，这才发现原来ios中线程同步的方法可足足有将近10种，且听我娓娓道来。\n\n<!--more-->\n\n各个锁进行1000000此的加锁解锁的空操作时间如下\n\n```objc\nOSSpinLock: 46.15 ms\ndispatch_semaphore: 56.50 ms\npthread_mutex: 178.28 ms\nNSCondition: 193.38 ms\nNSLock: 175.02 ms\npthread_mutex(recursive): 172.56 ms\nNSRecursiveLock: 157.44 ms\nNSConditionLock: 490.04 ms\n@synchronized: 371.17 ms\n```\n\n### **NSLock**\n\n​\t提到NSLock，首先要提另外一个名词叫NSLocking，这是一个协议，主要就定义了俩个方法，一个叫 lock,一个叫unLock。NSLock其实就是确认了NSLocking协议的一个NSObject对象，那么NSLock如何使用呢？其实很简单，就是在你认为可能会发生多线程访问的地方进行lock 操作，在执行完相应代码之后，执行unlock操作。举个简单例子\n\n   ```objc\n   -(void)testLock{// 先简单描述下使用场景，现在有一个线程1，有一个线程2，都要访问字符串name，且线程1访问字符串要耗时3秒，线程2此时需要等待。\n   \t__block NSString *name = @\"成焱\";\n        NSOperationQueue *queue = [[NSOperationQueue alloc]init];\n       queue.maxConcurrentOperationCount = 3;\n       \n       \n       NSLock *lock = [NSLock new];\n       \n       [queue addOperationWithBlock:^{\n           NSLog(@\"1 将要上锁\");\n           [lock lock];\n           NSLog(@\"1 已上锁，访问资源\");\n           name = @\"哇哈哈\";\n           sleep(3);\n           NSLog(@\"1 将要解锁\");\n           [lock unlock];\n           NSLog(@\"1 已解锁\");\n       }];\n       \n       [queue addOperationWithBlock:^{\n           sleep(1);//保证此线程后面的方法后调用\n           NSLog(@\"2 将要上锁\");\n           [lock lock];\n           NSLog(@\"2 已上锁，访问资源\");\n           name = @\"康师傅\";\n           sleep(2);\n           NSLog(@\"2 将要解锁\");\n           [lock unlock];\n           NSLog(@\"2 已解锁\");\n           \n       }];\n   }\n   ```\n​\t***打印结果如下***\n\n   ```objc\n   2017-04-24 23:06:59.831694 test[1300:102434] 1 将要上锁\n   2017-04-24 23:06:59.831718 test[1300:102434] 1 已上锁，访问资源\n   2017-04-24 23:07:00.835992 test[1300:102435] 2 将要上锁\n   2017-04-24 23:07:02.836242 test[1300:102434] 1 将要解锁\n   2017-04-24 23:07:02.836385 test[1300:102434] 1 已解锁\n   2017-04-24 23:07:02.836443 test[1300:102435] 2 已上锁，访问资源\n   2017-04-24 23:07:04.841407 test[1300:102435] 2 将要解锁\n   2017-04-24 23:07:04.841528 test[1300:102435] 2 已解锁\n   ```\n\n   \t查看控制台的打印输出很明显的看到了，在线程一访问name时，加锁之后，线程2一直在等待，直到线程1释放锁之后，线程2才会去访问name。\n\n### **@synchronize** \n\n​\t想必但凡是开发过一段时间ios程序的同学，一定会对这个关键字不陌生。这个关键字的字面意思就是“同步”。那么它是如何实现同步的呢？\n\n​\t该特性允许传入一个NSObject类型的对象，并执行一个block，形如\n\n```objc\n@syncronized(obj){\n  // do work\n}\n```\n\n​\t网上查询资料获得，这个特性其实是对objc_sync_enter()于objc_sync_exit()的封装，其实际上等价于\n\n```objc\n@try{\n\t  objc_sync_enter(obj);\n }@finally{\n \t  objc_sync_exit(obj);\n }\n```\n\n​\t函数objc_sync_enter()内部实际进行的操作，是对传入的对象，分配递归锁，并存在哈希表中，感兴趣的同学可以参考这篇[blog](http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/),在这里我就不展开讨论了。不过下面还是举个简单例子来说明下如何使用这个特性，这里有个地方需要注意就是，***当传入的对象为nil时，将会从代码中移走线程安全***\n\n```objc\n- (void)testSynchronized\n{\n    __block NSString *source = @\"资源\";   \n    dispatch_queue_t global = dispatch_get_global_queue(0, 0);\n    \n    dispatch_async(global, ^{\n        @synchronized (source) {\n            NSLog(@\"1 将要执行\");\n            sleep(3);\n            NSLog(@\"1 执行完毕\");\n        }\n    });\n    \n    dispatch_async(global, ^{\n        sleep(1);//只是为了让这个线程后调用\n        @synchronized (source) {\n            NSLog(@\"2 将要执行\");\n            sleep(1);\n            NSLog(@\"2 执行完毕\");\n        }\n    });\n    \n}\n```\n\n​\t***打印结果如下***\n\n```objc\n2017-04-24 23:43:01.933835 test[1589:154385] 1 将要执行\n2017-04-24 23:43:04.938447 test[1589:154385] 1 执行完毕\n2017-04-24 23:43:04.938782 test[1589:154386] 2 将要执行\n2017-04-24 23:43:05.942177 test[1589:154386] 2 执行完毕\n```\n### **信号量**\n\n​\tGCD的信号量机制，通过消耗信号的方式，控制线程同步\n\n``````objc\n- (void)testSemaphore\n{\n    dispatch_queue_t global = dispatch_get_global_queue(0, 0);\n    \n    dispatch_semaphore_t semaphore = dispatch_semaphore_create(1);\n    dispatch_async(global, ^{\n        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\n        NSLog(@\"1 将要执行\");\n        sleep(3);\n        NSLog(@\"1 执行完毕\");\n        dispatch_semaphore_signal(semaphore);\n    });\n\n    dispatch_async(global, ^{\n        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\n        NSLog(@\"2 将要执行\");\n        sleep(3);\n        NSLog(@\"2 执行完毕\");\n        dispatch_semaphore_signal(semaphore);\n        \n    });\n}\n``````\n   \t***打印结果如下***\n\n   ```objc\n   2017-04-26 22:32:17.563019 test[914:142382] 1 将要执行\n   2017-04-26 22:32:20.568142 test[914:142382] 1 执行完毕\n   2017-04-26 22:32:20.568336 test[914:142383] 2 将要执行\n   2017-04-26 22:32:23.573598 test[914:142383] 2 执行完毕\n   ```\n\n### **NSConditionLock**\n\n​\t条件锁，当满足某种条件时，才会尝试获取锁，利用该特性，可以人为干预线程执行的依赖顺序，参见如下代码\n\n```objc\n- (void)testConditionLock\n{\n    int condition = 1;\n    \n    // 当满足条件时，如果锁空闲，可以获取到锁\n    NSConditionLock *conditionLock = [[NSConditionLock alloc]initWithCondition:condition];\n    \n    dispatch_queue_t global = dispatch_get_global_queue(0, 0);\n    dispatch_async(global, ^{\n        BOOL islocked = [conditionLock tryLockWhenCondition:1];\n        NSLog(@\"线程1 要执行\");\n        sleep(2);\n        NSLog(@\"线程1 执行完毕\");\n        if (islocked) {\n            [conditionLock unlockWithCondition:3];\n        }\n    });\n    dispatch_async(global, ^{\n        BOOL isLocked = [conditionLock lockWhenCondition:2 beforeDate:[NSDate dateWithTimeIntervalSinceNow:10]];\n        NSLog(@\"线程2 要执行\");\n        sleep(2);\n        NSLog(@\"线程2 执行完毕\");\n        if (isLocked) {\n            [conditionLock unlockWithCondition:1];\n        }\n    });\n    dispatch_async(global, ^{\n        BOOL isLocked = [conditionLock tryLockWhenCondition:3];\n        NSLog(@\"线程3 要执行\");\n        sleep(3);\n        NSLog(@\"线程3 执行完毕\");\n        if (isLocked) {\n            NSLog(@\"加锁了\");\n            [conditionLock unlockWithCondition:10];\n        }\n    });\n    \n}\n```\n\n​\t***打印结果如下***\n\n```objc\n2017-04-26 23:11:56.343532 test[1092:199052] 线程1 要执行\n2017-04-26 23:11:56.343546 test[1092:199054] 线程3 要执行\n2017-04-26 23:11:58.348745 test[1092:199052] 线程1 执行完毕\n2017-04-26 23:11:59.348618 test[1092:199054] 线程3 执行完毕\n2017-04-26 23:12:06.348449 test[1092:199053] 线程2 要执行\n2017-04-26 23:12:08.353647 test[1092:199053] 线程2 执行完毕\n```\n### **dispatch_barrier_async()与dispatch_barrier_sync()**\n\n​\tGCD提供了线程顺序控制的一个函数，假设有5个任务要执行，需要前俩个并发执行，执行完成之后执行第三个任务，等第三个执行完成才可以执行第四个和第五个任务，这个时候就可以考虑使用dispath_barrier_async()函数，具体dispatch_barrier_asyn与dispatch_barrier_sync有什么区别的话，稍后再说，请看下面这个例子\n\n```objc\n- (void)testBarrierAsyncAndSync\n{\n    /// 创建一个并发执行的队列\n    dispatch_queue_t global = dispatch_queue_create(\"com.demo.chengyan\", DISPATCH_QUEUE_CONCURRENT);\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务1\");\n    });\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务2\");\n    });\n    \n    \n    dispatch_barrier_async(global, ^{\n        sleep(3);\n        NSLog(@\"任务3\");\n    });\n    NSLog(@\"---------------\");\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务4\");\n    });\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务5\");\n    });\n}\n```\n\n​\t***打印结果如下***\n\n```objc\n2017-04-26 23:43:08.653034 test[1214:243421] ---------------\n2017-04-26 23:43:08.653138 test[1214:243447] 任务1\n2017-04-26 23:43:08.653151 test[1214:243448] 任务2\n2017-04-26 23:43:11.654589 test[1214:243447] 任务3\n2017-04-26 23:43:11.654715 test[1214:243447] 任务4\n2017-04-26 23:43:11.654728 test[1214:243448] 任务5\n```\n\n​\t可以看到由于是通过async的方式添加到队列中的，所以没有阻塞主线程，-----------------被最先执行了。同时注意到在任务3中，沉睡了3秒，而任务4和5都在等任务3执行完之后，才开始执行的。\n\n​\t那么接下来再看下sync的方式执行barrier会怎么样？\n\n```objc\n- (void)testBarrierAsyncAndSync\n{\n    /// 创建一个并发执行的队列\n    dispatch_queue_t global = dispatch_queue_create(\"com.demo.chengyan\", DISPATCH_QUEUE_CONCURRENT);\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务1\");\n    });\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务2\");\n    });\n    \n    \n    dispatch_barrier_sync(global, ^{\n        sleep(3);\n        NSLog(@\"任务3\");\n    });\n    NSLog(@\"---------------\");\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务4\");\n    });\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务5\");\n    });\n}\n```\n\n​\t***打印结果如下***\n\n```\n2017-04-26 23:53:57.275541 test[1249:258152] 任务1\n2017-04-26 23:53:57.275542 test[1249:258154] 任务2\n2017-04-26 23:54:00.280724 test[1249:258129] 任务3\n2017-04-26 23:54:00.280832 test[1249:258129] ---------------\n2017-04-26 23:54:00.280944 test[1249:258154] 任务4\n2017-04-26 23:54:00.281000 test[1249:258152] 任务5\n```\n\n​\t可以看到由于sync的方式，阻塞了主线程的操作，导致主线程后面的打印必须要等任务3完成之后才会执行。所以尽量不要用这种方式在主线程调用。防止卡到ui\n\n### **GCD的串行队列实际上也是可以起到锁的作用（略）**\n\n### **os_unfair_lock（系统非公平锁）**\n\n​\t在IOS10，MacOS10.12之后，苹果新提供的锁，用来替代OSSPinLock,根据官方文档说明，该锁解决了OSSPinLock的优先级反转问题，主要是通过该锁上携带的值以及它持有线程的所有权信息，系统可以以此做出相应的策略，来解决优先级反转的问题。就像它的名字一样，这是个非公平锁。\n\n​\t使用此锁，需要注意的是\n\n>1. ***unlock和lock操作必须得在同一个线程中，如果在不同的线程中解锁，将会导致线程直接crash。***\n>\n>2. ***该锁决不能通过shared或者mutiplay_mapped memory的方式，在多线程或者多进程中访问。因为该锁的实现，依赖于该锁的值和所在的进程。***\n>\n>   ***该锁主要是为了替代废弃的OSSPinLock，但是它在争夺资源的时候，不是靠自旋，而是在内核上等待唤醒。***\n>\n>3. ***Mac系统开发要在<u>10.12</u>之后只用，iOS需要在<u>iOS10</u>以后才能使用***\n\n​       \t最后要说明的是，此锁就像它的名字一样，是非公平的，具体啥意思呢？举个例子，解开锁的消费者，存在一种可能立即又重新获得了锁，导致那些在休眠中等待的不能被唤醒。这可能是处于性能的考虑，但是确实有一种可能导致等待者处于饥饿状态。\n\n​\t下面的代码简要演示下如何使用该锁\n\n```objc\n#import <os/lock.h>\n- (void)testUnfairlock\n{\n    os_unfair_lock_t unfairlock = &OS_UNFAIR_LOCK_INIT;\n    \n    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);\n    \n    dispatch_async(queue, ^{\n        sleep(1);\n        os_unfair_lock_lock(unfairlock);\n        NSLog(@\"线程1 将要执行\");\n        sleep(3);\n        NSLog(@\"线程1 执行结束\");\n        os_unfair_lock_unlock(unfairlock);\n    });\n    \n    dispatch_async(dispatch_get_main_queue(), ^{\n        os_unfair_lock_lock(unfairlock);\n        NSLog(@\"线程2 将要执行\");\n        sleep(2);\n        NSLog(@\"线程2 执行结束\");\n        os_unfair_lock_unlock(unfairlock);\n    });\n    \n}\n```\n\n​\t***打印结果如下***\n\n```objc\n2017-04-28 00:14:11.692782 test[892:121163] 线程2 将要执行\n2017-04-28 00:14:13.698007 test[892:121163] 线程2 执行结束\n2017-04-28 00:14:13.698230 test[892:121192] 线程1 将要执行\n2017-04-28 00:14:16.700588 test[892:121192] 线程1 执行结束\n```\n### **pthread_mutex_t（互斥锁）**\n\n​\t互斥锁和自旋锁的区别，主要就在于，当获取锁失败之后，自旋锁会一直轮询，而互斥锁会轮询大概一秒之后，进入休眠，等待唤醒，此外互斥锁，是有队列概念的，有一个等待队列，依次唤醒等待者。\n\n​\t互斥锁和NSLock的区别则在于互斥锁trylock返回正确时返回0，错误时返回错误值，而NSLock则只会返回NO和YES。\n\n​\t此外互斥锁也是性能比较高的锁。使用方式的话，如下\n\n```objc\n- (void)testPthreadMutex\n{\n    static pthread_mutex_t plock;\n    pthread_mutex_init(&plock, NULL);\n    \n    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);\n    \n    dispatch_async(queue, ^{\n        sleep(1);\n        pthread_mutex_lock(&plock);\n        NSLog(@\"线程1 将要执行\");\n        sleep(3);\n        NSLog(@\"线程1 执行结束\");\n        pthread_mutex_unlock(&plock);\n    });\n    \n    dispatch_async(dispatch_get_main_queue(), ^{\n        int code = pthread_mutex_lock(&plock);\n        NSLog(@\"线程2 将要执行,code = %d\",code);\n        sleep(2);\n        NSLog(@\"线程2 执行结束\");\n        pthread_mutex_unlock(&plock);\n    });\n    \n//    pthread_mutex_destroy(&plock);\n   \n}\n```\n\n​\t***执行结果如下***\n\n```objc\n2017-04-28 00:14:11.692782 test[892:121163] 线程2 将要执行\n2017-04-28 00:14:13.698007 test[892:121163] 线程2 执行结束\n2017-04-28 00:14:13.698230 test[892:121192] 线程1 将要执行\n2017-04-28 00:14:16.700588 test[892:121192] 线程1 执行结束\n```\n\n\n\n### **NSRecursiveLock(递归锁)**\n\n​\t此锁和NSLock的区别主要在于内部实现原理的不同，NSLock内部封装的pthread_mutex_t类型为PTHREAD_MUTEX_TIMED_NP，而NSRecursiveLock的类型为PTHREAD_MUTEX_RECURSIVE_NP，此外还有PTHREAD_MUTEX_ERRORCHECK_NP（检错锁）、PTHREAD_MUTEX_ADAPTIVE_NP（适应锁）。\n\n​\t递归锁，允许同一个线程对同一个锁成功获得多次，并通过多次unlock解锁。如果是不同线程请求，则在加锁线程解锁时重新竞争。\n\n​\t该锁的使用场景主要是在递归函数内部调用。\n\n​\t按照惯例还是看个代码来说明下如何使用。\n\n```objc\n- (void)testRecursiveLock\n{\n    NSRecursiveLock *recursive = [[NSRecursiveLock alloc]init];\n//\n    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);\n    \n    dispatch_async(queue, ^{\n        \n        [self getFactorial:10 cursive:recursive];\n        \n    });\n\n\n}\n\n- (int)getFactorial:(int)n cursive:(NSRecursiveLock *)lock\n{\n    int result = 0;\n    NSLog(@\"加锁\");\n    [lock lock];\n    \n    if (n <= 0) {\n        result = 1;\n    }else{\n        result = [self getFactorial:n-1 cursive:lock] * n;\n    }\n    \n    NSLog(@\"result =%d\",result);\n    \n    [lock unlock];\n    NSLog(@\"解锁\");\n    return result;\n}\n```\n\n​\t***打印结果如下***\n\n```objc\n2017-05-02 00:43:08.241134 test[1194:551965] 加锁\n2017-05-02 00:43:08.241902 test[1194:551965] 加锁\n2017-05-02 00:43:08.241920 test[1194:551965] 加锁\n2017-05-02 00:43:08.241934 test[1194:551965] 加锁\n2017-05-02 00:43:08.241942 test[1194:551965] 加锁\n2017-05-02 00:43:08.241950 test[1194:551965] 加锁\n2017-05-02 00:43:08.241957 test[1194:551965] 加锁\n2017-05-02 00:43:08.241974 test[1194:551965] 加锁\n2017-05-02 00:43:08.241991 test[1194:551965] 加锁\n2017-05-02 00:43:08.241998 test[1194:551965] 加锁\n2017-05-02 00:43:08.242005 test[1194:551965] 加锁\n2017-05-02 00:43:08.242023 test[1194:551965] result =1\n2017-05-02 00:43:08.242030 test[1194:551965] 解锁\n2017-05-02 00:43:08.242036 test[1194:551965] result =1\n2017-05-02 00:43:08.242053 test[1194:551965] 解锁\n2017-05-02 00:43:08.242095 test[1194:551965] result =2\n2017-05-02 00:43:08.242110 test[1194:551965] 解锁\n2017-05-02 00:43:08.242128 test[1194:551965] result =6\n2017-05-02 00:43:08.242136 test[1194:551965] 解锁\n2017-05-02 00:43:08.242143 test[1194:551965] result =24\n2017-05-02 00:43:08.242151 test[1194:551965] 解锁\n2017-05-02 00:43:08.242293 test[1194:551965] result =120\n2017-05-02 00:43:08.242309 test[1194:551965] 解锁\n2017-05-02 00:43:08.242317 test[1194:551965] result =720\n2017-05-02 00:43:08.242324 test[1194:551965] 解锁\n2017-05-02 00:43:08.242331 test[1194:551965] result =5040\n2017-05-02 00:43:08.242338 test[1194:551965] 解锁\n2017-05-02 00:43:08.242344 test[1194:551965] result =40320\n2017-05-02 00:43:08.242351 test[1194:551965] 解锁\n2017-05-02 00:43:08.242357 test[1194:551965] result =362880\n2017-05-02 00:43:08.242365 test[1194:551965] 解锁\n2017-05-02 00:43:08.242371 test[1194:551965] result =3628800\n2017-05-02 00:43:08.242378 test[1194:551965] 解锁\n```\n\n### **NSCondition**\n\n​\tNSCondition 的对象实际上作为一个锁和一个线程检查器：锁主要为了当检测条件时保护数据源，执行条件引发的任务；线程检查器主要是根据条件决定是否继续运行线程，即线程是否被阻塞。\n\n​\t使用方式主要包括，lock，unlock, wait, signal,四个方法，分别指获取锁、放开锁、等待信号、发送信号。同样用一段示例代码来看下它的用法\n\n```objc\n- (void)testCondition\n{\n    NSCondition *condition = [NSCondition new];\n    NSMutableArray *ops = [NSMutableArray array];\n    \n    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);\n    \n    dispatch_async(queue, ^{\n        [condition lock];\n        NSLog(@\"1 将要上锁\");\n        while (ops.count == 0) {\n            NSLog(@\"1 等待\");\n            [condition wait];\n        }\n        NSLog(@\"1 移除第一个元素\");\n        [ops removeObjectAtIndex:0];\n        \n        NSLog(@\"1 将要解锁\");\n        [condition unlock];\n    });\n    \n    dispatch_async(queue, ^{\n        NSLog(@\"2 将要上锁\");\n        [condition lock];\n        NSLog(@\"2 生产一个对象\");\n        [ops addObject:[NSObject new]];\n        NSLog(@\"2 发送信号\");\n        [condition signal];\n        NSLog(@\"2 将要解锁\");\n        [condition unlock];\n    });\n}\n```\n\n​\t***打印结果如下***\n\n```objc\n2017-05-02 01:04:28.327316 test[1240:582713] 2 将要上锁\n2017-05-02 01:04:28.327329 test[1240:582712] 1 将要上锁\n2017-05-02 01:04:28.328121 test[1240:582712] 1 等待\n2017-05-02 01:04:28.328149 test[1240:582713] 2 生产一个对象\n2017-05-02 01:04:28.328166 test[1240:582713] 2 发送信号\n2017-05-02 01:04:28.328182 test[1240:582713] 2 将要解锁\n2017-05-02 01:04:28.328233 test[1240:582712] 1 移除第一个元素\n2017-05-02 01:04:28.328261 test[1240:582712] 1 将要解锁\n```\n\n至此，ios里面的大部分同步方法我们已经基本了解了，剩下的就是在实践中选择合适的方法进行应用了。\n\n### 附录\n\n​\t如果有想查看DEMO的同学，可以点击[它](https://github.com/TripleFireMan/SynDemo.git)来下载DEMO，查看。\n\n### 参考资料\n\n---\n\n* [iOS开发中的8种锁](http://www.jianshu.com/p/8b8a01dd6356)\n* [深入理解ios开发中的锁](http://blog.csdn.net/super_man_ww/article/details/52753802)\n* [不再安全的OSSPinLock](http://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/)\n* [Threading Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW1)\n* [Linux线程-互斥锁pthread_mutex_t](http://blog.csdn.net/zmxiangde_88/article/details/7998458)\n* [iOS NSCondition详解](http://www.jianshu.com/p/5d20c15ae690)","source":"_posts/iOS开发中遇到的同步机制.md","raw":"---\ntitle: iOS开发中遇到的同步机制\ndate: 2017-05-02 20:39:43\ntags:\n---\n\n​\t今天主要是来讨论下，线程同步机制的问题。说到线程同步，一般人可能会想到**“NSLock”**、**“@synchronized”**、**“GCD信号量”**等等，好吧，其实这是我想到的，然而我要说的是，如果在面试中只答到这么几个可是远远不够的。所以我查找了下资料，这才发现原来ios中线程同步的方法可足足有将近10种，且听我娓娓道来。\n\n<!--more-->\n\n各个锁进行1000000此的加锁解锁的空操作时间如下\n\n```objc\nOSSpinLock: 46.15 ms\ndispatch_semaphore: 56.50 ms\npthread_mutex: 178.28 ms\nNSCondition: 193.38 ms\nNSLock: 175.02 ms\npthread_mutex(recursive): 172.56 ms\nNSRecursiveLock: 157.44 ms\nNSConditionLock: 490.04 ms\n@synchronized: 371.17 ms\n```\n\n### **NSLock**\n\n​\t提到NSLock，首先要提另外一个名词叫NSLocking，这是一个协议，主要就定义了俩个方法，一个叫 lock,一个叫unLock。NSLock其实就是确认了NSLocking协议的一个NSObject对象，那么NSLock如何使用呢？其实很简单，就是在你认为可能会发生多线程访问的地方进行lock 操作，在执行完相应代码之后，执行unlock操作。举个简单例子\n\n   ```objc\n   -(void)testLock{// 先简单描述下使用场景，现在有一个线程1，有一个线程2，都要访问字符串name，且线程1访问字符串要耗时3秒，线程2此时需要等待。\n   \t__block NSString *name = @\"成焱\";\n        NSOperationQueue *queue = [[NSOperationQueue alloc]init];\n       queue.maxConcurrentOperationCount = 3;\n       \n       \n       NSLock *lock = [NSLock new];\n       \n       [queue addOperationWithBlock:^{\n           NSLog(@\"1 将要上锁\");\n           [lock lock];\n           NSLog(@\"1 已上锁，访问资源\");\n           name = @\"哇哈哈\";\n           sleep(3);\n           NSLog(@\"1 将要解锁\");\n           [lock unlock];\n           NSLog(@\"1 已解锁\");\n       }];\n       \n       [queue addOperationWithBlock:^{\n           sleep(1);//保证此线程后面的方法后调用\n           NSLog(@\"2 将要上锁\");\n           [lock lock];\n           NSLog(@\"2 已上锁，访问资源\");\n           name = @\"康师傅\";\n           sleep(2);\n           NSLog(@\"2 将要解锁\");\n           [lock unlock];\n           NSLog(@\"2 已解锁\");\n           \n       }];\n   }\n   ```\n​\t***打印结果如下***\n\n   ```objc\n   2017-04-24 23:06:59.831694 test[1300:102434] 1 将要上锁\n   2017-04-24 23:06:59.831718 test[1300:102434] 1 已上锁，访问资源\n   2017-04-24 23:07:00.835992 test[1300:102435] 2 将要上锁\n   2017-04-24 23:07:02.836242 test[1300:102434] 1 将要解锁\n   2017-04-24 23:07:02.836385 test[1300:102434] 1 已解锁\n   2017-04-24 23:07:02.836443 test[1300:102435] 2 已上锁，访问资源\n   2017-04-24 23:07:04.841407 test[1300:102435] 2 将要解锁\n   2017-04-24 23:07:04.841528 test[1300:102435] 2 已解锁\n   ```\n\n   \t查看控制台的打印输出很明显的看到了，在线程一访问name时，加锁之后，线程2一直在等待，直到线程1释放锁之后，线程2才会去访问name。\n\n### **@synchronize** \n\n​\t想必但凡是开发过一段时间ios程序的同学，一定会对这个关键字不陌生。这个关键字的字面意思就是“同步”。那么它是如何实现同步的呢？\n\n​\t该特性允许传入一个NSObject类型的对象，并执行一个block，形如\n\n```objc\n@syncronized(obj){\n  // do work\n}\n```\n\n​\t网上查询资料获得，这个特性其实是对objc_sync_enter()于objc_sync_exit()的封装，其实际上等价于\n\n```objc\n@try{\n\t  objc_sync_enter(obj);\n }@finally{\n \t  objc_sync_exit(obj);\n }\n```\n\n​\t函数objc_sync_enter()内部实际进行的操作，是对传入的对象，分配递归锁，并存在哈希表中，感兴趣的同学可以参考这篇[blog](http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/),在这里我就不展开讨论了。不过下面还是举个简单例子来说明下如何使用这个特性，这里有个地方需要注意就是，***当传入的对象为nil时，将会从代码中移走线程安全***\n\n```objc\n- (void)testSynchronized\n{\n    __block NSString *source = @\"资源\";   \n    dispatch_queue_t global = dispatch_get_global_queue(0, 0);\n    \n    dispatch_async(global, ^{\n        @synchronized (source) {\n            NSLog(@\"1 将要执行\");\n            sleep(3);\n            NSLog(@\"1 执行完毕\");\n        }\n    });\n    \n    dispatch_async(global, ^{\n        sleep(1);//只是为了让这个线程后调用\n        @synchronized (source) {\n            NSLog(@\"2 将要执行\");\n            sleep(1);\n            NSLog(@\"2 执行完毕\");\n        }\n    });\n    \n}\n```\n\n​\t***打印结果如下***\n\n```objc\n2017-04-24 23:43:01.933835 test[1589:154385] 1 将要执行\n2017-04-24 23:43:04.938447 test[1589:154385] 1 执行完毕\n2017-04-24 23:43:04.938782 test[1589:154386] 2 将要执行\n2017-04-24 23:43:05.942177 test[1589:154386] 2 执行完毕\n```\n### **信号量**\n\n​\tGCD的信号量机制，通过消耗信号的方式，控制线程同步\n\n``````objc\n- (void)testSemaphore\n{\n    dispatch_queue_t global = dispatch_get_global_queue(0, 0);\n    \n    dispatch_semaphore_t semaphore = dispatch_semaphore_create(1);\n    dispatch_async(global, ^{\n        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\n        NSLog(@\"1 将要执行\");\n        sleep(3);\n        NSLog(@\"1 执行完毕\");\n        dispatch_semaphore_signal(semaphore);\n    });\n\n    dispatch_async(global, ^{\n        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);\n        NSLog(@\"2 将要执行\");\n        sleep(3);\n        NSLog(@\"2 执行完毕\");\n        dispatch_semaphore_signal(semaphore);\n        \n    });\n}\n``````\n   \t***打印结果如下***\n\n   ```objc\n   2017-04-26 22:32:17.563019 test[914:142382] 1 将要执行\n   2017-04-26 22:32:20.568142 test[914:142382] 1 执行完毕\n   2017-04-26 22:32:20.568336 test[914:142383] 2 将要执行\n   2017-04-26 22:32:23.573598 test[914:142383] 2 执行完毕\n   ```\n\n### **NSConditionLock**\n\n​\t条件锁，当满足某种条件时，才会尝试获取锁，利用该特性，可以人为干预线程执行的依赖顺序，参见如下代码\n\n```objc\n- (void)testConditionLock\n{\n    int condition = 1;\n    \n    // 当满足条件时，如果锁空闲，可以获取到锁\n    NSConditionLock *conditionLock = [[NSConditionLock alloc]initWithCondition:condition];\n    \n    dispatch_queue_t global = dispatch_get_global_queue(0, 0);\n    dispatch_async(global, ^{\n        BOOL islocked = [conditionLock tryLockWhenCondition:1];\n        NSLog(@\"线程1 要执行\");\n        sleep(2);\n        NSLog(@\"线程1 执行完毕\");\n        if (islocked) {\n            [conditionLock unlockWithCondition:3];\n        }\n    });\n    dispatch_async(global, ^{\n        BOOL isLocked = [conditionLock lockWhenCondition:2 beforeDate:[NSDate dateWithTimeIntervalSinceNow:10]];\n        NSLog(@\"线程2 要执行\");\n        sleep(2);\n        NSLog(@\"线程2 执行完毕\");\n        if (isLocked) {\n            [conditionLock unlockWithCondition:1];\n        }\n    });\n    dispatch_async(global, ^{\n        BOOL isLocked = [conditionLock tryLockWhenCondition:3];\n        NSLog(@\"线程3 要执行\");\n        sleep(3);\n        NSLog(@\"线程3 执行完毕\");\n        if (isLocked) {\n            NSLog(@\"加锁了\");\n            [conditionLock unlockWithCondition:10];\n        }\n    });\n    \n}\n```\n\n​\t***打印结果如下***\n\n```objc\n2017-04-26 23:11:56.343532 test[1092:199052] 线程1 要执行\n2017-04-26 23:11:56.343546 test[1092:199054] 线程3 要执行\n2017-04-26 23:11:58.348745 test[1092:199052] 线程1 执行完毕\n2017-04-26 23:11:59.348618 test[1092:199054] 线程3 执行完毕\n2017-04-26 23:12:06.348449 test[1092:199053] 线程2 要执行\n2017-04-26 23:12:08.353647 test[1092:199053] 线程2 执行完毕\n```\n### **dispatch_barrier_async()与dispatch_barrier_sync()**\n\n​\tGCD提供了线程顺序控制的一个函数，假设有5个任务要执行，需要前俩个并发执行，执行完成之后执行第三个任务，等第三个执行完成才可以执行第四个和第五个任务，这个时候就可以考虑使用dispath_barrier_async()函数，具体dispatch_barrier_asyn与dispatch_barrier_sync有什么区别的话，稍后再说，请看下面这个例子\n\n```objc\n- (void)testBarrierAsyncAndSync\n{\n    /// 创建一个并发执行的队列\n    dispatch_queue_t global = dispatch_queue_create(\"com.demo.chengyan\", DISPATCH_QUEUE_CONCURRENT);\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务1\");\n    });\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务2\");\n    });\n    \n    \n    dispatch_barrier_async(global, ^{\n        sleep(3);\n        NSLog(@\"任务3\");\n    });\n    NSLog(@\"---------------\");\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务4\");\n    });\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务5\");\n    });\n}\n```\n\n​\t***打印结果如下***\n\n```objc\n2017-04-26 23:43:08.653034 test[1214:243421] ---------------\n2017-04-26 23:43:08.653138 test[1214:243447] 任务1\n2017-04-26 23:43:08.653151 test[1214:243448] 任务2\n2017-04-26 23:43:11.654589 test[1214:243447] 任务3\n2017-04-26 23:43:11.654715 test[1214:243447] 任务4\n2017-04-26 23:43:11.654728 test[1214:243448] 任务5\n```\n\n​\t可以看到由于是通过async的方式添加到队列中的，所以没有阻塞主线程，-----------------被最先执行了。同时注意到在任务3中，沉睡了3秒，而任务4和5都在等任务3执行完之后，才开始执行的。\n\n​\t那么接下来再看下sync的方式执行barrier会怎么样？\n\n```objc\n- (void)testBarrierAsyncAndSync\n{\n    /// 创建一个并发执行的队列\n    dispatch_queue_t global = dispatch_queue_create(\"com.demo.chengyan\", DISPATCH_QUEUE_CONCURRENT);\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务1\");\n    });\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务2\");\n    });\n    \n    \n    dispatch_barrier_sync(global, ^{\n        sleep(3);\n        NSLog(@\"任务3\");\n    });\n    NSLog(@\"---------------\");\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务4\");\n    });\n    \n    dispatch_async(global, ^{\n        NSLog(@\"任务5\");\n    });\n}\n```\n\n​\t***打印结果如下***\n\n```\n2017-04-26 23:53:57.275541 test[1249:258152] 任务1\n2017-04-26 23:53:57.275542 test[1249:258154] 任务2\n2017-04-26 23:54:00.280724 test[1249:258129] 任务3\n2017-04-26 23:54:00.280832 test[1249:258129] ---------------\n2017-04-26 23:54:00.280944 test[1249:258154] 任务4\n2017-04-26 23:54:00.281000 test[1249:258152] 任务5\n```\n\n​\t可以看到由于sync的方式，阻塞了主线程的操作，导致主线程后面的打印必须要等任务3完成之后才会执行。所以尽量不要用这种方式在主线程调用。防止卡到ui\n\n### **GCD的串行队列实际上也是可以起到锁的作用（略）**\n\n### **os_unfair_lock（系统非公平锁）**\n\n​\t在IOS10，MacOS10.12之后，苹果新提供的锁，用来替代OSSPinLock,根据官方文档说明，该锁解决了OSSPinLock的优先级反转问题，主要是通过该锁上携带的值以及它持有线程的所有权信息，系统可以以此做出相应的策略，来解决优先级反转的问题。就像它的名字一样，这是个非公平锁。\n\n​\t使用此锁，需要注意的是\n\n>1. ***unlock和lock操作必须得在同一个线程中，如果在不同的线程中解锁，将会导致线程直接crash。***\n>\n>2. ***该锁决不能通过shared或者mutiplay_mapped memory的方式，在多线程或者多进程中访问。因为该锁的实现，依赖于该锁的值和所在的进程。***\n>\n>   ***该锁主要是为了替代废弃的OSSPinLock，但是它在争夺资源的时候，不是靠自旋，而是在内核上等待唤醒。***\n>\n>3. ***Mac系统开发要在<u>10.12</u>之后只用，iOS需要在<u>iOS10</u>以后才能使用***\n\n​       \t最后要说明的是，此锁就像它的名字一样，是非公平的，具体啥意思呢？举个例子，解开锁的消费者，存在一种可能立即又重新获得了锁，导致那些在休眠中等待的不能被唤醒。这可能是处于性能的考虑，但是确实有一种可能导致等待者处于饥饿状态。\n\n​\t下面的代码简要演示下如何使用该锁\n\n```objc\n#import <os/lock.h>\n- (void)testUnfairlock\n{\n    os_unfair_lock_t unfairlock = &OS_UNFAIR_LOCK_INIT;\n    \n    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);\n    \n    dispatch_async(queue, ^{\n        sleep(1);\n        os_unfair_lock_lock(unfairlock);\n        NSLog(@\"线程1 将要执行\");\n        sleep(3);\n        NSLog(@\"线程1 执行结束\");\n        os_unfair_lock_unlock(unfairlock);\n    });\n    \n    dispatch_async(dispatch_get_main_queue(), ^{\n        os_unfair_lock_lock(unfairlock);\n        NSLog(@\"线程2 将要执行\");\n        sleep(2);\n        NSLog(@\"线程2 执行结束\");\n        os_unfair_lock_unlock(unfairlock);\n    });\n    \n}\n```\n\n​\t***打印结果如下***\n\n```objc\n2017-04-28 00:14:11.692782 test[892:121163] 线程2 将要执行\n2017-04-28 00:14:13.698007 test[892:121163] 线程2 执行结束\n2017-04-28 00:14:13.698230 test[892:121192] 线程1 将要执行\n2017-04-28 00:14:16.700588 test[892:121192] 线程1 执行结束\n```\n### **pthread_mutex_t（互斥锁）**\n\n​\t互斥锁和自旋锁的区别，主要就在于，当获取锁失败之后，自旋锁会一直轮询，而互斥锁会轮询大概一秒之后，进入休眠，等待唤醒，此外互斥锁，是有队列概念的，有一个等待队列，依次唤醒等待者。\n\n​\t互斥锁和NSLock的区别则在于互斥锁trylock返回正确时返回0，错误时返回错误值，而NSLock则只会返回NO和YES。\n\n​\t此外互斥锁也是性能比较高的锁。使用方式的话，如下\n\n```objc\n- (void)testPthreadMutex\n{\n    static pthread_mutex_t plock;\n    pthread_mutex_init(&plock, NULL);\n    \n    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);\n    \n    dispatch_async(queue, ^{\n        sleep(1);\n        pthread_mutex_lock(&plock);\n        NSLog(@\"线程1 将要执行\");\n        sleep(3);\n        NSLog(@\"线程1 执行结束\");\n        pthread_mutex_unlock(&plock);\n    });\n    \n    dispatch_async(dispatch_get_main_queue(), ^{\n        int code = pthread_mutex_lock(&plock);\n        NSLog(@\"线程2 将要执行,code = %d\",code);\n        sleep(2);\n        NSLog(@\"线程2 执行结束\");\n        pthread_mutex_unlock(&plock);\n    });\n    \n//    pthread_mutex_destroy(&plock);\n   \n}\n```\n\n​\t***执行结果如下***\n\n```objc\n2017-04-28 00:14:11.692782 test[892:121163] 线程2 将要执行\n2017-04-28 00:14:13.698007 test[892:121163] 线程2 执行结束\n2017-04-28 00:14:13.698230 test[892:121192] 线程1 将要执行\n2017-04-28 00:14:16.700588 test[892:121192] 线程1 执行结束\n```\n\n\n\n### **NSRecursiveLock(递归锁)**\n\n​\t此锁和NSLock的区别主要在于内部实现原理的不同，NSLock内部封装的pthread_mutex_t类型为PTHREAD_MUTEX_TIMED_NP，而NSRecursiveLock的类型为PTHREAD_MUTEX_RECURSIVE_NP，此外还有PTHREAD_MUTEX_ERRORCHECK_NP（检错锁）、PTHREAD_MUTEX_ADAPTIVE_NP（适应锁）。\n\n​\t递归锁，允许同一个线程对同一个锁成功获得多次，并通过多次unlock解锁。如果是不同线程请求，则在加锁线程解锁时重新竞争。\n\n​\t该锁的使用场景主要是在递归函数内部调用。\n\n​\t按照惯例还是看个代码来说明下如何使用。\n\n```objc\n- (void)testRecursiveLock\n{\n    NSRecursiveLock *recursive = [[NSRecursiveLock alloc]init];\n//\n    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);\n    \n    dispatch_async(queue, ^{\n        \n        [self getFactorial:10 cursive:recursive];\n        \n    });\n\n\n}\n\n- (int)getFactorial:(int)n cursive:(NSRecursiveLock *)lock\n{\n    int result = 0;\n    NSLog(@\"加锁\");\n    [lock lock];\n    \n    if (n <= 0) {\n        result = 1;\n    }else{\n        result = [self getFactorial:n-1 cursive:lock] * n;\n    }\n    \n    NSLog(@\"result =%d\",result);\n    \n    [lock unlock];\n    NSLog(@\"解锁\");\n    return result;\n}\n```\n\n​\t***打印结果如下***\n\n```objc\n2017-05-02 00:43:08.241134 test[1194:551965] 加锁\n2017-05-02 00:43:08.241902 test[1194:551965] 加锁\n2017-05-02 00:43:08.241920 test[1194:551965] 加锁\n2017-05-02 00:43:08.241934 test[1194:551965] 加锁\n2017-05-02 00:43:08.241942 test[1194:551965] 加锁\n2017-05-02 00:43:08.241950 test[1194:551965] 加锁\n2017-05-02 00:43:08.241957 test[1194:551965] 加锁\n2017-05-02 00:43:08.241974 test[1194:551965] 加锁\n2017-05-02 00:43:08.241991 test[1194:551965] 加锁\n2017-05-02 00:43:08.241998 test[1194:551965] 加锁\n2017-05-02 00:43:08.242005 test[1194:551965] 加锁\n2017-05-02 00:43:08.242023 test[1194:551965] result =1\n2017-05-02 00:43:08.242030 test[1194:551965] 解锁\n2017-05-02 00:43:08.242036 test[1194:551965] result =1\n2017-05-02 00:43:08.242053 test[1194:551965] 解锁\n2017-05-02 00:43:08.242095 test[1194:551965] result =2\n2017-05-02 00:43:08.242110 test[1194:551965] 解锁\n2017-05-02 00:43:08.242128 test[1194:551965] result =6\n2017-05-02 00:43:08.242136 test[1194:551965] 解锁\n2017-05-02 00:43:08.242143 test[1194:551965] result =24\n2017-05-02 00:43:08.242151 test[1194:551965] 解锁\n2017-05-02 00:43:08.242293 test[1194:551965] result =120\n2017-05-02 00:43:08.242309 test[1194:551965] 解锁\n2017-05-02 00:43:08.242317 test[1194:551965] result =720\n2017-05-02 00:43:08.242324 test[1194:551965] 解锁\n2017-05-02 00:43:08.242331 test[1194:551965] result =5040\n2017-05-02 00:43:08.242338 test[1194:551965] 解锁\n2017-05-02 00:43:08.242344 test[1194:551965] result =40320\n2017-05-02 00:43:08.242351 test[1194:551965] 解锁\n2017-05-02 00:43:08.242357 test[1194:551965] result =362880\n2017-05-02 00:43:08.242365 test[1194:551965] 解锁\n2017-05-02 00:43:08.242371 test[1194:551965] result =3628800\n2017-05-02 00:43:08.242378 test[1194:551965] 解锁\n```\n\n### **NSCondition**\n\n​\tNSCondition 的对象实际上作为一个锁和一个线程检查器：锁主要为了当检测条件时保护数据源，执行条件引发的任务；线程检查器主要是根据条件决定是否继续运行线程，即线程是否被阻塞。\n\n​\t使用方式主要包括，lock，unlock, wait, signal,四个方法，分别指获取锁、放开锁、等待信号、发送信号。同样用一段示例代码来看下它的用法\n\n```objc\n- (void)testCondition\n{\n    NSCondition *condition = [NSCondition new];\n    NSMutableArray *ops = [NSMutableArray array];\n    \n    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);\n    \n    dispatch_async(queue, ^{\n        [condition lock];\n        NSLog(@\"1 将要上锁\");\n        while (ops.count == 0) {\n            NSLog(@\"1 等待\");\n            [condition wait];\n        }\n        NSLog(@\"1 移除第一个元素\");\n        [ops removeObjectAtIndex:0];\n        \n        NSLog(@\"1 将要解锁\");\n        [condition unlock];\n    });\n    \n    dispatch_async(queue, ^{\n        NSLog(@\"2 将要上锁\");\n        [condition lock];\n        NSLog(@\"2 生产一个对象\");\n        [ops addObject:[NSObject new]];\n        NSLog(@\"2 发送信号\");\n        [condition signal];\n        NSLog(@\"2 将要解锁\");\n        [condition unlock];\n    });\n}\n```\n\n​\t***打印结果如下***\n\n```objc\n2017-05-02 01:04:28.327316 test[1240:582713] 2 将要上锁\n2017-05-02 01:04:28.327329 test[1240:582712] 1 将要上锁\n2017-05-02 01:04:28.328121 test[1240:582712] 1 等待\n2017-05-02 01:04:28.328149 test[1240:582713] 2 生产一个对象\n2017-05-02 01:04:28.328166 test[1240:582713] 2 发送信号\n2017-05-02 01:04:28.328182 test[1240:582713] 2 将要解锁\n2017-05-02 01:04:28.328233 test[1240:582712] 1 移除第一个元素\n2017-05-02 01:04:28.328261 test[1240:582712] 1 将要解锁\n```\n\n至此，ios里面的大部分同步方法我们已经基本了解了，剩下的就是在实践中选择合适的方法进行应用了。\n\n### 附录\n\n​\t如果有想查看DEMO的同学，可以点击[它](https://github.com/TripleFireMan/SynDemo.git)来下载DEMO，查看。\n\n### 参考资料\n\n---\n\n* [iOS开发中的8种锁](http://www.jianshu.com/p/8b8a01dd6356)\n* [深入理解ios开发中的锁](http://blog.csdn.net/super_man_ww/article/details/52753802)\n* [不再安全的OSSPinLock](http://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/)\n* [Threading Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW1)\n* [Linux线程-互斥锁pthread_mutex_t](http://blog.csdn.net/zmxiangde_88/article/details/7998458)\n* [iOS NSCondition详解](http://www.jianshu.com/p/5d20c15ae690)","slug":"iOS开发中遇到的同步机制","published":1,"updated":"2017-06-08T15:57:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8ywr000ihx5l3ekjd8fz","content":"<p>​    今天主要是来讨论下，线程同步机制的问题。说到线程同步，一般人可能会想到<strong>“NSLock”</strong>、<strong>“@synchronized”</strong>、<strong>“GCD信号量”</strong>等等，好吧，其实这是我想到的，然而我要说的是，如果在面试中只答到这么几个可是远远不够的。所以我查找了下资料，这才发现原来ios中线程同步的方法可足足有将近10种，且听我娓娓道来。</p>\n<a id=\"more\"></a>\n<p>各个锁进行1000000此的加锁解锁的空操作时间如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">OSSpinLock: <span class=\"number\">46.15</span> ms</div><div class=\"line\">dispatch_semaphore: <span class=\"number\">56.50</span> ms</div><div class=\"line\">pthread_mutex: <span class=\"number\">178.28</span> ms</div><div class=\"line\"><span class=\"built_in\">NSCondition</span>: <span class=\"number\">193.38</span> ms</div><div class=\"line\"><span class=\"built_in\">NSLock</span>: <span class=\"number\">175.02</span> ms</div><div class=\"line\">pthread_mutex(recursive): <span class=\"number\">172.56</span> ms</div><div class=\"line\"><span class=\"built_in\">NSRecursiveLock</span>: <span class=\"number\">157.44</span> ms</div><div class=\"line\"><span class=\"built_in\">NSConditionLock</span>: <span class=\"number\">490.04</span> ms</div><div class=\"line\"><span class=\"keyword\">@synchronized</span>: <span class=\"number\">371.17</span> ms</div></pre></td></tr></table></figure>\n<h3 id=\"NSLock\"><a href=\"#NSLock\" class=\"headerlink\" title=\"NSLock\"></a><strong>NSLock</strong></h3><p>​    提到NSLock，首先要提另外一个名词叫NSLocking，这是一个协议，主要就定义了俩个方法，一个叫 lock,一个叫unLock。NSLock其实就是确认了NSLocking协议的一个NSObject对象，那么NSLock如何使用呢？其实很简单，就是在你认为可能会发生多线程访问的地方进行lock 操作，在执行完相应代码之后，执行unlock操作。举个简单例子</p>\n   <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)testLock&#123;<span class=\"comment\">// 先简单描述下使用场景，现在有一个线程1，有一个线程2，都要访问字符串name，且线程1访问字符串要耗时3秒，线程2此时需要等待。</span></div><div class=\"line\">\t__block <span class=\"built_in\">NSString</span> *name = <span class=\"string\">@\"成焱\"</span>;</div><div class=\"line\">     <span class=\"built_in\">NSOperationQueue</span> *queue = [[<span class=\"built_in\">NSOperationQueue</span> alloc]init];</div><div class=\"line\">    queue.maxConcurrentOperationCount = <span class=\"number\">3</span>;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSLock</span> *lock = [<span class=\"built_in\">NSLock</span> new];</div><div class=\"line\">    </div><div class=\"line\">    [queue addOperationWithBlock:^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 将要上锁\"</span>);</div><div class=\"line\">        [lock lock];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 已上锁，访问资源\"</span>);</div><div class=\"line\">        name = <span class=\"string\">@\"哇哈哈\"</span>;</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 将要解锁\"</span>);</div><div class=\"line\">        [lock unlock];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 已解锁\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [queue addOperationWithBlock:^&#123;</div><div class=\"line\">        sleep(<span class=\"number\">1</span>);<span class=\"comment\">//保证此线程后面的方法后调用</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 将要上锁\"</span>);</div><div class=\"line\">        [lock lock];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 已上锁，访问资源\"</span>);</div><div class=\"line\">        name = <span class=\"string\">@\"康师傅\"</span>;</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 将要解锁\"</span>);</div><div class=\"line\">        [lock unlock];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 已解锁\"</span>);</div><div class=\"line\">        </div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n   <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">06</span>:<span class=\"number\">59.831694</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102434</span>] <span class=\"number\">1</span> 将要上锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">06</span>:<span class=\"number\">59.831718</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102434</span>] <span class=\"number\">1</span> 已上锁，访问资源</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">07</span>:<span class=\"number\">00.835992</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102435</span>] <span class=\"number\">2</span> 将要上锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">07</span>:<span class=\"number\">02.836242</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102434</span>] <span class=\"number\">1</span> 将要解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">07</span>:<span class=\"number\">02.836385</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102434</span>] <span class=\"number\">1</span> 已解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">07</span>:<span class=\"number\">02.836443</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102435</span>] <span class=\"number\">2</span> 已上锁，访问资源</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">07</span>:<span class=\"number\">04.841407</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102435</span>] <span class=\"number\">2</span> 将要解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">07</span>:<span class=\"number\">04.841528</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102435</span>] <span class=\"number\">2</span> 已解锁</div></pre></td></tr></table></figure>\n<pre><code>查看控制台的打印输出很明显的看到了，在线程一访问name时，加锁之后，线程2一直在等待，直到线程1释放锁之后，线程2才会去访问name。\n</code></pre><h3 id=\"synchronize\"><a href=\"#synchronize\" class=\"headerlink\" title=\"@synchronize\"></a><strong>@synchronize</strong></h3><p>​    想必但凡是开发过一段时间ios程序的同学，一定会对这个关键字不陌生。这个关键字的字面意思就是“同步”。那么它是如何实现同步的呢？</p>\n<p>​    该特性允许传入一个NSObject类型的对象，并执行一个block，形如</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@syncronized(obj)&#123;</div><div class=\"line\">  <span class=\"comment\">// do work</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    网上查询资料获得，这个特性其实是对objc_sync_enter()于objc_sync_exit()的封装，其实际上等价于</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@try</span>&#123;</div><div class=\"line\">\t  objc_sync_enter(obj);</div><div class=\"line\"> &#125;<span class=\"keyword\">@finally</span>&#123;</div><div class=\"line\"> \t  objc_sync_exit(obj);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>​    函数objc_sync_enter()内部实际进行的操作，是对传入的对象，分配递归锁，并存在哈希表中，感兴趣的同学可以参考这篇<a href=\"http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/\" target=\"_blank\" rel=\"external\">blog</a>,在这里我就不展开讨论了。不过下面还是举个简单例子来说明下如何使用这个特性，这里有个地方需要注意就是，<strong><em>当传入的对象为nil时，将会从代码中移走线程安全</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testSynchronized</div><div class=\"line\">&#123;</div><div class=\"line\">    __block <span class=\"built_in\">NSString</span> *source = <span class=\"string\">@\"资源\"</span>;   </div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> global = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"keyword\">@synchronized</span> (source) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 将要执行\"</span>);</div><div class=\"line\">            sleep(<span class=\"number\">3</span>);</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 执行完毕\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        sleep(<span class=\"number\">1</span>);<span class=\"comment\">//只是为了让这个线程后调用</span></div><div class=\"line\">        <span class=\"keyword\">@synchronized</span> (source) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 将要执行\"</span>);</div><div class=\"line\">            sleep(<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 执行完毕\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">01.933835</span> test[<span class=\"number\">1589</span>:<span class=\"number\">154385</span>] <span class=\"number\">1</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">04.938447</span> test[<span class=\"number\">1589</span>:<span class=\"number\">154385</span>] <span class=\"number\">1</span> 执行完毕</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">04.938782</span> test[<span class=\"number\">1589</span>:<span class=\"number\">154386</span>] <span class=\"number\">2</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">05.942177</span> test[<span class=\"number\">1589</span>:<span class=\"number\">154386</span>] <span class=\"number\">2</span> 执行完毕</div></pre></td></tr></table></figure>\n<h3 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a><strong>信号量</strong></h3><p>​    GCD的信号量机制，通过消耗信号的方式，控制线程同步</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testSemaphore</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> global = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 将要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 执行完毕\"</span>);</div><div class=\"line\">        dispatch_semaphore_signal(semaphore);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 将要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 执行完毕\"</span>);</div><div class=\"line\">        dispatch_semaphore_signal(semaphore);</div><div class=\"line\">        </div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>***打印结果如下***\n</code></pre>   <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">22</span>:<span class=\"number\">32</span>:<span class=\"number\">17.563019</span> test[<span class=\"number\">914</span>:<span class=\"number\">142382</span>] <span class=\"number\">1</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">22</span>:<span class=\"number\">32</span>:<span class=\"number\">20.568142</span> test[<span class=\"number\">914</span>:<span class=\"number\">142382</span>] <span class=\"number\">1</span> 执行完毕</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">22</span>:<span class=\"number\">32</span>:<span class=\"number\">20.568336</span> test[<span class=\"number\">914</span>:<span class=\"number\">142383</span>] <span class=\"number\">2</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">22</span>:<span class=\"number\">32</span>:<span class=\"number\">23.573598</span> test[<span class=\"number\">914</span>:<span class=\"number\">142383</span>] <span class=\"number\">2</span> 执行完毕</div></pre></td></tr></table></figure>\n<h3 id=\"NSConditionLock\"><a href=\"#NSConditionLock\" class=\"headerlink\" title=\"NSConditionLock\"></a><strong>NSConditionLock</strong></h3><p>​    条件锁，当满足某种条件时，才会尝试获取锁，利用该特性，可以人为干预线程执行的依赖顺序，参见如下代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testConditionLock</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> condition = <span class=\"number\">1</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 当满足条件时，如果锁空闲，可以获取到锁</span></div><div class=\"line\">    <span class=\"built_in\">NSConditionLock</span> *conditionLock = [[<span class=\"built_in\">NSConditionLock</span> alloc]initWithCondition:condition];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> global = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">BOOL</span> islocked = [conditionLock tryLockWhenCondition:<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程1 要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程1 执行完毕\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (islocked) &#123;</div><div class=\"line\">            [conditionLock unlockWithCondition:<span class=\"number\">3</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">BOOL</span> isLocked = [conditionLock lockWhenCondition:<span class=\"number\">2</span> beforeDate:[<span class=\"built_in\">NSDate</span> dateWithTimeIntervalSinceNow:<span class=\"number\">10</span>]];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程2 要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程2 执行完毕\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (isLocked) &#123;</div><div class=\"line\">            [conditionLock unlockWithCondition:<span class=\"number\">1</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">BOOL</span> isLocked = [conditionLock tryLockWhenCondition:<span class=\"number\">3</span>];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程3 要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程3 执行完毕\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (isLocked) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"加锁了\"</span>);</div><div class=\"line\">            [conditionLock unlockWithCondition:<span class=\"number\">10</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">11</span>:<span class=\"number\">56.343532</span> test[<span class=\"number\">1092</span>:<span class=\"number\">199052</span>] 线程<span class=\"number\">1</span> 要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">11</span>:<span class=\"number\">56.343546</span> test[<span class=\"number\">1092</span>:<span class=\"number\">199054</span>] 线程<span class=\"number\">3</span> 要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">11</span>:<span class=\"number\">58.348745</span> test[<span class=\"number\">1092</span>:<span class=\"number\">199052</span>] 线程<span class=\"number\">1</span> 执行完毕</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">11</span>:<span class=\"number\">59.348618</span> test[<span class=\"number\">1092</span>:<span class=\"number\">199054</span>] 线程<span class=\"number\">3</span> 执行完毕</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">12</span>:<span class=\"number\">06.348449</span> test[<span class=\"number\">1092</span>:<span class=\"number\">199053</span>] 线程<span class=\"number\">2</span> 要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">12</span>:<span class=\"number\">08.353647</span> test[<span class=\"number\">1092</span>:<span class=\"number\">199053</span>] 线程<span class=\"number\">2</span> 执行完毕</div></pre></td></tr></table></figure>\n<h3 id=\"dispatch-barrier-async-与dispatch-barrier-sync\"><a href=\"#dispatch-barrier-async-与dispatch-barrier-sync\" class=\"headerlink\" title=\"dispatch_barrier_async()与dispatch_barrier_sync()\"></a><strong>dispatch_barrier_async()与dispatch_barrier_sync()</strong></h3><p>​    GCD提供了线程顺序控制的一个函数，假设有5个任务要执行，需要前俩个并发执行，执行完成之后执行第三个任务，等第三个执行完成才可以执行第四个和第五个任务，这个时候就可以考虑使用dispath_barrier_async()函数，具体dispatch_barrier_asyn与dispatch_barrier_sync有什么区别的话，稍后再说，请看下面这个例子</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testBarrierAsyncAndSync</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/// 创建一个并发执行的队列</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> global = dispatch_queue_create(<span class=\"string\">\"com.demo.chengyan\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务1\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    dispatch_barrier_async(global, ^&#123;</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务3\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"---------------\"</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务4\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务5\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">08.653034</span> test[<span class=\"number\">1214</span>:<span class=\"number\">243421</span>] ---------------</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">08.653138</span> test[<span class=\"number\">1214</span>:<span class=\"number\">243447</span>] 任务<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">08.653151</span> test[<span class=\"number\">1214</span>:<span class=\"number\">243448</span>] 任务<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">11.654589</span> test[<span class=\"number\">1214</span>:<span class=\"number\">243447</span>] 任务<span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">11.654715</span> test[<span class=\"number\">1214</span>:<span class=\"number\">243447</span>] 任务<span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">11.654728</span> test[<span class=\"number\">1214</span>:<span class=\"number\">243448</span>] 任务<span class=\"number\">5</span></div></pre></td></tr></table></figure>\n<p>​    可以看到由于是通过async的方式添加到队列中的，所以没有阻塞主线程，—————–被最先执行了。同时注意到在任务3中，沉睡了3秒，而任务4和5都在等任务3执行完之后，才开始执行的。</p>\n<p>​    那么接下来再看下sync的方式执行barrier会怎么样？</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testBarrierAsyncAndSync</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/// 创建一个并发执行的队列</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> global = dispatch_queue_create(<span class=\"string\">\"com.demo.chengyan\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务1\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    dispatch_barrier_sync(global, ^&#123;</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务3\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"---------------\"</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务4\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务5\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">2017-04-26 23:53:57.275541 test[1249:258152] 任务1</div><div class=\"line\">2017-04-26 23:53:57.275542 test[1249:258154] 任务2</div><div class=\"line\">2017-04-26 23:54:00.280724 test[1249:258129] 任务3</div><div class=\"line\">2017-04-26 23:54:00.280832 test[1249:258129] ---------------</div><div class=\"line\">2017-04-26 23:54:00.280944 test[1249:258154] 任务4</div><div class=\"line\">2017-04-26 23:54:00.281000 test[1249:258152] 任务5</div></pre></td></tr></table></figure>\n<p>​    可以看到由于sync的方式，阻塞了主线程的操作，导致主线程后面的打印必须要等任务3完成之后才会执行。所以尽量不要用这种方式在主线程调用。防止卡到ui</p>\n<h3 id=\"GCD的串行队列实际上也是可以起到锁的作用（略）\"><a href=\"#GCD的串行队列实际上也是可以起到锁的作用（略）\" class=\"headerlink\" title=\"GCD的串行队列实际上也是可以起到锁的作用（略）\"></a><strong>GCD的串行队列实际上也是可以起到锁的作用（略）</strong></h3><h3 id=\"os-unfair-lock（系统非公平锁）\"><a href=\"#os-unfair-lock（系统非公平锁）\" class=\"headerlink\" title=\"os_unfair_lock（系统非公平锁）\"></a><strong>os_unfair_lock（系统非公平锁）</strong></h3><p>​    在IOS10，MacOS10.12之后，苹果新提供的锁，用来替代OSSPinLock,根据官方文档说明，该锁解决了OSSPinLock的优先级反转问题，主要是通过该锁上携带的值以及它持有线程的所有权信息，系统可以以此做出相应的策略，来解决优先级反转的问题。就像它的名字一样，这是个非公平锁。</p>\n<p>​    使用此锁，需要注意的是</p>\n<blockquote>\n<ol>\n<li><p><strong><em>unlock和lock操作必须得在同一个线程中，如果在不同的线程中解锁，将会导致线程直接crash。</em></strong></p>\n</li>\n<li><p><strong><em>该锁决不能通过shared或者mutiplay_mapped memory的方式，在多线程或者多进程中访问。因为该锁的实现，依赖于该锁的值和所在的进程。</em></strong></p>\n<p><strong><em>该锁主要是为了替代废弃的OSSPinLock，但是它在争夺资源的时候，不是靠自旋，而是在内核上等待唤醒。</em></strong></p>\n</li>\n<li><p><strong><em>Mac系统开发要在<u>10.12</u>之后只用，iOS需要在<u>iOS10</u>以后才能使用</em></strong></p>\n</li>\n</ol>\n</blockquote>\n<p>​           最后要说明的是，此锁就像它的名字一样，是非公平的，具体啥意思呢？举个例子，解开锁的消费者，存在一种可能立即又重新获得了锁，导致那些在休眠中等待的不能被唤醒。这可能是处于性能的考虑，但是确实有一种可能导致等待者处于饥饿状态。</p>\n<p>​    下面的代码简要演示下如何使用该锁</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;os/lock.h&gt;</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)testUnfairlock</div><div class=\"line\">&#123;</div><div class=\"line\">    os_unfair_lock_t unfairlock = &amp;OS_UNFAIR_LOCK_INIT;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">        sleep(<span class=\"number\">1</span>);</div><div class=\"line\">        os_unfair_lock_lock(unfairlock);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程1 将要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程1 执行结束\"</span>);</div><div class=\"line\">        os_unfair_lock_unlock(unfairlock);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        os_unfair_lock_lock(unfairlock);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程2 将要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程2 执行结束\"</span>);</div><div class=\"line\">        os_unfair_lock_unlock(unfairlock);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">11.692782</span> test[<span class=\"number\">892</span>:<span class=\"number\">121163</span>] 线程<span class=\"number\">2</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">13.698007</span> test[<span class=\"number\">892</span>:<span class=\"number\">121163</span>] 线程<span class=\"number\">2</span> 执行结束</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">13.698230</span> test[<span class=\"number\">892</span>:<span class=\"number\">121192</span>] 线程<span class=\"number\">1</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">16.700588</span> test[<span class=\"number\">892</span>:<span class=\"number\">121192</span>] 线程<span class=\"number\">1</span> 执行结束</div></pre></td></tr></table></figure>\n<h3 id=\"pthread-mutex-t（互斥锁）\"><a href=\"#pthread-mutex-t（互斥锁）\" class=\"headerlink\" title=\"pthread_mutex_t（互斥锁）\"></a><strong>pthread_mutex_t（互斥锁）</strong></h3><p>​    互斥锁和自旋锁的区别，主要就在于，当获取锁失败之后，自旋锁会一直轮询，而互斥锁会轮询大概一秒之后，进入休眠，等待唤醒，此外互斥锁，是有队列概念的，有一个等待队列，依次唤醒等待者。</p>\n<p>​    互斥锁和NSLock的区别则在于互斥锁trylock返回正确时返回0，错误时返回错误值，而NSLock则只会返回NO和YES。</p>\n<p>​    此外互斥锁也是性能比较高的锁。使用方式的话，如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testPthreadMutex</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> pthread_mutex_t plock;</div><div class=\"line\">    pthread_mutex_init(&amp;plock, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">        sleep(<span class=\"number\">1</span>);</div><div class=\"line\">        pthread_mutex_lock(&amp;plock);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程1 将要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程1 执行结束\"</span>);</div><div class=\"line\">        pthread_mutex_unlock(&amp;plock);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> code = pthread_mutex_lock(&amp;plock);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程2 将要执行,code = %d\"</span>,code);</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程2 执行结束\"</span>);</div><div class=\"line\">        pthread_mutex_unlock(&amp;plock);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//    pthread_mutex_destroy(&amp;plock);</span></div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>执行结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">11.692782</span> test[<span class=\"number\">892</span>:<span class=\"number\">121163</span>] 线程<span class=\"number\">2</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">13.698007</span> test[<span class=\"number\">892</span>:<span class=\"number\">121163</span>] 线程<span class=\"number\">2</span> 执行结束</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">13.698230</span> test[<span class=\"number\">892</span>:<span class=\"number\">121192</span>] 线程<span class=\"number\">1</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">16.700588</span> test[<span class=\"number\">892</span>:<span class=\"number\">121192</span>] 线程<span class=\"number\">1</span> 执行结束</div></pre></td></tr></table></figure>\n<h3 id=\"NSRecursiveLock-递归锁\"><a href=\"#NSRecursiveLock-递归锁\" class=\"headerlink\" title=\"NSRecursiveLock(递归锁)\"></a><strong>NSRecursiveLock(递归锁)</strong></h3><p>​    此锁和NSLock的区别主要在于内部实现原理的不同，NSLock内部封装的pthread_mutex_t类型为PTHREAD_MUTEX_TIMED_NP，而NSRecursiveLock的类型为PTHREAD_MUTEX_RECURSIVE_NP，此外还有PTHREAD_MUTEX_ERRORCHECK_NP（检错锁）、PTHREAD_MUTEX_ADAPTIVE_NP（适应锁）。</p>\n<p>​    递归锁，允许同一个线程对同一个锁成功获得多次，并通过多次unlock解锁。如果是不同线程请求，则在加锁线程解锁时重新竞争。</p>\n<p>​    该锁的使用场景主要是在递归函数内部调用。</p>\n<p>​    按照惯例还是看个代码来说明下如何使用。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testRecursiveLock</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSRecursiveLock</span> *recursive = [[<span class=\"built_in\">NSRecursiveLock</span> alloc]init];</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        [<span class=\"keyword\">self</span> getFactorial:<span class=\"number\">10</span> cursive:recursive];</div><div class=\"line\">        </div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">int</span>)getFactorial:(<span class=\"keyword\">int</span>)n cursive:(<span class=\"built_in\">NSRecursiveLock</span> *)lock</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"加锁\"</span>);</div><div class=\"line\">    [lock lock];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        result = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        result = [<span class=\"keyword\">self</span> getFactorial:n<span class=\"number\">-1</span> cursive:lock] * n;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"result =%d\"</span>,result);</div><div class=\"line\">    </div><div class=\"line\">    [lock unlock];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"解锁\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241134</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241902</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241920</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241934</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241942</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241950</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241957</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241974</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241991</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241998</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242005</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242023</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242030</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242036</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242053</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242095</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242110</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242128</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242136</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242143</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">24</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242151</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242293</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">120</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242309</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242317</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">720</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242324</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242331</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">5040</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242338</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242344</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">40320</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242351</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242357</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">362880</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242365</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242371</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">3628800</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242378</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div></pre></td></tr></table></figure>\n<h3 id=\"NSCondition\"><a href=\"#NSCondition\" class=\"headerlink\" title=\"NSCondition\"></a><strong>NSCondition</strong></h3><p>​    NSCondition 的对象实际上作为一个锁和一个线程检查器：锁主要为了当检测条件时保护数据源，执行条件引发的任务；线程检查器主要是根据条件决定是否继续运行线程，即线程是否被阻塞。</p>\n<p>​    使用方式主要包括，lock，unlock, wait, signal,四个方法，分别指获取锁、放开锁、等待信号、发送信号。同样用一段示例代码来看下它的用法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testCondition</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSCondition</span> *condition = [<span class=\"built_in\">NSCondition</span> new];</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *ops = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">        [condition lock];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 将要上锁\"</span>);</div><div class=\"line\">        <span class=\"keyword\">while</span> (ops.count == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 等待\"</span>);</div><div class=\"line\">            [condition wait];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 移除第一个元素\"</span>);</div><div class=\"line\">        [ops removeObjectAtIndex:<span class=\"number\">0</span>];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 将要解锁\"</span>);</div><div class=\"line\">        [condition unlock];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 将要上锁\"</span>);</div><div class=\"line\">        [condition lock];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 生产一个对象\"</span>);</div><div class=\"line\">        [ops addObject:[<span class=\"built_in\">NSObject</span> new]];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 发送信号\"</span>);</div><div class=\"line\">        [condition signal];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 将要解锁\"</span>);</div><div class=\"line\">        [condition unlock];</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.327316</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582713</span>] <span class=\"number\">2</span> 将要上锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.327329</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582712</span>] <span class=\"number\">1</span> 将要上锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.328121</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582712</span>] <span class=\"number\">1</span> 等待</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.328149</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582713</span>] <span class=\"number\">2</span> 生产一个对象</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.328166</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582713</span>] <span class=\"number\">2</span> 发送信号</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.328182</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582713</span>] <span class=\"number\">2</span> 将要解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.328233</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582712</span>] <span class=\"number\">1</span> 移除第一个元素</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.328261</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582712</span>] <span class=\"number\">1</span> 将要解锁</div></pre></td></tr></table></figure>\n<p>至此，ios里面的大部分同步方法我们已经基本了解了，剩下的就是在实践中选择合适的方法进行应用了。</p>\n<h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><p>​    如果有想查看DEMO的同学，可以点击<a href=\"https://github.com/TripleFireMan/SynDemo.git\" target=\"_blank\" rel=\"external\">它</a>来下载DEMO，查看。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><hr>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/8b8a01dd6356\" target=\"_blank\" rel=\"external\">iOS开发中的8种锁</a></li>\n<li><a href=\"http://blog.csdn.net/super_man_ww/article/details/52753802\" target=\"_blank\" rel=\"external\">深入理解ios开发中的锁</a></li>\n<li><a href=\"http://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/\" target=\"_blank\" rel=\"external\">不再安全的OSSPinLock</a></li>\n<li><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW1\" target=\"_blank\" rel=\"external\">Threading Programming Guide</a></li>\n<li><a href=\"http://blog.csdn.net/zmxiangde_88/article/details/7998458\" target=\"_blank\" rel=\"external\">Linux线程-互斥锁pthread_mutex_t</a></li>\n<li><a href=\"http://www.jianshu.com/p/5d20c15ae690\" target=\"_blank\" rel=\"external\">iOS NSCondition详解</a></li>\n</ul>\n","excerpt":"<p>​    今天主要是来讨论下，线程同步机制的问题。说到线程同步，一般人可能会想到<strong>“NSLock”</strong>、<strong>“@synchronized”</strong>、<strong>“GCD信号量”</strong>等等，好吧，其实这是我想到的，然而我要说的是，如果在面试中只答到这么几个可是远远不够的。所以我查找了下资料，这才发现原来ios中线程同步的方法可足足有将近10种，且听我娓娓道来。</p>","more":"<p>各个锁进行1000000此的加锁解锁的空操作时间如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">OSSpinLock: <span class=\"number\">46.15</span> ms</div><div class=\"line\">dispatch_semaphore: <span class=\"number\">56.50</span> ms</div><div class=\"line\">pthread_mutex: <span class=\"number\">178.28</span> ms</div><div class=\"line\"><span class=\"built_in\">NSCondition</span>: <span class=\"number\">193.38</span> ms</div><div class=\"line\"><span class=\"built_in\">NSLock</span>: <span class=\"number\">175.02</span> ms</div><div class=\"line\">pthread_mutex(recursive): <span class=\"number\">172.56</span> ms</div><div class=\"line\"><span class=\"built_in\">NSRecursiveLock</span>: <span class=\"number\">157.44</span> ms</div><div class=\"line\"><span class=\"built_in\">NSConditionLock</span>: <span class=\"number\">490.04</span> ms</div><div class=\"line\"><span class=\"keyword\">@synchronized</span>: <span class=\"number\">371.17</span> ms</div></pre></td></tr></table></figure>\n<h3 id=\"NSLock\"><a href=\"#NSLock\" class=\"headerlink\" title=\"NSLock\"></a><strong>NSLock</strong></h3><p>​    提到NSLock，首先要提另外一个名词叫NSLocking，这是一个协议，主要就定义了俩个方法，一个叫 lock,一个叫unLock。NSLock其实就是确认了NSLocking协议的一个NSObject对象，那么NSLock如何使用呢？其实很简单，就是在你认为可能会发生多线程访问的地方进行lock 操作，在执行完相应代码之后，执行unlock操作。举个简单例子</p>\n   <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)testLock&#123;<span class=\"comment\">// 先简单描述下使用场景，现在有一个线程1，有一个线程2，都要访问字符串name，且线程1访问字符串要耗时3秒，线程2此时需要等待。</span></div><div class=\"line\">\t__block <span class=\"built_in\">NSString</span> *name = <span class=\"string\">@\"成焱\"</span>;</div><div class=\"line\">     <span class=\"built_in\">NSOperationQueue</span> *queue = [[<span class=\"built_in\">NSOperationQueue</span> alloc]init];</div><div class=\"line\">    queue.maxConcurrentOperationCount = <span class=\"number\">3</span>;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSLock</span> *lock = [<span class=\"built_in\">NSLock</span> new];</div><div class=\"line\">    </div><div class=\"line\">    [queue addOperationWithBlock:^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 将要上锁\"</span>);</div><div class=\"line\">        [lock lock];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 已上锁，访问资源\"</span>);</div><div class=\"line\">        name = <span class=\"string\">@\"哇哈哈\"</span>;</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 将要解锁\"</span>);</div><div class=\"line\">        [lock unlock];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 已解锁\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [queue addOperationWithBlock:^&#123;</div><div class=\"line\">        sleep(<span class=\"number\">1</span>);<span class=\"comment\">//保证此线程后面的方法后调用</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 将要上锁\"</span>);</div><div class=\"line\">        [lock lock];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 已上锁，访问资源\"</span>);</div><div class=\"line\">        name = <span class=\"string\">@\"康师傅\"</span>;</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 将要解锁\"</span>);</div><div class=\"line\">        [lock unlock];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 已解锁\"</span>);</div><div class=\"line\">        </div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n   <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">06</span>:<span class=\"number\">59.831694</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102434</span>] <span class=\"number\">1</span> 将要上锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">06</span>:<span class=\"number\">59.831718</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102434</span>] <span class=\"number\">1</span> 已上锁，访问资源</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">07</span>:<span class=\"number\">00.835992</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102435</span>] <span class=\"number\">2</span> 将要上锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">07</span>:<span class=\"number\">02.836242</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102434</span>] <span class=\"number\">1</span> 将要解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">07</span>:<span class=\"number\">02.836385</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102434</span>] <span class=\"number\">1</span> 已解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">07</span>:<span class=\"number\">02.836443</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102435</span>] <span class=\"number\">2</span> 已上锁，访问资源</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">07</span>:<span class=\"number\">04.841407</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102435</span>] <span class=\"number\">2</span> 将要解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">07</span>:<span class=\"number\">04.841528</span> test[<span class=\"number\">1300</span>:<span class=\"number\">102435</span>] <span class=\"number\">2</span> 已解锁</div></pre></td></tr></table></figure>\n<pre><code>查看控制台的打印输出很明显的看到了，在线程一访问name时，加锁之后，线程2一直在等待，直到线程1释放锁之后，线程2才会去访问name。\n</code></pre><h3 id=\"synchronize\"><a href=\"#synchronize\" class=\"headerlink\" title=\"@synchronize\"></a><strong>@synchronize</strong></h3><p>​    想必但凡是开发过一段时间ios程序的同学，一定会对这个关键字不陌生。这个关键字的字面意思就是“同步”。那么它是如何实现同步的呢？</p>\n<p>​    该特性允许传入一个NSObject类型的对象，并执行一个block，形如</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@syncronized(obj)&#123;</div><div class=\"line\">  <span class=\"comment\">// do work</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    网上查询资料获得，这个特性其实是对objc_sync_enter()于objc_sync_exit()的封装，其实际上等价于</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@try</span>&#123;</div><div class=\"line\">\t  objc_sync_enter(obj);</div><div class=\"line\"> &#125;<span class=\"keyword\">@finally</span>&#123;</div><div class=\"line\"> \t  objc_sync_exit(obj);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>​    函数objc_sync_enter()内部实际进行的操作，是对传入的对象，分配递归锁，并存在哈希表中，感兴趣的同学可以参考这篇<a href=\"http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/\">blog</a>,在这里我就不展开讨论了。不过下面还是举个简单例子来说明下如何使用这个特性，这里有个地方需要注意就是，<strong><em>当传入的对象为nil时，将会从代码中移走线程安全</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testSynchronized</div><div class=\"line\">&#123;</div><div class=\"line\">    __block <span class=\"built_in\">NSString</span> *source = <span class=\"string\">@\"资源\"</span>;   </div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> global = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"keyword\">@synchronized</span> (source) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 将要执行\"</span>);</div><div class=\"line\">            sleep(<span class=\"number\">3</span>);</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 执行完毕\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        sleep(<span class=\"number\">1</span>);<span class=\"comment\">//只是为了让这个线程后调用</span></div><div class=\"line\">        <span class=\"keyword\">@synchronized</span> (source) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 将要执行\"</span>);</div><div class=\"line\">            sleep(<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 执行完毕\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">01.933835</span> test[<span class=\"number\">1589</span>:<span class=\"number\">154385</span>] <span class=\"number\">1</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">04.938447</span> test[<span class=\"number\">1589</span>:<span class=\"number\">154385</span>] <span class=\"number\">1</span> 执行完毕</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">04.938782</span> test[<span class=\"number\">1589</span>:<span class=\"number\">154386</span>] <span class=\"number\">2</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-24</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">05.942177</span> test[<span class=\"number\">1589</span>:<span class=\"number\">154386</span>] <span class=\"number\">2</span> 执行完毕</div></pre></td></tr></table></figure>\n<h3 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a><strong>信号量</strong></h3><p>​    GCD的信号量机制，通过消耗信号的方式，控制线程同步</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testSemaphore</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> global = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 将要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 执行完毕\"</span>);</div><div class=\"line\">        dispatch_semaphore_signal(semaphore);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 将要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 执行完毕\"</span>);</div><div class=\"line\">        dispatch_semaphore_signal(semaphore);</div><div class=\"line\">        </div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>***打印结果如下***\n</code></pre>   <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">22</span>:<span class=\"number\">32</span>:<span class=\"number\">17.563019</span> test[<span class=\"number\">914</span>:<span class=\"number\">142382</span>] <span class=\"number\">1</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">22</span>:<span class=\"number\">32</span>:<span class=\"number\">20.568142</span> test[<span class=\"number\">914</span>:<span class=\"number\">142382</span>] <span class=\"number\">1</span> 执行完毕</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">22</span>:<span class=\"number\">32</span>:<span class=\"number\">20.568336</span> test[<span class=\"number\">914</span>:<span class=\"number\">142383</span>] <span class=\"number\">2</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">22</span>:<span class=\"number\">32</span>:<span class=\"number\">23.573598</span> test[<span class=\"number\">914</span>:<span class=\"number\">142383</span>] <span class=\"number\">2</span> 执行完毕</div></pre></td></tr></table></figure>\n<h3 id=\"NSConditionLock\"><a href=\"#NSConditionLock\" class=\"headerlink\" title=\"NSConditionLock\"></a><strong>NSConditionLock</strong></h3><p>​    条件锁，当满足某种条件时，才会尝试获取锁，利用该特性，可以人为干预线程执行的依赖顺序，参见如下代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testConditionLock</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> condition = <span class=\"number\">1</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 当满足条件时，如果锁空闲，可以获取到锁</span></div><div class=\"line\">    <span class=\"built_in\">NSConditionLock</span> *conditionLock = [[<span class=\"built_in\">NSConditionLock</span> alloc]initWithCondition:condition];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> global = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">BOOL</span> islocked = [conditionLock tryLockWhenCondition:<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程1 要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程1 执行完毕\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (islocked) &#123;</div><div class=\"line\">            [conditionLock unlockWithCondition:<span class=\"number\">3</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">BOOL</span> isLocked = [conditionLock lockWhenCondition:<span class=\"number\">2</span> beforeDate:[<span class=\"built_in\">NSDate</span> dateWithTimeIntervalSinceNow:<span class=\"number\">10</span>]];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程2 要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程2 执行完毕\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (isLocked) &#123;</div><div class=\"line\">            [conditionLock unlockWithCondition:<span class=\"number\">1</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">BOOL</span> isLocked = [conditionLock tryLockWhenCondition:<span class=\"number\">3</span>];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程3 要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程3 执行完毕\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (isLocked) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"加锁了\"</span>);</div><div class=\"line\">            [conditionLock unlockWithCondition:<span class=\"number\">10</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">11</span>:<span class=\"number\">56.343532</span> test[<span class=\"number\">1092</span>:<span class=\"number\">199052</span>] 线程<span class=\"number\">1</span> 要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">11</span>:<span class=\"number\">56.343546</span> test[<span class=\"number\">1092</span>:<span class=\"number\">199054</span>] 线程<span class=\"number\">3</span> 要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">11</span>:<span class=\"number\">58.348745</span> test[<span class=\"number\">1092</span>:<span class=\"number\">199052</span>] 线程<span class=\"number\">1</span> 执行完毕</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">11</span>:<span class=\"number\">59.348618</span> test[<span class=\"number\">1092</span>:<span class=\"number\">199054</span>] 线程<span class=\"number\">3</span> 执行完毕</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">12</span>:<span class=\"number\">06.348449</span> test[<span class=\"number\">1092</span>:<span class=\"number\">199053</span>] 线程<span class=\"number\">2</span> 要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">12</span>:<span class=\"number\">08.353647</span> test[<span class=\"number\">1092</span>:<span class=\"number\">199053</span>] 线程<span class=\"number\">2</span> 执行完毕</div></pre></td></tr></table></figure>\n<h3 id=\"dispatch-barrier-async-与dispatch-barrier-sync\"><a href=\"#dispatch-barrier-async-与dispatch-barrier-sync\" class=\"headerlink\" title=\"dispatch_barrier_async()与dispatch_barrier_sync()\"></a><strong>dispatch_barrier_async()与dispatch_barrier_sync()</strong></h3><p>​    GCD提供了线程顺序控制的一个函数，假设有5个任务要执行，需要前俩个并发执行，执行完成之后执行第三个任务，等第三个执行完成才可以执行第四个和第五个任务，这个时候就可以考虑使用dispath_barrier_async()函数，具体dispatch_barrier_asyn与dispatch_barrier_sync有什么区别的话，稍后再说，请看下面这个例子</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testBarrierAsyncAndSync</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/// 创建一个并发执行的队列</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> global = dispatch_queue_create(<span class=\"string\">\"com.demo.chengyan\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务1\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    dispatch_barrier_async(global, ^&#123;</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务3\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"---------------\"</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务4\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务5\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">08.653034</span> test[<span class=\"number\">1214</span>:<span class=\"number\">243421</span>] ---------------</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">08.653138</span> test[<span class=\"number\">1214</span>:<span class=\"number\">243447</span>] 任务<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">08.653151</span> test[<span class=\"number\">1214</span>:<span class=\"number\">243448</span>] 任务<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">11.654589</span> test[<span class=\"number\">1214</span>:<span class=\"number\">243447</span>] 任务<span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">11.654715</span> test[<span class=\"number\">1214</span>:<span class=\"number\">243447</span>] 任务<span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span> <span class=\"number\">23</span>:<span class=\"number\">43</span>:<span class=\"number\">11.654728</span> test[<span class=\"number\">1214</span>:<span class=\"number\">243448</span>] 任务<span class=\"number\">5</span></div></pre></td></tr></table></figure>\n<p>​    可以看到由于是通过async的方式添加到队列中的，所以没有阻塞主线程，—————–被最先执行了。同时注意到在任务3中，沉睡了3秒，而任务4和5都在等任务3执行完之后，才开始执行的。</p>\n<p>​    那么接下来再看下sync的方式执行barrier会怎么样？</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testBarrierAsyncAndSync</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/// 创建一个并发执行的队列</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> global = dispatch_queue_create(<span class=\"string\">\"com.demo.chengyan\"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务1\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务2\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    dispatch_barrier_sync(global, ^&#123;</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务3\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"---------------\"</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务4\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(global, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"任务5\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">2017-04-26 23:53:57.275541 test[1249:258152] 任务1</div><div class=\"line\">2017-04-26 23:53:57.275542 test[1249:258154] 任务2</div><div class=\"line\">2017-04-26 23:54:00.280724 test[1249:258129] 任务3</div><div class=\"line\">2017-04-26 23:54:00.280832 test[1249:258129] ---------------</div><div class=\"line\">2017-04-26 23:54:00.280944 test[1249:258154] 任务4</div><div class=\"line\">2017-04-26 23:54:00.281000 test[1249:258152] 任务5</div></pre></td></tr></table></figure>\n<p>​    可以看到由于sync的方式，阻塞了主线程的操作，导致主线程后面的打印必须要等任务3完成之后才会执行。所以尽量不要用这种方式在主线程调用。防止卡到ui</p>\n<h3 id=\"GCD的串行队列实际上也是可以起到锁的作用（略）\"><a href=\"#GCD的串行队列实际上也是可以起到锁的作用（略）\" class=\"headerlink\" title=\"GCD的串行队列实际上也是可以起到锁的作用（略）\"></a><strong>GCD的串行队列实际上也是可以起到锁的作用（略）</strong></h3><h3 id=\"os-unfair-lock（系统非公平锁）\"><a href=\"#os-unfair-lock（系统非公平锁）\" class=\"headerlink\" title=\"os_unfair_lock（系统非公平锁）\"></a><strong>os_unfair_lock（系统非公平锁）</strong></h3><p>​    在IOS10，MacOS10.12之后，苹果新提供的锁，用来替代OSSPinLock,根据官方文档说明，该锁解决了OSSPinLock的优先级反转问题，主要是通过该锁上携带的值以及它持有线程的所有权信息，系统可以以此做出相应的策略，来解决优先级反转的问题。就像它的名字一样，这是个非公平锁。</p>\n<p>​    使用此锁，需要注意的是</p>\n<blockquote>\n<ol>\n<li><p><strong><em>unlock和lock操作必须得在同一个线程中，如果在不同的线程中解锁，将会导致线程直接crash。</em></strong></p>\n</li>\n<li><p><strong><em>该锁决不能通过shared或者mutiplay_mapped memory的方式，在多线程或者多进程中访问。因为该锁的实现，依赖于该锁的值和所在的进程。</em></strong></p>\n<p><strong><em>该锁主要是为了替代废弃的OSSPinLock，但是它在争夺资源的时候，不是靠自旋，而是在内核上等待唤醒。</em></strong></p>\n</li>\n<li><p><strong><em>Mac系统开发要在<u>10.12</u>之后只用，iOS需要在<u>iOS10</u>以后才能使用</em></strong></p>\n</li>\n</ol>\n</blockquote>\n<p>​           最后要说明的是，此锁就像它的名字一样，是非公平的，具体啥意思呢？举个例子，解开锁的消费者，存在一种可能立即又重新获得了锁，导致那些在休眠中等待的不能被唤醒。这可能是处于性能的考虑，但是确实有一种可能导致等待者处于饥饿状态。</p>\n<p>​    下面的代码简要演示下如何使用该锁</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;os/lock.h&gt;</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)testUnfairlock</div><div class=\"line\">&#123;</div><div class=\"line\">    os_unfair_lock_t unfairlock = &amp;OS_UNFAIR_LOCK_INIT;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">        sleep(<span class=\"number\">1</span>);</div><div class=\"line\">        os_unfair_lock_lock(unfairlock);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程1 将要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程1 执行结束\"</span>);</div><div class=\"line\">        os_unfair_lock_unlock(unfairlock);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        os_unfair_lock_lock(unfairlock);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程2 将要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程2 执行结束\"</span>);</div><div class=\"line\">        os_unfair_lock_unlock(unfairlock);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">11.692782</span> test[<span class=\"number\">892</span>:<span class=\"number\">121163</span>] 线程<span class=\"number\">2</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">13.698007</span> test[<span class=\"number\">892</span>:<span class=\"number\">121163</span>] 线程<span class=\"number\">2</span> 执行结束</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">13.698230</span> test[<span class=\"number\">892</span>:<span class=\"number\">121192</span>] 线程<span class=\"number\">1</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">16.700588</span> test[<span class=\"number\">892</span>:<span class=\"number\">121192</span>] 线程<span class=\"number\">1</span> 执行结束</div></pre></td></tr></table></figure>\n<h3 id=\"pthread-mutex-t（互斥锁）\"><a href=\"#pthread-mutex-t（互斥锁）\" class=\"headerlink\" title=\"pthread_mutex_t（互斥锁）\"></a><strong>pthread_mutex_t（互斥锁）</strong></h3><p>​    互斥锁和自旋锁的区别，主要就在于，当获取锁失败之后，自旋锁会一直轮询，而互斥锁会轮询大概一秒之后，进入休眠，等待唤醒，此外互斥锁，是有队列概念的，有一个等待队列，依次唤醒等待者。</p>\n<p>​    互斥锁和NSLock的区别则在于互斥锁trylock返回正确时返回0，错误时返回错误值，而NSLock则只会返回NO和YES。</p>\n<p>​    此外互斥锁也是性能比较高的锁。使用方式的话，如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testPthreadMutex</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> pthread_mutex_t plock;</div><div class=\"line\">    pthread_mutex_init(&amp;plock, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">        sleep(<span class=\"number\">1</span>);</div><div class=\"line\">        pthread_mutex_lock(&amp;plock);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程1 将要执行\"</span>);</div><div class=\"line\">        sleep(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程1 执行结束\"</span>);</div><div class=\"line\">        pthread_mutex_unlock(&amp;plock);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> code = pthread_mutex_lock(&amp;plock);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程2 将要执行,code = %d\"</span>,code);</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程2 执行结束\"</span>);</div><div class=\"line\">        pthread_mutex_unlock(&amp;plock);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//    pthread_mutex_destroy(&amp;plock);</span></div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>执行结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">11.692782</span> test[<span class=\"number\">892</span>:<span class=\"number\">121163</span>] 线程<span class=\"number\">2</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">13.698007</span> test[<span class=\"number\">892</span>:<span class=\"number\">121163</span>] 线程<span class=\"number\">2</span> 执行结束</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">13.698230</span> test[<span class=\"number\">892</span>:<span class=\"number\">121192</span>] 线程<span class=\"number\">1</span> 将要执行</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-28</span> <span class=\"number\">00</span>:<span class=\"number\">14</span>:<span class=\"number\">16.700588</span> test[<span class=\"number\">892</span>:<span class=\"number\">121192</span>] 线程<span class=\"number\">1</span> 执行结束</div></pre></td></tr></table></figure>\n<h3 id=\"NSRecursiveLock-递归锁\"><a href=\"#NSRecursiveLock-递归锁\" class=\"headerlink\" title=\"NSRecursiveLock(递归锁)\"></a><strong>NSRecursiveLock(递归锁)</strong></h3><p>​    此锁和NSLock的区别主要在于内部实现原理的不同，NSLock内部封装的pthread_mutex_t类型为PTHREAD_MUTEX_TIMED_NP，而NSRecursiveLock的类型为PTHREAD_MUTEX_RECURSIVE_NP，此外还有PTHREAD_MUTEX_ERRORCHECK_NP（检错锁）、PTHREAD_MUTEX_ADAPTIVE_NP（适应锁）。</p>\n<p>​    递归锁，允许同一个线程对同一个锁成功获得多次，并通过多次unlock解锁。如果是不同线程请求，则在加锁线程解锁时重新竞争。</p>\n<p>​    该锁的使用场景主要是在递归函数内部调用。</p>\n<p>​    按照惯例还是看个代码来说明下如何使用。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testRecursiveLock</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSRecursiveLock</span> *recursive = [[<span class=\"built_in\">NSRecursiveLock</span> alloc]init];</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        [<span class=\"keyword\">self</span> getFactorial:<span class=\"number\">10</span> cursive:recursive];</div><div class=\"line\">        </div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">int</span>)getFactorial:(<span class=\"keyword\">int</span>)n cursive:(<span class=\"built_in\">NSRecursiveLock</span> *)lock</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"加锁\"</span>);</div><div class=\"line\">    [lock lock];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        result = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        result = [<span class=\"keyword\">self</span> getFactorial:n<span class=\"number\">-1</span> cursive:lock] * n;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"result =%d\"</span>,result);</div><div class=\"line\">    </div><div class=\"line\">    [lock unlock];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"解锁\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241134</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241902</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241920</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241934</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241942</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241950</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241957</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241974</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241991</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.241998</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242005</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 加锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242023</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242030</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242036</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242053</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242095</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242110</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242128</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242136</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242143</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">24</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242151</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242293</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">120</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242309</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242317</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">720</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242324</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242331</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">5040</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242338</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242344</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">40320</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242351</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242357</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">362880</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242365</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242371</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] result =<span class=\"number\">3628800</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">00</span>:<span class=\"number\">43</span>:<span class=\"number\">08.242378</span> test[<span class=\"number\">1194</span>:<span class=\"number\">551965</span>] 解锁</div></pre></td></tr></table></figure>\n<h3 id=\"NSCondition\"><a href=\"#NSCondition\" class=\"headerlink\" title=\"NSCondition\"></a><strong>NSCondition</strong></h3><p>​    NSCondition 的对象实际上作为一个锁和一个线程检查器：锁主要为了当检测条件时保护数据源，执行条件引发的任务；线程检查器主要是根据条件决定是否继续运行线程，即线程是否被阻塞。</p>\n<p>​    使用方式主要包括，lock，unlock, wait, signal,四个方法，分别指获取锁、放开锁、等待信号、发送信号。同样用一段示例代码来看下它的用法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testCondition</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSCondition</span> *condition = [<span class=\"built_in\">NSCondition</span> new];</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *ops = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">        [condition lock];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 将要上锁\"</span>);</div><div class=\"line\">        <span class=\"keyword\">while</span> (ops.count == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 等待\"</span>);</div><div class=\"line\">            [condition wait];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 移除第一个元素\"</span>);</div><div class=\"line\">        [ops removeObjectAtIndex:<span class=\"number\">0</span>];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 将要解锁\"</span>);</div><div class=\"line\">        [condition unlock];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 将要上锁\"</span>);</div><div class=\"line\">        [condition lock];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 生产一个对象\"</span>);</div><div class=\"line\">        [ops addObject:[<span class=\"built_in\">NSObject</span> new]];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 发送信号\"</span>);</div><div class=\"line\">        [condition signal];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 将要解锁\"</span>);</div><div class=\"line\">        [condition unlock];</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​    <strong><em>打印结果如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.327316</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582713</span>] <span class=\"number\">2</span> 将要上锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.327329</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582712</span>] <span class=\"number\">1</span> 将要上锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.328121</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582712</span>] <span class=\"number\">1</span> 等待</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.328149</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582713</span>] <span class=\"number\">2</span> 生产一个对象</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.328166</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582713</span>] <span class=\"number\">2</span> 发送信号</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.328182</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582713</span>] <span class=\"number\">2</span> 将要解锁</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.328233</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582712</span>] <span class=\"number\">1</span> 移除第一个元素</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-02</span> <span class=\"number\">01</span>:<span class=\"number\">04</span>:<span class=\"number\">28.328261</span> test[<span class=\"number\">1240</span>:<span class=\"number\">582712</span>] <span class=\"number\">1</span> 将要解锁</div></pre></td></tr></table></figure>\n<p>至此，ios里面的大部分同步方法我们已经基本了解了，剩下的就是在实践中选择合适的方法进行应用了。</p>\n<h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><p>​    如果有想查看DEMO的同学，可以点击<a href=\"https://github.com/TripleFireMan/SynDemo.git\">它</a>来下载DEMO，查看。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><hr>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/8b8a01dd6356\">iOS开发中的8种锁</a></li>\n<li><a href=\"http://blog.csdn.net/super_man_ww/article/details/52753802\">深入理解ios开发中的锁</a></li>\n<li><a href=\"http://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/\">不再安全的OSSPinLock</a></li>\n<li><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW1\">Threading Programming Guide</a></li>\n<li><a href=\"http://blog.csdn.net/zmxiangde_88/article/details/7998458\">Linux线程-互斥锁pthread_mutex_t</a></li>\n<li><a href=\"http://www.jianshu.com/p/5d20c15ae690\">iOS NSCondition详解</a></li>\n</ul>"},{"title":"《CoreData》系列（二）","date":"2016-08-27T11:58:16.000Z","_content":"\nCoreData数据迁移以及版本升级\n\n<!---more--->\n\n[1 概述](#1)\n\n为什么要有数据迁移？\n由于CoreData可视化的特殊性，那么当数据模型发生变化时，相应的sqlite数据库的表由于不知道model发生了变化，表结构必须相应的做出调整，否则会导致程序Crash，CoreData的解决方案是通过创建新的sqlite表，然后将旧的数据迁移到新表上得方案来处理。下面分别介绍三种数据迁移的方式，并详细说明三种迁移方式的应用场景和注意事项。\n\n1.轻量级的数据迁移方式\n2.默认的迁移方式\n3.使用迁移管理器\n\n[1.1 轻量级的数据迁移方式](#2)\n\n轻量级的数据迁移，也就是说，并不需要程序员做很多事情就可以完成数据的迁移，是由系统默认进行的数据迁移。\n那么如何进行轻量级的数据迁移呢，当model的表字段发生变化，且应用程序已经发布过版本时，此时千万不能单单修改原model来达到修改model的目的，如果这样做的话，程序会crash。正确的做法是，\n\n1.新建一个model，并将model命名为model2，并将model2设置为当前model。\n2.修改NSPersistentStoreCoordinator加载缓存区的配置。具体如下\n\n```objc\nNSDictionary *option = @{NSMigratePersistentStoresAutomaticallyOption:@(YES),  \n                         NSInferMappingModelAutomaticallyOption:@(YES),  \n                         };  \n  \n_store = [_coordinate addPersistentStoreWithType:NSSQLiteStoreType  \n                                   configuration:nil  \n                                             URL:[self storeUrl]  \n                                         options:option  \n                                           error:&error]; \n```\n tips：使用iCloud开发程序的app，只能使用这种迁移方式。\n\n [1.2 默认的迁移方式](#2)\n\n 正常情况下，使用轻量级的数据迁移已经足够了，但是如果由于开发需要，需要将某个Entity下面的某个Attribute迁移到新的Entity下的某个Attribute，那么轻量级的迁移方式就不能够满足需求，这个时候就需要使用默认的迁移方式来进行数据迁移。这里以一个例子代码来详细阐述如何进行默认的迁移\n\n ![](http://ock9zbzms.bkt.clouddn.com/20151106182444884.jpg)\n\n  现在要将Model2里面的Measurement下面的name迁移到Account里面的下面的xyz属性下。\n1.根据model2来创建一个新model，并命名为model3，然后将model3设置为currentmodel。\n2.添加新的entity，并命名为Account，添加attribute xyz。\n3.删除model2里面的Measurement，根据model3创建NSManagerObect的子类Account。\n4.以model2为soureModel，model3为destinationModel添加一个MappingModel\n5.按照下图所示设置映射model即可\n6.最后记得将NSInferMappingModelAutomaticallyOption设置为Yes（coredata会优先读取映射model，如果没有就会自己推断），至此，默认的迁移方式就算是搞定了。\n\n![](http://ock9zbzms.bkt.clouddn.com/20151106183204704.jpg)\n![](http://ock9zbzms.bkt.clouddn.com/20151106183355504.jpg)\n\n[1.3 迁移管理器](#2)\n\n简单概述下何为迁移管理器，迁移管理器，就是不再使用系统的NSPersistentCoordinator进行数据迁移，而是使用NSMigrationManager进行数据缓存区的迁移。并配合一个数据迁移视图控制器提供优雅的迁移等待界面。等待界面如下，是不是感觉很丑呢，哈哈。那么使用迁移管理器的好处又是什么呢？可以实现更加精细化的数据操作，此外还能向用户报告迁移进度。有这俩点，还不够我们去研究下它么?Let's go!\n\n![](http://ock9zbzms.bkt.clouddn.com/coredata20151106184607971.jpg)\n\n准备工作\n\t何时启用迁移管理器，即迁移的时机？\n\t迁移工作如何进行？\n\t迁移完成如何善后？\n\n下面对上面的问题一一来做解答\n迁移的时机，迁移工作需要在载入数据库的时候进行，即上节所讲的 loadStore：的时候进行，但是呢？还需要做一些判断工作。具体代码如下\n\n```objc\n- (void)loadStore  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ ,'%@'\",[self class], NSStringFromSelector(_cmd));  \n    }  \n      \n    if (_store) {  \n        return;  \n    }  \n    \n    BOOL useMigrateManager = MigrationMode;  \n  \n    if (useMigrateManager && [self isMigrationNecessaryForStore:[self storeUrl]]) {  \n        [self performBackgroundManagedMigrationForStore:[self storeUrl]];  \n    }else{  \n        NSError *error;  \n          \n        //NSMigratePersistentStoresAutomaticallyOption coreData尝试将低版本的数据模型向高版本进行迁移  \n        //NSInferMappingModelAutomaticallyOption    coredata会自动创建迁移模型，会去自动尝试  \n        NSDictionary *option = @{NSMigratePersistentStoresAutomaticallyOption:@(YES),  \n                                 NSInferMappingModelAutomaticallyOption:@(YES),  \n                                 NSSQLitePragmasOption:@{@\"journal_mode\":@\"DELETE\"}};  \n          \n        _store = [_coordinate addPersistentStoreWithType:NSSQLiteStoreType  \n                                           configuration:nil  \n                                                     URL:[self storeUrl]  \n                                                 options:option  \n                                                   error:&error];  \n        if (!_store) {  \n            if (debug) {  \n                NSLog(@\"failed load store,error = %@\",error);  \n                abort();  \n            }  \n        }  \n        else/**/{  \n            NSLog(@\"successfully add store : %@\",_store);  \n        }  \n    }  \n}  \n```\n\n其中有开关，用来控制是否使用迁移管理器，以及系统是否需要进行迁移的判断。系统是否需要迁移的判断代码如下\n\n```objc\n- (BOOL)isMigrationNecessaryForStore:(NSURL *)storeUrl  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ '%@'\",[self class],NSStringFromSelector(_cmd));  \n    }  \n      \n    //文件是否存在，如果不存在认为是用户设备上并没有持久化存储区，自然不需要迁移  \n    if (![[NSFileManager defaultManager]fileExistsAtPath:[self storeUrl].path isDirectory:nil]) {  \n        if (debug) {  \n            NSLog(@\"Skipped Migration, source database missing\");  \n        }  \n        return NO;  \n    }  \n      \n     NSError *error                         = nil;  \n     NSDictionary *sourceMetaData           = [NSPersistentStoreCoordinator metadataForPersistentStoreOfType:NSSQLiteStoreType  \n                                                                                                     URL:storeUrl  \n                                                                                                      error:&error];\n    NSManagedObjectModel *destinationModel = _coordinate.managedObjectModel;  \n      \n    //比较当前对象模型是否与用户之前安装的应用持久化存储区是否兼容。如果兼容，不需要迁移  \n    if ([destinationModel isConfiguration:nil compatibleWithStoreMetadata:sourceMetaData]) {  \n        if (debug) {  \n            NSLog(@\"Skipped Migration, source database is already compatible\");  \n            return NO;  \n        }  \n    }  \n       \n    //所有情况都尝试了，发现还是需要进行数据迁移  \n    return YES;  \n} \n```\n\n迁移工作如何进行，众所周知，迁移工作是一项比较耗时间的工作，尤其是在数据库比较大的情况下，那么肯定不能放在前台进行,必须放在后台进行，前台展示加载进度，代码如下\n\n```objc\n- (void)performBackgroundManagedMigrationForStore:(NSURL *)store  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ '%@'\",[self class],NSStringFromSelector(_cmd));  \n    }  \n      \n    UIStoryboard *sb                      = [UIStoryboard storyboardWithName:@\"Main\" bundle:nil];  \n    self.migrationVC                      = [sb instantiateViewControllerWithIdentifier:@\"migration\"];  \n  \n    UIApplication *app                    = [UIApplication sharedApplication];  \n    UINavigationController *navigationCtl = (UINavigationController *)[app keyWindow].rootViewController;  \n      \n    [navigationCtl presentViewController:self.migrationVC  \n                                animated:YES  \n                              completion:nil];  \n      \n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{  \n         \n        BOOL done = [self migrateStore:[self storeUrl]];  \n        if (done) {  \n            dispatch_async(dispatch_get_main_queue(), ^{  \n                NSError *error              = nil;  \n  \n                NSDictionary *configuration = @{NSMigratePersistentStoresAutomaticallyOption:@(YES),  \n                                                NSInferMappingModelAutomaticallyOption:@(YES),  \n                                                NSSQLitePragmasOption:@{@\"journal_mode\":@\"DELETE\"}};  \n  \n                _store                      = [_coordinate addPersistentStoreWithType:NSSQLiteStoreType  \n                                                   configuration:nil  \n                                                             URL:[self storeUrl]  \n                                                         options:configuration  \n                                                           error:&error];  \n                if (_store) {  \n                    if (debug) {  \n                        NSLog(@\"success create store\");  \n                    }  \n                }else {  \n                    if (debug) {  \n                        NSLog(@\"failed, error = %@\",error);  \n                    }  \n                    abort();  \n                }  \n                  \n                [self.migrationVC dismissViewControllerAnimated:YES  \n                                                     completion:nil];  \n                  \n                self.migrationVC = nil;  \n            });  \n        }  \n          \n    });  \n}\n```\n\n接下来是，真正的迁移过程\n```objc\n- (BOOL)migrateStore:(NSURL *)store  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ '%@'\",[self class],NSStringFromSelector(_cmd));  \n    }  \n      \n      \n    NSDictionary *sourceMeta               = [NSPersistentStoreCoordinator metadataForPersistentStoreOfType:NSSQLiteStoreType  \n                                                                                                        URL:store  \n                                                                                                      error:nil];  \n  \n    NSManagedObjectModel *sourceModel      = [NSManagedObjectModel mergedModelFromBundles:nil  \n                                                                         forStoreMetadata:sourceMeta];  \n  \n    NSManagedObjectModel *destinationModel = _model;  \n    NSMappingModel *mappingModel           = [NSMappingModel mappingModelFromBundles:nil  \n                                                                      forSourceModel:sourceModel  \n                                                                    destinationModel:destinationModel];  \n    if (mappingModel) {  \n        NSError *error                       = nil;  \n  \n        NSMigrationManager *migrationManager = [[NSMigrationManager alloc]initWithSourceModel:sourceModel  \n                                                                             destinationModel:destinationModel];  \n  \n        [migrationManager addObserver:self  \n                           forKeyPath:@\"migrationProgress\"  \n                              options:NSKeyValueObservingOptionNew  \n                              context:nil];  \n  \n        NSURL *destinationStore              = [[self applicationStoreDirectory]URLByAppendingPathComponent:@\"temp.sqlite\"];  \n        BOOL success                         = NO;  \n        success                              = [migrationManager migrateStoreFromURL:store  \n                                                    type:NSSQLiteStoreType  \n                                                 options:nil  \n                                        withMappingModel:mappingModel  \n                                        toDestinationURL:destinationStore  \n                                         destinationType:NSSQLiteStoreType  \n                                      destinationOptions:nil  \n                                                   error:&error];  \n        if (success) {  \n            if (debug) {  \n                NSLog(@\"Migration Successfully!\");  \n            }  \n            if ([self replaceStore:store withStore:destinationStore]) {  \n                [migrationManager removeObserver:self forKeyPath:@\"migrationProgress\" context:NULL];  \n                [[NSNotificationCenter defaultCenter]postNotificationName:someThingChangedNotification object:nil];  \n            }  \n        }else{  \n            if (debug) {  \n                NSLog(@\"Migration Failed\");  \n            }  \n        }  \n    }else{  \n        if (debug) {  \n            NSLog(@\"Mapping model is NULL\");  \n        }  \n    }  \n    return YES;  \n}\n```\n最后附上俩个辅助方法，用来观察迁移过程和替换数据库的\n```objc\n- (BOOL)replaceStore:(NSURL *)old withStore:(NSURL *)new  \n{  \n    BOOL success   = NO;  \n    NSError *error = nil;  \n    if ([[NSFileManager defaultManager]removeItemAtURL:old error:&error]) {  \n        error = nil;  \n        if ([[NSFileManager defaultManager]moveItemAtURL:new toURL:old error:&error]) {  \n            success = YES;  \n        }else {  \n            if (debug) {  \n                NSLog(@\"failed move new store to old\");  \n            }  \n        }  \n    }else{  \n        if (debug) {  \n            NSLog(@\"failed remove old store\");  \n        }  \n    }  \n    return success;  \n} \n```\n```objc\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(voidvoid *)context  \n{  \n    if ([keyPath isEqualToString:@\"migrationProgress\"]) {  \n        dispatch_async(dispatch_get_main_queue(), ^{  \n            float progress                         = [[change objectForKey:NSKeyValueChangeNewKey]floatValue];  \n            self.migrationVC.progressView.progress = progress;  \n  \n            int percenttage                        = progress * 100;  \n            NSString *string                       = [NSString stringWithFormat:@\"Migration Progress %i%%\",percenttage];  \n            self.migrationVC.progressLabel.text    = string;  \n        });  \n    }  \n}  \n```\n至此，三种数据迁移的方式，都已叙述完毕。\n[2 小结]（#1）\n三种迁移方式，各有各的好处，轻量级的迁移可以配套icloud实现云端存储，默认的数据迁移，支持将属性级别的数据进行任意迁移。迁移管理器，可以管理文件存储路径，并能够报告迁移进度，我们在开发过程中，应该按照自己的需求合理选择迁移方式，下一小节结合NSFetchedResultController进行数据的实际应用。","source":"_posts/《CoreData》系列（二）.md","raw":"---\ntitle: 《CoreData》系列（二）\ndate: 2016-08-27 19:58:16\ntags: coredata学习\n---\n\nCoreData数据迁移以及版本升级\n\n<!---more--->\n\n[1 概述](#1)\n\n为什么要有数据迁移？\n由于CoreData可视化的特殊性，那么当数据模型发生变化时，相应的sqlite数据库的表由于不知道model发生了变化，表结构必须相应的做出调整，否则会导致程序Crash，CoreData的解决方案是通过创建新的sqlite表，然后将旧的数据迁移到新表上得方案来处理。下面分别介绍三种数据迁移的方式，并详细说明三种迁移方式的应用场景和注意事项。\n\n1.轻量级的数据迁移方式\n2.默认的迁移方式\n3.使用迁移管理器\n\n[1.1 轻量级的数据迁移方式](#2)\n\n轻量级的数据迁移，也就是说，并不需要程序员做很多事情就可以完成数据的迁移，是由系统默认进行的数据迁移。\n那么如何进行轻量级的数据迁移呢，当model的表字段发生变化，且应用程序已经发布过版本时，此时千万不能单单修改原model来达到修改model的目的，如果这样做的话，程序会crash。正确的做法是，\n\n1.新建一个model，并将model命名为model2，并将model2设置为当前model。\n2.修改NSPersistentStoreCoordinator加载缓存区的配置。具体如下\n\n```objc\nNSDictionary *option = @{NSMigratePersistentStoresAutomaticallyOption:@(YES),  \n                         NSInferMappingModelAutomaticallyOption:@(YES),  \n                         };  \n  \n_store = [_coordinate addPersistentStoreWithType:NSSQLiteStoreType  \n                                   configuration:nil  \n                                             URL:[self storeUrl]  \n                                         options:option  \n                                           error:&error]; \n```\n tips：使用iCloud开发程序的app，只能使用这种迁移方式。\n\n [1.2 默认的迁移方式](#2)\n\n 正常情况下，使用轻量级的数据迁移已经足够了，但是如果由于开发需要，需要将某个Entity下面的某个Attribute迁移到新的Entity下的某个Attribute，那么轻量级的迁移方式就不能够满足需求，这个时候就需要使用默认的迁移方式来进行数据迁移。这里以一个例子代码来详细阐述如何进行默认的迁移\n\n ![](http://ock9zbzms.bkt.clouddn.com/20151106182444884.jpg)\n\n  现在要将Model2里面的Measurement下面的name迁移到Account里面的下面的xyz属性下。\n1.根据model2来创建一个新model，并命名为model3，然后将model3设置为currentmodel。\n2.添加新的entity，并命名为Account，添加attribute xyz。\n3.删除model2里面的Measurement，根据model3创建NSManagerObect的子类Account。\n4.以model2为soureModel，model3为destinationModel添加一个MappingModel\n5.按照下图所示设置映射model即可\n6.最后记得将NSInferMappingModelAutomaticallyOption设置为Yes（coredata会优先读取映射model，如果没有就会自己推断），至此，默认的迁移方式就算是搞定了。\n\n![](http://ock9zbzms.bkt.clouddn.com/20151106183204704.jpg)\n![](http://ock9zbzms.bkt.clouddn.com/20151106183355504.jpg)\n\n[1.3 迁移管理器](#2)\n\n简单概述下何为迁移管理器，迁移管理器，就是不再使用系统的NSPersistentCoordinator进行数据迁移，而是使用NSMigrationManager进行数据缓存区的迁移。并配合一个数据迁移视图控制器提供优雅的迁移等待界面。等待界面如下，是不是感觉很丑呢，哈哈。那么使用迁移管理器的好处又是什么呢？可以实现更加精细化的数据操作，此外还能向用户报告迁移进度。有这俩点，还不够我们去研究下它么?Let's go!\n\n![](http://ock9zbzms.bkt.clouddn.com/coredata20151106184607971.jpg)\n\n准备工作\n\t何时启用迁移管理器，即迁移的时机？\n\t迁移工作如何进行？\n\t迁移完成如何善后？\n\n下面对上面的问题一一来做解答\n迁移的时机，迁移工作需要在载入数据库的时候进行，即上节所讲的 loadStore：的时候进行，但是呢？还需要做一些判断工作。具体代码如下\n\n```objc\n- (void)loadStore  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ ,'%@'\",[self class], NSStringFromSelector(_cmd));  \n    }  \n      \n    if (_store) {  \n        return;  \n    }  \n    \n    BOOL useMigrateManager = MigrationMode;  \n  \n    if (useMigrateManager && [self isMigrationNecessaryForStore:[self storeUrl]]) {  \n        [self performBackgroundManagedMigrationForStore:[self storeUrl]];  \n    }else{  \n        NSError *error;  \n          \n        //NSMigratePersistentStoresAutomaticallyOption coreData尝试将低版本的数据模型向高版本进行迁移  \n        //NSInferMappingModelAutomaticallyOption    coredata会自动创建迁移模型，会去自动尝试  \n        NSDictionary *option = @{NSMigratePersistentStoresAutomaticallyOption:@(YES),  \n                                 NSInferMappingModelAutomaticallyOption:@(YES),  \n                                 NSSQLitePragmasOption:@{@\"journal_mode\":@\"DELETE\"}};  \n          \n        _store = [_coordinate addPersistentStoreWithType:NSSQLiteStoreType  \n                                           configuration:nil  \n                                                     URL:[self storeUrl]  \n                                                 options:option  \n                                                   error:&error];  \n        if (!_store) {  \n            if (debug) {  \n                NSLog(@\"failed load store,error = %@\",error);  \n                abort();  \n            }  \n        }  \n        else/**/{  \n            NSLog(@\"successfully add store : %@\",_store);  \n        }  \n    }  \n}  \n```\n\n其中有开关，用来控制是否使用迁移管理器，以及系统是否需要进行迁移的判断。系统是否需要迁移的判断代码如下\n\n```objc\n- (BOOL)isMigrationNecessaryForStore:(NSURL *)storeUrl  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ '%@'\",[self class],NSStringFromSelector(_cmd));  \n    }  \n      \n    //文件是否存在，如果不存在认为是用户设备上并没有持久化存储区，自然不需要迁移  \n    if (![[NSFileManager defaultManager]fileExistsAtPath:[self storeUrl].path isDirectory:nil]) {  \n        if (debug) {  \n            NSLog(@\"Skipped Migration, source database missing\");  \n        }  \n        return NO;  \n    }  \n      \n     NSError *error                         = nil;  \n     NSDictionary *sourceMetaData           = [NSPersistentStoreCoordinator metadataForPersistentStoreOfType:NSSQLiteStoreType  \n                                                                                                     URL:storeUrl  \n                                                                                                      error:&error];\n    NSManagedObjectModel *destinationModel = _coordinate.managedObjectModel;  \n      \n    //比较当前对象模型是否与用户之前安装的应用持久化存储区是否兼容。如果兼容，不需要迁移  \n    if ([destinationModel isConfiguration:nil compatibleWithStoreMetadata:sourceMetaData]) {  \n        if (debug) {  \n            NSLog(@\"Skipped Migration, source database is already compatible\");  \n            return NO;  \n        }  \n    }  \n       \n    //所有情况都尝试了，发现还是需要进行数据迁移  \n    return YES;  \n} \n```\n\n迁移工作如何进行，众所周知，迁移工作是一项比较耗时间的工作，尤其是在数据库比较大的情况下，那么肯定不能放在前台进行,必须放在后台进行，前台展示加载进度，代码如下\n\n```objc\n- (void)performBackgroundManagedMigrationForStore:(NSURL *)store  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ '%@'\",[self class],NSStringFromSelector(_cmd));  \n    }  \n      \n    UIStoryboard *sb                      = [UIStoryboard storyboardWithName:@\"Main\" bundle:nil];  \n    self.migrationVC                      = [sb instantiateViewControllerWithIdentifier:@\"migration\"];  \n  \n    UIApplication *app                    = [UIApplication sharedApplication];  \n    UINavigationController *navigationCtl = (UINavigationController *)[app keyWindow].rootViewController;  \n      \n    [navigationCtl presentViewController:self.migrationVC  \n                                animated:YES  \n                              completion:nil];  \n      \n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{  \n         \n        BOOL done = [self migrateStore:[self storeUrl]];  \n        if (done) {  \n            dispatch_async(dispatch_get_main_queue(), ^{  \n                NSError *error              = nil;  \n  \n                NSDictionary *configuration = @{NSMigratePersistentStoresAutomaticallyOption:@(YES),  \n                                                NSInferMappingModelAutomaticallyOption:@(YES),  \n                                                NSSQLitePragmasOption:@{@\"journal_mode\":@\"DELETE\"}};  \n  \n                _store                      = [_coordinate addPersistentStoreWithType:NSSQLiteStoreType  \n                                                   configuration:nil  \n                                                             URL:[self storeUrl]  \n                                                         options:configuration  \n                                                           error:&error];  \n                if (_store) {  \n                    if (debug) {  \n                        NSLog(@\"success create store\");  \n                    }  \n                }else {  \n                    if (debug) {  \n                        NSLog(@\"failed, error = %@\",error);  \n                    }  \n                    abort();  \n                }  \n                  \n                [self.migrationVC dismissViewControllerAnimated:YES  \n                                                     completion:nil];  \n                  \n                self.migrationVC = nil;  \n            });  \n        }  \n          \n    });  \n}\n```\n\n接下来是，真正的迁移过程\n```objc\n- (BOOL)migrateStore:(NSURL *)store  \n{  \n    if (debug) {  \n        NSLog(@\"Running %@ '%@'\",[self class],NSStringFromSelector(_cmd));  \n    }  \n      \n      \n    NSDictionary *sourceMeta               = [NSPersistentStoreCoordinator metadataForPersistentStoreOfType:NSSQLiteStoreType  \n                                                                                                        URL:store  \n                                                                                                      error:nil];  \n  \n    NSManagedObjectModel *sourceModel      = [NSManagedObjectModel mergedModelFromBundles:nil  \n                                                                         forStoreMetadata:sourceMeta];  \n  \n    NSManagedObjectModel *destinationModel = _model;  \n    NSMappingModel *mappingModel           = [NSMappingModel mappingModelFromBundles:nil  \n                                                                      forSourceModel:sourceModel  \n                                                                    destinationModel:destinationModel];  \n    if (mappingModel) {  \n        NSError *error                       = nil;  \n  \n        NSMigrationManager *migrationManager = [[NSMigrationManager alloc]initWithSourceModel:sourceModel  \n                                                                             destinationModel:destinationModel];  \n  \n        [migrationManager addObserver:self  \n                           forKeyPath:@\"migrationProgress\"  \n                              options:NSKeyValueObservingOptionNew  \n                              context:nil];  \n  \n        NSURL *destinationStore              = [[self applicationStoreDirectory]URLByAppendingPathComponent:@\"temp.sqlite\"];  \n        BOOL success                         = NO;  \n        success                              = [migrationManager migrateStoreFromURL:store  \n                                                    type:NSSQLiteStoreType  \n                                                 options:nil  \n                                        withMappingModel:mappingModel  \n                                        toDestinationURL:destinationStore  \n                                         destinationType:NSSQLiteStoreType  \n                                      destinationOptions:nil  \n                                                   error:&error];  \n        if (success) {  \n            if (debug) {  \n                NSLog(@\"Migration Successfully!\");  \n            }  \n            if ([self replaceStore:store withStore:destinationStore]) {  \n                [migrationManager removeObserver:self forKeyPath:@\"migrationProgress\" context:NULL];  \n                [[NSNotificationCenter defaultCenter]postNotificationName:someThingChangedNotification object:nil];  \n            }  \n        }else{  \n            if (debug) {  \n                NSLog(@\"Migration Failed\");  \n            }  \n        }  \n    }else{  \n        if (debug) {  \n            NSLog(@\"Mapping model is NULL\");  \n        }  \n    }  \n    return YES;  \n}\n```\n最后附上俩个辅助方法，用来观察迁移过程和替换数据库的\n```objc\n- (BOOL)replaceStore:(NSURL *)old withStore:(NSURL *)new  \n{  \n    BOOL success   = NO;  \n    NSError *error = nil;  \n    if ([[NSFileManager defaultManager]removeItemAtURL:old error:&error]) {  \n        error = nil;  \n        if ([[NSFileManager defaultManager]moveItemAtURL:new toURL:old error:&error]) {  \n            success = YES;  \n        }else {  \n            if (debug) {  \n                NSLog(@\"failed move new store to old\");  \n            }  \n        }  \n    }else{  \n        if (debug) {  \n            NSLog(@\"failed remove old store\");  \n        }  \n    }  \n    return success;  \n} \n```\n```objc\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(voidvoid *)context  \n{  \n    if ([keyPath isEqualToString:@\"migrationProgress\"]) {  \n        dispatch_async(dispatch_get_main_queue(), ^{  \n            float progress                         = [[change objectForKey:NSKeyValueChangeNewKey]floatValue];  \n            self.migrationVC.progressView.progress = progress;  \n  \n            int percenttage                        = progress * 100;  \n            NSString *string                       = [NSString stringWithFormat:@\"Migration Progress %i%%\",percenttage];  \n            self.migrationVC.progressLabel.text    = string;  \n        });  \n    }  \n}  \n```\n至此，三种数据迁移的方式，都已叙述完毕。\n[2 小结]（#1）\n三种迁移方式，各有各的好处，轻量级的迁移可以配套icloud实现云端存储，默认的数据迁移，支持将属性级别的数据进行任意迁移。迁移管理器，可以管理文件存储路径，并能够报告迁移进度，我们在开发过程中，应该按照自己的需求合理选择迁移方式，下一小节结合NSFetchedResultController进行数据的实际应用。","slug":"《CoreData》系列（二）","published":1,"updated":"2017-01-20T15:15:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yx2000jhx5l4bdsoqql","content":"<p>CoreData数据迁移以及版本升级</p>\n<a id=\"more\"></a>\n<p><a href=\"#1\">1 概述</a></p>\n<p>为什么要有数据迁移？<br>由于CoreData可视化的特殊性，那么当数据模型发生变化时，相应的sqlite数据库的表由于不知道model发生了变化，表结构必须相应的做出调整，否则会导致程序Crash，CoreData的解决方案是通过创建新的sqlite表，然后将旧的数据迁移到新表上得方案来处理。下面分别介绍三种数据迁移的方式，并详细说明三种迁移方式的应用场景和注意事项。</p>\n<p>1.轻量级的数据迁移方式<br>2.默认的迁移方式<br>3.使用迁移管理器</p>\n<p><a href=\"#2\">1.1 轻量级的数据迁移方式</a></p>\n<p>轻量级的数据迁移，也就是说，并不需要程序员做很多事情就可以完成数据的迁移，是由系统默认进行的数据迁移。<br>那么如何进行轻量级的数据迁移呢，当model的表字段发生变化，且应用程序已经发布过版本时，此时千万不能单单修改原model来达到修改model的目的，如果这样做的话，程序会crash。正确的做法是，</p>\n<p>1.新建一个model，并将model命名为model2，并将model2设置为当前model。<br>2.修改NSPersistentStoreCoordinator加载缓存区的配置。具体如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSDictionary</span> *option = @&#123;<span class=\"built_in\">NSMigratePersistentStoresAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                         <span class=\"built_in\">NSInferMappingModelAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                         &#125;;  </div><div class=\"line\">  </div><div class=\"line\">_store = [_coordinate addPersistentStoreWithType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                   configuration:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                             URL:[<span class=\"keyword\">self</span> storeUrl]  </div><div class=\"line\">                                         options:option  </div><div class=\"line\">                                           error:&amp;error];</div></pre></td></tr></table></figure>\n<p> tips：使用iCloud开发程序的app，只能使用这种迁移方式。</p>\n<p> <a href=\"#2\">1.2 默认的迁移方式</a></p>\n<p> 正常情况下，使用轻量级的数据迁移已经足够了，但是如果由于开发需要，需要将某个Entity下面的某个Attribute迁移到新的Entity下的某个Attribute，那么轻量级的迁移方式就不能够满足需求，这个时候就需要使用默认的迁移方式来进行数据迁移。这里以一个例子代码来详细阐述如何进行默认的迁移</p>\n<p> <img src=\"http://ock9zbzms.bkt.clouddn.com/20151106182444884.jpg\" alt=\"\"></p>\n<p>  现在要将Model2里面的Measurement下面的name迁移到Account里面的下面的xyz属性下。<br>1.根据model2来创建一个新model，并命名为model3，然后将model3设置为currentmodel。<br>2.添加新的entity，并命名为Account，添加attribute xyz。<br>3.删除model2里面的Measurement，根据model3创建NSManagerObect的子类Account。<br>4.以model2为soureModel，model3为destinationModel添加一个MappingModel<br>5.按照下图所示设置映射model即可<br>6.最后记得将NSInferMappingModelAutomaticallyOption设置为Yes（coredata会优先读取映射model，如果没有就会自己推断），至此，默认的迁移方式就算是搞定了。</p>\n<p><img src=\"http://ock9zbzms.bkt.clouddn.com/20151106183204704.jpg\" alt=\"\"><br><img src=\"http://ock9zbzms.bkt.clouddn.com/20151106183355504.jpg\" alt=\"\"></p>\n<p><a href=\"#2\">1.3 迁移管理器</a></p>\n<p>简单概述下何为迁移管理器，迁移管理器，就是不再使用系统的NSPersistentCoordinator进行数据迁移，而是使用NSMigrationManager进行数据缓存区的迁移。并配合一个数据迁移视图控制器提供优雅的迁移等待界面。等待界面如下，是不是感觉很丑呢，哈哈。那么使用迁移管理器的好处又是什么呢？可以实现更加精细化的数据操作，此外还能向用户报告迁移进度。有这俩点，还不够我们去研究下它么?Let’s go!</p>\n<p><img src=\"http://ock9zbzms.bkt.clouddn.com/coredata20151106184607971.jpg\" alt=\"\"></p>\n<p>准备工作<br>    何时启用迁移管理器，即迁移的时机？<br>    迁移工作如何进行？<br>    迁移完成如何善后？</p>\n<p>下面对上面的问题一一来做解答<br>迁移的时机，迁移工作需要在载入数据库的时候进行，即上节所讲的 loadStore：的时候进行，但是呢？还需要做一些判断工作。具体代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)loadStore  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ ,'%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], <span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">if</span> (_store) &#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">BOOL</span> useMigrateManager = MigrationMode;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span> (useMigrateManager &amp;&amp; [<span class=\"keyword\">self</span> isMigrationNecessaryForStore:[<span class=\"keyword\">self</span> storeUrl]]) &#123;  </div><div class=\"line\">        [<span class=\"keyword\">self</span> performBackgroundManagedMigrationForStore:[<span class=\"keyword\">self</span> storeUrl]];  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//NSMigratePersistentStoresAutomaticallyOption coreData尝试将低版本的数据模型向高版本进行迁移  </span></div><div class=\"line\">        <span class=\"comment\">//NSInferMappingModelAutomaticallyOption    coredata会自动创建迁移模型，会去自动尝试  </span></div><div class=\"line\">        <span class=\"built_in\">NSDictionary</span> *option = @&#123;<span class=\"built_in\">NSMigratePersistentStoresAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                                 <span class=\"built_in\">NSInferMappingModelAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                                 <span class=\"built_in\">NSSQLitePragmasOption</span>:@&#123;<span class=\"string\">@\"journal_mode\"</span>:<span class=\"string\">@\"DELETE\"</span>&#125;&#125;;  </div><div class=\"line\">          </div><div class=\"line\">        _store = [_coordinate addPersistentStoreWithType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                           configuration:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                     URL:[<span class=\"keyword\">self</span> storeUrl]  </div><div class=\"line\">                                                 options:option  </div><div class=\"line\">                                                   error:&amp;error];  </div><div class=\"line\">        <span class=\"keyword\">if</span> (!_store) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed load store,error = %@\"</span>,error);  </div><div class=\"line\">                abort();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span><span class=\"comment\">/**/</span>&#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"successfully add store : %@\"</span>,_store);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中有开关，用来控制是否使用迁移管理器，以及系统是否需要进行迁移的判断。系统是否需要迁移的判断代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isMigrationNecessaryForStore:(<span class=\"built_in\">NSURL</span> *)storeUrl  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ '%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>],<span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">//文件是否存在，如果不存在认为是用户设备上并没有持久化存储区，自然不需要迁移  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (![[<span class=\"built_in\">NSFileManager</span> defaultManager]fileExistsAtPath:[<span class=\"keyword\">self</span> storeUrl].path isDirectory:<span class=\"literal\">nil</span>]) &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Skipped Migration, source database missing\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">     <span class=\"built_in\">NSError</span> *error                         = <span class=\"literal\">nil</span>;  </div><div class=\"line\">     <span class=\"built_in\">NSDictionary</span> *sourceMetaData           = [<span class=\"built_in\">NSPersistentStoreCoordinator</span> metadataForPersistentStoreOfType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                                                                                     URL:storeUrl  </div><div class=\"line\">                                                                                                      error:&amp;error];</div><div class=\"line\">    <span class=\"built_in\">NSManagedObjectModel</span> *destinationModel = _coordinate.managedObjectModel;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">//比较当前对象模型是否与用户之前安装的应用持久化存储区是否兼容。如果兼容，不需要迁移  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> ([destinationModel isConfiguration:<span class=\"literal\">nil</span> compatibleWithStoreMetadata:sourceMetaData]) &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Skipped Migration, source database is already compatible\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">       </div><div class=\"line\">    <span class=\"comment\">//所有情况都尝试了，发现还是需要进行数据迁移  </span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>迁移工作如何进行，众所周知，迁移工作是一项比较耗时间的工作，尤其是在数据库比较大的情况下，那么肯定不能放在前台进行,必须放在后台进行，前台展示加载进度，代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)performBackgroundManagedMigrationForStore:(<span class=\"built_in\">NSURL</span> *)store  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ '%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>],<span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">UIStoryboard</span> *sb                      = [<span class=\"built_in\">UIStoryboard</span> storyboardWithName:<span class=\"string\">@\"Main\"</span> bundle:<span class=\"literal\">nil</span>];  </div><div class=\"line\">    <span class=\"keyword\">self</span>.migrationVC                      = [sb instantiateViewControllerWithIdentifier:<span class=\"string\">@\"migration\"</span>];  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">UIApplication</span> *app                    = [<span class=\"built_in\">UIApplication</span> sharedApplication];  </div><div class=\"line\">    <span class=\"built_in\">UINavigationController</span> *navigationCtl = (<span class=\"built_in\">UINavigationController</span> *)[app keyWindow].rootViewController;  </div><div class=\"line\">      </div><div class=\"line\">    [navigationCtl presentViewController:<span class=\"keyword\">self</span>.migrationVC  </div><div class=\"line\">                                animated:<span class=\"literal\">YES</span>  </div><div class=\"line\">                              completion:<span class=\"literal\">nil</span>];  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, <span class=\"number\">0</span>), ^&#123;  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"built_in\">BOOL</span> done = [<span class=\"keyword\">self</span> migrateStore:[<span class=\"keyword\">self</span> storeUrl]];  </div><div class=\"line\">        <span class=\"keyword\">if</span> (done) &#123;  </div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;  </div><div class=\"line\">                <span class=\"built_in\">NSError</span> *error              = <span class=\"literal\">nil</span>;  </div><div class=\"line\">  </div><div class=\"line\">                <span class=\"built_in\">NSDictionary</span> *configuration = @&#123;<span class=\"built_in\">NSMigratePersistentStoresAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                                                <span class=\"built_in\">NSInferMappingModelAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                                                <span class=\"built_in\">NSSQLitePragmasOption</span>:@&#123;<span class=\"string\">@\"journal_mode\"</span>:<span class=\"string\">@\"DELETE\"</span>&#125;&#125;;  </div><div class=\"line\">  </div><div class=\"line\">                _store                      = [_coordinate addPersistentStoreWithType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                                   configuration:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                             URL:[<span class=\"keyword\">self</span> storeUrl]  </div><div class=\"line\">                                                         options:configuration  </div><div class=\"line\">                                                           error:&amp;error];  </div><div class=\"line\">                <span class=\"keyword\">if</span> (_store) &#123;  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"success create store\"</span>);  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed, error = %@\"</span>,error);  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                    abort();  </div><div class=\"line\">                &#125;  </div><div class=\"line\">                  </div><div class=\"line\">                [<span class=\"keyword\">self</span>.migrationVC dismissViewControllerAnimated:<span class=\"literal\">YES</span>  </div><div class=\"line\">                                                     completion:<span class=\"literal\">nil</span>];  </div><div class=\"line\">                  </div><div class=\"line\">                <span class=\"keyword\">self</span>.migrationVC = <span class=\"literal\">nil</span>;  </div><div class=\"line\">            &#125;);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接下来是，真正的迁移过程<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)migrateStore:(<span class=\"built_in\">NSURL</span> *)store  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ '%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>],<span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">NSDictionary</span> *sourceMeta               = [<span class=\"built_in\">NSPersistentStoreCoordinator</span> metadataForPersistentStoreOfType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                                                                                        URL:store  </div><div class=\"line\">                                                                                                      error:<span class=\"literal\">nil</span>];  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">NSManagedObjectModel</span> *sourceModel      = [<span class=\"built_in\">NSManagedObjectModel</span> mergedModelFromBundles:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                                         forStoreMetadata:sourceMeta];  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">NSManagedObjectModel</span> *destinationModel = _model;  </div><div class=\"line\">    <span class=\"built_in\">NSMappingModel</span> *mappingModel           = [<span class=\"built_in\">NSMappingModel</span> mappingModelFromBundles:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                                      forSourceModel:sourceModel  </div><div class=\"line\">                                                                    destinationModel:destinationModel];  </div><div class=\"line\">    <span class=\"keyword\">if</span> (mappingModel) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error                       = <span class=\"literal\">nil</span>;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"built_in\">NSMigrationManager</span> *migrationManager = [[<span class=\"built_in\">NSMigrationManager</span> alloc]initWithSourceModel:sourceModel  </div><div class=\"line\">                                                                             destinationModel:destinationModel];  </div><div class=\"line\">  </div><div class=\"line\">        [migrationManager addObserver:<span class=\"keyword\">self</span>  </div><div class=\"line\">                           forKeyPath:<span class=\"string\">@\"migrationProgress\"</span>  </div><div class=\"line\">                              options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span>  </div><div class=\"line\">                              context:<span class=\"literal\">nil</span>];  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *destinationStore              = [[<span class=\"keyword\">self</span> applicationStoreDirectory]URLByAppendingPathComponent:<span class=\"string\">@\"temp.sqlite\"</span>];  </div><div class=\"line\">        <span class=\"built_in\">BOOL</span> success                         = <span class=\"literal\">NO</span>;  </div><div class=\"line\">        success                              = [migrationManager migrateStoreFromURL:store  </div><div class=\"line\">                                                    type:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                                 options:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                        withMappingModel:mappingModel  </div><div class=\"line\">                                        toDestinationURL:destinationStore  </div><div class=\"line\">                                         destinationType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                      destinationOptions:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                   error:&amp;error];  </div><div class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Migration Successfully!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> replaceStore:store withStore:destinationStore]) &#123;  </div><div class=\"line\">                [migrationManager removeObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"migrationProgress\"</span> context:<span class=\"literal\">NULL</span>];  </div><div class=\"line\">                [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter]postNotificationName:someThingChangedNotification object:<span class=\"literal\">nil</span>];  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Migration Failed\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Mapping model is NULL\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后附上俩个辅助方法，用来观察迁移过程和替换数据库的<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)replaceStore:(<span class=\"built_in\">NSURL</span> *)old withStore:(<span class=\"built_in\">NSURL</span> *)new  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"built_in\">BOOL</span> success   = <span class=\"literal\">NO</span>;  </div><div class=\"line\">    <span class=\"built_in\">NSError</span> *error = <span class=\"literal\">nil</span>;  </div><div class=\"line\">    <span class=\"keyword\">if</span> ([[<span class=\"built_in\">NSFileManager</span> defaultManager]removeItemAtURL:old error:&amp;error]) &#123;  </div><div class=\"line\">        error = <span class=\"literal\">nil</span>;  </div><div class=\"line\">        <span class=\"keyword\">if</span> ([[<span class=\"built_in\">NSFileManager</span> defaultManager]moveItemAtURL:new toURL:old error:&amp;error]) &#123;  </div><div class=\"line\">            success = <span class=\"literal\">YES</span>;  </div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed move new store to old\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed remove old store\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> success;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath ofObject:(<span class=\"keyword\">id</span>)object change:(<span class=\"built_in\">NSDictionary</span> *)change context:(voidvoid *)context  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> ([keyPath isEqualToString:<span class=\"string\">@\"migrationProgress\"</span>]) &#123;  </div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;  </div><div class=\"line\">            <span class=\"keyword\">float</span> progress                         = [[change objectForKey:<span class=\"built_in\">NSKeyValueChangeNewKey</span>]floatValue];  </div><div class=\"line\">            <span class=\"keyword\">self</span>.migrationVC.progressView.progress = progress;  </div><div class=\"line\">  </div><div class=\"line\">            <span class=\"keyword\">int</span> percenttage                        = progress * <span class=\"number\">100</span>;  </div><div class=\"line\">            <span class=\"built_in\">NSString</span> *string                       = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"Migration Progress %i%%\"</span>,percenttage];  </div><div class=\"line\">            <span class=\"keyword\">self</span>.migrationVC.progressLabel.text    = string;  </div><div class=\"line\">        &#125;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，三种数据迁移的方式，都已叙述完毕。<br>[2 小结]（#1）<br>三种迁移方式，各有各的好处，轻量级的迁移可以配套icloud实现云端存储，默认的数据迁移，支持将属性级别的数据进行任意迁移。迁移管理器，可以管理文件存储路径，并能够报告迁移进度，我们在开发过程中，应该按照自己的需求合理选择迁移方式，下一小节结合NSFetchedResultController进行数据的实际应用。</p>\n","excerpt":"<p>CoreData数据迁移以及版本升级</p>","more":"<p><a href=\"#1\">1 概述</a></p>\n<p>为什么要有数据迁移？<br>由于CoreData可视化的特殊性，那么当数据模型发生变化时，相应的sqlite数据库的表由于不知道model发生了变化，表结构必须相应的做出调整，否则会导致程序Crash，CoreData的解决方案是通过创建新的sqlite表，然后将旧的数据迁移到新表上得方案来处理。下面分别介绍三种数据迁移的方式，并详细说明三种迁移方式的应用场景和注意事项。</p>\n<p>1.轻量级的数据迁移方式<br>2.默认的迁移方式<br>3.使用迁移管理器</p>\n<p><a href=\"#2\">1.1 轻量级的数据迁移方式</a></p>\n<p>轻量级的数据迁移，也就是说，并不需要程序员做很多事情就可以完成数据的迁移，是由系统默认进行的数据迁移。<br>那么如何进行轻量级的数据迁移呢，当model的表字段发生变化，且应用程序已经发布过版本时，此时千万不能单单修改原model来达到修改model的目的，如果这样做的话，程序会crash。正确的做法是，</p>\n<p>1.新建一个model，并将model命名为model2，并将model2设置为当前model。<br>2.修改NSPersistentStoreCoordinator加载缓存区的配置。具体如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSDictionary</span> *option = @&#123;<span class=\"built_in\">NSMigratePersistentStoresAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                         <span class=\"built_in\">NSInferMappingModelAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                         &#125;;  </div><div class=\"line\">  </div><div class=\"line\">_store = [_coordinate addPersistentStoreWithType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                   configuration:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                             URL:[<span class=\"keyword\">self</span> storeUrl]  </div><div class=\"line\">                                         options:option  </div><div class=\"line\">                                           error:&amp;error];</div></pre></td></tr></table></figure>\n<p> tips：使用iCloud开发程序的app，只能使用这种迁移方式。</p>\n<p> <a href=\"#2\">1.2 默认的迁移方式</a></p>\n<p> 正常情况下，使用轻量级的数据迁移已经足够了，但是如果由于开发需要，需要将某个Entity下面的某个Attribute迁移到新的Entity下的某个Attribute，那么轻量级的迁移方式就不能够满足需求，这个时候就需要使用默认的迁移方式来进行数据迁移。这里以一个例子代码来详细阐述如何进行默认的迁移</p>\n<p> <img src=\"http://ock9zbzms.bkt.clouddn.com/20151106182444884.jpg\" alt=\"\"></p>\n<p>  现在要将Model2里面的Measurement下面的name迁移到Account里面的下面的xyz属性下。<br>1.根据model2来创建一个新model，并命名为model3，然后将model3设置为currentmodel。<br>2.添加新的entity，并命名为Account，添加attribute xyz。<br>3.删除model2里面的Measurement，根据model3创建NSManagerObect的子类Account。<br>4.以model2为soureModel，model3为destinationModel添加一个MappingModel<br>5.按照下图所示设置映射model即可<br>6.最后记得将NSInferMappingModelAutomaticallyOption设置为Yes（coredata会优先读取映射model，如果没有就会自己推断），至此，默认的迁移方式就算是搞定了。</p>\n<p><img src=\"http://ock9zbzms.bkt.clouddn.com/20151106183204704.jpg\" alt=\"\"><br><img src=\"http://ock9zbzms.bkt.clouddn.com/20151106183355504.jpg\" alt=\"\"></p>\n<p><a href=\"#2\">1.3 迁移管理器</a></p>\n<p>简单概述下何为迁移管理器，迁移管理器，就是不再使用系统的NSPersistentCoordinator进行数据迁移，而是使用NSMigrationManager进行数据缓存区的迁移。并配合一个数据迁移视图控制器提供优雅的迁移等待界面。等待界面如下，是不是感觉很丑呢，哈哈。那么使用迁移管理器的好处又是什么呢？可以实现更加精细化的数据操作，此外还能向用户报告迁移进度。有这俩点，还不够我们去研究下它么?Let’s go!</p>\n<p><img src=\"http://ock9zbzms.bkt.clouddn.com/coredata20151106184607971.jpg\" alt=\"\"></p>\n<p>准备工作<br>    何时启用迁移管理器，即迁移的时机？<br>    迁移工作如何进行？<br>    迁移完成如何善后？</p>\n<p>下面对上面的问题一一来做解答<br>迁移的时机，迁移工作需要在载入数据库的时候进行，即上节所讲的 loadStore：的时候进行，但是呢？还需要做一些判断工作。具体代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)loadStore  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ ,'%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], <span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">if</span> (_store) &#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">BOOL</span> useMigrateManager = MigrationMode;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span> (useMigrateManager &amp;&amp; [<span class=\"keyword\">self</span> isMigrationNecessaryForStore:[<span class=\"keyword\">self</span> storeUrl]]) &#123;  </div><div class=\"line\">        [<span class=\"keyword\">self</span> performBackgroundManagedMigrationForStore:[<span class=\"keyword\">self</span> storeUrl]];  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//NSMigratePersistentStoresAutomaticallyOption coreData尝试将低版本的数据模型向高版本进行迁移  </span></div><div class=\"line\">        <span class=\"comment\">//NSInferMappingModelAutomaticallyOption    coredata会自动创建迁移模型，会去自动尝试  </span></div><div class=\"line\">        <span class=\"built_in\">NSDictionary</span> *option = @&#123;<span class=\"built_in\">NSMigratePersistentStoresAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                                 <span class=\"built_in\">NSInferMappingModelAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                                 <span class=\"built_in\">NSSQLitePragmasOption</span>:@&#123;<span class=\"string\">@\"journal_mode\"</span>:<span class=\"string\">@\"DELETE\"</span>&#125;&#125;;  </div><div class=\"line\">          </div><div class=\"line\">        _store = [_coordinate addPersistentStoreWithType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                           configuration:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                     URL:[<span class=\"keyword\">self</span> storeUrl]  </div><div class=\"line\">                                                 options:option  </div><div class=\"line\">                                                   error:&amp;error];  </div><div class=\"line\">        <span class=\"keyword\">if</span> (!_store) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed load store,error = %@\"</span>,error);  </div><div class=\"line\">                abort();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span><span class=\"comment\">/**/</span>&#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"successfully add store : %@\"</span>,_store);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中有开关，用来控制是否使用迁移管理器，以及系统是否需要进行迁移的判断。系统是否需要迁移的判断代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isMigrationNecessaryForStore:(<span class=\"built_in\">NSURL</span> *)storeUrl  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ '%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>],<span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">//文件是否存在，如果不存在认为是用户设备上并没有持久化存储区，自然不需要迁移  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (![[<span class=\"built_in\">NSFileManager</span> defaultManager]fileExistsAtPath:[<span class=\"keyword\">self</span> storeUrl].path isDirectory:<span class=\"literal\">nil</span>]) &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Skipped Migration, source database missing\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">     <span class=\"built_in\">NSError</span> *error                         = <span class=\"literal\">nil</span>;  </div><div class=\"line\">     <span class=\"built_in\">NSDictionary</span> *sourceMetaData           = [<span class=\"built_in\">NSPersistentStoreCoordinator</span> metadataForPersistentStoreOfType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                                                                                     URL:storeUrl  </div><div class=\"line\">                                                                                                      error:&amp;error];</div><div class=\"line\">    <span class=\"built_in\">NSManagedObjectModel</span> *destinationModel = _coordinate.managedObjectModel;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">//比较当前对象模型是否与用户之前安装的应用持久化存储区是否兼容。如果兼容，不需要迁移  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> ([destinationModel isConfiguration:<span class=\"literal\">nil</span> compatibleWithStoreMetadata:sourceMetaData]) &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Skipped Migration, source database is already compatible\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">       </div><div class=\"line\">    <span class=\"comment\">//所有情况都尝试了，发现还是需要进行数据迁移  </span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>迁移工作如何进行，众所周知，迁移工作是一项比较耗时间的工作，尤其是在数据库比较大的情况下，那么肯定不能放在前台进行,必须放在后台进行，前台展示加载进度，代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)performBackgroundManagedMigrationForStore:(<span class=\"built_in\">NSURL</span> *)store  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ '%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>],<span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">UIStoryboard</span> *sb                      = [<span class=\"built_in\">UIStoryboard</span> storyboardWithName:<span class=\"string\">@\"Main\"</span> bundle:<span class=\"literal\">nil</span>];  </div><div class=\"line\">    <span class=\"keyword\">self</span>.migrationVC                      = [sb instantiateViewControllerWithIdentifier:<span class=\"string\">@\"migration\"</span>];  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">UIApplication</span> *app                    = [<span class=\"built_in\">UIApplication</span> sharedApplication];  </div><div class=\"line\">    <span class=\"built_in\">UINavigationController</span> *navigationCtl = (<span class=\"built_in\">UINavigationController</span> *)[app keyWindow].rootViewController;  </div><div class=\"line\">      </div><div class=\"line\">    [navigationCtl presentViewController:<span class=\"keyword\">self</span>.migrationVC  </div><div class=\"line\">                                animated:<span class=\"literal\">YES</span>  </div><div class=\"line\">                              completion:<span class=\"literal\">nil</span>];  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, <span class=\"number\">0</span>), ^&#123;  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"built_in\">BOOL</span> done = [<span class=\"keyword\">self</span> migrateStore:[<span class=\"keyword\">self</span> storeUrl]];  </div><div class=\"line\">        <span class=\"keyword\">if</span> (done) &#123;  </div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;  </div><div class=\"line\">                <span class=\"built_in\">NSError</span> *error              = <span class=\"literal\">nil</span>;  </div><div class=\"line\">  </div><div class=\"line\">                <span class=\"built_in\">NSDictionary</span> *configuration = @&#123;<span class=\"built_in\">NSMigratePersistentStoresAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                                                <span class=\"built_in\">NSInferMappingModelAutomaticallyOption</span>:@(<span class=\"literal\">YES</span>),  </div><div class=\"line\">                                                <span class=\"built_in\">NSSQLitePragmasOption</span>:@&#123;<span class=\"string\">@\"journal_mode\"</span>:<span class=\"string\">@\"DELETE\"</span>&#125;&#125;;  </div><div class=\"line\">  </div><div class=\"line\">                _store                      = [_coordinate addPersistentStoreWithType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                                   configuration:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                             URL:[<span class=\"keyword\">self</span> storeUrl]  </div><div class=\"line\">                                                         options:configuration  </div><div class=\"line\">                                                           error:&amp;error];  </div><div class=\"line\">                <span class=\"keyword\">if</span> (_store) &#123;  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"success create store\"</span>);  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed, error = %@\"</span>,error);  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                    abort();  </div><div class=\"line\">                &#125;  </div><div class=\"line\">                  </div><div class=\"line\">                [<span class=\"keyword\">self</span>.migrationVC dismissViewControllerAnimated:<span class=\"literal\">YES</span>  </div><div class=\"line\">                                                     completion:<span class=\"literal\">nil</span>];  </div><div class=\"line\">                  </div><div class=\"line\">                <span class=\"keyword\">self</span>.migrationVC = <span class=\"literal\">nil</span>;  </div><div class=\"line\">            &#125;);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接下来是，真正的迁移过程<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)migrateStore:(<span class=\"built_in\">NSURL</span> *)store  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Running %@ '%@'\"</span>,[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>],<span class=\"built_in\">NSStringFromSelector</span>(_cmd));  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"built_in\">NSDictionary</span> *sourceMeta               = [<span class=\"built_in\">NSPersistentStoreCoordinator</span> metadataForPersistentStoreOfType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                                                                                        URL:store  </div><div class=\"line\">                                                                                                      error:<span class=\"literal\">nil</span>];  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">NSManagedObjectModel</span> *sourceModel      = [<span class=\"built_in\">NSManagedObjectModel</span> mergedModelFromBundles:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                                         forStoreMetadata:sourceMeta];  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">NSManagedObjectModel</span> *destinationModel = _model;  </div><div class=\"line\">    <span class=\"built_in\">NSMappingModel</span> *mappingModel           = [<span class=\"built_in\">NSMappingModel</span> mappingModelFromBundles:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                                      forSourceModel:sourceModel  </div><div class=\"line\">                                                                    destinationModel:destinationModel];  </div><div class=\"line\">    <span class=\"keyword\">if</span> (mappingModel) &#123;  </div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error                       = <span class=\"literal\">nil</span>;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"built_in\">NSMigrationManager</span> *migrationManager = [[<span class=\"built_in\">NSMigrationManager</span> alloc]initWithSourceModel:sourceModel  </div><div class=\"line\">                                                                             destinationModel:destinationModel];  </div><div class=\"line\">  </div><div class=\"line\">        [migrationManager addObserver:<span class=\"keyword\">self</span>  </div><div class=\"line\">                           forKeyPath:<span class=\"string\">@\"migrationProgress\"</span>  </div><div class=\"line\">                              options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span>  </div><div class=\"line\">                              context:<span class=\"literal\">nil</span>];  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *destinationStore              = [[<span class=\"keyword\">self</span> applicationStoreDirectory]URLByAppendingPathComponent:<span class=\"string\">@\"temp.sqlite\"</span>];  </div><div class=\"line\">        <span class=\"built_in\">BOOL</span> success                         = <span class=\"literal\">NO</span>;  </div><div class=\"line\">        success                              = [migrationManager migrateStoreFromURL:store  </div><div class=\"line\">                                                    type:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                                 options:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                        withMappingModel:mappingModel  </div><div class=\"line\">                                        toDestinationURL:destinationStore  </div><div class=\"line\">                                         destinationType:<span class=\"built_in\">NSSQLiteStoreType</span>  </div><div class=\"line\">                                      destinationOptions:<span class=\"literal\">nil</span>  </div><div class=\"line\">                                                   error:&amp;error];  </div><div class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Migration Successfully!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> replaceStore:store withStore:destinationStore]) &#123;  </div><div class=\"line\">                [migrationManager removeObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"migrationProgress\"</span> context:<span class=\"literal\">NULL</span>];  </div><div class=\"line\">                [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter]postNotificationName:someThingChangedNotification object:<span class=\"literal\">nil</span>];  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Migration Failed\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Mapping model is NULL\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后附上俩个辅助方法，用来观察迁移过程和替换数据库的<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)replaceStore:(<span class=\"built_in\">NSURL</span> *)old withStore:(<span class=\"built_in\">NSURL</span> *)new  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"built_in\">BOOL</span> success   = <span class=\"literal\">NO</span>;  </div><div class=\"line\">    <span class=\"built_in\">NSError</span> *error = <span class=\"literal\">nil</span>;  </div><div class=\"line\">    <span class=\"keyword\">if</span> ([[<span class=\"built_in\">NSFileManager</span> defaultManager]removeItemAtURL:old error:&amp;error]) &#123;  </div><div class=\"line\">        error = <span class=\"literal\">nil</span>;  </div><div class=\"line\">        <span class=\"keyword\">if</span> ([[<span class=\"built_in\">NSFileManager</span> defaultManager]moveItemAtURL:new toURL:old error:&amp;error]) &#123;  </div><div class=\"line\">            success = <span class=\"literal\">YES</span>;  </div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed move new store to old\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (debug) &#123;  </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"failed remove old store\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> success;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath ofObject:(<span class=\"keyword\">id</span>)object change:(<span class=\"built_in\">NSDictionary</span> *)change context:(voidvoid *)context  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> ([keyPath isEqualToString:<span class=\"string\">@\"migrationProgress\"</span>]) &#123;  </div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;  </div><div class=\"line\">            <span class=\"keyword\">float</span> progress                         = [[change objectForKey:<span class=\"built_in\">NSKeyValueChangeNewKey</span>]floatValue];  </div><div class=\"line\">            <span class=\"keyword\">self</span>.migrationVC.progressView.progress = progress;  </div><div class=\"line\">  </div><div class=\"line\">            <span class=\"keyword\">int</span> percenttage                        = progress * <span class=\"number\">100</span>;  </div><div class=\"line\">            <span class=\"built_in\">NSString</span> *string                       = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"Migration Progress %i%%\"</span>,percenttage];  </div><div class=\"line\">            <span class=\"keyword\">self</span>.migrationVC.progressLabel.text    = string;  </div><div class=\"line\">        &#125;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，三种数据迁移的方式，都已叙述完毕。<br>[2 小结]（#1）<br>三种迁移方式，各有各的好处，轻量级的迁移可以配套icloud实现云端存储，默认的数据迁移，支持将属性级别的数据进行任意迁移。迁移管理器，可以管理文件存储路径，并能够报告迁移进度，我们在开发过程中，应该按照自己的需求合理选择迁移方式，下一小节结合NSFetchedResultController进行数据的实际应用。</p>"},{"title":"关于Runtime的一些理论和实践","date":"2017-05-23T15:21:31.000Z","_content":"\n## 前言\n\n网上讲解Runtime的教程非常之多，有些讲的还算不错，有些感觉就是人云亦云，所以读者就应该好好甄别下学习的资料。我在本文的最后，会列出一些我认为讲的不错的参考资料，以供参考。接下来就进入正文\n\n<!--more-->\n\n## 正文\n\n### 理论部分\n\n#### 基础中的基础\n\n​\t假设看官有一定的数据结构知识，知道什么叫结构体，因为接下来我要讲述的这个东西就是从结构体开始的。如果有不懂的同学请走这里[传送门](http://www.cnblogs.com/qyaizs/articles/2039101.html)\n\n​\tiOS中Class的定义如下\n\n```objc\nstruct objc_class {//class 的结构体\n    Class isa  OBJC_ISA_AVAILABILITY;//class的isa指向的是元类，元类的isa指向的是根元类。\n\n#if !__OBJC2__\n    Class super_class                                        OBJC2_UNAVAILABLE;//父类指针\n    const char *name\t\t                                OBJC2_UNAVAILABLE;//类名称\n    long version \t                                         OBJC2_UNAVAILABLE;//类版本\n    long info                                                OBJC2_UNAVAILABLE;//信息\n    long instance_size                                \t\t OBJC2_UNAVAILABLE;//实例的大小\n    struct objc_ivar_list *ivars\t\t\t\t            OBJC2_UNAVAILABLE;//成员变量列表 \n    struct objc_method_list **methodLists                     OBJC2_UNAVAILABLE;//方法列表\n    struct objc_cache *cache                       \t\t     OBJC2_UNAVAILABLE;//缓存方法\n    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;//协议列表\n#endif\n\n} OBJC2_UNAVAILABLE;\ntypedef struct objc_class *Class;//此处定义了结构体指针Class\ntypedef struct objc_object {\n    Class isa;\n} *id; //此处定义了结构体指针id，id内部有一个isa Class指针，指向它的类。\n```\n\n​\tisa指针是实例方法在运行时能够被执行的关键，运行时系统将依靠isa指针找到实例所在的类，进而找到方法列表和缓存方法，进行消息的发送。如果消息得不到执行，将根据类里面的super_classs指针找父类的实例方法。但是如果是类方法或者说是+号方法进行消息发送，那么将会获取类里面的isa指针进而找到元类，获取元类里面的方法列表或缓存方法进行消息处理，如果没找到，那么将去寻找元类里面的super_class指针找父元类的类方法。\n\n\n\n​\t下面是哥们从网上找的一张isa 和super_class指针的指向图\n\n![](关于Runtime的一些理论和实践/1.jpeg)\n\n#### 基础\n\n​\t有了基础中的基础之后，我们才知道Objective-C的本源其实也是来自于C语言，来自于结构体。那么有了这些之后，怎么让OC的类和对象在我们的程序内部运作起来，接下来，有个新的东西要登场了，那就是<font color=red>**objc_msgSend**</font>，请记住它，正是有了它objective-c才真正称得上是一门面向运行时的语言。\n\n​\tobjc_msgSend实质上就是一个C函数。其次objc_msgSend的参数类型第一个必须是id，第二个是SEL，第三个是va_list参数列表。从cocoa的objc.h文件中，我们可以看到它的定义。\n\n````objc\nid objc_msgSend(id self, SEL op, ...)//运行时消息发送的函数\n````\n\n​\t当你以为这就是运行时发送消息的全部时，很不幸的告诉你，远远没有这么简单，objc_msgSend还有一大帮兄弟姐妹，它们如下\n\n```objc\nid objc_msgSendSuper(struct objc_super *super, SEL op, ...)//super 指针调用方法的发送的消息\nvoid objc_msgSend_stret(id self, SEL op, ...)//当返回值是结构体时，发送此消息\nvoid objc_msgSendSuper_stret(struct objc_super *super, SEL op, ...)//super指针调用，返回值是结构体时，发送此消息\ndouble objc_msgSend_fpret(id self, SEL op, ...)//返回值为float类型，发送此消息(i386)\nlong double objc_msgSend_fpret(id self, SEL op, ...)//返回值为为float类型，发送此消息(x86_64)\n```\n\n​\t其实，这些并不重要，只要掌握objc_msgSend这个就可以了，上面的这些兄弟姐妹只需要了解下就行。\n\n#### 消息发送\n\n​\t当[obj message]调用时，将会被转化为((void (*)(id,@sel(message))objc_msgSend)(id,@sel(message))。此消息将走如下几个流程\n\n* 检查接收的对象是否为nil，如果是，调用nil处理方案\n* 在objc_object结构体中含有cache，首先会在Class的cache中查找IMP(如果没有缓存则会初始化缓存)，如果找到就会跳转到对应的函数上执行。\n* 如果没有找到就像父类的Class查找，如果还没有没找到就继续向上查找，直到找到根类。\n* 如果找到根类还是没有实现方案，这个时候就需要使用_objc_msgForward函数指针替代imp，最后来执行这个imp（动态方法实现）。\n\n#### 消息转发\n\n```objc\n+ (BOOL)resolveInstanceMethod:(SEL)aSEL       //动态解析方法，给处理不了的sel动态加IMP实现\n- (id)forwardingTargetForSelector:(SEL)aSelector//没有方法？那就看看谁能实现这个方法，让谁去执行下\n- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector//还是没谁能执行？那就给这个方法重新签名\n- (void)forwardInvocation:(NSInvocation *)anInvocation//重新签名的方法，可以试着让转发下\n```\n\n​\t理论部分到此告一段落，接下里用实践的方式，来深入的理解下这套东西\n\n### 实践部分\n\n#### **解归档对象**\n\n我们知道oc的对象如果确认了NSCoding协议的话，可以将对象归档为NSData，进而存储在文件中，方便下次使用，通常的做法是将一个对象的属性一个一个的按照类型进行encode，如int型的变量，采用encodeInt:forKey,bool 型的变量，采用encodeBool:forKey。有没有一种方法不管是任何对象都可以进行归档。而不需要我们手动去辨别对象类型，进而调用相应的归档方法呢，runtime的存在对解决这类问题提供了可能。下面以归档一个CYArchieve对象为例，进行阐释。\n\n1. ***首先第一步，获取当前对象的成员变量个数。***\n\n   ```objc\n   unsigned int count;\n   Ivar *ivar = class_copyIvarList([self class], &count);\n   ```\n\n   此处调用了一个class_copyIvarList()方法，查询runtime，知道这个方法的作用如下\n\n   ```objc\n   // 根据已知的类，获取它的变量列表，outcount是这个变量列表的长度。如果一个类是nil或者没有变量列表，那么将返回NULL，且outCount将为0.注意该对象使用完之后，记得必须要free()!!!\n   OBJC_EXPORT Ivar *class_copyIvarList(Class cls, unsigned int *outCount) \n       OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0);\n   ```\n\n   **调用这个方法之后，也就是说，可以获取到当前类的所有变量，和变量个数**\n\n2. ***第二步，解析Ivar，获取变量名称***\n\n   这里还有一个Ivar，这是什么东西？查看其定义知道，这是一个不透明的结构体指针，封装了变量类型。ø\n\n   ```objc\n   /// An opaque type that represents an instance variable.\n   typedef struct objc_ivar *Ivar;\n\n   struct objc_ivar {\n       char *ivar_name         //变量名字                                 OBJC2_UNAVAILABLE;\n       char *ivar_type        //变量类型                                  OBJC2_UNAVAILABLE;\n       int ivar_offset        //变量在对象中的偏移量                                  OBJC2_UNAVAILABLE;\n   #ifdef __LP64__\n       int space  \n   OBJC2_UNAVAILABLE;\n   #endif\n   }\n   ```\n\n   它有什么用呢？再来查找资料，苹果runtime现在已经开源，大可去其源码中找答案。\n\n   翻翻翻，翻到runtime的定义中，找到了它的用途。Ivar有很多用途，这里我们使用到的有下面俩个\n\n   ````objc\n   // 根据获取到的Ivar结构体，获取它的名字\n   OBJC_EXPORT const char *ivar_getName(Ivar v) \n       OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0);\n   // 根据获取到的Ivar结构体，获取它的类型\n   OBJC_EXPORT const char *ivar_getTypeEncoding(Ivar v) \n       OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0);\n   ````\n\n   这俩个方法，可以帮助我们拿到当前变量的名称和变量的类型。名称，我们知道是变量的名称。如_name _title，之类的，可是类型是什么呢？还是得靠查苹果资料，我们找到了[官方定义](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1)下图是部分定义\n\n   ![](关于Runtime的一些理论和实践/2.png)\n\n3. ***第三步，进行归档***\n\n   现在有了变量名称和变量类型，我们基本就可以对对象的变量进行归档了。\n\n   头文件如下定义\n\n   ```objc\n   @interface CYArchieve : NSObject\n   @property (nonatomic, copy) NSString *userName;\n   @property (nonatomic, assign) const void * token;\n   @property (nonatomic, assign) int length;\n   @property (nonatomic, strong) NSNumber *age;\n   @property (nonatomic, assign) float height;\n   @end\n   ```\n\n   对此对象进行归档\n\n   具体代码如下\n\n   ```objc\n   - (void)encodeWithCoder:(NSCoder *)aCoder\n   {\n       unsigned int count;\n       Ivar *ivar = class_copyIvarList([self class], &count);\n       for (unsigned int i = 0; i < count; i++) {\n           Ivar iva = ivar[i];\n           \n           // 成员变量名\n           const void* name = ivar_getName(iva);\n           NSString *ivarName = [NSString stringWithUTF8String:name];\n           \n           ivarName = [ivarName substringFromIndex:1];\n           \n           // 获取get方法\n           SEL getter = NSSelectorFromString(ivarName);\n           \n           // 能响应getter方法\n           if ([self respondsToSelector:getter]) {\n               const void *typeEncoding = ivar_getTypeEncoding(iva);//获取变量类型\n               NSString *type = [NSString stringWithUTF8String:typeEncoding];//将c字符串转变为oc字符串\n               \n               NSLog(@\"type = %@\",type);\n               // const void *\n               if ([type isEqualToString:@\"r^v\"]) {\n                   const void * valueUTF8 = ((const void *(*)(id ,SEL))(void *)objc_msgSend)((id)self,getter);\n                   NSString *value = [NSString stringWithUTF8String:valueUTF8];\n                   [aCoder encodeObject:value forKey:ivarName];\n                   \n                   continue;\n               }\n               else if ([type isEqualToString:@\"f\"]){\n                   float fvalue = ((float(*)(id,SEL))(void *)objc_msgSend)((id)self, getter);\n                   [aCoder encodeObject:@(fvalue) forKey:ivarName];\n                   continue;\n               }\n               else if ([type isEqualToString:@\"i\"]){\n                   int ivalue = ((int (*)(id, SEL))(void *)objc_msgSend)((id)self,getter);\n                   [aCoder encodeObject:@(ivalue) forKey:ivarName];\n                   continue;\n               }\n               id obj = ((id(*)(id, SEL))(void *)objc_msgSend)((id)self,getter);//如果是OC类型的对象，这么获取\n               if (obj && [obj respondsToSelector:@selector(encodeWithCoder:)]) {//判断是否有返回值\n                   [aCoder encodeObject:obj forKey:ivarName];//之后进行编码\n               }\n               \n               /*//////////////////////////////////////////////////////////////////////////*/\n               /*  将(void*)指针强制转为返回值为float类型，参数为id，sel的函数指针。\n                  ((float(*)(id,SEL))(void *)objc_msgSend)((id)self, getter);\n                */\n               /*//////////////////////////////////////////////////////////////////////////*/\n           }\n       }\n       free(ivar);\n   }\n   ```\n\n4. ***解档和归档类似，代码如下***\n\n   ```objc\n   - (id)initWithCoder:(NSCoder *)aDecoder\n   {\n       self = [super init];\n       if (self) {\n           unsigned int count;\n           Ivar *ivars = class_copyIvarList([self class], &count);\n           \n           for (unsigned int i = 0; i < count; i++) {\n               Ivar ivar = ivars[i];\n               const void * ivarName = ivar_getName(ivar);\n               NSString *ivarString = [NSString stringWithUTF8String:ivarName];\n               ivarString  = [ivarString substringFromIndex:1];\n               NSString *setter = ivarString;\n               if (![setter hasPrefix:@\"_\"]) {\n                   char firstLatter = [setter characterAtIndex:0];\n                   NSString *firstLetterString = [NSString stringWithFormat:@\"%c\",firstLatter];\n                   setter = [setter substringFromIndex:1];\n                   setter = [NSString stringWithFormat:@\"%@%@\",[firstLetterString uppercaseString] ,setter];\n               }\n               \n               setter = [NSString stringWithFormat:@\"set%@:\",setter];\n               \n               SEL Sel = NSSelectorFromString(setter);\n               \n               if ([self respondsToSelector:Sel]) {\n                   const void *typeUTF8 = ivar_getTypeEncoding(ivar);\n                   NSString *type = [NSString stringWithUTF8String:typeUTF8];\n                   \n                   if ([type isEqualToString:@\"r^v\"]) {\n                       NSString *value = [aDecoder decodeObjectForKey:ivarString];\n                       if (value) {\n                           ((void (*)(id,SEL,const void *))(void *)objc_msgSend)((id)self,Sel,value.UTF8String);\n                       }\n                       continue;\n                   }\n                   else if ([type isEqualToString:@\"i\"]){\n                       NSNumber *number = [aDecoder decodeObjectForKey:ivarString];\n                       int num = [number intValue];\n                       ((void(*)(id ,SEL,int))(void *)objc_msgSend)((id)self,Sel,num);\n                       continue;\n                   }\n                   else if ([type isEqualToString:@\"f\"]){\n                       NSNumber *number = [aDecoder decodeObjectForKey:ivarString];\n                       float flo = [number floatValue];\n                       ((void(*)(id ,SEL,float))(void *)objc_msgSend)((id)self,Sel,flo);\n                       continue;\n                   }\n                   \n                   id obj = [aDecoder decodeObjectForKey:ivarString];\n                   if (obj) {\n                       ((void(*)(id, SEL, id))(void *)objc_msgSend)((id)self,Sel,obj);\n                   }\n                   \n               }\n           }\n           \n           free(ivars);\n       }\n\n       \n       return self;\n   }\n   ```\n\n#### **消息转发**\n\n这一小节，我来研究下runtime里面的消息转发机制，都知道，objc_msgsend()发送之后，如果目标不能执行相应的SEL，会进入到前文我们介绍的那四个方法中，具体的实践是怎么样的呢，这里我写个demo来演示下，一方面是自己学习，另一方面也做个笔记，方便以后查阅。\n\n1. ***动态添加方法***\n\n   首先创建了一个CYStudent类，然后在头文件声明了一个study方法\n\n   ```objc\n   @interface CYStudent : NSObject\n\n   - (void)study;\n\n   @end\n   ```\n\n   但是，我们在.m文件中不实现此方法，由此来验证，是否会进入消息转发流程，之后在.m文件中实现resolveInstanceMethod:此方法，如下\n\n   ```objc\n   void play(id obj,SEL sel){\n       NSLog(@\"这个学生不学习，只知道玩耍！\");\n   }\n\n   @implementation CYStudent\n\n   + (BOOL)resolveInstanceMethod:(SEL)sel\n   {\n       if([NSStringFromSelector(sel) isEqualToString:@\"study\"]){\n          return class_addMethod(self, sel, (IMP)play,\"v@:\");\n       }\n       return  [super resolveInstanceMethod:sel];\n   }\n   @end\n   ```\n\n   经如下代码测试，发现确实进入了play函数，执行结果如下\n\n   ```objc\n       CYStudent *laosan = [CYStudent new];\n       [laosan study];\n       \n       2017-06-08 22:21:34.997 RuntimeDemo[1381:190411] 这个学生不学习，只知道玩耍！\n   ```\n\n2. ***消息转发***\n\n   这里以CYTeacher为例，依然是让CYTeacher执行study方法，但是不给其动态解析的机会，让其将消息发送给CYStudent，CYStudent将继续动态添加方法的流程，具体实现如下\n\n   ```objc\n   @interface CYTeacher : NSObject\n\n   @end\n   @implementation CYTeacher\n   + (BOOL)resolveInstanceMethod:(SEL)sel\n   {\n       return NO;\n   }\n\n   - (id)forwardingTargetForSelector:(SEL)aSelector\n   {\n       //如果转发的消息是play，老师执行不了，那就让学生对象执行下试试\n       if ([NSStringFromSelector(aSelector) isEqualToString:@\"study\"]) {\n           return [CYStudent new];\n       }\n       \n       return [super forwardingTargetForSelector:aSelector];\n   }\n   @end\n   /*/////////////////////////////以下为测试代码///////////////////////////////*/\n       CYTeacher *teacher = [CYTeacher new];\n       \n       [teacher performSelector:@selector(study) withObject:nil afterDelay:0];\n       \n   /*/////////////////////////////以下为执行结果///////////////////////////////*/\n\n   2017-06-08 22:31:23.541 RuntimeDemo[1457:215285] 这个学生不学习，只知道玩耍！\n   ```\n\n3. ***方法签名***\n\n   接下来研究下方法签名和方法调用的问题，以CYDoctor为例，此处还是让CYDoctor对象执行study方法，但是不实现resolveInstanceMethod: 和forwardingTargetForSelector:这俩个方法，而是让其进入方法签名里面，生成一个方法签名，之后再执行forwardInvocation:方法。以下是我做的测试代码\n\n   ````objc\n   @interface CYDoctor : NSObject\n\n   @end\n   @implementation CYDoctor\n   + (BOOL)resolveInstanceMethod:(SEL)sel\n   {\n       return NO;\n   }\n\n   - (id)forwardingTargetForSelector:(SEL)aSelector\n   {\n       return nil;\n   }\n\n   - (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector\n   {\n       if ([NSStringFromSelector(aSelector) isEqualToString:@\"study\"]) {\n           return [NSMethodSignature signatureWithObjCTypes:\"v@:\"];\n       }\n       return [super methodSignatureForSelector:aSelector];\n   }\n\n   - (void)forwardInvocation:(NSInvocation *)anInvocation\n   {\n       [anInvocation setSelector:@selector(surgery:)];\n       [anInvocation setTarget:self];\n       [anInvocation invoke];\n   }\n\n   - (void)surgery:(id)sender\n   {\n       NSLog(@\"sender : %@\",sender);\n       \n       NSLog(@\"手术中，请勿打扰!!!\");\n   }\n   @end\n\n   /*/////////////////////////////以下为测试代码///////////////////////////////*/\n       CYDoctor *doctor = [CYDoctor new];\n       \n       [doctor performSelector:@selector(study) withObject:nil afterDelay:0];\n       \n   /*/////////////////////////////以下为执行结果///////////////////////////////*/\n\n   2017-06-08 22:45:39.442 RuntimeDemo[1544:239413] sender : (null)\n   2017-06-08 22:45:39.442 RuntimeDemo[1544:239413] 手术中，请勿打扰!!!\n   ````\n\n   经过这三个小例子，基本对objc_msgSend()的发送流程搞清楚了，接下里准备研究下MethodSwizzling\n\n#### **MethodSwizzling**\n\n以NSMutableArray为例，我们来替换系统的objectAtIndex：,insertObject:AtIndex:,removeObjectAtIndex:等方法。\n\n首先我们给NSobject类添加一个category，用来给任何类进行methodSwizzling。并提供一个方法，用来交换原方法和替换方法。\n\n```objc\n#import <objc/runtime.h>\n\n\n@implementation NSObject (MethodSwizzling)\n+ (void)swizzlingOriginSelector:(SEL)originSel withSwizzledSelector:(SEL)swizzledSel\n{\n    Class class = [self class];\n    Method originMethod = class_getInstanceMethod(self, originSel);\n    Method swizzledMethod = class_getInstanceMethod(self, swizzledSel);\n    \n    // 给系统的方法，添加一个swizzledSel的实现\n    BOOL didAddMethod = class_addMethod(class,\n                                        originSel,\n                                        method_getImplementation(swizzledMethod),\n                                        method_getTypeEncoding(swizzledMethod));\n    \n    // 原先的方法并不存在，所以添加成功了，那么替换swiizzledSel的实现为系统原来的实现\n    if (didAddMethod) {\n        class_replaceMethod(class,\n                            swizzledSel,\n                            method_getImplementation(originMethod),\n                            method_getTypeEncoding(originMethod));\n    }\n    else{\n        method_exchangeImplementations(originMethod, swizzledMethod);\n    }\n    \n}\n```\n\n这之后，我们创建一个NSMutableArray的category，用来执行运行时方法替换。\n\n```objc\n#import \"NSMutableArray+MethodSwizzling.h\"\n#import <objc/runtime.h>\n#import \"NSObject+MethodSwizzling.h\"\n\n@implementation NSMutableArray (MethodSwizzling)\n+ (void)load\n{\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        [self swizzlingOriginSelector:@selector(removeObject:) withSwizzledSelector:@selector(cy_removeObject:)];\n        \n        Class __NSArray_M = NSClassFromString(@\"__NSArrayM\");\n        \n        [__NSArray_M swizzlingOriginSelector:@selector(objectAtIndex:) withSwizzledSelector:@selector(cy_objectAtIndex:)];\n        \n        [__NSArray_M swizzlingOriginSelector:@selector(addObject:) withSwizzledSelector:@selector(cy_addObject:)];\n        [__NSArray_M swizzlingOriginSelector:@selector(insertObject:atIndex:) withSwizzledSelector:@selector(cy_insertObject:atIndex:)];\n        \n        [__NSArray_M swizzlingOriginSelector:@selector(removeObjectAtIndex:) withSwizzledSelector:@selector(cy_removeObjectAtIndex:)];\n        \n    });\n}\n\n- (id)cy_objectAtIndex:(NSInteger)index\n{\n    NSInteger count = [self count];\n    \n    if (count == 0) {\n        NSLog(@\"array is empty\");\n        return nil;\n    }\n    \n    if (index >= count) {\n        NSLog(@\"index is bigger than count\");\n        return nil;\n    }\n    else{\n        return [self cy_objectAtIndex:index];\n    }\n}\n\n- (void)cy_removeObject:(id)objec\n{\n    if (objec == nil) {\n        NSLog(@\"%s called,object is nil ,so return\",__FUNCTION__);\n        return;\n    }\n    \n    [self cy_removeObject:objec];\n}\n\n- (void)cy_addObject:(id)object\n{\n    if (object == nil) {\n        NSLog(@\"%s objc cannot be nil\",__FUNCTION__);\n        return;\n    }\n    \n    [self cy_addObject:object];\n}\n\n- (void)cy_insertObject:(id)anObject atIndex:(NSUInteger)index\n{\n    if (anObject == nil) {\n        NSLog(@\"%s objc cannot be nil\",__FUNCTION__);\n        return;\n    }\n    \n    if (index > self.count) {\n        NSLog(@\"%s index %lu cannot bigger than self.count\",__FUNCTION__, (unsigned long)index);\n        return;\n    }\n    \n    [self cy_insertObject:anObject atIndex:index];\n    \n}\n\n- (void)cy_removeObjectAtIndex:(NSUInteger)index\n{\n    if (index >= self.count) {\n        NSLog(@\"%s index %lu cannot bigger than self.count\",__FUNCTION__, (unsigned long)index);\n    }\n    \n    [self cy_removeObjectAtIndex:index];\n}\n\n@end\n```\n\n接下来是一个例子代码，我们来验证下替换的成果。\n\n```objc\n    id nilobjc = nil;\n    \n    NSMutableArray *testArray = [NSMutableArray array];\n    [testArray addObject:@\"\"];\n    id obj = testArray[19];\n    \n    [testArray insertObject:nilobjc atIndex:0];\n    \n    [testArray removeObject:nilobjc];\n    \n    [testArray addObject:nilobjc];\n    \n    [testArray removeObjectAtIndex:0];\n```\n\n打印结果为\n\n```objc\n2017-06-11 22:43:18.705 RuntimeDemo[38559:4195212] index is bigger than count\n2017-06-11 22:43:18.705 RuntimeDemo[38559:4195212] -[NSMutableArray(MethodSwizzling) cy_insertObject:atIndex:] objc cannot be nil\n2017-06-11 22:43:18.706 RuntimeDemo[38559:4195212] -[NSMutableArray(MethodSwizzling) cy_removeObject:] called,object is nil ,so return\n2017-06-11 22:43:18.706 RuntimeDemo[38559:4195212] -[NSMutableArray(MethodSwizzling) cy_addObject:] objc cannot be nil\n```\n\n### 小结 \n\nruntime的学习是持续进行了，我这篇blog也仅仅是抛砖引玉，如何灵活的在项目中使用Runtime才是我们真正应该做的。切记不可为了使用某项技术，硬刚。这是不好滴。😆\n\n \n\n\n\n## 参考资料\n\n1.[Runtime 学习笔记(一)](http://lastdays.cn/2016/02/20/runtime1/)\n\n2.[Runtime 学习笔记(二)](http://lastdays.cn/2016/02/20/runtime2/)\n\n3.[理解 Objective-C Runtime](http://justinyan.me/post/1624)\n\n4.[https://github.com/CoderJackyHuang](https://github.com/CoderJackyHuang)","source":"_posts/关于Runtime的一些理论和实践.md","raw":"---\ntitle: 关于Runtime的一些理论和实践\ndate: 2017-05-23 23:21:31\ntags:\n---\n\n## 前言\n\n网上讲解Runtime的教程非常之多，有些讲的还算不错，有些感觉就是人云亦云，所以读者就应该好好甄别下学习的资料。我在本文的最后，会列出一些我认为讲的不错的参考资料，以供参考。接下来就进入正文\n\n<!--more-->\n\n## 正文\n\n### 理论部分\n\n#### 基础中的基础\n\n​\t假设看官有一定的数据结构知识，知道什么叫结构体，因为接下来我要讲述的这个东西就是从结构体开始的。如果有不懂的同学请走这里[传送门](http://www.cnblogs.com/qyaizs/articles/2039101.html)\n\n​\tiOS中Class的定义如下\n\n```objc\nstruct objc_class {//class 的结构体\n    Class isa  OBJC_ISA_AVAILABILITY;//class的isa指向的是元类，元类的isa指向的是根元类。\n\n#if !__OBJC2__\n    Class super_class                                        OBJC2_UNAVAILABLE;//父类指针\n    const char *name\t\t                                OBJC2_UNAVAILABLE;//类名称\n    long version \t                                         OBJC2_UNAVAILABLE;//类版本\n    long info                                                OBJC2_UNAVAILABLE;//信息\n    long instance_size                                \t\t OBJC2_UNAVAILABLE;//实例的大小\n    struct objc_ivar_list *ivars\t\t\t\t            OBJC2_UNAVAILABLE;//成员变量列表 \n    struct objc_method_list **methodLists                     OBJC2_UNAVAILABLE;//方法列表\n    struct objc_cache *cache                       \t\t     OBJC2_UNAVAILABLE;//缓存方法\n    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;//协议列表\n#endif\n\n} OBJC2_UNAVAILABLE;\ntypedef struct objc_class *Class;//此处定义了结构体指针Class\ntypedef struct objc_object {\n    Class isa;\n} *id; //此处定义了结构体指针id，id内部有一个isa Class指针，指向它的类。\n```\n\n​\tisa指针是实例方法在运行时能够被执行的关键，运行时系统将依靠isa指针找到实例所在的类，进而找到方法列表和缓存方法，进行消息的发送。如果消息得不到执行，将根据类里面的super_classs指针找父类的实例方法。但是如果是类方法或者说是+号方法进行消息发送，那么将会获取类里面的isa指针进而找到元类，获取元类里面的方法列表或缓存方法进行消息处理，如果没找到，那么将去寻找元类里面的super_class指针找父元类的类方法。\n\n\n\n​\t下面是哥们从网上找的一张isa 和super_class指针的指向图\n\n![](关于Runtime的一些理论和实践/1.jpeg)\n\n#### 基础\n\n​\t有了基础中的基础之后，我们才知道Objective-C的本源其实也是来自于C语言，来自于结构体。那么有了这些之后，怎么让OC的类和对象在我们的程序内部运作起来，接下来，有个新的东西要登场了，那就是<font color=red>**objc_msgSend**</font>，请记住它，正是有了它objective-c才真正称得上是一门面向运行时的语言。\n\n​\tobjc_msgSend实质上就是一个C函数。其次objc_msgSend的参数类型第一个必须是id，第二个是SEL，第三个是va_list参数列表。从cocoa的objc.h文件中，我们可以看到它的定义。\n\n````objc\nid objc_msgSend(id self, SEL op, ...)//运行时消息发送的函数\n````\n\n​\t当你以为这就是运行时发送消息的全部时，很不幸的告诉你，远远没有这么简单，objc_msgSend还有一大帮兄弟姐妹，它们如下\n\n```objc\nid objc_msgSendSuper(struct objc_super *super, SEL op, ...)//super 指针调用方法的发送的消息\nvoid objc_msgSend_stret(id self, SEL op, ...)//当返回值是结构体时，发送此消息\nvoid objc_msgSendSuper_stret(struct objc_super *super, SEL op, ...)//super指针调用，返回值是结构体时，发送此消息\ndouble objc_msgSend_fpret(id self, SEL op, ...)//返回值为float类型，发送此消息(i386)\nlong double objc_msgSend_fpret(id self, SEL op, ...)//返回值为为float类型，发送此消息(x86_64)\n```\n\n​\t其实，这些并不重要，只要掌握objc_msgSend这个就可以了，上面的这些兄弟姐妹只需要了解下就行。\n\n#### 消息发送\n\n​\t当[obj message]调用时，将会被转化为((void (*)(id,@sel(message))objc_msgSend)(id,@sel(message))。此消息将走如下几个流程\n\n* 检查接收的对象是否为nil，如果是，调用nil处理方案\n* 在objc_object结构体中含有cache，首先会在Class的cache中查找IMP(如果没有缓存则会初始化缓存)，如果找到就会跳转到对应的函数上执行。\n* 如果没有找到就像父类的Class查找，如果还没有没找到就继续向上查找，直到找到根类。\n* 如果找到根类还是没有实现方案，这个时候就需要使用_objc_msgForward函数指针替代imp，最后来执行这个imp（动态方法实现）。\n\n#### 消息转发\n\n```objc\n+ (BOOL)resolveInstanceMethod:(SEL)aSEL       //动态解析方法，给处理不了的sel动态加IMP实现\n- (id)forwardingTargetForSelector:(SEL)aSelector//没有方法？那就看看谁能实现这个方法，让谁去执行下\n- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector//还是没谁能执行？那就给这个方法重新签名\n- (void)forwardInvocation:(NSInvocation *)anInvocation//重新签名的方法，可以试着让转发下\n```\n\n​\t理论部分到此告一段落，接下里用实践的方式，来深入的理解下这套东西\n\n### 实践部分\n\n#### **解归档对象**\n\n我们知道oc的对象如果确认了NSCoding协议的话，可以将对象归档为NSData，进而存储在文件中，方便下次使用，通常的做法是将一个对象的属性一个一个的按照类型进行encode，如int型的变量，采用encodeInt:forKey,bool 型的变量，采用encodeBool:forKey。有没有一种方法不管是任何对象都可以进行归档。而不需要我们手动去辨别对象类型，进而调用相应的归档方法呢，runtime的存在对解决这类问题提供了可能。下面以归档一个CYArchieve对象为例，进行阐释。\n\n1. ***首先第一步，获取当前对象的成员变量个数。***\n\n   ```objc\n   unsigned int count;\n   Ivar *ivar = class_copyIvarList([self class], &count);\n   ```\n\n   此处调用了一个class_copyIvarList()方法，查询runtime，知道这个方法的作用如下\n\n   ```objc\n   // 根据已知的类，获取它的变量列表，outcount是这个变量列表的长度。如果一个类是nil或者没有变量列表，那么将返回NULL，且outCount将为0.注意该对象使用完之后，记得必须要free()!!!\n   OBJC_EXPORT Ivar *class_copyIvarList(Class cls, unsigned int *outCount) \n       OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0);\n   ```\n\n   **调用这个方法之后，也就是说，可以获取到当前类的所有变量，和变量个数**\n\n2. ***第二步，解析Ivar，获取变量名称***\n\n   这里还有一个Ivar，这是什么东西？查看其定义知道，这是一个不透明的结构体指针，封装了变量类型。ø\n\n   ```objc\n   /// An opaque type that represents an instance variable.\n   typedef struct objc_ivar *Ivar;\n\n   struct objc_ivar {\n       char *ivar_name         //变量名字                                 OBJC2_UNAVAILABLE;\n       char *ivar_type        //变量类型                                  OBJC2_UNAVAILABLE;\n       int ivar_offset        //变量在对象中的偏移量                                  OBJC2_UNAVAILABLE;\n   #ifdef __LP64__\n       int space  \n   OBJC2_UNAVAILABLE;\n   #endif\n   }\n   ```\n\n   它有什么用呢？再来查找资料，苹果runtime现在已经开源，大可去其源码中找答案。\n\n   翻翻翻，翻到runtime的定义中，找到了它的用途。Ivar有很多用途，这里我们使用到的有下面俩个\n\n   ````objc\n   // 根据获取到的Ivar结构体，获取它的名字\n   OBJC_EXPORT const char *ivar_getName(Ivar v) \n       OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0);\n   // 根据获取到的Ivar结构体，获取它的类型\n   OBJC_EXPORT const char *ivar_getTypeEncoding(Ivar v) \n       OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0);\n   ````\n\n   这俩个方法，可以帮助我们拿到当前变量的名称和变量的类型。名称，我们知道是变量的名称。如_name _title，之类的，可是类型是什么呢？还是得靠查苹果资料，我们找到了[官方定义](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1)下图是部分定义\n\n   ![](关于Runtime的一些理论和实践/2.png)\n\n3. ***第三步，进行归档***\n\n   现在有了变量名称和变量类型，我们基本就可以对对象的变量进行归档了。\n\n   头文件如下定义\n\n   ```objc\n   @interface CYArchieve : NSObject\n   @property (nonatomic, copy) NSString *userName;\n   @property (nonatomic, assign) const void * token;\n   @property (nonatomic, assign) int length;\n   @property (nonatomic, strong) NSNumber *age;\n   @property (nonatomic, assign) float height;\n   @end\n   ```\n\n   对此对象进行归档\n\n   具体代码如下\n\n   ```objc\n   - (void)encodeWithCoder:(NSCoder *)aCoder\n   {\n       unsigned int count;\n       Ivar *ivar = class_copyIvarList([self class], &count);\n       for (unsigned int i = 0; i < count; i++) {\n           Ivar iva = ivar[i];\n           \n           // 成员变量名\n           const void* name = ivar_getName(iva);\n           NSString *ivarName = [NSString stringWithUTF8String:name];\n           \n           ivarName = [ivarName substringFromIndex:1];\n           \n           // 获取get方法\n           SEL getter = NSSelectorFromString(ivarName);\n           \n           // 能响应getter方法\n           if ([self respondsToSelector:getter]) {\n               const void *typeEncoding = ivar_getTypeEncoding(iva);//获取变量类型\n               NSString *type = [NSString stringWithUTF8String:typeEncoding];//将c字符串转变为oc字符串\n               \n               NSLog(@\"type = %@\",type);\n               // const void *\n               if ([type isEqualToString:@\"r^v\"]) {\n                   const void * valueUTF8 = ((const void *(*)(id ,SEL))(void *)objc_msgSend)((id)self,getter);\n                   NSString *value = [NSString stringWithUTF8String:valueUTF8];\n                   [aCoder encodeObject:value forKey:ivarName];\n                   \n                   continue;\n               }\n               else if ([type isEqualToString:@\"f\"]){\n                   float fvalue = ((float(*)(id,SEL))(void *)objc_msgSend)((id)self, getter);\n                   [aCoder encodeObject:@(fvalue) forKey:ivarName];\n                   continue;\n               }\n               else if ([type isEqualToString:@\"i\"]){\n                   int ivalue = ((int (*)(id, SEL))(void *)objc_msgSend)((id)self,getter);\n                   [aCoder encodeObject:@(ivalue) forKey:ivarName];\n                   continue;\n               }\n               id obj = ((id(*)(id, SEL))(void *)objc_msgSend)((id)self,getter);//如果是OC类型的对象，这么获取\n               if (obj && [obj respondsToSelector:@selector(encodeWithCoder:)]) {//判断是否有返回值\n                   [aCoder encodeObject:obj forKey:ivarName];//之后进行编码\n               }\n               \n               /*//////////////////////////////////////////////////////////////////////////*/\n               /*  将(void*)指针强制转为返回值为float类型，参数为id，sel的函数指针。\n                  ((float(*)(id,SEL))(void *)objc_msgSend)((id)self, getter);\n                */\n               /*//////////////////////////////////////////////////////////////////////////*/\n           }\n       }\n       free(ivar);\n   }\n   ```\n\n4. ***解档和归档类似，代码如下***\n\n   ```objc\n   - (id)initWithCoder:(NSCoder *)aDecoder\n   {\n       self = [super init];\n       if (self) {\n           unsigned int count;\n           Ivar *ivars = class_copyIvarList([self class], &count);\n           \n           for (unsigned int i = 0; i < count; i++) {\n               Ivar ivar = ivars[i];\n               const void * ivarName = ivar_getName(ivar);\n               NSString *ivarString = [NSString stringWithUTF8String:ivarName];\n               ivarString  = [ivarString substringFromIndex:1];\n               NSString *setter = ivarString;\n               if (![setter hasPrefix:@\"_\"]) {\n                   char firstLatter = [setter characterAtIndex:0];\n                   NSString *firstLetterString = [NSString stringWithFormat:@\"%c\",firstLatter];\n                   setter = [setter substringFromIndex:1];\n                   setter = [NSString stringWithFormat:@\"%@%@\",[firstLetterString uppercaseString] ,setter];\n               }\n               \n               setter = [NSString stringWithFormat:@\"set%@:\",setter];\n               \n               SEL Sel = NSSelectorFromString(setter);\n               \n               if ([self respondsToSelector:Sel]) {\n                   const void *typeUTF8 = ivar_getTypeEncoding(ivar);\n                   NSString *type = [NSString stringWithUTF8String:typeUTF8];\n                   \n                   if ([type isEqualToString:@\"r^v\"]) {\n                       NSString *value = [aDecoder decodeObjectForKey:ivarString];\n                       if (value) {\n                           ((void (*)(id,SEL,const void *))(void *)objc_msgSend)((id)self,Sel,value.UTF8String);\n                       }\n                       continue;\n                   }\n                   else if ([type isEqualToString:@\"i\"]){\n                       NSNumber *number = [aDecoder decodeObjectForKey:ivarString];\n                       int num = [number intValue];\n                       ((void(*)(id ,SEL,int))(void *)objc_msgSend)((id)self,Sel,num);\n                       continue;\n                   }\n                   else if ([type isEqualToString:@\"f\"]){\n                       NSNumber *number = [aDecoder decodeObjectForKey:ivarString];\n                       float flo = [number floatValue];\n                       ((void(*)(id ,SEL,float))(void *)objc_msgSend)((id)self,Sel,flo);\n                       continue;\n                   }\n                   \n                   id obj = [aDecoder decodeObjectForKey:ivarString];\n                   if (obj) {\n                       ((void(*)(id, SEL, id))(void *)objc_msgSend)((id)self,Sel,obj);\n                   }\n                   \n               }\n           }\n           \n           free(ivars);\n       }\n\n       \n       return self;\n   }\n   ```\n\n#### **消息转发**\n\n这一小节，我来研究下runtime里面的消息转发机制，都知道，objc_msgsend()发送之后，如果目标不能执行相应的SEL，会进入到前文我们介绍的那四个方法中，具体的实践是怎么样的呢，这里我写个demo来演示下，一方面是自己学习，另一方面也做个笔记，方便以后查阅。\n\n1. ***动态添加方法***\n\n   首先创建了一个CYStudent类，然后在头文件声明了一个study方法\n\n   ```objc\n   @interface CYStudent : NSObject\n\n   - (void)study;\n\n   @end\n   ```\n\n   但是，我们在.m文件中不实现此方法，由此来验证，是否会进入消息转发流程，之后在.m文件中实现resolveInstanceMethod:此方法，如下\n\n   ```objc\n   void play(id obj,SEL sel){\n       NSLog(@\"这个学生不学习，只知道玩耍！\");\n   }\n\n   @implementation CYStudent\n\n   + (BOOL)resolveInstanceMethod:(SEL)sel\n   {\n       if([NSStringFromSelector(sel) isEqualToString:@\"study\"]){\n          return class_addMethod(self, sel, (IMP)play,\"v@:\");\n       }\n       return  [super resolveInstanceMethod:sel];\n   }\n   @end\n   ```\n\n   经如下代码测试，发现确实进入了play函数，执行结果如下\n\n   ```objc\n       CYStudent *laosan = [CYStudent new];\n       [laosan study];\n       \n       2017-06-08 22:21:34.997 RuntimeDemo[1381:190411] 这个学生不学习，只知道玩耍！\n   ```\n\n2. ***消息转发***\n\n   这里以CYTeacher为例，依然是让CYTeacher执行study方法，但是不给其动态解析的机会，让其将消息发送给CYStudent，CYStudent将继续动态添加方法的流程，具体实现如下\n\n   ```objc\n   @interface CYTeacher : NSObject\n\n   @end\n   @implementation CYTeacher\n   + (BOOL)resolveInstanceMethod:(SEL)sel\n   {\n       return NO;\n   }\n\n   - (id)forwardingTargetForSelector:(SEL)aSelector\n   {\n       //如果转发的消息是play，老师执行不了，那就让学生对象执行下试试\n       if ([NSStringFromSelector(aSelector) isEqualToString:@\"study\"]) {\n           return [CYStudent new];\n       }\n       \n       return [super forwardingTargetForSelector:aSelector];\n   }\n   @end\n   /*/////////////////////////////以下为测试代码///////////////////////////////*/\n       CYTeacher *teacher = [CYTeacher new];\n       \n       [teacher performSelector:@selector(study) withObject:nil afterDelay:0];\n       \n   /*/////////////////////////////以下为执行结果///////////////////////////////*/\n\n   2017-06-08 22:31:23.541 RuntimeDemo[1457:215285] 这个学生不学习，只知道玩耍！\n   ```\n\n3. ***方法签名***\n\n   接下来研究下方法签名和方法调用的问题，以CYDoctor为例，此处还是让CYDoctor对象执行study方法，但是不实现resolveInstanceMethod: 和forwardingTargetForSelector:这俩个方法，而是让其进入方法签名里面，生成一个方法签名，之后再执行forwardInvocation:方法。以下是我做的测试代码\n\n   ````objc\n   @interface CYDoctor : NSObject\n\n   @end\n   @implementation CYDoctor\n   + (BOOL)resolveInstanceMethod:(SEL)sel\n   {\n       return NO;\n   }\n\n   - (id)forwardingTargetForSelector:(SEL)aSelector\n   {\n       return nil;\n   }\n\n   - (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector\n   {\n       if ([NSStringFromSelector(aSelector) isEqualToString:@\"study\"]) {\n           return [NSMethodSignature signatureWithObjCTypes:\"v@:\"];\n       }\n       return [super methodSignatureForSelector:aSelector];\n   }\n\n   - (void)forwardInvocation:(NSInvocation *)anInvocation\n   {\n       [anInvocation setSelector:@selector(surgery:)];\n       [anInvocation setTarget:self];\n       [anInvocation invoke];\n   }\n\n   - (void)surgery:(id)sender\n   {\n       NSLog(@\"sender : %@\",sender);\n       \n       NSLog(@\"手术中，请勿打扰!!!\");\n   }\n   @end\n\n   /*/////////////////////////////以下为测试代码///////////////////////////////*/\n       CYDoctor *doctor = [CYDoctor new];\n       \n       [doctor performSelector:@selector(study) withObject:nil afterDelay:0];\n       \n   /*/////////////////////////////以下为执行结果///////////////////////////////*/\n\n   2017-06-08 22:45:39.442 RuntimeDemo[1544:239413] sender : (null)\n   2017-06-08 22:45:39.442 RuntimeDemo[1544:239413] 手术中，请勿打扰!!!\n   ````\n\n   经过这三个小例子，基本对objc_msgSend()的发送流程搞清楚了，接下里准备研究下MethodSwizzling\n\n#### **MethodSwizzling**\n\n以NSMutableArray为例，我们来替换系统的objectAtIndex：,insertObject:AtIndex:,removeObjectAtIndex:等方法。\n\n首先我们给NSobject类添加一个category，用来给任何类进行methodSwizzling。并提供一个方法，用来交换原方法和替换方法。\n\n```objc\n#import <objc/runtime.h>\n\n\n@implementation NSObject (MethodSwizzling)\n+ (void)swizzlingOriginSelector:(SEL)originSel withSwizzledSelector:(SEL)swizzledSel\n{\n    Class class = [self class];\n    Method originMethod = class_getInstanceMethod(self, originSel);\n    Method swizzledMethod = class_getInstanceMethod(self, swizzledSel);\n    \n    // 给系统的方法，添加一个swizzledSel的实现\n    BOOL didAddMethod = class_addMethod(class,\n                                        originSel,\n                                        method_getImplementation(swizzledMethod),\n                                        method_getTypeEncoding(swizzledMethod));\n    \n    // 原先的方法并不存在，所以添加成功了，那么替换swiizzledSel的实现为系统原来的实现\n    if (didAddMethod) {\n        class_replaceMethod(class,\n                            swizzledSel,\n                            method_getImplementation(originMethod),\n                            method_getTypeEncoding(originMethod));\n    }\n    else{\n        method_exchangeImplementations(originMethod, swizzledMethod);\n    }\n    \n}\n```\n\n这之后，我们创建一个NSMutableArray的category，用来执行运行时方法替换。\n\n```objc\n#import \"NSMutableArray+MethodSwizzling.h\"\n#import <objc/runtime.h>\n#import \"NSObject+MethodSwizzling.h\"\n\n@implementation NSMutableArray (MethodSwizzling)\n+ (void)load\n{\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        [self swizzlingOriginSelector:@selector(removeObject:) withSwizzledSelector:@selector(cy_removeObject:)];\n        \n        Class __NSArray_M = NSClassFromString(@\"__NSArrayM\");\n        \n        [__NSArray_M swizzlingOriginSelector:@selector(objectAtIndex:) withSwizzledSelector:@selector(cy_objectAtIndex:)];\n        \n        [__NSArray_M swizzlingOriginSelector:@selector(addObject:) withSwizzledSelector:@selector(cy_addObject:)];\n        [__NSArray_M swizzlingOriginSelector:@selector(insertObject:atIndex:) withSwizzledSelector:@selector(cy_insertObject:atIndex:)];\n        \n        [__NSArray_M swizzlingOriginSelector:@selector(removeObjectAtIndex:) withSwizzledSelector:@selector(cy_removeObjectAtIndex:)];\n        \n    });\n}\n\n- (id)cy_objectAtIndex:(NSInteger)index\n{\n    NSInteger count = [self count];\n    \n    if (count == 0) {\n        NSLog(@\"array is empty\");\n        return nil;\n    }\n    \n    if (index >= count) {\n        NSLog(@\"index is bigger than count\");\n        return nil;\n    }\n    else{\n        return [self cy_objectAtIndex:index];\n    }\n}\n\n- (void)cy_removeObject:(id)objec\n{\n    if (objec == nil) {\n        NSLog(@\"%s called,object is nil ,so return\",__FUNCTION__);\n        return;\n    }\n    \n    [self cy_removeObject:objec];\n}\n\n- (void)cy_addObject:(id)object\n{\n    if (object == nil) {\n        NSLog(@\"%s objc cannot be nil\",__FUNCTION__);\n        return;\n    }\n    \n    [self cy_addObject:object];\n}\n\n- (void)cy_insertObject:(id)anObject atIndex:(NSUInteger)index\n{\n    if (anObject == nil) {\n        NSLog(@\"%s objc cannot be nil\",__FUNCTION__);\n        return;\n    }\n    \n    if (index > self.count) {\n        NSLog(@\"%s index %lu cannot bigger than self.count\",__FUNCTION__, (unsigned long)index);\n        return;\n    }\n    \n    [self cy_insertObject:anObject atIndex:index];\n    \n}\n\n- (void)cy_removeObjectAtIndex:(NSUInteger)index\n{\n    if (index >= self.count) {\n        NSLog(@\"%s index %lu cannot bigger than self.count\",__FUNCTION__, (unsigned long)index);\n    }\n    \n    [self cy_removeObjectAtIndex:index];\n}\n\n@end\n```\n\n接下来是一个例子代码，我们来验证下替换的成果。\n\n```objc\n    id nilobjc = nil;\n    \n    NSMutableArray *testArray = [NSMutableArray array];\n    [testArray addObject:@\"\"];\n    id obj = testArray[19];\n    \n    [testArray insertObject:nilobjc atIndex:0];\n    \n    [testArray removeObject:nilobjc];\n    \n    [testArray addObject:nilobjc];\n    \n    [testArray removeObjectAtIndex:0];\n```\n\n打印结果为\n\n```objc\n2017-06-11 22:43:18.705 RuntimeDemo[38559:4195212] index is bigger than count\n2017-06-11 22:43:18.705 RuntimeDemo[38559:4195212] -[NSMutableArray(MethodSwizzling) cy_insertObject:atIndex:] objc cannot be nil\n2017-06-11 22:43:18.706 RuntimeDemo[38559:4195212] -[NSMutableArray(MethodSwizzling) cy_removeObject:] called,object is nil ,so return\n2017-06-11 22:43:18.706 RuntimeDemo[38559:4195212] -[NSMutableArray(MethodSwizzling) cy_addObject:] objc cannot be nil\n```\n\n### 小结 \n\nruntime的学习是持续进行了，我这篇blog也仅仅是抛砖引玉，如何灵活的在项目中使用Runtime才是我们真正应该做的。切记不可为了使用某项技术，硬刚。这是不好滴。😆\n\n \n\n\n\n## 参考资料\n\n1.[Runtime 学习笔记(一)](http://lastdays.cn/2016/02/20/runtime1/)\n\n2.[Runtime 学习笔记(二)](http://lastdays.cn/2016/02/20/runtime2/)\n\n3.[理解 Objective-C Runtime](http://justinyan.me/post/1624)\n\n4.[https://github.com/CoderJackyHuang](https://github.com/CoderJackyHuang)","slug":"关于Runtime的一些理论和实践","published":1,"updated":"2017-06-11T14:48:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yxf000mhx5l9ty277tv","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>网上讲解Runtime的教程非常之多，有些讲的还算不错，有些感觉就是人云亦云，所以读者就应该好好甄别下学习的资料。我在本文的最后，会列出一些我认为讲的不错的参考资料，以供参考。接下来就进入正文</p>\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"理论部分\"><a href=\"#理论部分\" class=\"headerlink\" title=\"理论部分\"></a>理论部分</h3><h4 id=\"基础中的基础\"><a href=\"#基础中的基础\" class=\"headerlink\" title=\"基础中的基础\"></a>基础中的基础</h4><p>​    假设看官有一定的数据结构知识，知道什么叫结构体，因为接下来我要讲述的这个东西就是从结构体开始的。如果有不懂的同学请走这里<a href=\"http://www.cnblogs.com/qyaizs/articles/2039101.html\" target=\"_blank\" rel=\"external\">传送门</a></p>\n<p>​    iOS中Class的定义如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_class &#123;<span class=\"comment\">//class 的结构体</span></div><div class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;<span class=\"comment\">//class的isa指向的是元类，元类的isa指向的是根元类。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if !__OBJC2__</span></div><div class=\"line\">    Class super_class                                        OBJC2_UNAVAILABLE;<span class=\"comment\">//父类指针</span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name\t\t                                OBJC2_UNAVAILABLE;<span class=\"comment\">//类名称</span></div><div class=\"line\">    <span class=\"keyword\">long</span> version \t                                         OBJC2_UNAVAILABLE;<span class=\"comment\">//类版本</span></div><div class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;<span class=\"comment\">//信息</span></div><div class=\"line\">    <span class=\"keyword\">long</span> instance_size                                \t\t OBJC2_UNAVAILABLE;<span class=\"comment\">//实例的大小</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar_list *ivars\t\t\t\t            OBJC2_UNAVAILABLE;<span class=\"comment\">//成员变量列表 </span></div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list **methodLists                     OBJC2_UNAVAILABLE;<span class=\"comment\">//方法列表</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_cache *cache                       \t\t     OBJC2_UNAVAILABLE;<span class=\"comment\">//缓存方法</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;<span class=\"comment\">//协议列表</span></div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\"></div><div class=\"line\">&#125; OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;<span class=\"comment\">//此处定义了结构体指针Class</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object &#123;</div><div class=\"line\">    Class isa;</div><div class=\"line\">&#125; *<span class=\"keyword\">id</span>; <span class=\"comment\">//此处定义了结构体指针id，id内部有一个isa Class指针，指向它的类。</span></div></pre></td></tr></table></figure>\n<p>​    isa指针是实例方法在运行时能够被执行的关键，运行时系统将依靠isa指针找到实例所在的类，进而找到方法列表和缓存方法，进行消息的发送。如果消息得不到执行，将根据类里面的super_classs指针找父类的实例方法。但是如果是类方法或者说是+号方法进行消息发送，那么将会获取类里面的isa指针进而找到元类，获取元类里面的方法列表或缓存方法进行消息处理，如果没找到，那么将去寻找元类里面的super_class指针找父元类的类方法。</p>\n<p>​    下面是哥们从网上找的一张isa 和super_class指针的指向图</p>\n<p><img src=\"/2017/05/23/关于Runtime的一些理论和实践/1.jpeg\" alt=\"\"></p>\n<h4 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h4><p>​    有了基础中的基础之后，我们才知道Objective-C的本源其实也是来自于C语言，来自于结构体。那么有了这些之后，怎么让OC的类和对象在我们的程序内部运作起来，接下来，有个新的东西要登场了，那就是<font color=\"red\"><strong>objc_msgSend</strong></font>，请记住它，正是有了它objective-c才真正称得上是一门面向运行时的语言。</p>\n<p>​    objc_msgSend实质上就是一个C函数。其次objc_msgSend的参数类型第一个必须是id，第二个是SEL，第三个是va_list参数列表。从cocoa的objc.h文件中，我们可以看到它的定义。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> objc_msgSend(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL op, ...)<span class=\"comment\">//运行时消息发送的函数</span></div></pre></td></tr></table></figure>\n<p>​    当你以为这就是运行时发送消息的全部时，很不幸的告诉你，远远没有这么简单，objc_msgSend还有一大帮兄弟姐妹，它们如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> objc_msgSendSuper(<span class=\"keyword\">struct</span> objc_super *<span class=\"keyword\">super</span>, SEL op, ...)<span class=\"comment\">//super 指针调用方法的发送的消息</span></div><div class=\"line\"><span class=\"keyword\">void</span> objc_msgSend_stret(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL op, ...)<span class=\"comment\">//当返回值是结构体时，发送此消息</span></div><div class=\"line\"><span class=\"keyword\">void</span> objc_msgSendSuper_stret(<span class=\"keyword\">struct</span> objc_super *<span class=\"keyword\">super</span>, SEL op, ...)<span class=\"comment\">//super指针调用，返回值是结构体时，发送此消息</span></div><div class=\"line\"><span class=\"keyword\">double</span> objc_msgSend_fpret(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL op, ...)<span class=\"comment\">//返回值为float类型，发送此消息(i386)</span></div><div class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">double</span> objc_msgSend_fpret(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL op, ...)<span class=\"comment\">//返回值为为float类型，发送此消息(x86_64)</span></div></pre></td></tr></table></figure>\n<p>​    其实，这些并不重要，只要掌握objc_msgSend这个就可以了，上面的这些兄弟姐妹只需要了解下就行。</p>\n<h4 id=\"消息发送\"><a href=\"#消息发送\" class=\"headerlink\" title=\"消息发送\"></a>消息发送</h4><p>​    当[obj message]调用时，将会被转化为((void (*)(id,@sel(message))objc_msgSend)(id,@sel(message))。此消息将走如下几个流程</p>\n<ul>\n<li>检查接收的对象是否为nil，如果是，调用nil处理方案</li>\n<li>在objc_object结构体中含有cache，首先会在Class的cache中查找IMP(如果没有缓存则会初始化缓存)，如果找到就会跳转到对应的函数上执行。</li>\n<li>如果没有找到就像父类的Class查找，如果还没有没找到就继续向上查找，直到找到根类。</li>\n<li>如果找到根类还是没有实现方案，这个时候就需要使用_objc_msgForward函数指针替代imp，最后来执行这个imp（动态方法实现）。</li>\n</ul>\n<h4 id=\"消息转发\"><a href=\"#消息转发\" class=\"headerlink\" title=\"消息转发\"></a>消息转发</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)resolveInstanceMethod:(SEL)aSEL       <span class=\"comment\">//动态解析方法，给处理不了的sel动态加IMP实现</span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)forwardingTargetForSelector:(SEL)aSelector<span class=\"comment\">//没有方法？那就看看谁能实现这个方法，让谁去执行下</span></div><div class=\"line\">- (<span class=\"built_in\">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector<span class=\"comment\">//还是没谁能执行？那就给这个方法重新签名</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)anInvocation<span class=\"comment\">//重新签名的方法，可以试着让转发下</span></div></pre></td></tr></table></figure>\n<p>​    理论部分到此告一段落，接下里用实践的方式，来深入的理解下这套东西</p>\n<h3 id=\"实践部分\"><a href=\"#实践部分\" class=\"headerlink\" title=\"实践部分\"></a>实践部分</h3><h4 id=\"解归档对象\"><a href=\"#解归档对象\" class=\"headerlink\" title=\"解归档对象\"></a><strong>解归档对象</strong></h4><p>我们知道oc的对象如果确认了NSCoding协议的话，可以将对象归档为NSData，进而存储在文件中，方便下次使用，通常的做法是将一个对象的属性一个一个的按照类型进行encode，如int型的变量，采用encodeInt:forKey,bool 型的变量，采用encodeBool:forKey。有没有一种方法不管是任何对象都可以进行归档。而不需要我们手动去辨别对象类型，进而调用相应的归档方法呢，runtime的存在对解决这类问题提供了可能。下面以归档一个CYArchieve对象为例，进行阐释。</p>\n<ol>\n<li><p><strong><em>首先第一步，获取当前对象的成员变量个数。</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\">Ivar *ivar = class_copyIvarList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;count);</div></pre></td></tr></table></figure>\n<p>此处调用了一个class_copyIvarList()方法，查询runtime，知道这个方法的作用如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 根据已知的类，获取它的变量列表，outcount是这个变量列表的长度。如果一个类是nil或者没有变量列表，那么将返回NULL，且outCount将为0.注意该对象使用完之后，记得必须要free()!!!</span></div><div class=\"line\">OBJC_EXPORT Ivar *class_copyIvarList(Class cls, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount) </div><div class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>);</div></pre></td></tr></table></figure>\n<p><strong>调用这个方法之后，也就是说，可以获取到当前类的所有变量，和变量个数</strong></p>\n</li>\n<li><p><strong><em>第二步，解析Ivar，获取变量名称</em></strong></p>\n<p>这里还有一个Ivar，这是什么东西？查看其定义知道，这是一个不透明的结构体指针，封装了变量类型。ø</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/// An opaque type that represents an instance variable.</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_ivar *Ivar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> objc_ivar &#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *ivar_name         <span class=\"comment\">//变量名字                                 OBJC2_UNAVAILABLE;</span></div><div class=\"line\">    <span class=\"keyword\">char</span> *ivar_type        <span class=\"comment\">//变量类型                                  OBJC2_UNAVAILABLE;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> ivar_offset        <span class=\"comment\">//变量在对象中的偏移量                                  OBJC2_UNAVAILABLE;</span></div><div class=\"line\"><span class=\"meta\">#ifdef __LP64__</span></div><div class=\"line\">    <span class=\"keyword\">int</span> space  </div><div class=\"line\">OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>它有什么用呢？再来查找资料，苹果runtime现在已经开源，大可去其源码中找答案。</p>\n<p>翻翻翻，翻到runtime的定义中，找到了它的用途。Ivar有很多用途，这里我们使用到的有下面俩个</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 根据获取到的Ivar结构体，获取它的名字</span></div><div class=\"line\">OBJC_EXPORT <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ivar_getName(Ivar v) </div><div class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>);</div><div class=\"line\"><span class=\"comment\">// 根据获取到的Ivar结构体，获取它的类型</span></div><div class=\"line\">OBJC_EXPORT <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ivar_getTypeEncoding(Ivar v) </div><div class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>);</div></pre></td></tr></table></figure>\n<p>这俩个方法，可以帮助我们拿到当前变量的名称和变量的类型。名称，我们知道是变量的名称。如_name _title，之类的，可是类型是什么呢？还是得靠查苹果资料，我们找到了<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1\" target=\"_blank\" rel=\"external\">官方定义</a>下图是部分定义</p>\n<p><img src=\"/2017/05/23/关于Runtime的一些理论和实践/2.png\" alt=\"\"></p>\n</li>\n<li><p><strong><em>第三步，进行归档</em></strong></p>\n<p>现在有了变量名称和变量类型，我们基本就可以对对象的变量进行归档了。</p>\n<p>头文件如下定义</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CYArchieve</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *userName;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * token;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> length;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSNumber</span> *age;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">float</span> height;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>对此对象进行归档</p>\n<p>具体代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\">    Ivar *ivar = class_copyIvarList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;count);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        Ivar iva = ivar[i];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 成员变量名</span></div><div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* name = ivar_getName(iva);</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *ivarName = [<span class=\"built_in\">NSString</span> stringWithUTF8String:name];</div><div class=\"line\">        </div><div class=\"line\">        ivarName = [ivarName substringFromIndex:<span class=\"number\">1</span>];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 获取get方法</span></div><div class=\"line\">        SEL <span class=\"keyword\">getter</span> = <span class=\"built_in\">NSSelectorFromString</span>(ivarName);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 能响应getter方法</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> respondsToSelector:<span class=\"keyword\">getter</span>]) &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *typeEncoding = ivar_getTypeEncoding(iva);<span class=\"comment\">//获取变量类型</span></div><div class=\"line\">            <span class=\"built_in\">NSString</span> *type = [<span class=\"built_in\">NSString</span> stringWithUTF8String:typeEncoding];<span class=\"comment\">//将c字符串转变为oc字符串</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"type = %@\"</span>,type);</div><div class=\"line\">            <span class=\"comment\">// const void *</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ([type isEqualToString:<span class=\"string\">@\"r^v\"</span>]) &#123;</div><div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * valueUTF8 = ((<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *(*)(<span class=\"keyword\">id</span> ,SEL))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,<span class=\"keyword\">getter</span>);</div><div class=\"line\">                <span class=\"built_in\">NSString</span> *value = [<span class=\"built_in\">NSString</span> stringWithUTF8String:valueUTF8];</div><div class=\"line\">                [aCoder encodeObject:value forKey:ivarName];</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([type isEqualToString:<span class=\"string\">@\"f\"</span>])&#123;</div><div class=\"line\">                <span class=\"keyword\">float</span> fvalue = ((<span class=\"keyword\">float</span>(*)(<span class=\"keyword\">id</span>,SEL))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>, <span class=\"keyword\">getter</span>);</div><div class=\"line\">                [aCoder encodeObject:@(fvalue) forKey:ivarName];</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([type isEqualToString:<span class=\"string\">@\"i\"</span>])&#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> ivalue = ((<span class=\"keyword\">int</span> (*)(<span class=\"keyword\">id</span>, SEL))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,<span class=\"keyword\">getter</span>);</div><div class=\"line\">                [aCoder encodeObject:@(ivalue) forKey:ivarName];</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">id</span> obj = ((<span class=\"keyword\">id</span>(*)(<span class=\"keyword\">id</span>, SEL))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,<span class=\"keyword\">getter</span>);<span class=\"comment\">//如果是OC类型的对象，这么获取</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (obj &amp;&amp; [obj respondsToSelector:<span class=\"keyword\">@selector</span>(encodeWithCoder:)]) &#123;<span class=\"comment\">//判断是否有返回值</span></div><div class=\"line\">                [aCoder encodeObject:obj forKey:ivarName];<span class=\"comment\">//之后进行编码</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">/*//////////////////////////////////////////////////////////////////////////*/</span></div><div class=\"line\">            <span class=\"comment\">/*  将(void*)指针强制转为返回值为float类型，参数为id，sel的函数指针。</span></div><div class=\"line\">               ((float(*)(id,SEL))(void *)objc_msgSend)((id)self, getter);</div><div class=\"line\">             */</div><div class=\"line\">            <span class=\"comment\">/*//////////////////////////////////////////////////////////////////////////*/</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    free(ivar);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em>解档和归档类似，代码如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\">        Ivar *ivars = class_copyIvarList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;count);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            Ivar ivar = ivars[i];</div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * ivarName = ivar_getName(ivar);</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *ivarString = [<span class=\"built_in\">NSString</span> stringWithUTF8String:ivarName];</div><div class=\"line\">            ivarString  = [ivarString substringFromIndex:<span class=\"number\">1</span>];</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *<span class=\"keyword\">setter</span> = ivarString;</div><div class=\"line\">            <span class=\"keyword\">if</span> (![<span class=\"keyword\">setter</span> hasPrefix:<span class=\"string\">@\"_\"</span>]) &#123;</div><div class=\"line\">                <span class=\"keyword\">char</span> firstLatter = [<span class=\"keyword\">setter</span> characterAtIndex:<span class=\"number\">0</span>];</div><div class=\"line\">                <span class=\"built_in\">NSString</span> *firstLetterString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%c\"</span>,firstLatter];</div><div class=\"line\">                <span class=\"keyword\">setter</span> = [<span class=\"keyword\">setter</span> substringFromIndex:<span class=\"number\">1</span>];</div><div class=\"line\">                <span class=\"keyword\">setter</span> = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@%@\"</span>,[firstLetterString uppercaseString] ,<span class=\"keyword\">setter</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">setter</span> = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"set%@:\"</span>,<span class=\"keyword\">setter</span>];</div><div class=\"line\">            </div><div class=\"line\">            SEL Sel = <span class=\"built_in\">NSSelectorFromString</span>(<span class=\"keyword\">setter</span>);</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> respondsToSelector:Sel]) &#123;</div><div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *typeUTF8 = ivar_getTypeEncoding(ivar);</div><div class=\"line\">                <span class=\"built_in\">NSString</span> *type = [<span class=\"built_in\">NSString</span> stringWithUTF8String:typeUTF8];</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">if</span> ([type isEqualToString:<span class=\"string\">@\"r^v\"</span>]) &#123;</div><div class=\"line\">                    <span class=\"built_in\">NSString</span> *value = [aDecoder decodeObjectForKey:ivarString];</div><div class=\"line\">                    <span class=\"keyword\">if</span> (value) &#123;</div><div class=\"line\">                        ((<span class=\"keyword\">void</span> (*)(<span class=\"keyword\">id</span>,SEL,<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,Sel,value.UTF8String);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([type isEqualToString:<span class=\"string\">@\"i\"</span>])&#123;</div><div class=\"line\">                    <span class=\"built_in\">NSNumber</span> *number = [aDecoder decodeObjectForKey:ivarString];</div><div class=\"line\">                    <span class=\"keyword\">int</span> num = [number intValue];</div><div class=\"line\">                    ((<span class=\"keyword\">void</span>(*)(<span class=\"keyword\">id</span> ,SEL,<span class=\"keyword\">int</span>))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,Sel,num);</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([type isEqualToString:<span class=\"string\">@\"f\"</span>])&#123;</div><div class=\"line\">                    <span class=\"built_in\">NSNumber</span> *number = [aDecoder decodeObjectForKey:ivarString];</div><div class=\"line\">                    <span class=\"keyword\">float</span> flo = [number floatValue];</div><div class=\"line\">                    ((<span class=\"keyword\">void</span>(*)(<span class=\"keyword\">id</span> ,SEL,<span class=\"keyword\">float</span>))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,Sel,flo);</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">id</span> obj = [aDecoder decodeObjectForKey:ivarString];</div><div class=\"line\">                <span class=\"keyword\">if</span> (obj) &#123;</div><div class=\"line\">                    ((<span class=\"keyword\">void</span>(*)(<span class=\"keyword\">id</span>, SEL, <span class=\"keyword\">id</span>))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,Sel,obj);</div><div class=\"line\">                &#125;</div><div class=\"line\">                </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        free(ivars);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"消息转发-1\"><a href=\"#消息转发-1\" class=\"headerlink\" title=\"消息转发\"></a><strong>消息转发</strong></h4><p>这一小节，我来研究下runtime里面的消息转发机制，都知道，objc_msgsend()发送之后，如果目标不能执行相应的SEL，会进入到前文我们介绍的那四个方法中，具体的实践是怎么样的呢，这里我写个demo来演示下，一方面是自己学习，另一方面也做个笔记，方便以后查阅。</p>\n<ol>\n<li><p><strong><em>动态添加方法</em></strong></p>\n<p>首先创建了一个CYStudent类，然后在头文件声明了一个study方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CYStudent</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)study;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>但是，我们在.m文件中不实现此方法，由此来验证，是否会进入消息转发流程，之后在.m文件中实现resolveInstanceMethod:此方法，如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> play(<span class=\"keyword\">id</span> obj,SEL sel)&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"这个学生不学习，只知道玩耍！\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CYStudent</span></span></div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)resolveInstanceMethod:(SEL)sel</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>([<span class=\"built_in\">NSStringFromSelector</span>(sel) isEqualToString:<span class=\"string\">@\"study\"</span>])&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> class_addMethod(<span class=\"keyword\">self</span>, sel, (IMP)play,<span class=\"string\">\"v@:\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span>  [<span class=\"keyword\">super</span> resolveInstanceMethod:sel];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>经如下代码测试，发现确实进入了play函数，执行结果如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">CYStudent *laosan = [CYStudent new];</div><div class=\"line\">[laosan study];</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-08</span> <span class=\"number\">22</span>:<span class=\"number\">21</span>:<span class=\"number\">34.997</span> RuntimeDemo[<span class=\"number\">1381</span>:<span class=\"number\">190411</span>] 这个学生不学习，只知道玩耍！</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em>消息转发</em></strong></p>\n<p>这里以CYTeacher为例，依然是让CYTeacher执行study方法，但是不给其动态解析的机会，让其将消息发送给CYStudent，CYStudent将继续动态添加方法的流程，具体实现如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CYTeacher</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CYTeacher</span></span></div><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)resolveInstanceMethod:(SEL)sel</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)forwardingTargetForSelector:(SEL)aSelector</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//如果转发的消息是play，老师执行不了，那就让学生对象执行下试试</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"built_in\">NSStringFromSelector</span>(aSelector) isEqualToString:<span class=\"string\">@\"study\"</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [CYStudent new];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> forwardingTargetForSelector:aSelector];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"><span class=\"comment\">/*/////////////////////////////以下为测试代码///////////////////////////////*/</span></div><div class=\"line\">    CYTeacher *teacher = [CYTeacher new];</div><div class=\"line\">    </div><div class=\"line\">    [teacher performSelector:<span class=\"keyword\">@selector</span>(study) withObject:<span class=\"literal\">nil</span> afterDelay:<span class=\"number\">0</span>];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">/*/////////////////////////////以下为执行结果///////////////////////////////*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-08</span> <span class=\"number\">22</span>:<span class=\"number\">31</span>:<span class=\"number\">23.541</span> RuntimeDemo[<span class=\"number\">1457</span>:<span class=\"number\">215285</span>] 这个学生不学习，只知道玩耍！</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em>方法签名</em></strong></p>\n<p>接下来研究下方法签名和方法调用的问题，以CYDoctor为例，此处还是让CYDoctor对象执行study方法，但是不实现resolveInstanceMethod: 和forwardingTargetForSelector:这俩个方法，而是让其进入方法签名里面，生成一个方法签名，之后再执行forwardInvocation:方法。以下是我做的测试代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CYDoctor</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CYDoctor</span></span></div><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)resolveInstanceMethod:(SEL)sel</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)forwardingTargetForSelector:(SEL)aSelector</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"built_in\">NSStringFromSelector</span>(aSelector) isEqualToString:<span class=\"string\">@\"study\"</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"built_in\">NSMethodSignature</span> signatureWithObjCTypes:<span class=\"string\">\"v@:\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> methodSignatureForSelector:aSelector];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)anInvocation</div><div class=\"line\">&#123;</div><div class=\"line\">    [anInvocation setSelector:<span class=\"keyword\">@selector</span>(surgery:)];</div><div class=\"line\">    [anInvocation setTarget:<span class=\"keyword\">self</span>];</div><div class=\"line\">    [anInvocation invoke];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)surgery:(<span class=\"keyword\">id</span>)sender</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sender : %@\"</span>,sender);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"手术中，请勿打扰!!!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*/////////////////////////////以下为测试代码///////////////////////////////*/</span></div><div class=\"line\">    CYDoctor *doctor = [CYDoctor new];</div><div class=\"line\">    </div><div class=\"line\">    [doctor performSelector:<span class=\"keyword\">@selector</span>(study) withObject:<span class=\"literal\">nil</span> afterDelay:<span class=\"number\">0</span>];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">/*/////////////////////////////以下为执行结果///////////////////////////////*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-08</span> <span class=\"number\">22</span>:<span class=\"number\">45</span>:<span class=\"number\">39.442</span> RuntimeDemo[<span class=\"number\">1544</span>:<span class=\"number\">239413</span>] sender : (null)</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-08</span> <span class=\"number\">22</span>:<span class=\"number\">45</span>:<span class=\"number\">39.442</span> RuntimeDemo[<span class=\"number\">1544</span>:<span class=\"number\">239413</span>] 手术中，请勿打扰!!!</div></pre></td></tr></table></figure>\n<p>经过这三个小例子，基本对objc_msgSend()的发送流程搞清楚了，接下里准备研究下MethodSwizzling</p>\n</li>\n</ol>\n<h4 id=\"MethodSwizzling\"><a href=\"#MethodSwizzling\" class=\"headerlink\" title=\"MethodSwizzling\"></a><strong>MethodSwizzling</strong></h4><p>以NSMutableArray为例，我们来替换系统的objectAtIndex：,insertObject:AtIndex:,removeObjectAtIndex:等方法。</p>\n<p>首先我们给NSobject类添加一个category，用来给任何类进行methodSwizzling。并提供一个方法，用来交换原方法和替换方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSObject</span> (<span class=\"title\">MethodSwizzling</span>)</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)swizzlingOriginSelector:(SEL)originSel withSwizzledSelector:(SEL)swizzledSel</div><div class=\"line\">&#123;</div><div class=\"line\">    Class <span class=\"keyword\">class</span> = [<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>];</div><div class=\"line\">    Method originMethod = class_getInstanceMethod(<span class=\"keyword\">self</span>, originSel);</div><div class=\"line\">    Method swizzledMethod = class_getInstanceMethod(<span class=\"keyword\">self</span>, swizzledSel);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 给系统的方法，添加一个swizzledSel的实现</span></div><div class=\"line\">    <span class=\"built_in\">BOOL</span> didAddMethod = class_addMethod(<span class=\"keyword\">class</span>,</div><div class=\"line\">                                        originSel,</div><div class=\"line\">                                        method_getImplementation(swizzledMethod),</div><div class=\"line\">                                        method_getTypeEncoding(swizzledMethod));</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 原先的方法并不存在，所以添加成功了，那么替换swiizzledSel的实现为系统原来的实现</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (didAddMethod) &#123;</div><div class=\"line\">        class_replaceMethod(<span class=\"keyword\">class</span>,</div><div class=\"line\">                            swizzledSel,</div><div class=\"line\">                            method_getImplementation(originMethod),</div><div class=\"line\">                            method_getTypeEncoding(originMethod));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        method_exchangeImplementations(originMethod, swizzledMethod);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这之后，我们创建一个NSMutableArray的category，用来执行运行时方法替换。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"NSMutableArray+MethodSwizzling.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"NSObject+MethodSwizzling.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSMutableArray</span> (<span class=\"title\">MethodSwizzling</span>)</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)load</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</div><div class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> swizzlingOriginSelector:<span class=\"keyword\">@selector</span>(removeObject:) withSwizzledSelector:<span class=\"keyword\">@selector</span>(cy_removeObject:)];</div><div class=\"line\">        </div><div class=\"line\">        Class __NSArray_M = <span class=\"built_in\">NSClassFromString</span>(<span class=\"string\">@\"__NSArrayM\"</span>);</div><div class=\"line\">        </div><div class=\"line\">        [__NSArray_M swizzlingOriginSelector:<span class=\"keyword\">@selector</span>(objectAtIndex:) withSwizzledSelector:<span class=\"keyword\">@selector</span>(cy_objectAtIndex:)];</div><div class=\"line\">        </div><div class=\"line\">        [__NSArray_M swizzlingOriginSelector:<span class=\"keyword\">@selector</span>(addObject:) withSwizzledSelector:<span class=\"keyword\">@selector</span>(cy_addObject:)];</div><div class=\"line\">        [__NSArray_M swizzlingOriginSelector:<span class=\"keyword\">@selector</span>(insertObject:atIndex:) withSwizzledSelector:<span class=\"keyword\">@selector</span>(cy_insertObject:atIndex:)];</div><div class=\"line\">        </div><div class=\"line\">        [__NSArray_M swizzlingOriginSelector:<span class=\"keyword\">@selector</span>(removeObjectAtIndex:) withSwizzledSelector:<span class=\"keyword\">@selector</span>(cy_removeObjectAtIndex:)];</div><div class=\"line\">        </div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)cy_objectAtIndex:(<span class=\"built_in\">NSInteger</span>)index</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> count = [<span class=\"keyword\">self</span> count];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"array is empty\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= count) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"index is bigger than count\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> cy_objectAtIndex:index];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cy_removeObject:(<span class=\"keyword\">id</span>)objec</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (objec == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s called,object is nil ,so return\"</span>,__FUNCTION__);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> cy_removeObject:objec];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cy_addObject:(<span class=\"keyword\">id</span>)object</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s objc cannot be nil\"</span>,__FUNCTION__);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> cy_addObject:object];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cy_insertObject:(<span class=\"keyword\">id</span>)anObject atIndex:(<span class=\"built_in\">NSUInteger</span>)index</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (anObject == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s objc cannot be nil\"</span>,__FUNCTION__);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (index &gt; <span class=\"keyword\">self</span>.count) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s index %lu cannot bigger than self.count\"</span>,__FUNCTION__, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)index);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> cy_insertObject:anObject atIndex:index];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cy_removeObjectAtIndex:(<span class=\"built_in\">NSUInteger</span>)index</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= <span class=\"keyword\">self</span>.count) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s index %lu cannot bigger than self.count\"</span>,__FUNCTION__, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)index);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> cy_removeObjectAtIndex:index];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>接下来是一个例子代码，我们来验证下替换的成果。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> nilobjc = <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NSMutableArray</span> *testArray = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">[testArray addObject:<span class=\"string\">@\"\"</span>];</div><div class=\"line\"><span class=\"keyword\">id</span> obj = testArray[<span class=\"number\">19</span>];</div><div class=\"line\"></div><div class=\"line\">[testArray insertObject:nilobjc atIndex:<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\">[testArray removeObject:nilobjc];</div><div class=\"line\"></div><div class=\"line\">[testArray addObject:nilobjc];</div><div class=\"line\"></div><div class=\"line\">[testArray removeObjectAtIndex:<span class=\"number\">0</span>];</div></pre></td></tr></table></figure>\n<p>打印结果为</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-11</span> <span class=\"number\">22</span>:<span class=\"number\">43</span>:<span class=\"number\">18.705</span> RuntimeDemo[<span class=\"number\">38559</span>:<span class=\"number\">4195212</span>] index is bigger than count</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-11</span> <span class=\"number\">22</span>:<span class=\"number\">43</span>:<span class=\"number\">18.705</span> RuntimeDemo[<span class=\"number\">38559</span>:<span class=\"number\">4195212</span>] -[<span class=\"built_in\">NSMutableArray</span>(MethodSwizzling) cy_insertObject:atIndex:] objc cannot be <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-11</span> <span class=\"number\">22</span>:<span class=\"number\">43</span>:<span class=\"number\">18.706</span> RuntimeDemo[<span class=\"number\">38559</span>:<span class=\"number\">4195212</span>] -[<span class=\"built_in\">NSMutableArray</span>(MethodSwizzling) cy_removeObject:] called,object is <span class=\"literal\">nil</span> ,so <span class=\"keyword\">return</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-11</span> <span class=\"number\">22</span>:<span class=\"number\">43</span>:<span class=\"number\">18.706</span> RuntimeDemo[<span class=\"number\">38559</span>:<span class=\"number\">4195212</span>] -[<span class=\"built_in\">NSMutableArray</span>(MethodSwizzling) cy_addObject:] objc cannot be <span class=\"literal\">nil</span></div></pre></td></tr></table></figure>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>runtime的学习是持续进行了，我这篇blog也仅仅是抛砖引玉，如何灵活的在项目中使用Runtime才是我们真正应该做的。切记不可为了使用某项技术，硬刚。这是不好滴。😆</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>1.<a href=\"http://lastdays.cn/2016/02/20/runtime1/\" target=\"_blank\" rel=\"external\">Runtime 学习笔记(一)</a></p>\n<p>2.<a href=\"http://lastdays.cn/2016/02/20/runtime2/\" target=\"_blank\" rel=\"external\">Runtime 学习笔记(二)</a></p>\n<p>3.<a href=\"http://justinyan.me/post/1624\" target=\"_blank\" rel=\"external\">理解 Objective-C Runtime</a></p>\n<p>4.<a href=\"https://github.com/CoderJackyHuang\" target=\"_blank\" rel=\"external\">https://github.com/CoderJackyHuang</a></p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>网上讲解Runtime的教程非常之多，有些讲的还算不错，有些感觉就是人云亦云，所以读者就应该好好甄别下学习的资料。我在本文的最后，会列出一些我认为讲的不错的参考资料，以供参考。接下来就进入正文</p>","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"理论部分\"><a href=\"#理论部分\" class=\"headerlink\" title=\"理论部分\"></a>理论部分</h3><h4 id=\"基础中的基础\"><a href=\"#基础中的基础\" class=\"headerlink\" title=\"基础中的基础\"></a>基础中的基础</h4><p>​    假设看官有一定的数据结构知识，知道什么叫结构体，因为接下来我要讲述的这个东西就是从结构体开始的。如果有不懂的同学请走这里<a href=\"http://www.cnblogs.com/qyaizs/articles/2039101.html\">传送门</a></p>\n<p>​    iOS中Class的定义如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_class &#123;<span class=\"comment\">//class 的结构体</span></div><div class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;<span class=\"comment\">//class的isa指向的是元类，元类的isa指向的是根元类。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if !__OBJC2__</span></div><div class=\"line\">    Class super_class                                        OBJC2_UNAVAILABLE;<span class=\"comment\">//父类指针</span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name\t\t                                OBJC2_UNAVAILABLE;<span class=\"comment\">//类名称</span></div><div class=\"line\">    <span class=\"keyword\">long</span> version \t                                         OBJC2_UNAVAILABLE;<span class=\"comment\">//类版本</span></div><div class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;<span class=\"comment\">//信息</span></div><div class=\"line\">    <span class=\"keyword\">long</span> instance_size                                \t\t OBJC2_UNAVAILABLE;<span class=\"comment\">//实例的大小</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar_list *ivars\t\t\t\t            OBJC2_UNAVAILABLE;<span class=\"comment\">//成员变量列表 </span></div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list **methodLists                     OBJC2_UNAVAILABLE;<span class=\"comment\">//方法列表</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_cache *cache                       \t\t     OBJC2_UNAVAILABLE;<span class=\"comment\">//缓存方法</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;<span class=\"comment\">//协议列表</span></div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\"></div><div class=\"line\">&#125; OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;<span class=\"comment\">//此处定义了结构体指针Class</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object &#123;</div><div class=\"line\">    Class isa;</div><div class=\"line\">&#125; *<span class=\"keyword\">id</span>; <span class=\"comment\">//此处定义了结构体指针id，id内部有一个isa Class指针，指向它的类。</span></div></pre></td></tr></table></figure>\n<p>​    isa指针是实例方法在运行时能够被执行的关键，运行时系统将依靠isa指针找到实例所在的类，进而找到方法列表和缓存方法，进行消息的发送。如果消息得不到执行，将根据类里面的super_classs指针找父类的实例方法。但是如果是类方法或者说是+号方法进行消息发送，那么将会获取类里面的isa指针进而找到元类，获取元类里面的方法列表或缓存方法进行消息处理，如果没找到，那么将去寻找元类里面的super_class指针找父元类的类方法。</p>\n<p>​    下面是哥们从网上找的一张isa 和super_class指针的指向图</p>\n<p><img src=\"/2017/05/23/关于Runtime的一些理论和实践/1.jpeg\" alt=\"\"></p>\n<h4 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h4><p>​    有了基础中的基础之后，我们才知道Objective-C的本源其实也是来自于C语言，来自于结构体。那么有了这些之后，怎么让OC的类和对象在我们的程序内部运作起来，接下来，有个新的东西要登场了，那就是<font color=\"red\"><strong>objc_msgSend</strong></font>，请记住它，正是有了它objective-c才真正称得上是一门面向运行时的语言。</p>\n<p>​    objc_msgSend实质上就是一个C函数。其次objc_msgSend的参数类型第一个必须是id，第二个是SEL，第三个是va_list参数列表。从cocoa的objc.h文件中，我们可以看到它的定义。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> objc_msgSend(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL op, ...)<span class=\"comment\">//运行时消息发送的函数</span></div></pre></td></tr></table></figure>\n<p>​    当你以为这就是运行时发送消息的全部时，很不幸的告诉你，远远没有这么简单，objc_msgSend还有一大帮兄弟姐妹，它们如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> objc_msgSendSuper(<span class=\"keyword\">struct</span> objc_super *<span class=\"keyword\">super</span>, SEL op, ...)<span class=\"comment\">//super 指针调用方法的发送的消息</span></div><div class=\"line\"><span class=\"keyword\">void</span> objc_msgSend_stret(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL op, ...)<span class=\"comment\">//当返回值是结构体时，发送此消息</span></div><div class=\"line\"><span class=\"keyword\">void</span> objc_msgSendSuper_stret(<span class=\"keyword\">struct</span> objc_super *<span class=\"keyword\">super</span>, SEL op, ...)<span class=\"comment\">//super指针调用，返回值是结构体时，发送此消息</span></div><div class=\"line\"><span class=\"keyword\">double</span> objc_msgSend_fpret(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL op, ...)<span class=\"comment\">//返回值为float类型，发送此消息(i386)</span></div><div class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">double</span> objc_msgSend_fpret(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL op, ...)<span class=\"comment\">//返回值为为float类型，发送此消息(x86_64)</span></div></pre></td></tr></table></figure>\n<p>​    其实，这些并不重要，只要掌握objc_msgSend这个就可以了，上面的这些兄弟姐妹只需要了解下就行。</p>\n<h4 id=\"消息发送\"><a href=\"#消息发送\" class=\"headerlink\" title=\"消息发送\"></a>消息发送</h4><p>​    当[obj message]调用时，将会被转化为((void (*)(id,@sel(message))objc_msgSend)(id,@sel(message))。此消息将走如下几个流程</p>\n<ul>\n<li>检查接收的对象是否为nil，如果是，调用nil处理方案</li>\n<li>在objc_object结构体中含有cache，首先会在Class的cache中查找IMP(如果没有缓存则会初始化缓存)，如果找到就会跳转到对应的函数上执行。</li>\n<li>如果没有找到就像父类的Class查找，如果还没有没找到就继续向上查找，直到找到根类。</li>\n<li>如果找到根类还是没有实现方案，这个时候就需要使用_objc_msgForward函数指针替代imp，最后来执行这个imp（动态方法实现）。</li>\n</ul>\n<h4 id=\"消息转发\"><a href=\"#消息转发\" class=\"headerlink\" title=\"消息转发\"></a>消息转发</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)resolveInstanceMethod:(SEL)aSEL       <span class=\"comment\">//动态解析方法，给处理不了的sel动态加IMP实现</span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)forwardingTargetForSelector:(SEL)aSelector<span class=\"comment\">//没有方法？那就看看谁能实现这个方法，让谁去执行下</span></div><div class=\"line\">- (<span class=\"built_in\">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector<span class=\"comment\">//还是没谁能执行？那就给这个方法重新签名</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)anInvocation<span class=\"comment\">//重新签名的方法，可以试着让转发下</span></div></pre></td></tr></table></figure>\n<p>​    理论部分到此告一段落，接下里用实践的方式，来深入的理解下这套东西</p>\n<h3 id=\"实践部分\"><a href=\"#实践部分\" class=\"headerlink\" title=\"实践部分\"></a>实践部分</h3><h4 id=\"解归档对象\"><a href=\"#解归档对象\" class=\"headerlink\" title=\"解归档对象\"></a><strong>解归档对象</strong></h4><p>我们知道oc的对象如果确认了NSCoding协议的话，可以将对象归档为NSData，进而存储在文件中，方便下次使用，通常的做法是将一个对象的属性一个一个的按照类型进行encode，如int型的变量，采用encodeInt:forKey,bool 型的变量，采用encodeBool:forKey。有没有一种方法不管是任何对象都可以进行归档。而不需要我们手动去辨别对象类型，进而调用相应的归档方法呢，runtime的存在对解决这类问题提供了可能。下面以归档一个CYArchieve对象为例，进行阐释。</p>\n<ol>\n<li><p><strong><em>首先第一步，获取当前对象的成员变量个数。</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\">Ivar *ivar = class_copyIvarList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;count);</div></pre></td></tr></table></figure>\n<p>此处调用了一个class_copyIvarList()方法，查询runtime，知道这个方法的作用如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 根据已知的类，获取它的变量列表，outcount是这个变量列表的长度。如果一个类是nil或者没有变量列表，那么将返回NULL，且outCount将为0.注意该对象使用完之后，记得必须要free()!!!</span></div><div class=\"line\">OBJC_EXPORT Ivar *class_copyIvarList(Class cls, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount) </div><div class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>);</div></pre></td></tr></table></figure>\n<p><strong>调用这个方法之后，也就是说，可以获取到当前类的所有变量，和变量个数</strong></p>\n</li>\n<li><p><strong><em>第二步，解析Ivar，获取变量名称</em></strong></p>\n<p>这里还有一个Ivar，这是什么东西？查看其定义知道，这是一个不透明的结构体指针，封装了变量类型。ø</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/// An opaque type that represents an instance variable.</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_ivar *Ivar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> objc_ivar &#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *ivar_name         <span class=\"comment\">//变量名字                                 OBJC2_UNAVAILABLE;</span></div><div class=\"line\">    <span class=\"keyword\">char</span> *ivar_type        <span class=\"comment\">//变量类型                                  OBJC2_UNAVAILABLE;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> ivar_offset        <span class=\"comment\">//变量在对象中的偏移量                                  OBJC2_UNAVAILABLE;</span></div><div class=\"line\"><span class=\"meta\">#ifdef __LP64__</span></div><div class=\"line\">    <span class=\"keyword\">int</span> space  </div><div class=\"line\">OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>它有什么用呢？再来查找资料，苹果runtime现在已经开源，大可去其源码中找答案。</p>\n<p>翻翻翻，翻到runtime的定义中，找到了它的用途。Ivar有很多用途，这里我们使用到的有下面俩个</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 根据获取到的Ivar结构体，获取它的名字</span></div><div class=\"line\">OBJC_EXPORT <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ivar_getName(Ivar v) </div><div class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>);</div><div class=\"line\"><span class=\"comment\">// 根据获取到的Ivar结构体，获取它的类型</span></div><div class=\"line\">OBJC_EXPORT <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ivar_getTypeEncoding(Ivar v) </div><div class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>);</div></pre></td></tr></table></figure>\n<p>这俩个方法，可以帮助我们拿到当前变量的名称和变量的类型。名称，我们知道是变量的名称。如_name _title，之类的，可是类型是什么呢？还是得靠查苹果资料，我们找到了<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1\">官方定义</a>下图是部分定义</p>\n<p><img src=\"/2017/05/23/关于Runtime的一些理论和实践/2.png\" alt=\"\"></p>\n</li>\n<li><p><strong><em>第三步，进行归档</em></strong></p>\n<p>现在有了变量名称和变量类型，我们基本就可以对对象的变量进行归档了。</p>\n<p>头文件如下定义</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CYArchieve</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *userName;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * token;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> length;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSNumber</span> *age;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">float</span> height;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>对此对象进行归档</p>\n<p>具体代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\">    Ivar *ivar = class_copyIvarList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;count);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        Ivar iva = ivar[i];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 成员变量名</span></div><div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* name = ivar_getName(iva);</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *ivarName = [<span class=\"built_in\">NSString</span> stringWithUTF8String:name];</div><div class=\"line\">        </div><div class=\"line\">        ivarName = [ivarName substringFromIndex:<span class=\"number\">1</span>];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 获取get方法</span></div><div class=\"line\">        SEL <span class=\"keyword\">getter</span> = <span class=\"built_in\">NSSelectorFromString</span>(ivarName);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 能响应getter方法</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> respondsToSelector:<span class=\"keyword\">getter</span>]) &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *typeEncoding = ivar_getTypeEncoding(iva);<span class=\"comment\">//获取变量类型</span></div><div class=\"line\">            <span class=\"built_in\">NSString</span> *type = [<span class=\"built_in\">NSString</span> stringWithUTF8String:typeEncoding];<span class=\"comment\">//将c字符串转变为oc字符串</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"type = %@\"</span>,type);</div><div class=\"line\">            <span class=\"comment\">// const void *</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ([type isEqualToString:<span class=\"string\">@\"r^v\"</span>]) &#123;</div><div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * valueUTF8 = ((<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *(*)(<span class=\"keyword\">id</span> ,SEL))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,<span class=\"keyword\">getter</span>);</div><div class=\"line\">                <span class=\"built_in\">NSString</span> *value = [<span class=\"built_in\">NSString</span> stringWithUTF8String:valueUTF8];</div><div class=\"line\">                [aCoder encodeObject:value forKey:ivarName];</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([type isEqualToString:<span class=\"string\">@\"f\"</span>])&#123;</div><div class=\"line\">                <span class=\"keyword\">float</span> fvalue = ((<span class=\"keyword\">float</span>(*)(<span class=\"keyword\">id</span>,SEL))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>, <span class=\"keyword\">getter</span>);</div><div class=\"line\">                [aCoder encodeObject:@(fvalue) forKey:ivarName];</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([type isEqualToString:<span class=\"string\">@\"i\"</span>])&#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> ivalue = ((<span class=\"keyword\">int</span> (*)(<span class=\"keyword\">id</span>, SEL))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,<span class=\"keyword\">getter</span>);</div><div class=\"line\">                [aCoder encodeObject:@(ivalue) forKey:ivarName];</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">id</span> obj = ((<span class=\"keyword\">id</span>(*)(<span class=\"keyword\">id</span>, SEL))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,<span class=\"keyword\">getter</span>);<span class=\"comment\">//如果是OC类型的对象，这么获取</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (obj &amp;&amp; [obj respondsToSelector:<span class=\"keyword\">@selector</span>(encodeWithCoder:)]) &#123;<span class=\"comment\">//判断是否有返回值</span></div><div class=\"line\">                [aCoder encodeObject:obj forKey:ivarName];<span class=\"comment\">//之后进行编码</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">/*//////////////////////////////////////////////////////////////////////////*/</span></div><div class=\"line\">            <span class=\"comment\">/*  将(void*)指针强制转为返回值为float类型，参数为id，sel的函数指针。</span></div><div class=\"line\">               ((float(*)(id,SEL))(void *)objc_msgSend)((id)self, getter);</div><div class=\"line\">             */</div><div class=\"line\">            <span class=\"comment\">/*//////////////////////////////////////////////////////////////////////////*/</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    free(ivar);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em>解档和归档类似，代码如下</em></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\">        Ivar *ivars = class_copyIvarList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;count);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            Ivar ivar = ivars[i];</div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * ivarName = ivar_getName(ivar);</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *ivarString = [<span class=\"built_in\">NSString</span> stringWithUTF8String:ivarName];</div><div class=\"line\">            ivarString  = [ivarString substringFromIndex:<span class=\"number\">1</span>];</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *<span class=\"keyword\">setter</span> = ivarString;</div><div class=\"line\">            <span class=\"keyword\">if</span> (![<span class=\"keyword\">setter</span> hasPrefix:<span class=\"string\">@\"_\"</span>]) &#123;</div><div class=\"line\">                <span class=\"keyword\">char</span> firstLatter = [<span class=\"keyword\">setter</span> characterAtIndex:<span class=\"number\">0</span>];</div><div class=\"line\">                <span class=\"built_in\">NSString</span> *firstLetterString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%c\"</span>,firstLatter];</div><div class=\"line\">                <span class=\"keyword\">setter</span> = [<span class=\"keyword\">setter</span> substringFromIndex:<span class=\"number\">1</span>];</div><div class=\"line\">                <span class=\"keyword\">setter</span> = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@%@\"</span>,[firstLetterString uppercaseString] ,<span class=\"keyword\">setter</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">setter</span> = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"set%@:\"</span>,<span class=\"keyword\">setter</span>];</div><div class=\"line\">            </div><div class=\"line\">            SEL Sel = <span class=\"built_in\">NSSelectorFromString</span>(<span class=\"keyword\">setter</span>);</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> respondsToSelector:Sel]) &#123;</div><div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *typeUTF8 = ivar_getTypeEncoding(ivar);</div><div class=\"line\">                <span class=\"built_in\">NSString</span> *type = [<span class=\"built_in\">NSString</span> stringWithUTF8String:typeUTF8];</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">if</span> ([type isEqualToString:<span class=\"string\">@\"r^v\"</span>]) &#123;</div><div class=\"line\">                    <span class=\"built_in\">NSString</span> *value = [aDecoder decodeObjectForKey:ivarString];</div><div class=\"line\">                    <span class=\"keyword\">if</span> (value) &#123;</div><div class=\"line\">                        ((<span class=\"keyword\">void</span> (*)(<span class=\"keyword\">id</span>,SEL,<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,Sel,value.UTF8String);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([type isEqualToString:<span class=\"string\">@\"i\"</span>])&#123;</div><div class=\"line\">                    <span class=\"built_in\">NSNumber</span> *number = [aDecoder decodeObjectForKey:ivarString];</div><div class=\"line\">                    <span class=\"keyword\">int</span> num = [number intValue];</div><div class=\"line\">                    ((<span class=\"keyword\">void</span>(*)(<span class=\"keyword\">id</span> ,SEL,<span class=\"keyword\">int</span>))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,Sel,num);</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([type isEqualToString:<span class=\"string\">@\"f\"</span>])&#123;</div><div class=\"line\">                    <span class=\"built_in\">NSNumber</span> *number = [aDecoder decodeObjectForKey:ivarString];</div><div class=\"line\">                    <span class=\"keyword\">float</span> flo = [number floatValue];</div><div class=\"line\">                    ((<span class=\"keyword\">void</span>(*)(<span class=\"keyword\">id</span> ,SEL,<span class=\"keyword\">float</span>))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,Sel,flo);</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">id</span> obj = [aDecoder decodeObjectForKey:ivarString];</div><div class=\"line\">                <span class=\"keyword\">if</span> (obj) &#123;</div><div class=\"line\">                    ((<span class=\"keyword\">void</span>(*)(<span class=\"keyword\">id</span>, SEL, <span class=\"keyword\">id</span>))(<span class=\"keyword\">void</span> *)objc_msgSend)((<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>,Sel,obj);</div><div class=\"line\">                &#125;</div><div class=\"line\">                </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        free(ivars);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"消息转发-1\"><a href=\"#消息转发-1\" class=\"headerlink\" title=\"消息转发\"></a><strong>消息转发</strong></h4><p>这一小节，我来研究下runtime里面的消息转发机制，都知道，objc_msgsend()发送之后，如果目标不能执行相应的SEL，会进入到前文我们介绍的那四个方法中，具体的实践是怎么样的呢，这里我写个demo来演示下，一方面是自己学习，另一方面也做个笔记，方便以后查阅。</p>\n<ol>\n<li><p><strong><em>动态添加方法</em></strong></p>\n<p>首先创建了一个CYStudent类，然后在头文件声明了一个study方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CYStudent</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)study;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>但是，我们在.m文件中不实现此方法，由此来验证，是否会进入消息转发流程，之后在.m文件中实现resolveInstanceMethod:此方法，如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> play(<span class=\"keyword\">id</span> obj,SEL sel)&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"这个学生不学习，只知道玩耍！\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CYStudent</span></span></div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)resolveInstanceMethod:(SEL)sel</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>([<span class=\"built_in\">NSStringFromSelector</span>(sel) isEqualToString:<span class=\"string\">@\"study\"</span>])&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> class_addMethod(<span class=\"keyword\">self</span>, sel, (IMP)play,<span class=\"string\">\"v@:\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span>  [<span class=\"keyword\">super</span> resolveInstanceMethod:sel];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>经如下代码测试，发现确实进入了play函数，执行结果如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">CYStudent *laosan = [CYStudent new];</div><div class=\"line\">[laosan study];</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-08</span> <span class=\"number\">22</span>:<span class=\"number\">21</span>:<span class=\"number\">34.997</span> RuntimeDemo[<span class=\"number\">1381</span>:<span class=\"number\">190411</span>] 这个学生不学习，只知道玩耍！</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em>消息转发</em></strong></p>\n<p>这里以CYTeacher为例，依然是让CYTeacher执行study方法，但是不给其动态解析的机会，让其将消息发送给CYStudent，CYStudent将继续动态添加方法的流程，具体实现如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CYTeacher</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CYTeacher</span></span></div><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)resolveInstanceMethod:(SEL)sel</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)forwardingTargetForSelector:(SEL)aSelector</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//如果转发的消息是play，老师执行不了，那就让学生对象执行下试试</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"built_in\">NSStringFromSelector</span>(aSelector) isEqualToString:<span class=\"string\">@\"study\"</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [CYStudent new];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> forwardingTargetForSelector:aSelector];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"><span class=\"comment\">/*/////////////////////////////以下为测试代码///////////////////////////////*/</span></div><div class=\"line\">    CYTeacher *teacher = [CYTeacher new];</div><div class=\"line\">    </div><div class=\"line\">    [teacher performSelector:<span class=\"keyword\">@selector</span>(study) withObject:<span class=\"literal\">nil</span> afterDelay:<span class=\"number\">0</span>];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">/*/////////////////////////////以下为执行结果///////////////////////////////*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-08</span> <span class=\"number\">22</span>:<span class=\"number\">31</span>:<span class=\"number\">23.541</span> RuntimeDemo[<span class=\"number\">1457</span>:<span class=\"number\">215285</span>] 这个学生不学习，只知道玩耍！</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em>方法签名</em></strong></p>\n<p>接下来研究下方法签名和方法调用的问题，以CYDoctor为例，此处还是让CYDoctor对象执行study方法，但是不实现resolveInstanceMethod: 和forwardingTargetForSelector:这俩个方法，而是让其进入方法签名里面，生成一个方法签名，之后再执行forwardInvocation:方法。以下是我做的测试代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">CYDoctor</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CYDoctor</span></span></div><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)resolveInstanceMethod:(SEL)sel</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)forwardingTargetForSelector:(SEL)aSelector</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"built_in\">NSStringFromSelector</span>(aSelector) isEqualToString:<span class=\"string\">@\"study\"</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"built_in\">NSMethodSignature</span> signatureWithObjCTypes:<span class=\"string\">\"v@:\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> methodSignatureForSelector:aSelector];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)anInvocation</div><div class=\"line\">&#123;</div><div class=\"line\">    [anInvocation setSelector:<span class=\"keyword\">@selector</span>(surgery:)];</div><div class=\"line\">    [anInvocation setTarget:<span class=\"keyword\">self</span>];</div><div class=\"line\">    [anInvocation invoke];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)surgery:(<span class=\"keyword\">id</span>)sender</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"sender : %@\"</span>,sender);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"手术中，请勿打扰!!!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*/////////////////////////////以下为测试代码///////////////////////////////*/</span></div><div class=\"line\">    CYDoctor *doctor = [CYDoctor new];</div><div class=\"line\">    </div><div class=\"line\">    [doctor performSelector:<span class=\"keyword\">@selector</span>(study) withObject:<span class=\"literal\">nil</span> afterDelay:<span class=\"number\">0</span>];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">/*/////////////////////////////以下为执行结果///////////////////////////////*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-08</span> <span class=\"number\">22</span>:<span class=\"number\">45</span>:<span class=\"number\">39.442</span> RuntimeDemo[<span class=\"number\">1544</span>:<span class=\"number\">239413</span>] sender : (null)</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-08</span> <span class=\"number\">22</span>:<span class=\"number\">45</span>:<span class=\"number\">39.442</span> RuntimeDemo[<span class=\"number\">1544</span>:<span class=\"number\">239413</span>] 手术中，请勿打扰!!!</div></pre></td></tr></table></figure>\n<p>经过这三个小例子，基本对objc_msgSend()的发送流程搞清楚了，接下里准备研究下MethodSwizzling</p>\n</li>\n</ol>\n<h4 id=\"MethodSwizzling\"><a href=\"#MethodSwizzling\" class=\"headerlink\" title=\"MethodSwizzling\"></a><strong>MethodSwizzling</strong></h4><p>以NSMutableArray为例，我们来替换系统的objectAtIndex：,insertObject:AtIndex:,removeObjectAtIndex:等方法。</p>\n<p>首先我们给NSobject类添加一个category，用来给任何类进行methodSwizzling。并提供一个方法，用来交换原方法和替换方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSObject</span> (<span class=\"title\">MethodSwizzling</span>)</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)swizzlingOriginSelector:(SEL)originSel withSwizzledSelector:(SEL)swizzledSel</div><div class=\"line\">&#123;</div><div class=\"line\">    Class <span class=\"keyword\">class</span> = [<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>];</div><div class=\"line\">    Method originMethod = class_getInstanceMethod(<span class=\"keyword\">self</span>, originSel);</div><div class=\"line\">    Method swizzledMethod = class_getInstanceMethod(<span class=\"keyword\">self</span>, swizzledSel);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 给系统的方法，添加一个swizzledSel的实现</span></div><div class=\"line\">    <span class=\"built_in\">BOOL</span> didAddMethod = class_addMethod(<span class=\"keyword\">class</span>,</div><div class=\"line\">                                        originSel,</div><div class=\"line\">                                        method_getImplementation(swizzledMethod),</div><div class=\"line\">                                        method_getTypeEncoding(swizzledMethod));</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 原先的方法并不存在，所以添加成功了，那么替换swiizzledSel的实现为系统原来的实现</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (didAddMethod) &#123;</div><div class=\"line\">        class_replaceMethod(<span class=\"keyword\">class</span>,</div><div class=\"line\">                            swizzledSel,</div><div class=\"line\">                            method_getImplementation(originMethod),</div><div class=\"line\">                            method_getTypeEncoding(originMethod));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        method_exchangeImplementations(originMethod, swizzledMethod);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这之后，我们创建一个NSMutableArray的category，用来执行运行时方法替换。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"NSMutableArray+MethodSwizzling.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"NSObject+MethodSwizzling.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSMutableArray</span> (<span class=\"title\">MethodSwizzling</span>)</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)load</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</div><div class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> swizzlingOriginSelector:<span class=\"keyword\">@selector</span>(removeObject:) withSwizzledSelector:<span class=\"keyword\">@selector</span>(cy_removeObject:)];</div><div class=\"line\">        </div><div class=\"line\">        Class __NSArray_M = <span class=\"built_in\">NSClassFromString</span>(<span class=\"string\">@\"__NSArrayM\"</span>);</div><div class=\"line\">        </div><div class=\"line\">        [__NSArray_M swizzlingOriginSelector:<span class=\"keyword\">@selector</span>(objectAtIndex:) withSwizzledSelector:<span class=\"keyword\">@selector</span>(cy_objectAtIndex:)];</div><div class=\"line\">        </div><div class=\"line\">        [__NSArray_M swizzlingOriginSelector:<span class=\"keyword\">@selector</span>(addObject:) withSwizzledSelector:<span class=\"keyword\">@selector</span>(cy_addObject:)];</div><div class=\"line\">        [__NSArray_M swizzlingOriginSelector:<span class=\"keyword\">@selector</span>(insertObject:atIndex:) withSwizzledSelector:<span class=\"keyword\">@selector</span>(cy_insertObject:atIndex:)];</div><div class=\"line\">        </div><div class=\"line\">        [__NSArray_M swizzlingOriginSelector:<span class=\"keyword\">@selector</span>(removeObjectAtIndex:) withSwizzledSelector:<span class=\"keyword\">@selector</span>(cy_removeObjectAtIndex:)];</div><div class=\"line\">        </div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)cy_objectAtIndex:(<span class=\"built_in\">NSInteger</span>)index</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> count = [<span class=\"keyword\">self</span> count];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"array is empty\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= count) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"index is bigger than count\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> cy_objectAtIndex:index];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cy_removeObject:(<span class=\"keyword\">id</span>)objec</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (objec == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s called,object is nil ,so return\"</span>,__FUNCTION__);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> cy_removeObject:objec];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cy_addObject:(<span class=\"keyword\">id</span>)object</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s objc cannot be nil\"</span>,__FUNCTION__);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> cy_addObject:object];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cy_insertObject:(<span class=\"keyword\">id</span>)anObject atIndex:(<span class=\"built_in\">NSUInteger</span>)index</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (anObject == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s objc cannot be nil\"</span>,__FUNCTION__);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (index &gt; <span class=\"keyword\">self</span>.count) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s index %lu cannot bigger than self.count\"</span>,__FUNCTION__, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)index);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> cy_insertObject:anObject atIndex:index];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cy_removeObjectAtIndex:(<span class=\"built_in\">NSUInteger</span>)index</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= <span class=\"keyword\">self</span>.count) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s index %lu cannot bigger than self.count\"</span>,__FUNCTION__, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)index);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> cy_removeObjectAtIndex:index];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>接下来是一个例子代码，我们来验证下替换的成果。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> nilobjc = <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NSMutableArray</span> *testArray = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">[testArray addObject:<span class=\"string\">@\"\"</span>];</div><div class=\"line\"><span class=\"keyword\">id</span> obj = testArray[<span class=\"number\">19</span>];</div><div class=\"line\"></div><div class=\"line\">[testArray insertObject:nilobjc atIndex:<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\">[testArray removeObject:nilobjc];</div><div class=\"line\"></div><div class=\"line\">[testArray addObject:nilobjc];</div><div class=\"line\"></div><div class=\"line\">[testArray removeObjectAtIndex:<span class=\"number\">0</span>];</div></pre></td></tr></table></figure>\n<p>打印结果为</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-11</span> <span class=\"number\">22</span>:<span class=\"number\">43</span>:<span class=\"number\">18.705</span> RuntimeDemo[<span class=\"number\">38559</span>:<span class=\"number\">4195212</span>] index is bigger than count</div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-11</span> <span class=\"number\">22</span>:<span class=\"number\">43</span>:<span class=\"number\">18.705</span> RuntimeDemo[<span class=\"number\">38559</span>:<span class=\"number\">4195212</span>] -[<span class=\"built_in\">NSMutableArray</span>(MethodSwizzling) cy_insertObject:atIndex:] objc cannot be <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-11</span> <span class=\"number\">22</span>:<span class=\"number\">43</span>:<span class=\"number\">18.706</span> RuntimeDemo[<span class=\"number\">38559</span>:<span class=\"number\">4195212</span>] -[<span class=\"built_in\">NSMutableArray</span>(MethodSwizzling) cy_removeObject:] called,object is <span class=\"literal\">nil</span> ,so <span class=\"keyword\">return</span></div><div class=\"line\"><span class=\"number\">2017</span><span class=\"number\">-06</span><span class=\"number\">-11</span> <span class=\"number\">22</span>:<span class=\"number\">43</span>:<span class=\"number\">18.706</span> RuntimeDemo[<span class=\"number\">38559</span>:<span class=\"number\">4195212</span>] -[<span class=\"built_in\">NSMutableArray</span>(MethodSwizzling) cy_addObject:] objc cannot be <span class=\"literal\">nil</span></div></pre></td></tr></table></figure>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>runtime的学习是持续进行了，我这篇blog也仅仅是抛砖引玉，如何灵活的在项目中使用Runtime才是我们真正应该做的。切记不可为了使用某项技术，硬刚。这是不好滴。😆</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>1.<a href=\"http://lastdays.cn/2016/02/20/runtime1/\">Runtime 学习笔记(一)</a></p>\n<p>2.<a href=\"http://lastdays.cn/2016/02/20/runtime2/\">Runtime 学习笔记(二)</a></p>\n<p>3.<a href=\"http://justinyan.me/post/1624\">理解 Objective-C Runtime</a></p>\n<p>4.<a href=\"https://github.com/CoderJackyHuang\">https://github.com/CoderJackyHuang</a></p>"},{"title":"关于如何将私人Pod库发布到pod库的心得","date":"2017-02-19T07:04:38.000Z","_content":"## 引子\n周末闲来无事，琢磨了下如何将git上的代码做成一个开源的库，然后供自己和别人在开发中使用。捣鼓了一个多小时终于是成功了,大家可以在命令行下输入，pod search CYKit ，就会搜索到我这个小demo了。\n\n<!--more-->\n\n![](http://ock9zbzms.bkt.clouddn.com/CYKitPod@2x.png)\n\n## 准备工作\n* github准备开源的工程地址，并且有Release的Tag。如我自己的开源地址为：https://github.com/TripleFireMan/CYKit.git,Tag为0.1.\n* 注册一个pod trunk 的账号，用来将自己的库push到cocoaPod的master spec中，这样才会能被别人搜索到。注册方式为 命令行输入 pod trunk register ab36474XXX@126.com 'your user name' --description='device name or something other'\n\n## 正文\n\n* <font color=red>在工程目录下创建Podspec文件，cd 到要做成开源库的项目根路径下，执行 pod spec create CYKit。该命令执行之后就会在工程目录下生成一个CYKit.podspec的文件</font>。\n* 编辑Podspec文件，刚生成的Podspec文件很多信息都是没有的，需要手动去编辑，打开该文件会看到如下信息\n\n```objc\nPod::Spec.new do |s|\n\n  # ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  These will help people to find your library, and whilst it\n  #  can feel like a chore to fill in it's definitely to your advantage. The\n  #  summary should be tweet-length, and the description more in depth.\n  #\n\n  s.name         = \"CYKit\"\n  s.version      = \"0.1\"\n  s.summary      = \"something useful for daily development\"\n  s.homepage     = \"https://github.com/TripleFireMan\"\n  # s.screenshots  = \"www.example.com/screenshots_1.gif\", \"www.example.com/screenshots_2.gif\"\n\n\n  s.license      = \"MIT\"\n  s.author       = { \"chengyan\" => \"ab364743113@126.com\" }\n  s.platform     = :ios, \"7.0\"\n  s.source       = { :git => \"https://github.com/TripleFireMan/CYKit.git\", :tag => \"0.1\" }\n  \n  s.source_files  = \"CYKit\", \"CYKit/**/*.{h,m}\"\n  #s.resources     = \"Resources/*.png\"\n  s.framework     = \"UIKit\"\n  s.requires_arc  = true\n\n  # s.xcconfig = { \"HEADER_SEARCH_PATHS\" => \"$(SDKROOT)/usr/include/libxml2\" }\n  # s.dependency \"JSONKit\", \"~> 1.4\"\n\nend\n```\n\n\n\n* <font color=red>**校验当前的podspec文件是否可用，在pod文件的目录下，执行此命令 pod spec lint CYKit.podspec**</font>,如果通过校验，则会有下面的提示\n```\nlocalhost:CYKit chengyan$ pod spec lint CYKit.podspec\n\n -> CYKit (0.1)\n\nAnalyzed 1 podspec.\n\nCYKit.podspec passed validation\n```\n反之就会有错误提示。有错误就解决错误好了\n\n\n* <font color=red>发布到cocoapod仓库，还是在podspec所在的文件下，执行pod trunk push 命令。</font>\n  发布成功的话就有下面的提示了\n```objc\nlocalhost:CYKit chengyan$ pod trunk push\n\n[!] Found podspec `CYKit.podspec`\nUpdating spec repo `master`\n\nCocoaPods 1.2.0 is available.\nTo update use: `sudo gem install cocoapods`\nUntil we reach version 1.0 the features of CocoaPods can and will change.\nWe strongly recommend that you use the latest version at all times.\n\nFor more information, see https://blog.cocoapods.org and the CHANGELOG for this version at https://github.com/CocoaPods/CocoaPods/releases/tag/1.2.0\n\nValidating podspec\n -> CYKit (0.1.5)\n\nUpdating spec repo `master`\n\nCocoaPods 1.2.0 is available.\nTo update use: `sudo gem install cocoapods`\nUntil we reach version 1.0 the features of CocoaPods can and will change.\nWe strongly recommend that you use the latest version at all times.\n\nFor more information, see https://blog.cocoapods.org and the CHANGELOG for this version at https://github.com/CocoaPods/CocoaPods/releases/tag/1.2.0\n\n  - Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/279e29a1cb259157cb329f9bbc2470a167667ee3/Specs/8/a/e/CYKit/0.1.5/CYKit.podspec.json\n  - Log messages:\n    - February 19th, 04:07: Push for `CYKit 0.1.5' initiated.\n    - February 19th, 04:07: Push for `CYKit 0.1.5' has been pushed (0.86529383 s).\n    \n```\n## 小结\n通过上述简单几步操作，我们就发布了一个开源的cocoapod版本了，以后有需要就可以往上面添加代码了，解决了重复造轮子的问题。\n\n","source":"_posts/关于如何将私人Pod库发布到pod库的心得.md","raw":"---\ntitle: 关于如何将私人Pod库发布到pod库的心得\ndate: 2017-02-19 15:04:38\ntags:\n---\n## 引子\n周末闲来无事，琢磨了下如何将git上的代码做成一个开源的库，然后供自己和别人在开发中使用。捣鼓了一个多小时终于是成功了,大家可以在命令行下输入，pod search CYKit ，就会搜索到我这个小demo了。\n\n<!--more-->\n\n![](http://ock9zbzms.bkt.clouddn.com/CYKitPod@2x.png)\n\n## 准备工作\n* github准备开源的工程地址，并且有Release的Tag。如我自己的开源地址为：https://github.com/TripleFireMan/CYKit.git,Tag为0.1.\n* 注册一个pod trunk 的账号，用来将自己的库push到cocoaPod的master spec中，这样才会能被别人搜索到。注册方式为 命令行输入 pod trunk register ab36474XXX@126.com 'your user name' --description='device name or something other'\n\n## 正文\n\n* <font color=red>在工程目录下创建Podspec文件，cd 到要做成开源库的项目根路径下，执行 pod spec create CYKit。该命令执行之后就会在工程目录下生成一个CYKit.podspec的文件</font>。\n* 编辑Podspec文件，刚生成的Podspec文件很多信息都是没有的，需要手动去编辑，打开该文件会看到如下信息\n\n```objc\nPod::Spec.new do |s|\n\n  # ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  These will help people to find your library, and whilst it\n  #  can feel like a chore to fill in it's definitely to your advantage. The\n  #  summary should be tweet-length, and the description more in depth.\n  #\n\n  s.name         = \"CYKit\"\n  s.version      = \"0.1\"\n  s.summary      = \"something useful for daily development\"\n  s.homepage     = \"https://github.com/TripleFireMan\"\n  # s.screenshots  = \"www.example.com/screenshots_1.gif\", \"www.example.com/screenshots_2.gif\"\n\n\n  s.license      = \"MIT\"\n  s.author       = { \"chengyan\" => \"ab364743113@126.com\" }\n  s.platform     = :ios, \"7.0\"\n  s.source       = { :git => \"https://github.com/TripleFireMan/CYKit.git\", :tag => \"0.1\" }\n  \n  s.source_files  = \"CYKit\", \"CYKit/**/*.{h,m}\"\n  #s.resources     = \"Resources/*.png\"\n  s.framework     = \"UIKit\"\n  s.requires_arc  = true\n\n  # s.xcconfig = { \"HEADER_SEARCH_PATHS\" => \"$(SDKROOT)/usr/include/libxml2\" }\n  # s.dependency \"JSONKit\", \"~> 1.4\"\n\nend\n```\n\n\n\n* <font color=red>**校验当前的podspec文件是否可用，在pod文件的目录下，执行此命令 pod spec lint CYKit.podspec**</font>,如果通过校验，则会有下面的提示\n```\nlocalhost:CYKit chengyan$ pod spec lint CYKit.podspec\n\n -> CYKit (0.1)\n\nAnalyzed 1 podspec.\n\nCYKit.podspec passed validation\n```\n反之就会有错误提示。有错误就解决错误好了\n\n\n* <font color=red>发布到cocoapod仓库，还是在podspec所在的文件下，执行pod trunk push 命令。</font>\n  发布成功的话就有下面的提示了\n```objc\nlocalhost:CYKit chengyan$ pod trunk push\n\n[!] Found podspec `CYKit.podspec`\nUpdating spec repo `master`\n\nCocoaPods 1.2.0 is available.\nTo update use: `sudo gem install cocoapods`\nUntil we reach version 1.0 the features of CocoaPods can and will change.\nWe strongly recommend that you use the latest version at all times.\n\nFor more information, see https://blog.cocoapods.org and the CHANGELOG for this version at https://github.com/CocoaPods/CocoaPods/releases/tag/1.2.0\n\nValidating podspec\n -> CYKit (0.1.5)\n\nUpdating spec repo `master`\n\nCocoaPods 1.2.0 is available.\nTo update use: `sudo gem install cocoapods`\nUntil we reach version 1.0 the features of CocoaPods can and will change.\nWe strongly recommend that you use the latest version at all times.\n\nFor more information, see https://blog.cocoapods.org and the CHANGELOG for this version at https://github.com/CocoaPods/CocoaPods/releases/tag/1.2.0\n\n  - Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/279e29a1cb259157cb329f9bbc2470a167667ee3/Specs/8/a/e/CYKit/0.1.5/CYKit.podspec.json\n  - Log messages:\n    - February 19th, 04:07: Push for `CYKit 0.1.5' initiated.\n    - February 19th, 04:07: Push for `CYKit 0.1.5' has been pushed (0.86529383 s).\n    \n```\n## 小结\n通过上述简单几步操作，我们就发布了一个开源的cocoapod版本了，以后有需要就可以往上面添加代码了，解决了重复造轮子的问题。\n\n","slug":"关于如何将私人Pod库发布到pod库的心得","published":1,"updated":"2017-06-08T16:13:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yxh000ohx5logw872o6","content":"<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>周末闲来无事，琢磨了下如何将git上的代码做成一个开源的库，然后供自己和别人在开发中使用。捣鼓了一个多小时终于是成功了,大家可以在命令行下输入，pod search CYKit ，就会搜索到我这个小demo了。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://ock9zbzms.bkt.clouddn.com/CYKitPod@2x.png\" alt=\"\"></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>github准备开源的工程地址，并且有Release的Tag。如我自己的开源地址为：<a href=\"https://github.com/TripleFireMan/CYKit.git,Tag为0.1\" target=\"_blank\" rel=\"external\">https://github.com/TripleFireMan/CYKit.git,Tag为0.1</a>.</li>\n<li>注册一个pod trunk 的账号，用来将自己的库push到cocoaPod的master spec中，这样才会能被别人搜索到。注册方式为 命令行输入 pod trunk register ab36474XXX@126.com ‘your user name’ –description=’device name or something other’</li>\n</ul>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><ul>\n<li><font color=\"red\">在工程目录下创建Podspec文件，cd 到要做成开源库的项目根路径下，执行 pod spec create CYKit。该命令执行之后就会在工程目录下生成一个CYKit.podspec的文件</font>。</li>\n<li>编辑Podspec文件，刚生成的Podspec文件很多信息都是没有的，需要手动去编辑，打开该文件会看到如下信息</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pod::Spec.new <span class=\"keyword\">do</span> |s|</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\"># ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></div><div class=\"line\">  <span class=\"meta\">#</span></div><div class=\"line\">  <span class=\"meta\">#  These will help people to find your library, and whilst it</span></div><div class=\"line\">  <span class=\"meta\">#  can feel like a chore to fill in it's definitely to your advantage. The</span></div><div class=\"line\">  <span class=\"meta\">#  summary should be tweet-length, and the description more in depth.</span></div><div class=\"line\">  <span class=\"meta\">#</span></div><div class=\"line\"></div><div class=\"line\">  s.name         = <span class=\"string\">\"CYKit\"</span></div><div class=\"line\">  s.version      = <span class=\"string\">\"0.1\"</span></div><div class=\"line\">  s.summary      = <span class=\"string\">\"something useful for daily development\"</span></div><div class=\"line\">  s.homepage     = <span class=\"string\">\"https://github.com/TripleFireMan\"</span></div><div class=\"line\">  <span class=\"meta\"># s.screenshots  = <span class=\"meta-string\">\"www.example.com/screenshots_1.gif\"</span>, <span class=\"meta-string\">\"www.example.com/screenshots_2.gif\"</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  s.license      = <span class=\"string\">\"MIT\"</span></div><div class=\"line\">  s.author       = &#123; <span class=\"string\">\"chengyan\"</span> =&gt; <span class=\"string\">\"ab364743113@126.com\"</span> &#125;</div><div class=\"line\">  s.platform     = :ios, <span class=\"string\">\"7.0\"</span></div><div class=\"line\">  s.source       = &#123; :git =&gt; <span class=\"string\">\"https://github.com/TripleFireMan/CYKit.git\"</span>, :tag =&gt; <span class=\"string\">\"0.1\"</span> &#125;</div><div class=\"line\">  </div><div class=\"line\">  s.source_files  = <span class=\"string\">\"CYKit\"</span>, <span class=\"string\">\"CYKit/**/*.&#123;h,m&#125;\"</span></div><div class=\"line\">  <span class=\"meta\">#s.resources     = <span class=\"meta-string\">\"Resources/*.png\"</span></span></div><div class=\"line\">  s.framework     = <span class=\"string\">\"UIKit\"</span></div><div class=\"line\">  s.requires_arc  = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\"># s.xcconfig = &#123; <span class=\"meta-string\">\"HEADER_SEARCH_PATHS\"</span> =&gt; <span class=\"meta-string\">\"$(SDKROOT)/usr/include/libxml2\"</span> &#125;</span></div><div class=\"line\">  <span class=\"meta\"># s.dependency <span class=\"meta-string\">\"JSONKit\"</span>, <span class=\"meta-string\">\"~&gt; 1.4\"</span></span></div><div class=\"line\"></div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<ul>\n<li><font color=\"red\"><strong>校验当前的podspec文件是否可用，在pod文件的目录下，执行此命令 pod spec lint CYKit.podspec</strong></font>,如果通过校验，则会有下面的提示<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">localhost:CYKit chengyan$ pod spec lint CYKit.podspec</div><div class=\"line\"></div><div class=\"line\"> -&gt; CYKit (0.1)</div><div class=\"line\"></div><div class=\"line\">Analyzed 1 podspec.</div><div class=\"line\"></div><div class=\"line\">CYKit.podspec passed validation</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>反之就会有错误提示。有错误就解决错误好了</p>\n<ul>\n<li><font color=\"red\">发布到cocoapod仓库，还是在podspec所在的文件下，执行pod trunk push 命令。</font><br>发布成功的话就有下面的提示了<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">localhost:CYKit chengyan$ pod trunk push</div><div class=\"line\"></div><div class=\"line\">[!] Found podspec `CYKit.podspec`</div><div class=\"line\">Updating spec repo `master`</div><div class=\"line\"></div><div class=\"line\">CocoaPods 1.2.0 is available.</div><div class=\"line\">To update use: `sudo gem install cocoapods`</div><div class=\"line\">Until we reach version 1.0 the features of CocoaPods can and will change.</div><div class=\"line\">We strongly recommend that you use the latest version at all times.</div><div class=\"line\"></div><div class=\"line\">For more information, see https://blog.cocoapods.org and the CHANGELOG for this version at https://github.com/CocoaPods/CocoaPods/releases/tag/1.2.0</div><div class=\"line\"></div><div class=\"line\">Validating podspec</div><div class=\"line\"> -&gt; CYKit (0.1.5)</div><div class=\"line\"></div><div class=\"line\">Updating spec repo `master`</div><div class=\"line\"></div><div class=\"line\">CocoaPods 1.2.0 is available.</div><div class=\"line\">To update use: `sudo gem install cocoapods`</div><div class=\"line\">Until we reach version 1.0 the features of CocoaPods can and will change.</div><div class=\"line\">We strongly recommend that you use the latest version at all times.</div><div class=\"line\"></div><div class=\"line\">For more information, see https://blog.cocoapods.org and the CHANGELOG for this version at https://github.com/CocoaPods/CocoaPods/releases/tag/1.2.0</div><div class=\"line\"></div><div class=\"line\">  - Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/279e29a1cb259157cb329f9bbc2470a167667ee3/Specs/8/a/e/CYKit/0.1.5/CYKit.podspec.json</div><div class=\"line\">  - Log messages:</div><div class=\"line\">    - February 19th, 04:07: Push for `CYKit 0.1.5' initiated.</div><div class=\"line\">    - February 19th, 04:07: Push for `CYKit 0.1.5' has been pushed (0.86529383 s).</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>通过上述简单几步操作，我们就发布了一个开源的cocoapod版本了，以后有需要就可以往上面添加代码了，解决了重复造轮子的问题。</p>\n","excerpt":"<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>周末闲来无事，琢磨了下如何将git上的代码做成一个开源的库，然后供自己和别人在开发中使用。捣鼓了一个多小时终于是成功了,大家可以在命令行下输入，pod search CYKit ，就会搜索到我这个小demo了。</p>","more":"<p><img src=\"http://ock9zbzms.bkt.clouddn.com/CYKitPod@2x.png\" alt=\"\"></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>github准备开源的工程地址，并且有Release的Tag。如我自己的开源地址为：<a href=\"https://github.com/TripleFireMan/CYKit.git,Tag为0.1\">https://github.com/TripleFireMan/CYKit.git,Tag为0.1</a>.</li>\n<li>注册一个pod trunk 的账号，用来将自己的库push到cocoaPod的master spec中，这样才会能被别人搜索到。注册方式为 命令行输入 pod trunk register ab36474XXX@126.com ‘your user name’ –description=’device name or something other’</li>\n</ul>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><ul>\n<li><font color=\"red\">在工程目录下创建Podspec文件，cd 到要做成开源库的项目根路径下，执行 pod spec create CYKit。该命令执行之后就会在工程目录下生成一个CYKit.podspec的文件</font>。</li>\n<li>编辑Podspec文件，刚生成的Podspec文件很多信息都是没有的，需要手动去编辑，打开该文件会看到如下信息</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pod::Spec.new <span class=\"keyword\">do</span> |s|</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\"># ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></div><div class=\"line\">  <span class=\"meta\">#</span></div><div class=\"line\">  <span class=\"meta\">#  These will help people to find your library, and whilst it</span></div><div class=\"line\">  <span class=\"meta\">#  can feel like a chore to fill in it's definitely to your advantage. The</span></div><div class=\"line\">  <span class=\"meta\">#  summary should be tweet-length, and the description more in depth.</span></div><div class=\"line\">  <span class=\"meta\">#</span></div><div class=\"line\"></div><div class=\"line\">  s.name         = <span class=\"string\">\"CYKit\"</span></div><div class=\"line\">  s.version      = <span class=\"string\">\"0.1\"</span></div><div class=\"line\">  s.summary      = <span class=\"string\">\"something useful for daily development\"</span></div><div class=\"line\">  s.homepage     = <span class=\"string\">\"https://github.com/TripleFireMan\"</span></div><div class=\"line\">  <span class=\"meta\"># s.screenshots  = <span class=\"meta-string\">\"www.example.com/screenshots_1.gif\"</span>, <span class=\"meta-string\">\"www.example.com/screenshots_2.gif\"</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  s.license      = <span class=\"string\">\"MIT\"</span></div><div class=\"line\">  s.author       = &#123; <span class=\"string\">\"chengyan\"</span> =&gt; <span class=\"string\">\"ab364743113@126.com\"</span> &#125;</div><div class=\"line\">  s.platform     = :ios, <span class=\"string\">\"7.0\"</span></div><div class=\"line\">  s.source       = &#123; :git =&gt; <span class=\"string\">\"https://github.com/TripleFireMan/CYKit.git\"</span>, :tag =&gt; <span class=\"string\">\"0.1\"</span> &#125;</div><div class=\"line\">  </div><div class=\"line\">  s.source_files  = <span class=\"string\">\"CYKit\"</span>, <span class=\"string\">\"CYKit/**/*.&#123;h,m&#125;\"</span></div><div class=\"line\">  <span class=\"meta\">#s.resources     = <span class=\"meta-string\">\"Resources/*.png\"</span></span></div><div class=\"line\">  s.framework     = <span class=\"string\">\"UIKit\"</span></div><div class=\"line\">  s.requires_arc  = <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\"># s.xcconfig = &#123; <span class=\"meta-string\">\"HEADER_SEARCH_PATHS\"</span> =&gt; <span class=\"meta-string\">\"$(SDKROOT)/usr/include/libxml2\"</span> &#125;</span></div><div class=\"line\">  <span class=\"meta\"># s.dependency <span class=\"meta-string\">\"JSONKit\"</span>, <span class=\"meta-string\">\"~&gt; 1.4\"</span></span></div><div class=\"line\"></div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<ul>\n<li><font color=\"red\"><strong>校验当前的podspec文件是否可用，在pod文件的目录下，执行此命令 pod spec lint CYKit.podspec</strong></font>,如果通过校验，则会有下面的提示<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">localhost:CYKit chengyan$ pod spec lint CYKit.podspec</div><div class=\"line\"></div><div class=\"line\"> -&gt; CYKit (0.1)</div><div class=\"line\"></div><div class=\"line\">Analyzed 1 podspec.</div><div class=\"line\"></div><div class=\"line\">CYKit.podspec passed validation</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>反之就会有错误提示。有错误就解决错误好了</p>\n<ul>\n<li><font color=\"red\">发布到cocoapod仓库，还是在podspec所在的文件下，执行pod trunk push 命令。</font><br>发布成功的话就有下面的提示了<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">localhost:CYKit chengyan$ pod trunk push</div><div class=\"line\"></div><div class=\"line\">[!] Found podspec `CYKit.podspec`</div><div class=\"line\">Updating spec repo `master`</div><div class=\"line\"></div><div class=\"line\">CocoaPods 1.2.0 is available.</div><div class=\"line\">To update use: `sudo gem install cocoapods`</div><div class=\"line\">Until we reach version 1.0 the features of CocoaPods can and will change.</div><div class=\"line\">We strongly recommend that you use the latest version at all times.</div><div class=\"line\"></div><div class=\"line\">For more information, see https://blog.cocoapods.org and the CHANGELOG for this version at https://github.com/CocoaPods/CocoaPods/releases/tag/1.2.0</div><div class=\"line\"></div><div class=\"line\">Validating podspec</div><div class=\"line\"> -&gt; CYKit (0.1.5)</div><div class=\"line\"></div><div class=\"line\">Updating spec repo `master`</div><div class=\"line\"></div><div class=\"line\">CocoaPods 1.2.0 is available.</div><div class=\"line\">To update use: `sudo gem install cocoapods`</div><div class=\"line\">Until we reach version 1.0 the features of CocoaPods can and will change.</div><div class=\"line\">We strongly recommend that you use the latest version at all times.</div><div class=\"line\"></div><div class=\"line\">For more information, see https://blog.cocoapods.org and the CHANGELOG for this version at https://github.com/CocoaPods/CocoaPods/releases/tag/1.2.0</div><div class=\"line\"></div><div class=\"line\">  - Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/279e29a1cb259157cb329f9bbc2470a167667ee3/Specs/8/a/e/CYKit/0.1.5/CYKit.podspec.json</div><div class=\"line\">  - Log messages:</div><div class=\"line\">    - February 19th, 04:07: Push for `CYKit 0.1.5' initiated.</div><div class=\"line\">    - February 19th, 04:07: Push for `CYKit 0.1.5' has been pushed (0.86529383 s).</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>通过上述简单几步操作，我们就发布了一个开源的cocoapod版本了，以后有需要就可以往上面添加代码了，解决了重复造轮子的问题。</p>"},{"title":"如何使用subline-text2-作为markdown的编辑工具","date":"2016-12-29T03:37:48.000Z","_content":"\n>今年8月份的时候，在[二代](http://kaisayoung.github.io)的带领下，接触了Hexo+Github搭建\n>个人的博客空间的新姿势，在此基础上。我个人选择了sublinetext2 作为markdown的编辑工具，实测还可以，采用subline能够做到\n>\n+ *在线预览*  (通过安装[OmniMarkupPreviewer](https://github.com/timonwong/OmniMarkupPreviewer)实现)\n+ *语法高亮*  (通过安装[MarkdownEditing](https://github.com/SublimeText-Markdown/MarkdownEditing)实现)\n<!--more-->\n单纯的subline虽然也可以打开markdown文件，也可以编辑，但是效果和体验总是不太好，我今天介绍的这俩个插件能够大大提高书写效率和提升书写体验。先附俩张图体验一下最终的效果。\n\n![在线预览](http://ock9zbzms.bkt.clouddn.com/1D8AC7FE-531C-4E47-B744-F1DBDBA8C307.png)\n![图片高亮](http://ock9zbzms.bkt.clouddn.com/subline_online_view1B9EB750-1049-409B-BEBA-385DA4594819.png)\n基本可以实现，在写的过程中就可以看到最终显示在网页上是什么效果。不用等写完之后再去调整展示的界面，还是挺方便的。\n\n这里有几个点需要注意一下。\n\n1. 将OmniMarkupPreviewer，MarkdownEditing从github上clone到subline的packages下需要重启下subline。\n2. 如果是代码的话，高亮需要使\\```将代码包起来  ，形如\\```objc 这里添写需要写的代码\\```\n3. 在线预览功能，可以通过在subline右键点击preview markdown on browser，也可以通过快捷键command + Alt + O 在线预览。\n---\n好久没有写东西了，写了这么点东西居然写了改，改了写，以后还是要常写常更，争取回到每周一更的正确轨道上来。\n","source":"_posts/如何使用subline-text2-作为markdown的编辑工具.md","raw":"---\ntitle: 如何使用subline-text2-作为markdown的编辑工具\ndate: 2016-12-29 11:37:48\ntags: 点点滴滴\n---\n\n>今年8月份的时候，在[二代](http://kaisayoung.github.io)的带领下，接触了Hexo+Github搭建\n>个人的博客空间的新姿势，在此基础上。我个人选择了sublinetext2 作为markdown的编辑工具，实测还可以，采用subline能够做到\n>\n+ *在线预览*  (通过安装[OmniMarkupPreviewer](https://github.com/timonwong/OmniMarkupPreviewer)实现)\n+ *语法高亮*  (通过安装[MarkdownEditing](https://github.com/SublimeText-Markdown/MarkdownEditing)实现)\n<!--more-->\n单纯的subline虽然也可以打开markdown文件，也可以编辑，但是效果和体验总是不太好，我今天介绍的这俩个插件能够大大提高书写效率和提升书写体验。先附俩张图体验一下最终的效果。\n\n![在线预览](http://ock9zbzms.bkt.clouddn.com/1D8AC7FE-531C-4E47-B744-F1DBDBA8C307.png)\n![图片高亮](http://ock9zbzms.bkt.clouddn.com/subline_online_view1B9EB750-1049-409B-BEBA-385DA4594819.png)\n基本可以实现，在写的过程中就可以看到最终显示在网页上是什么效果。不用等写完之后再去调整展示的界面，还是挺方便的。\n\n这里有几个点需要注意一下。\n\n1. 将OmniMarkupPreviewer，MarkdownEditing从github上clone到subline的packages下需要重启下subline。\n2. 如果是代码的话，高亮需要使\\```将代码包起来  ，形如\\```objc 这里添写需要写的代码\\```\n3. 在线预览功能，可以通过在subline右键点击preview markdown on browser，也可以通过快捷键command + Alt + O 在线预览。\n---\n好久没有写东西了，写了这么点东西居然写了改，改了写，以后还是要常写常更，争取回到每周一更的正确轨道上来。\n","slug":"如何使用subline-text2-作为markdown的编辑工具","published":1,"updated":"2017-01-20T15:15:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yxj000rhx5lyyq2n7zx","content":"<blockquote>\n<p>今年8月份的时候，在<a href=\"http://kaisayoung.github.io\" target=\"_blank\" rel=\"external\">二代</a>的带领下，接触了Hexo+Github搭建<br>个人的博客空间的新姿势，在此基础上。我个人选择了sublinetext2 作为markdown的编辑工具，实测还可以，采用subline能够做到</p>\n<ul>\n<li><em>在线预览</em>  (通过安装<a href=\"https://github.com/timonwong/OmniMarkupPreviewer\" target=\"_blank\" rel=\"external\">OmniMarkupPreviewer</a>实现)</li>\n<li><em>语法高亮</em>  (通过安装<a href=\"https://github.com/SublimeText-Markdown/MarkdownEditing\" target=\"_blank\" rel=\"external\">MarkdownEditing</a>实现)<a id=\"more\"></a>\n单纯的subline虽然也可以打开markdown文件，也可以编辑，但是效果和体验总是不太好，我今天介绍的这俩个插件能够大大提高书写效率和提升书写体验。先附俩张图体验一下最终的效果。</li>\n</ul>\n</blockquote>\n<p><img src=\"http://ock9zbzms.bkt.clouddn.com/1D8AC7FE-531C-4E47-B744-F1DBDBA8C307.png\" alt=\"在线预览\"><br><img src=\"http://ock9zbzms.bkt.clouddn.com/subline_online_view1B9EB750-1049-409B-BEBA-385DA4594819.png\" alt=\"图片高亮\"><br>基本可以实现，在写的过程中就可以看到最终显示在网页上是什么效果。不用等写完之后再去调整展示的界面，还是挺方便的。</p>\n<p>这里有几个点需要注意一下。</p>\n<ol>\n<li>将OmniMarkupPreviewer，MarkdownEditing从github上clone到subline的packages下需要重启下subline。</li>\n<li>如果是代码的话，高亮需要使```将代码包起来  ，形如```objc 这里添写需要写的代码```</li>\n<li>在线预览功能，可以通过在subline右键点击preview markdown on browser，也可以通过快捷键command + Alt + O 在线预览。</li>\n</ol>\n<hr>\n<p>好久没有写东西了，写了这么点东西居然写了改，改了写，以后还是要常写常更，争取回到每周一更的正确轨道上来。</p>\n","excerpt":"<blockquote>\n<p>今年8月份的时候，在<a href=\"http://kaisayoung.github.io\">二代</a>的带领下，接触了Hexo+Github搭建<br>个人的博客空间的新姿势，在此基础上。我个人选择了sublinetext2 作为markdown的编辑工具，实测还可以，采用subline能够做到</p>\n<ul>\n<li><em>在线预览</em>  (通过安装<a href=\"https://github.com/timonwong/OmniMarkupPreviewer\">OmniMarkupPreviewer</a>实现)</li>\n<li><em>语法高亮</em>  (通过安装<a href=\"https://github.com/SublimeText-Markdown/MarkdownEditing\">MarkdownEditing</a>实现)</li></ul></blockquote>","more":"单纯的subline虽然也可以打开markdown文件，也可以编辑，但是效果和体验总是不太好，我今天介绍的这俩个插件能够大大提高书写效率和提升书写体验。先附俩张图体验一下最终的效果。\n\n\n<p><img src=\"http://ock9zbzms.bkt.clouddn.com/1D8AC7FE-531C-4E47-B744-F1DBDBA8C307.png\" alt=\"在线预览\"><br><img src=\"http://ock9zbzms.bkt.clouddn.com/subline_online_view1B9EB750-1049-409B-BEBA-385DA4594819.png\" alt=\"图片高亮\"><br>基本可以实现，在写的过程中就可以看到最终显示在网页上是什么效果。不用等写完之后再去调整展示的界面，还是挺方便的。</p>\n<p>这里有几个点需要注意一下。</p>\n<ol>\n<li>将OmniMarkupPreviewer，MarkdownEditing从github上clone到subline的packages下需要重启下subline。</li>\n<li>如果是代码的话，高亮需要使```将代码包起来  ，形如```objc 这里添写需要写的代码```</li>\n<li>在线预览功能，可以通过在subline右键点击preview markdown on browser，也可以通过快捷键command + Alt + O 在线预览。</li>\n</ol>\n<hr>\n<p>好久没有写东西了，写了这么点东西居然写了改，改了写，以后还是要常写常更，争取回到每周一更的正确轨道上来。</p>"},{"title":"如何在iOS9系统中使用Universal Link","date":"2017-06-01T14:48:11.000Z","_content":"\n### 概述\n\n​\t在ios9系统中，可以通过类似打开网页的方式，通过http协议打开app。通过一个唯一的网址，可以指到app内部的一个特定的view。而不用再使用scheme。设想一下，如果twitter使用了Universal Link，如果你点击了一个twitter的链接。你的设备直接打开twitter app内相应的页面。而不是打开一个普通的网页，然后再通过这个网页打开twitter，这种体验将是非常平滑，且对用户来讲，也节省了很多不必要的操作。\n\n<!--more-->\n\n### 功能\n\n​\t使用Universal Link 能让你的App做到，通过点击一个网址，打开你的app，并跳转到对应的页面。\n\n### 准备工作\n\n​\t实现Universal link 并不难，但是你必须遵从一些条件。下面是需要准备的清单。\n\n| 序号   | 条件                | e.g.                       |\n| ---- | ----------------- | -------------------------- |\n| 1    | 注册域名              | www.domian.com             |\n| 2    | 可以SSL访问你的域名       | 支持SSL方式进行文件访问              |\n| 3    | 能够上传一个Json文件到你的域名 | apple-app-site-association |\n| 4    | 系统版本              | ios9+                      |\n| 5    | 开发环境              | Xcode7+                    |\n\n​\t  如果你已经具备了上面所有的先决条件，那么接下来只需要3步就可以在IOS9上的设备实现Universal link。\n\n### 具体步骤\n\n1. **添加域名到Capabilities**\n\n   1. 首先需要在xcode的capability下面添加域名，且必须得是applinks:的前缀，如果有二级域名，也一并加入进去，诸如(www.domain.com,news.domain.com,etc)![img](如何在iOS9系统中使用Universal-Link/apple_capabilities.png)\n\n      这将会使你的app访问一个特殊的json文件**\"apple-app-site-association\"**,当你首次运行app的时候，它就会从https://domain.com/apple-app-site-association 下载这个json文件。接下来，看步骤2来学习下怎么构造这个文件。\n\n      ***此外，还需要在网站上配置app的授权，允许universal link。编辑Associate Domain的授权为enable***\n\n2. **上传apple-app-site-assosiation 文件**\n\n   1. 这个文件必须存在，且能通过SSL的方式，通过get请求获取到。你可以打开一个文本编辑器，然后写下如下的json格式\n\n      ```objc\n      {\n        \"applinks\": {\n          \"apps\": [],\n          \"details\": [\n            {\n              \"appID\": \"TBEJCS6FFP.com.domain.App\",\n              \"paths\":[ \"*\" ]\n            }\n          ]\n        }\n      }\n      ```\n\n      在这个path 字段下，你可以有一个列表，这个列表是app允许反射到的url地址，或者也可以是一个*号，来标示你只是想打开一个app，而不管它的具体地址。\n\n   2. 另外，你可能会好奇**<u>”TBEJCS6FFP.com.domain.App“</u>** 这个值是从哪获取的，通常来讲，它就是你app的bundleid所在的teamed。你也可以点击[它](https://idmsa.apple.com/IDMSWebAuth/login?appIdKey=891bd3417a7776362562d2197f89480a8547b108fd934911bcbea0110d07f757&path=%2Faccount%2F&rv=1#accountSummary)来查询你的teamid,然后bundleid可以在app的General下查询到。![img](如何在iOS9系统中使用Universal-Link/apple_team_id.png)\n\n   3. 最后，如果你可以在你的根域名下，找到 `https://domain.com/apple-app-site-association`，那么你就可以开始下一步了。\n\n3. **在你的app内部如何处理universallink**\n\n   ​\t为了在app内部支持universal link，你需要在appdelegate中实现以下方法，[application(_:continueUserActivity:restorationHandler:)](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/index.html#//apple_ref/occ/intfm/UIApplicationDelegate/application:continueUserActivity:restorationHandler:) ，尽管这个方法可能会处理多个事件（如 Handoff，SearchApi），但是我们只关注来自universal link的事件。\n\n   ​\t如果`userActivity`给的参数是`NSUserActivityTypeBrowsingWeb`.这就意味着它是来自universal link的参数，在这个情况下，首先保证它的`webpageURL`不为空，这个属性指的就是用户打开的链接。那么它有可能为如下的格式`http://domain.com/path/to/thezoo`\n\n   ​\t为了确保你的app能够转换这些URL，你需要做以下几步\n\n   - 通过NSURLComponents类解析`webpageURL` host以及path路径。\n\n   - 确保你能够识别这个host\n\n   - 尽量把path的路径对应到你的app页面中\n\n   - 确保path对应的页面能够展示\n\n   - 展示对应的页面给用户\n\n     如果上面的步骤失败了，苹果建议你的app，优雅的打开safari对应的网址。\n\n### 其他\n\n当无法往根域名下放置apple-app-site-association文件的时候，可以考虑在二级域名下放置，同时将二级域名重定向到根域名。通过这种方式也可以实现苹果启动设备的时候获取文件。\n\n使用二级域名重定向的时候，要对apple-app-site-association文件进行加密。\n\n而且此文件的类型应该是application/pkcs7-mime\n\n### 常见错误\n\n```objc\n  ### Denying redirect 'https://www.domain.com/.well-known/apple-app-site-association' -> 'http://err.taobao.com/error1.html'\n\nMay 17 12:11:05 chengde-iPhone swcd(CoreUtils)[159] <Notice>: ### Rejecting URL 'https://www.domain.com/apple-app-site-association' for auth method 'NSURLAuthenticationMethodServerTrust': -6754/0xFFFFE59E kAuthenticationErr\n  \n```\n\n\n\nhttps://forums.developer.apple.com/thread/67882 \n\nhttp://stackoverflow.com/questions/34166173/apple-app-site-association-file-wont-download(解决方法)\n\nhttps://gist.github.com/anhar/6d50c023f442fb2437e1#sign-the-apple-app-association-file-using-openssl（服务端和客户端需要做的事）\n\nhttps://forum.ind.ie/t/ios-9-universal-links-apple-app-site-association-blues/986（一些注意事项）\n\n### 检测工具\n\nhttps://search.developer.apple.com/appsearch-validation-tool/\n\nhttps://limitless-sierra-4673.herokuapp.com/\n\n### 总结\n\n​\t最后用一张图来总结下这个流程,此外你也可以参考下[苹果的文档](https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html)，以备苹果更新\n\n​\t![img](如何在iOS9系统中使用Universal-Link/universal_links.png)\n\n","source":"_posts/如何在iOS9系统中使用Universal-Link.md","raw":"---\ntitle: 如何在iOS9系统中使用Universal Link\ndate: 2017-06-01 22:48:11\ntags:\n---\n\n### 概述\n\n​\t在ios9系统中，可以通过类似打开网页的方式，通过http协议打开app。通过一个唯一的网址，可以指到app内部的一个特定的view。而不用再使用scheme。设想一下，如果twitter使用了Universal Link，如果你点击了一个twitter的链接。你的设备直接打开twitter app内相应的页面。而不是打开一个普通的网页，然后再通过这个网页打开twitter，这种体验将是非常平滑，且对用户来讲，也节省了很多不必要的操作。\n\n<!--more-->\n\n### 功能\n\n​\t使用Universal Link 能让你的App做到，通过点击一个网址，打开你的app，并跳转到对应的页面。\n\n### 准备工作\n\n​\t实现Universal link 并不难，但是你必须遵从一些条件。下面是需要准备的清单。\n\n| 序号   | 条件                | e.g.                       |\n| ---- | ----------------- | -------------------------- |\n| 1    | 注册域名              | www.domian.com             |\n| 2    | 可以SSL访问你的域名       | 支持SSL方式进行文件访问              |\n| 3    | 能够上传一个Json文件到你的域名 | apple-app-site-association |\n| 4    | 系统版本              | ios9+                      |\n| 5    | 开发环境              | Xcode7+                    |\n\n​\t  如果你已经具备了上面所有的先决条件，那么接下来只需要3步就可以在IOS9上的设备实现Universal link。\n\n### 具体步骤\n\n1. **添加域名到Capabilities**\n\n   1. 首先需要在xcode的capability下面添加域名，且必须得是applinks:的前缀，如果有二级域名，也一并加入进去，诸如(www.domain.com,news.domain.com,etc)![img](如何在iOS9系统中使用Universal-Link/apple_capabilities.png)\n\n      这将会使你的app访问一个特殊的json文件**\"apple-app-site-association\"**,当你首次运行app的时候，它就会从https://domain.com/apple-app-site-association 下载这个json文件。接下来，看步骤2来学习下怎么构造这个文件。\n\n      ***此外，还需要在网站上配置app的授权，允许universal link。编辑Associate Domain的授权为enable***\n\n2. **上传apple-app-site-assosiation 文件**\n\n   1. 这个文件必须存在，且能通过SSL的方式，通过get请求获取到。你可以打开一个文本编辑器，然后写下如下的json格式\n\n      ```objc\n      {\n        \"applinks\": {\n          \"apps\": [],\n          \"details\": [\n            {\n              \"appID\": \"TBEJCS6FFP.com.domain.App\",\n              \"paths\":[ \"*\" ]\n            }\n          ]\n        }\n      }\n      ```\n\n      在这个path 字段下，你可以有一个列表，这个列表是app允许反射到的url地址，或者也可以是一个*号，来标示你只是想打开一个app，而不管它的具体地址。\n\n   2. 另外，你可能会好奇**<u>”TBEJCS6FFP.com.domain.App“</u>** 这个值是从哪获取的，通常来讲，它就是你app的bundleid所在的teamed。你也可以点击[它](https://idmsa.apple.com/IDMSWebAuth/login?appIdKey=891bd3417a7776362562d2197f89480a8547b108fd934911bcbea0110d07f757&path=%2Faccount%2F&rv=1#accountSummary)来查询你的teamid,然后bundleid可以在app的General下查询到。![img](如何在iOS9系统中使用Universal-Link/apple_team_id.png)\n\n   3. 最后，如果你可以在你的根域名下，找到 `https://domain.com/apple-app-site-association`，那么你就可以开始下一步了。\n\n3. **在你的app内部如何处理universallink**\n\n   ​\t为了在app内部支持universal link，你需要在appdelegate中实现以下方法，[application(_:continueUserActivity:restorationHandler:)](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/index.html#//apple_ref/occ/intfm/UIApplicationDelegate/application:continueUserActivity:restorationHandler:) ，尽管这个方法可能会处理多个事件（如 Handoff，SearchApi），但是我们只关注来自universal link的事件。\n\n   ​\t如果`userActivity`给的参数是`NSUserActivityTypeBrowsingWeb`.这就意味着它是来自universal link的参数，在这个情况下，首先保证它的`webpageURL`不为空，这个属性指的就是用户打开的链接。那么它有可能为如下的格式`http://domain.com/path/to/thezoo`\n\n   ​\t为了确保你的app能够转换这些URL，你需要做以下几步\n\n   - 通过NSURLComponents类解析`webpageURL` host以及path路径。\n\n   - 确保你能够识别这个host\n\n   - 尽量把path的路径对应到你的app页面中\n\n   - 确保path对应的页面能够展示\n\n   - 展示对应的页面给用户\n\n     如果上面的步骤失败了，苹果建议你的app，优雅的打开safari对应的网址。\n\n### 其他\n\n当无法往根域名下放置apple-app-site-association文件的时候，可以考虑在二级域名下放置，同时将二级域名重定向到根域名。通过这种方式也可以实现苹果启动设备的时候获取文件。\n\n使用二级域名重定向的时候，要对apple-app-site-association文件进行加密。\n\n而且此文件的类型应该是application/pkcs7-mime\n\n### 常见错误\n\n```objc\n  ### Denying redirect 'https://www.domain.com/.well-known/apple-app-site-association' -> 'http://err.taobao.com/error1.html'\n\nMay 17 12:11:05 chengde-iPhone swcd(CoreUtils)[159] <Notice>: ### Rejecting URL 'https://www.domain.com/apple-app-site-association' for auth method 'NSURLAuthenticationMethodServerTrust': -6754/0xFFFFE59E kAuthenticationErr\n  \n```\n\n\n\nhttps://forums.developer.apple.com/thread/67882 \n\nhttp://stackoverflow.com/questions/34166173/apple-app-site-association-file-wont-download(解决方法)\n\nhttps://gist.github.com/anhar/6d50c023f442fb2437e1#sign-the-apple-app-association-file-using-openssl（服务端和客户端需要做的事）\n\nhttps://forum.ind.ie/t/ios-9-universal-links-apple-app-site-association-blues/986（一些注意事项）\n\n### 检测工具\n\nhttps://search.developer.apple.com/appsearch-validation-tool/\n\nhttps://limitless-sierra-4673.herokuapp.com/\n\n### 总结\n\n​\t最后用一张图来总结下这个流程,此外你也可以参考下[苹果的文档](https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html)，以备苹果更新\n\n​\t![img](如何在iOS9系统中使用Universal-Link/universal_links.png)\n\n","slug":"如何在iOS9系统中使用Universal-Link","published":1,"updated":"2017-06-14T15:00:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yxx000shx5lipdk5g0n","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>​    在ios9系统中，可以通过类似打开网页的方式，通过http协议打开app。通过一个唯一的网址，可以指到app内部的一个特定的view。而不用再使用scheme。设想一下，如果twitter使用了Universal Link，如果你点击了一个twitter的链接。你的设备直接打开twitter app内相应的页面。而不是打开一个普通的网页，然后再通过这个网页打开twitter，这种体验将是非常平滑，且对用户来讲，也节省了很多不必要的操作。</p>\n<a id=\"more\"></a>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>​    使用Universal Link 能让你的App做到，通过点击一个网址，打开你的app，并跳转到对应的页面。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>​    实现Universal link 并不难，但是你必须遵从一些条件。下面是需要准备的清单。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>条件</th>\n<th>e.g.</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>注册域名</td>\n<td>www.domian.com</td>\n</tr>\n<tr>\n<td>2</td>\n<td>可以SSL访问你的域名</td>\n<td>支持SSL方式进行文件访问</td>\n</tr>\n<tr>\n<td>3</td>\n<td>能够上传一个Json文件到你的域名</td>\n<td>apple-app-site-association</td>\n</tr>\n<tr>\n<td>4</td>\n<td>系统版本</td>\n<td>ios9+</td>\n</tr>\n<tr>\n<td>5</td>\n<td>开发环境</td>\n<td>Xcode7+</td>\n</tr>\n</tbody>\n</table>\n<p>​      如果你已经具备了上面所有的先决条件，那么接下来只需要3步就可以在IOS9上的设备实现Universal link。</p>\n<h3 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h3><ol>\n<li><p><strong>添加域名到Capabilities</strong></p>\n<ol>\n<li><p>首先需要在xcode的capability下面添加域名，且必须得是applinks:的前缀，如果有二级域名，也一并加入进去，诸如(www.domain.com,news.domain.com,etc)<img src=\"/2017/06/01/如何在iOS9系统中使用Universal-Link/apple_capabilities.png\" alt=\"img\"></p>\n<p>这将会使你的app访问一个特殊的json文件<strong>“apple-app-site-association”</strong>,当你首次运行app的时候，它就会从<a href=\"https://domain.com/apple-app-site-association\" target=\"_blank\" rel=\"external\">https://domain.com/apple-app-site-association</a> 下载这个json文件。接下来，看步骤2来学习下怎么构造这个文件。</p>\n<p><strong><em>此外，还需要在网站上配置app的授权，允许universal link。编辑Associate Domain的授权为enable</em></strong></p>\n</li>\n</ol>\n</li>\n<li><p><strong>上传apple-app-site-assosiation 文件</strong></p>\n<ol>\n<li><p>这个文件必须存在，且能通过SSL的方式，通过get请求获取到。你可以打开一个文本编辑器，然后写下如下的json格式</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"applinks\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"apps\"</span>: [],</div><div class=\"line\">    <span class=\"string\">\"details\"</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"appID\"</span>: <span class=\"string\">\"TBEJCS6FFP.com.domain.App\"</span>,</div><div class=\"line\">        <span class=\"string\">\"paths\"</span>:[ <span class=\"string\">\"*\"</span> ]</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个path 字段下，你可以有一个列表，这个列表是app允许反射到的url地址，或者也可以是一个*号，来标示你只是想打开一个app，而不管它的具体地址。</p>\n</li>\n<li><p>另外，你可能会好奇<strong><u>”TBEJCS6FFP.com.domain.App“</u></strong> 这个值是从哪获取的，通常来讲，它就是你app的bundleid所在的teamed。你也可以点击<a href=\"https://idmsa.apple.com/IDMSWebAuth/login?appIdKey=891bd3417a7776362562d2197f89480a8547b108fd934911bcbea0110d07f757&amp;path=%2Faccount%2F&amp;rv=1#accountSummary\" target=\"_blank\" rel=\"external\">它</a>来查询你的teamid,然后bundleid可以在app的General下查询到。<img src=\"/2017/06/01/如何在iOS9系统中使用Universal-Link/apple_team_id.png\" alt=\"img\"></p>\n</li>\n<li><p>最后，如果你可以在你的根域名下，找到 <code>https://domain.com/apple-app-site-association</code>，那么你就可以开始下一步了。</p>\n</li>\n</ol>\n</li>\n<li><p><strong>在你的app内部如何处理universallink</strong></p>\n<p>​    为了在app内部支持universal link，你需要在appdelegate中实现以下方法，<a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/index.html#//apple_ref/occ/intfm/UIApplicationDelegate/application:continueUserActivity:restorationHandler:\" target=\"_blank\" rel=\"external\">application(_:continueUserActivity:restorationHandler:)</a> ，尽管这个方法可能会处理多个事件（如 Handoff，SearchApi），但是我们只关注来自universal link的事件。</p>\n<p>​    如果<code>userActivity</code>给的参数是<code>NSUserActivityTypeBrowsingWeb</code>.这就意味着它是来自universal link的参数，在这个情况下，首先保证它的<code>webpageURL</code>不为空，这个属性指的就是用户打开的链接。那么它有可能为如下的格式<code>http://domain.com/path/to/thezoo</code></p>\n<p>​    为了确保你的app能够转换这些URL，你需要做以下几步</p>\n<ul>\n<li><p>通过NSURLComponents类解析<code>webpageURL</code> host以及path路径。</p>\n</li>\n<li><p>确保你能够识别这个host</p>\n</li>\n<li><p>尽量把path的路径对应到你的app页面中</p>\n</li>\n<li><p>确保path对应的页面能够展示</p>\n</li>\n<li><p>展示对应的页面给用户</p>\n<p>如果上面的步骤失败了，苹果建议你的app，优雅的打开safari对应的网址。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>当无法往根域名下放置apple-app-site-association文件的时候，可以考虑在二级域名下放置，同时将二级域名重定向到根域名。通过这种方式也可以实现苹果启动设备的时候获取文件。</p>\n<p>使用二级域名重定向的时候，要对apple-app-site-association文件进行加密。</p>\n<p>而且此文件的类型应该是application/pkcs7-mime</p>\n<h3 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"meta\">### Denying redirect 'https://www.domain.com/.well-known/apple-app-site-association' -&gt; 'http://err.taobao.com/error1.html'</span></div><div class=\"line\"></div><div class=\"line\">May <span class=\"number\">17</span> <span class=\"number\">12</span>:<span class=\"number\">11</span>:<span class=\"number\">05</span> chengde-iPhone swcd(CoreUtils)[<span class=\"number\">159</span>] &lt;Notice&gt;: <span class=\"meta\">### Rejecting URL 'https://www.domain.com/apple-app-site-association' for auth method 'NSURLAuthenticationMethodServerTrust': -6754/0xFFFFE59E kAuthenticationErr</span></div></pre></td></tr></table></figure>\n<p><a href=\"https://forums.developer.apple.com/thread/67882\" target=\"_blank\" rel=\"external\">https://forums.developer.apple.com/thread/67882</a> </p>\n<p><a href=\"http://stackoverflow.com/questions/34166173/apple-app-site-association-file-wont-download(解决方法\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/34166173/apple-app-site-association-file-wont-download(解决方法</a>)</p>\n<p><a href=\"https://gist.github.com/anhar/6d50c023f442fb2437e1#sign-the-apple-app-association-file-using-openssl（服务端和客户端需要做的事）\" target=\"_blank\" rel=\"external\">https://gist.github.com/anhar/6d50c023f442fb2437e1#sign-the-apple-app-association-file-using-openssl（服务端和客户端需要做的事）</a></p>\n<p><a href=\"https://forum.ind.ie/t/ios-9-universal-links-apple-app-site-association-blues/986（一些注意事项）\" target=\"_blank\" rel=\"external\">https://forum.ind.ie/t/ios-9-universal-links-apple-app-site-association-blues/986（一些注意事项）</a></p>\n<h3 id=\"检测工具\"><a href=\"#检测工具\" class=\"headerlink\" title=\"检测工具\"></a>检测工具</h3><p><a href=\"https://search.developer.apple.com/appsearch-validation-tool/\" target=\"_blank\" rel=\"external\">https://search.developer.apple.com/appsearch-validation-tool/</a></p>\n<p><a href=\"https://limitless-sierra-4673.herokuapp.com/\" target=\"_blank\" rel=\"external\">https://limitless-sierra-4673.herokuapp.com/</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​    最后用一张图来总结下这个流程,此外你也可以参考下<a href=\"https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html\" target=\"_blank\" rel=\"external\">苹果的文档</a>，以备苹果更新</p>\n<p>​    <img src=\"/2017/06/01/如何在iOS9系统中使用Universal-Link/universal_links.png\" alt=\"img\"></p>\n","excerpt":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>​    在ios9系统中，可以通过类似打开网页的方式，通过http协议打开app。通过一个唯一的网址，可以指到app内部的一个特定的view。而不用再使用scheme。设想一下，如果twitter使用了Universal Link，如果你点击了一个twitter的链接。你的设备直接打开twitter app内相应的页面。而不是打开一个普通的网页，然后再通过这个网页打开twitter，这种体验将是非常平滑，且对用户来讲，也节省了很多不必要的操作。</p>","more":"<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>​    使用Universal Link 能让你的App做到，通过点击一个网址，打开你的app，并跳转到对应的页面。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>​    实现Universal link 并不难，但是你必须遵从一些条件。下面是需要准备的清单。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>条件</th>\n<th>e.g.</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>注册域名</td>\n<td>www.domian.com</td>\n</tr>\n<tr>\n<td>2</td>\n<td>可以SSL访问你的域名</td>\n<td>支持SSL方式进行文件访问</td>\n</tr>\n<tr>\n<td>3</td>\n<td>能够上传一个Json文件到你的域名</td>\n<td>apple-app-site-association</td>\n</tr>\n<tr>\n<td>4</td>\n<td>系统版本</td>\n<td>ios9+</td>\n</tr>\n<tr>\n<td>5</td>\n<td>开发环境</td>\n<td>Xcode7+</td>\n</tr>\n</tbody>\n</table>\n<p>​      如果你已经具备了上面所有的先决条件，那么接下来只需要3步就可以在IOS9上的设备实现Universal link。</p>\n<h3 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h3><ol>\n<li><p><strong>添加域名到Capabilities</strong></p>\n<ol>\n<li><p>首先需要在xcode的capability下面添加域名，且必须得是applinks:的前缀，如果有二级域名，也一并加入进去，诸如(www.domain.com,news.domain.com,etc)<img src=\"/2017/06/01/如何在iOS9系统中使用Universal-Link/apple_capabilities.png\" alt=\"img\"></p>\n<p>这将会使你的app访问一个特殊的json文件<strong>“apple-app-site-association”</strong>,当你首次运行app的时候，它就会从<a href=\"https://domain.com/apple-app-site-association\">https://domain.com/apple-app-site-association</a> 下载这个json文件。接下来，看步骤2来学习下怎么构造这个文件。</p>\n<p><strong><em>此外，还需要在网站上配置app的授权，允许universal link。编辑Associate Domain的授权为enable</em></strong></p>\n</li>\n</ol>\n</li>\n<li><p><strong>上传apple-app-site-assosiation 文件</strong></p>\n<ol>\n<li><p>这个文件必须存在，且能通过SSL的方式，通过get请求获取到。你可以打开一个文本编辑器，然后写下如下的json格式</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"applinks\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"apps\"</span>: [],</div><div class=\"line\">    <span class=\"string\">\"details\"</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"string\">\"appID\"</span>: <span class=\"string\">\"TBEJCS6FFP.com.domain.App\"</span>,</div><div class=\"line\">        <span class=\"string\">\"paths\"</span>:[ <span class=\"string\">\"*\"</span> ]</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个path 字段下，你可以有一个列表，这个列表是app允许反射到的url地址，或者也可以是一个*号，来标示你只是想打开一个app，而不管它的具体地址。</p>\n</li>\n<li><p>另外，你可能会好奇<strong><u>”TBEJCS6FFP.com.domain.App“</u></strong> 这个值是从哪获取的，通常来讲，它就是你app的bundleid所在的teamed。你也可以点击<a href=\"https://idmsa.apple.com/IDMSWebAuth/login?appIdKey=891bd3417a7776362562d2197f89480a8547b108fd934911bcbea0110d07f757&amp;path=%2Faccount%2F&amp;rv=1#accountSummary\">它</a>来查询你的teamid,然后bundleid可以在app的General下查询到。<img src=\"/2017/06/01/如何在iOS9系统中使用Universal-Link/apple_team_id.png\" alt=\"img\"></p>\n</li>\n<li><p>最后，如果你可以在你的根域名下，找到 <code>https://domain.com/apple-app-site-association</code>，那么你就可以开始下一步了。</p>\n</li>\n</ol>\n</li>\n<li><p><strong>在你的app内部如何处理universallink</strong></p>\n<p>​    为了在app内部支持universal link，你需要在appdelegate中实现以下方法，<a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/index.html#//apple_ref/occ/intfm/UIApplicationDelegate/application:continueUserActivity:restorationHandler:\">application(_:continueUserActivity:restorationHandler:)</a> ，尽管这个方法可能会处理多个事件（如 Handoff，SearchApi），但是我们只关注来自universal link的事件。</p>\n<p>​    如果<code>userActivity</code>给的参数是<code>NSUserActivityTypeBrowsingWeb</code>.这就意味着它是来自universal link的参数，在这个情况下，首先保证它的<code>webpageURL</code>不为空，这个属性指的就是用户打开的链接。那么它有可能为如下的格式<code>http://domain.com/path/to/thezoo</code></p>\n<p>​    为了确保你的app能够转换这些URL，你需要做以下几步</p>\n<ul>\n<li><p>通过NSURLComponents类解析<code>webpageURL</code> host以及path路径。</p>\n</li>\n<li><p>确保你能够识别这个host</p>\n</li>\n<li><p>尽量把path的路径对应到你的app页面中</p>\n</li>\n<li><p>确保path对应的页面能够展示</p>\n</li>\n<li><p>展示对应的页面给用户</p>\n<p>如果上面的步骤失败了，苹果建议你的app，优雅的打开safari对应的网址。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>当无法往根域名下放置apple-app-site-association文件的时候，可以考虑在二级域名下放置，同时将二级域名重定向到根域名。通过这种方式也可以实现苹果启动设备的时候获取文件。</p>\n<p>使用二级域名重定向的时候，要对apple-app-site-association文件进行加密。</p>\n<p>而且此文件的类型应该是application/pkcs7-mime</p>\n<h3 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"meta\">### Denying redirect 'https://www.domain.com/.well-known/apple-app-site-association' -&gt; 'http://err.taobao.com/error1.html'</span></div><div class=\"line\"></div><div class=\"line\">May <span class=\"number\">17</span> <span class=\"number\">12</span>:<span class=\"number\">11</span>:<span class=\"number\">05</span> chengde-iPhone swcd(CoreUtils)[<span class=\"number\">159</span>] &lt;Notice&gt;: <span class=\"meta\">### Rejecting URL 'https://www.domain.com/apple-app-site-association' for auth method 'NSURLAuthenticationMethodServerTrust': -6754/0xFFFFE59E kAuthenticationErr</span></div></pre></td></tr></table></figure>\n<p><a href=\"https://forums.developer.apple.com/thread/67882\">https://forums.developer.apple.com/thread/67882</a> </p>\n<p><a href=\"http://stackoverflow.com/questions/34166173/apple-app-site-association-file-wont-download(解决方法\">http://stackoverflow.com/questions/34166173/apple-app-site-association-file-wont-download(解决方法</a>)</p>\n<p><a href=\"https://gist.github.com/anhar/6d50c023f442fb2437e1#sign-the-apple-app-association-file-using-openssl（服务端和客户端需要做的事）\">https://gist.github.com/anhar/6d50c023f442fb2437e1#sign-the-apple-app-association-file-using-openssl（服务端和客户端需要做的事）</a></p>\n<p><a href=\"https://forum.ind.ie/t/ios-9-universal-links-apple-app-site-association-blues/986（一些注意事项）\">https://forum.ind.ie/t/ios-9-universal-links-apple-app-site-association-blues/986（一些注意事项）</a></p>\n<h3 id=\"检测工具\"><a href=\"#检测工具\" class=\"headerlink\" title=\"检测工具\"></a>检测工具</h3><p><a href=\"https://search.developer.apple.com/appsearch-validation-tool/\">https://search.developer.apple.com/appsearch-validation-tool/</a></p>\n<p><a href=\"https://limitless-sierra-4673.herokuapp.com/\">https://limitless-sierra-4673.herokuapp.com/</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​    最后用一张图来总结下这个流程,此外你也可以参考下<a href=\"https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html\">苹果的文档</a>，以备苹果更新</p>\n<p>​    <img src=\"/2017/06/01/如何在iOS9系统中使用Universal-Link/universal_links.png\" alt=\"img\"></p>"},{"title":"点点滴滴：HTTPS和HTTP的区别","date":"2016-08-27T13:17:04.000Z","_content":"\n从iOS9开始，苹果官方开始要求，上线的APP需要对HTTPs协议进行支持，虽然我们可以通过在项目的plist文件中设置属性的方式，暂时绕开这条限制， 但是我个人认为还是有必要了解下，苹果为什么要这么做？\n<!--more-->\n先简单科普下HTTP与HTTPS分别代表什么，以及它们的区别到底是什么？\n### [HTPPS和HTTP的概念](#1)\n\nHTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司进行，提供了身份验证与加密通讯方法，现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。\n\n超文本传输协议 (HTTP-Hypertext transfer protocol) 是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。\n\n### [HTTPS和HTTP的区别：](#1)\n\n1.HTTPS议需要到CA申请证书，一般免费证书很少，需要交费。HTTP是超文本传输协议，不需要证书\n2.端口号不同，HTTPS端口号是443，HTTP端口号是80\n3.HTTPS要进行多次的身份验证，6/7的握手以达到数据安全，性能消耗较大，也即通信之前需要先确认身份，只有身份确认才会发送信息。\n\n看完上面HTTPS和HTTP的不同之后，我们不难发现其实二者最根本的区别就是在HTTPS比HTTP多使用的SSL层，那SSL层又是什么东东呢？且看下面这张图\n![](http://ock9zbzms.bkt.clouddn.com/643.png)\n公式：HTTP+SSL/TLS+TCP = HTTPS\n\n[那么SSL、TLS又是什么鬼呢？](#2)\n简单的立即SSL就是对传输的内容通过某种算法进行加密的一种协议，那TLS又是什么呢？TLS实际上是SSL的升级版，看下下面的换算公式：\nSSL 2.0\nSSL 3.0\nTLS 1.0 (SSL 3.1)\nTLS 1.1 (SSL 3.1)\nTLS 1.2 (SSL 3.1)\n\n目前，应用最广泛的是TLS 1.0，接下来是SSL 3.0。但是，主流浏览器都已经实现了TLS 1.2的支持。\n\n那么身为移动端开发工程师，面对如此大势所趋，我们能做什么呢？\n方法一：要求公司的服务端进行升级，至少支持到苹果要求的TLS1.2\n方法二：在info.plist中进行配置，使APP能够访问不支持HTTPS的服务器。\n如果让你的APP能够访问任意的Host地址那么可以这样配置（这是最省事也是最不安全的）\n\n```mm\nNSAppTransportSecurity    \n    NSAllowsArbitraryLoads\n\n```","source":"_posts/点点滴滴：HTTPS和HTTP的区别.md","raw":"---\ntitle: 点点滴滴：HTTPS和HTTP的区别\ndate: 2016-08-27 21:17:04\ntags: 点点滴滴\n---\n\n从iOS9开始，苹果官方开始要求，上线的APP需要对HTTPs协议进行支持，虽然我们可以通过在项目的plist文件中设置属性的方式，暂时绕开这条限制， 但是我个人认为还是有必要了解下，苹果为什么要这么做？\n<!--more-->\n先简单科普下HTTP与HTTPS分别代表什么，以及它们的区别到底是什么？\n### [HTPPS和HTTP的概念](#1)\n\nHTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司进行，提供了身份验证与加密通讯方法，现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。\n\n超文本传输协议 (HTTP-Hypertext transfer protocol) 是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。\n\n### [HTTPS和HTTP的区别：](#1)\n\n1.HTTPS议需要到CA申请证书，一般免费证书很少，需要交费。HTTP是超文本传输协议，不需要证书\n2.端口号不同，HTTPS端口号是443，HTTP端口号是80\n3.HTTPS要进行多次的身份验证，6/7的握手以达到数据安全，性能消耗较大，也即通信之前需要先确认身份，只有身份确认才会发送信息。\n\n看完上面HTTPS和HTTP的不同之后，我们不难发现其实二者最根本的区别就是在HTTPS比HTTP多使用的SSL层，那SSL层又是什么东东呢？且看下面这张图\n![](http://ock9zbzms.bkt.clouddn.com/643.png)\n公式：HTTP+SSL/TLS+TCP = HTTPS\n\n[那么SSL、TLS又是什么鬼呢？](#2)\n简单的立即SSL就是对传输的内容通过某种算法进行加密的一种协议，那TLS又是什么呢？TLS实际上是SSL的升级版，看下下面的换算公式：\nSSL 2.0\nSSL 3.0\nTLS 1.0 (SSL 3.1)\nTLS 1.1 (SSL 3.1)\nTLS 1.2 (SSL 3.1)\n\n目前，应用最广泛的是TLS 1.0，接下来是SSL 3.0。但是，主流浏览器都已经实现了TLS 1.2的支持。\n\n那么身为移动端开发工程师，面对如此大势所趋，我们能做什么呢？\n方法一：要求公司的服务端进行升级，至少支持到苹果要求的TLS1.2\n方法二：在info.plist中进行配置，使APP能够访问不支持HTTPS的服务器。\n如果让你的APP能够访问任意的Host地址那么可以这样配置（这是最省事也是最不安全的）\n\n```mm\nNSAppTransportSecurity    \n    NSAllowsArbitraryLoads\n\n```","slug":"点点滴滴：HTTPS和HTTP的区别","published":1,"updated":"2017-01-20T15:15:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yy0000uhx5ln6rh8ga1","content":"<p>从iOS9开始，苹果官方开始要求，上线的APP需要对HTTPs协议进行支持，虽然我们可以通过在项目的plist文件中设置属性的方式，暂时绕开这条限制， 但是我个人认为还是有必要了解下，苹果为什么要这么做？<br><a id=\"more\"></a><br>先简单科普下HTTP与HTTPS分别代表什么，以及它们的区别到底是什么？</p>\n<h3 id=\"HTPPS和HTTP的概念\"><a href=\"#HTPPS和HTTP的概念\" class=\"headerlink\" title=\"HTPPS和HTTP的概念\"></a><a href=\"#1\">HTPPS和HTTP的概念</a></h3><p>HTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司进行，提供了身份验证与加密通讯方法，现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。</p>\n<p>超文本传输协议 (HTTP-Hypertext transfer protocol) 是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。</p>\n<h3 id=\"HTTPS和HTTP的区别：\"><a href=\"#HTTPS和HTTP的区别：\" class=\"headerlink\" title=\"HTTPS和HTTP的区别：\"></a><a href=\"#1\">HTTPS和HTTP的区别：</a></h3><p>1.HTTPS议需要到CA申请证书，一般免费证书很少，需要交费。HTTP是超文本传输协议，不需要证书<br>2.端口号不同，HTTPS端口号是443，HTTP端口号是80<br>3.HTTPS要进行多次的身份验证，6/7的握手以达到数据安全，性能消耗较大，也即通信之前需要先确认身份，只有身份确认才会发送信息。</p>\n<p>看完上面HTTPS和HTTP的不同之后，我们不难发现其实二者最根本的区别就是在HTTPS比HTTP多使用的SSL层，那SSL层又是什么东东呢？且看下面这张图<br><img src=\"http://ock9zbzms.bkt.clouddn.com/643.png\" alt=\"\"><br>公式：HTTP+SSL/TLS+TCP = HTTPS</p>\n<p><a href=\"#2\">那么SSL、TLS又是什么鬼呢？</a><br>简单的立即SSL就是对传输的内容通过某种算法进行加密的一种协议，那TLS又是什么呢？TLS实际上是SSL的升级版，看下下面的换算公式：<br>SSL 2.0<br>SSL 3.0<br>TLS 1.0 (SSL 3.1)<br>TLS 1.1 (SSL 3.1)<br>TLS 1.2 (SSL 3.1)</p>\n<p>目前，应用最广泛的是TLS 1.0，接下来是SSL 3.0。但是，主流浏览器都已经实现了TLS 1.2的支持。</p>\n<p>那么身为移动端开发工程师，面对如此大势所趋，我们能做什么呢？<br>方法一：要求公司的服务端进行升级，至少支持到苹果要求的TLS1.2<br>方法二：在info.plist中进行配置，使APP能够访问不支持HTTPS的服务器。<br>如果让你的APP能够访问任意的Host地址那么可以这样配置（这是最省事也是最不安全的）</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSAppTransportSecurity</span>    </div><div class=\"line\">    <span class=\"built_in\">NSAllowsArbitraryLoads</span></div></pre></td></tr></table></figure>","excerpt":"<p>从iOS9开始，苹果官方开始要求，上线的APP需要对HTTPs协议进行支持，虽然我们可以通过在项目的plist文件中设置属性的方式，暂时绕开这条限制， 但是我个人认为还是有必要了解下，苹果为什么要这么做？<br></p>","more":"<br>先简单科普下HTTP与HTTPS分别代表什么，以及它们的区别到底是什么？<p></p>\n<h3 id=\"HTPPS和HTTP的概念\"><a href=\"#HTPPS和HTTP的概念\" class=\"headerlink\" title=\"HTPPS和HTTP的概念\"></a><a href=\"#1\">HTPPS和HTTP的概念</a></h3><p>HTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司进行，提供了身份验证与加密通讯方法，现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。</p>\n<p>超文本传输协议 (HTTP-Hypertext transfer protocol) 是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。</p>\n<h3 id=\"HTTPS和HTTP的区别：\"><a href=\"#HTTPS和HTTP的区别：\" class=\"headerlink\" title=\"HTTPS和HTTP的区别：\"></a><a href=\"#1\">HTTPS和HTTP的区别：</a></h3><p>1.HTTPS议需要到CA申请证书，一般免费证书很少，需要交费。HTTP是超文本传输协议，不需要证书<br>2.端口号不同，HTTPS端口号是443，HTTP端口号是80<br>3.HTTPS要进行多次的身份验证，6/7的握手以达到数据安全，性能消耗较大，也即通信之前需要先确认身份，只有身份确认才会发送信息。</p>\n<p>看完上面HTTPS和HTTP的不同之后，我们不难发现其实二者最根本的区别就是在HTTPS比HTTP多使用的SSL层，那SSL层又是什么东东呢？且看下面这张图<br><img src=\"http://ock9zbzms.bkt.clouddn.com/643.png\" alt=\"\"><br>公式：HTTP+SSL/TLS+TCP = HTTPS</p>\n<p><a href=\"#2\">那么SSL、TLS又是什么鬼呢？</a><br>简单的立即SSL就是对传输的内容通过某种算法进行加密的一种协议，那TLS又是什么呢？TLS实际上是SSL的升级版，看下下面的换算公式：<br>SSL 2.0<br>SSL 3.0<br>TLS 1.0 (SSL 3.1)<br>TLS 1.1 (SSL 3.1)<br>TLS 1.2 (SSL 3.1)</p>\n<p>目前，应用最广泛的是TLS 1.0，接下来是SSL 3.0。但是，主流浏览器都已经实现了TLS 1.2的支持。</p>\n<p>那么身为移动端开发工程师，面对如此大势所趋，我们能做什么呢？<br>方法一：要求公司的服务端进行升级，至少支持到苹果要求的TLS1.2<br>方法二：在info.plist中进行配置，使APP能够访问不支持HTTPS的服务器。<br>如果让你的APP能够访问任意的Host地址那么可以这样配置（这是最省事也是最不安全的）</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSAppTransportSecurity</span>    </div><div class=\"line\">    <span class=\"built_in\">NSAllowsArbitraryLoads</span></div></pre></td></tr></table></figure>"},{"title":"点点滴滴：NSLog一点说道","date":"2016-08-27T13:03:09.000Z","_content":"\n今天的小结主要讲述在IOS开发中实现自定义的NSLog方法\n<!--more-->\n#### [1 为什么要对NSLog进行重定义？](#1)\n\n在开始这个知识点的讲解之前，首先说下，为什么要对NSLog宏进行重定义。在项目开发中，经常需要对程序进行调试。由于调试分布在项目的各种地方，当项目发布时，如果再将调试信息去掉，显示会消耗很大的人力，物力。幸好，强大的xcode给我们提供了一个非常方便的功能。在项目的Build Settings中给Apple LLVM Preprocessing中的 preprocessor macros下面的Debug添加一个调试宏DEBUG=1,记住在Release下面不要添加任何东西！添加这个东西的意思就是告诉编译器，在调试阶段，项目中进行了一个DEBUG的宏定义，但是Release阶段不定义。\n\n#### [2 如何对NSLog宏进行定义了](#1)\n\n```objc\n   #ifdef DEBUG\n   #define NSLog(args...)  ExtendNSLog(__FILE__,__LINE__,__PRETTY_FUNCTION__,args);\n   #else\n   #define NSLog(x...)\n   #endif\n```\n\n下面来对上述宏进行解释，如果定义了DEBUG宏，那么就对NSLog(args...)进行重定义，如果没有定义，将NSLog(args...)设置为空，不做任何处理，\n\n#### [3 如何对定义的信息进行输出，并附带.文件名，打印行数，方法名.接下来对ExtendNSLog()进行解释](#1)\n\n```objc\n void ExtendNSLog(const char *file, int lineNumber, const char *functionName, NSString *format, ...)\n{\n    // Type to hold information about variable arguments.\n    va_list ap;\n    // Initialize a variable argument list.\n    va_start (ap, format);\n    // NSLog only adds a newline to the end of the NSLog format if\n    // one is not already there.\n    // Here we are utilizing this feature of NSLog()\n    if (![format hasSuffix: @\"\\n\"])\n    {\n        format = [format stringByAppendingString: @\"\\n\\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\\n\\n\"];\n    }\n    NSString *body = [[NSString alloc] initWithFormat:format arguments:ap];\n    // End using variable argument list.\n    va_end (ap);\n    NSString *fileName = [[NSString stringWithUTF8String:file] lastPathComponent];\n    fprintf(stderr, \"[%s LINE:%d]%s:\\n%s\",\n            [fileName UTF8String],lineNumber,\n            (functionName[0])=='-'?(&functionName[1]):functionName,\n            [body UTF8String]);\n }\n```\n\n下面来对上述代码进行解释\n1.获取参数列表类\n2.启动参数列表类和格式化字符串的关联\n3.获取格式化字符串的实际输出文本\n4.关闭参数列表类和格式化字符串的关联\n5.调用C函数fprintf(),将打印信息输出。","source":"_posts/点点滴滴：NSLog一点说道.md","raw":"---\ntitle: 点点滴滴：NSLog一点说道\ndate: 2016-08-27 21:03:09\ntags: 点点滴滴\n---\n\n今天的小结主要讲述在IOS开发中实现自定义的NSLog方法\n<!--more-->\n#### [1 为什么要对NSLog进行重定义？](#1)\n\n在开始这个知识点的讲解之前，首先说下，为什么要对NSLog宏进行重定义。在项目开发中，经常需要对程序进行调试。由于调试分布在项目的各种地方，当项目发布时，如果再将调试信息去掉，显示会消耗很大的人力，物力。幸好，强大的xcode给我们提供了一个非常方便的功能。在项目的Build Settings中给Apple LLVM Preprocessing中的 preprocessor macros下面的Debug添加一个调试宏DEBUG=1,记住在Release下面不要添加任何东西！添加这个东西的意思就是告诉编译器，在调试阶段，项目中进行了一个DEBUG的宏定义，但是Release阶段不定义。\n\n#### [2 如何对NSLog宏进行定义了](#1)\n\n```objc\n   #ifdef DEBUG\n   #define NSLog(args...)  ExtendNSLog(__FILE__,__LINE__,__PRETTY_FUNCTION__,args);\n   #else\n   #define NSLog(x...)\n   #endif\n```\n\n下面来对上述宏进行解释，如果定义了DEBUG宏，那么就对NSLog(args...)进行重定义，如果没有定义，将NSLog(args...)设置为空，不做任何处理，\n\n#### [3 如何对定义的信息进行输出，并附带.文件名，打印行数，方法名.接下来对ExtendNSLog()进行解释](#1)\n\n```objc\n void ExtendNSLog(const char *file, int lineNumber, const char *functionName, NSString *format, ...)\n{\n    // Type to hold information about variable arguments.\n    va_list ap;\n    // Initialize a variable argument list.\n    va_start (ap, format);\n    // NSLog only adds a newline to the end of the NSLog format if\n    // one is not already there.\n    // Here we are utilizing this feature of NSLog()\n    if (![format hasSuffix: @\"\\n\"])\n    {\n        format = [format stringByAppendingString: @\"\\n\\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\\n\\n\"];\n    }\n    NSString *body = [[NSString alloc] initWithFormat:format arguments:ap];\n    // End using variable argument list.\n    va_end (ap);\n    NSString *fileName = [[NSString stringWithUTF8String:file] lastPathComponent];\n    fprintf(stderr, \"[%s LINE:%d]%s:\\n%s\",\n            [fileName UTF8String],lineNumber,\n            (functionName[0])=='-'?(&functionName[1]):functionName,\n            [body UTF8String]);\n }\n```\n\n下面来对上述代码进行解释\n1.获取参数列表类\n2.启动参数列表类和格式化字符串的关联\n3.获取格式化字符串的实际输出文本\n4.关闭参数列表类和格式化字符串的关联\n5.调用C函数fprintf(),将打印信息输出。","slug":"点点滴滴：NSLog一点说道","published":1,"updated":"2017-01-20T15:15:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yy2000whx5lqgaifbup","content":"<p>今天的小结主要讲述在IOS开发中实现自定义的NSLog方法<br><a id=\"more\"></a></p>\n<h4 id=\"1-为什么要对NSLog进行重定义？\"><a href=\"#1-为什么要对NSLog进行重定义？\" class=\"headerlink\" title=\"1 为什么要对NSLog进行重定义？\"></a><a href=\"#1\">1 为什么要对NSLog进行重定义？</a></h4><p>在开始这个知识点的讲解之前，首先说下，为什么要对NSLog宏进行重定义。在项目开发中，经常需要对程序进行调试。由于调试分布在项目的各种地方，当项目发布时，如果再将调试信息去掉，显示会消耗很大的人力，物力。幸好，强大的xcode给我们提供了一个非常方便的功能。在项目的Build Settings中给Apple LLVM Preprocessing中的 preprocessor macros下面的Debug添加一个调试宏DEBUG=1,记住在Release下面不要添加任何东西！添加这个东西的意思就是告诉编译器，在调试阶段，项目中进行了一个DEBUG的宏定义，但是Release阶段不定义。</p>\n<h4 id=\"2-如何对NSLog宏进行定义了\"><a href=\"#2-如何对NSLog宏进行定义了\" class=\"headerlink\" title=\"2 如何对NSLog宏进行定义了\"></a><a href=\"#1\">2 如何对NSLog宏进行定义了</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#ifdef DEBUG</span></div><div class=\"line\"><span class=\"meta\">#define NSLog(args...)  ExtendNSLog(__FILE__,__LINE__,__PRETTY_FUNCTION__,args);</span></div><div class=\"line\"><span class=\"meta\">#else</span></div><div class=\"line\"><span class=\"meta\">#define NSLog(x...)</span></div><div class=\"line\"><span class=\"meta\">#endif</span></div></pre></td></tr></table></figure>\n<p>下面来对上述宏进行解释，如果定义了DEBUG宏，那么就对NSLog(args…)进行重定义，如果没有定义，将NSLog(args…)设置为空，不做任何处理，</p>\n<h4 id=\"3-如何对定义的信息进行输出，并附带-文件名，打印行数，方法名-接下来对ExtendNSLog-进行解释\"><a href=\"#3-如何对定义的信息进行输出，并附带-文件名，打印行数，方法名-接下来对ExtendNSLog-进行解释\" class=\"headerlink\" title=\"3 如何对定义的信息进行输出，并附带.文件名，打印行数，方法名.接下来对ExtendNSLog()进行解释\"></a><a href=\"#1\">3 如何对定义的信息进行输出，并附带.文件名，打印行数，方法名.接下来对ExtendNSLog()进行解释</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">void</span> ExtendNSLog(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *file, <span class=\"keyword\">int</span> lineNumber, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *functionName, <span class=\"built_in\">NSString</span> *format, ...)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Type to hold information about variable arguments.</span></div><div class=\"line\">    va_list ap;</div><div class=\"line\">    <span class=\"comment\">// Initialize a variable argument list.</span></div><div class=\"line\">    va_start (ap, format);</div><div class=\"line\">    <span class=\"comment\">// NSLog only adds a newline to the end of the NSLog format if</span></div><div class=\"line\">    <span class=\"comment\">// one is not already there.</span></div><div class=\"line\">    <span class=\"comment\">// Here we are utilizing this feature of NSLog()</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (![format hasSuffix: <span class=\"string\">@\"\\n\"</span>])</div><div class=\"line\">    &#123;</div><div class=\"line\">        format = [format stringByAppendingString: <span class=\"string\">@\"\\n\\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\\n\\n\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *body = [[<span class=\"built_in\">NSString</span> alloc] initWithFormat:format arguments:ap];</div><div class=\"line\">    <span class=\"comment\">// End using variable argument list.</span></div><div class=\"line\">    va_end (ap);</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *fileName = [[<span class=\"built_in\">NSString</span> stringWithUTF8String:file] lastPathComponent];</div><div class=\"line\">    fprintf(stderr, <span class=\"string\">\"[%s LINE:%d]%s:\\n%s\"</span>,</div><div class=\"line\">            [fileName UTF8String],lineNumber,</div><div class=\"line\">            (functionName[<span class=\"number\">0</span>])==<span class=\"string\">'-'</span>?(&amp;functionName[<span class=\"number\">1</span>]):functionName,</div><div class=\"line\">            [body UTF8String]);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>下面来对上述代码进行解释<br>1.获取参数列表类<br>2.启动参数列表类和格式化字符串的关联<br>3.获取格式化字符串的实际输出文本<br>4.关闭参数列表类和格式化字符串的关联<br>5.调用C函数fprintf(),将打印信息输出。</p>\n","excerpt":"<p>今天的小结主要讲述在IOS开发中实现自定义的NSLog方法<br></p>","more":"<p></p>\n<h4 id=\"1-为什么要对NSLog进行重定义？\"><a href=\"#1-为什么要对NSLog进行重定义？\" class=\"headerlink\" title=\"1 为什么要对NSLog进行重定义？\"></a><a href=\"#1\">1 为什么要对NSLog进行重定义？</a></h4><p>在开始这个知识点的讲解之前，首先说下，为什么要对NSLog宏进行重定义。在项目开发中，经常需要对程序进行调试。由于调试分布在项目的各种地方，当项目发布时，如果再将调试信息去掉，显示会消耗很大的人力，物力。幸好，强大的xcode给我们提供了一个非常方便的功能。在项目的Build Settings中给Apple LLVM Preprocessing中的 preprocessor macros下面的Debug添加一个调试宏DEBUG=1,记住在Release下面不要添加任何东西！添加这个东西的意思就是告诉编译器，在调试阶段，项目中进行了一个DEBUG的宏定义，但是Release阶段不定义。</p>\n<h4 id=\"2-如何对NSLog宏进行定义了\"><a href=\"#2-如何对NSLog宏进行定义了\" class=\"headerlink\" title=\"2 如何对NSLog宏进行定义了\"></a><a href=\"#1\">2 如何对NSLog宏进行定义了</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#ifdef DEBUG</span></div><div class=\"line\"><span class=\"meta\">#define NSLog(args...)  ExtendNSLog(__FILE__,__LINE__,__PRETTY_FUNCTION__,args);</span></div><div class=\"line\"><span class=\"meta\">#else</span></div><div class=\"line\"><span class=\"meta\">#define NSLog(x...)</span></div><div class=\"line\"><span class=\"meta\">#endif</span></div></pre></td></tr></table></figure>\n<p>下面来对上述宏进行解释，如果定义了DEBUG宏，那么就对NSLog(args…)进行重定义，如果没有定义，将NSLog(args…)设置为空，不做任何处理，</p>\n<h4 id=\"3-如何对定义的信息进行输出，并附带-文件名，打印行数，方法名-接下来对ExtendNSLog-进行解释\"><a href=\"#3-如何对定义的信息进行输出，并附带-文件名，打印行数，方法名-接下来对ExtendNSLog-进行解释\" class=\"headerlink\" title=\"3 如何对定义的信息进行输出，并附带.文件名，打印行数，方法名.接下来对ExtendNSLog()进行解释\"></a><a href=\"#1\">3 如何对定义的信息进行输出，并附带.文件名，打印行数，方法名.接下来对ExtendNSLog()进行解释</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">void</span> ExtendNSLog(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *file, <span class=\"keyword\">int</span> lineNumber, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *functionName, <span class=\"built_in\">NSString</span> *format, ...)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Type to hold information about variable arguments.</span></div><div class=\"line\">    va_list ap;</div><div class=\"line\">    <span class=\"comment\">// Initialize a variable argument list.</span></div><div class=\"line\">    va_start (ap, format);</div><div class=\"line\">    <span class=\"comment\">// NSLog only adds a newline to the end of the NSLog format if</span></div><div class=\"line\">    <span class=\"comment\">// one is not already there.</span></div><div class=\"line\">    <span class=\"comment\">// Here we are utilizing this feature of NSLog()</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (![format hasSuffix: <span class=\"string\">@\"\\n\"</span>])</div><div class=\"line\">    &#123;</div><div class=\"line\">        format = [format stringByAppendingString: <span class=\"string\">@\"\\n\\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\\n\\n\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *body = [[<span class=\"built_in\">NSString</span> alloc] initWithFormat:format arguments:ap];</div><div class=\"line\">    <span class=\"comment\">// End using variable argument list.</span></div><div class=\"line\">    va_end (ap);</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *fileName = [[<span class=\"built_in\">NSString</span> stringWithUTF8String:file] lastPathComponent];</div><div class=\"line\">    fprintf(stderr, <span class=\"string\">\"[%s LINE:%d]%s:\\n%s\"</span>,</div><div class=\"line\">            [fileName UTF8String],lineNumber,</div><div class=\"line\">            (functionName[<span class=\"number\">0</span>])==<span class=\"string\">'-'</span>?(&amp;functionName[<span class=\"number\">1</span>]):functionName,</div><div class=\"line\">            [body UTF8String]);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>下面来对上述代码进行解释<br>1.获取参数列表类<br>2.启动参数列表类和格式化字符串的关联<br>3.获取格式化字符串的实际输出文本<br>4.关闭参数列表类和格式化字符串的关联<br>5.调用C函数fprintf(),将打印信息输出。</p>"},{"title":"点点滴滴：一个容易被忽视的数组和字典的方法","date":"2016-08-27T13:11:06.000Z","_content":"\n今天来讨论下平时大家熟悉的数组/字典，但是容易忽略的数组/字典的valueForKeyPath方法\n可能大家对- (id)valueForKeyPath:(NSString *)keyPath方法不是很了解。\n其实这个方法非常的强大，举个例子:\n\n<!--more-->\n\n```objc\nNSArray *array = @[@\"name\", @\"w\", @\"aa\", @\"jimsa\"];\nNSLog(@\"%@\", [array valueForKeyPath:@\"uppercaseString\"]);\n```\n输出\n(\n    NAME,\n    W,\n    AA,\n    JIMSA\n)\n\n相当于数组中的每个成员执行了uppercaseString方法，然后把返回的对象组成一个新数组返回。既然可以用uppercaseString方法，那么NSString的其他方法也可以，比如\n\n```objc\n[array valueForKeyPath:@\"length\"];\n```\n返回每个字符串长度的组成的数组。只要你能想到的成员实例方法都可以这么用。\n如果你觉得这个方法就这么点功能，那就错了。还是举具体的例子\n对NSNumber数组快速计算数组求和、平均数、最大值、最小值\n\n```mm\nNSArray *array = @[@1, @2, @3, @4, @10];    \nNSNumber *sum = [array valueForKeyPath:@\"@sum.self\"];   \nNSNumber *avg = [array valueForKeyPath:@\"@avg.self\"]; \nNSNumber *max = [array valueForKeyPath:@\"@max.self\"];    \nNSNumber *min = [array valueForKeyPath:@\"@min.self\"];\n```\n或者指定输出类型\n\n```mm\nNSArray *array = @[@\"name\", @\"w\", @\"aa\", @\"jimsa\", @\"aa\"];    \nNSLog(@\"%@\", [array valueForKeyPath:@\"@distinctUnionOfObjects.self\"]);\n```\n打印\n(\nname,\nw,\njimsa,\naa\n)\n\n对NSDictionary数组快速找出相应key对的值\n\n```mm\nNSArray *array = @[@{@\"name\" : @\"cookeee\",@\"code\" : @1},\n                    @{@\"name\": @\"jim\",@\"code\" : @2},\n                    @{@\"name\": @\"jim\",@\"code\" : @1},\n                    @{@\"name\": @\"jbos\",@\"code\" : @1}];\nNSLog(@\"%@\", [array valueForKeyPath:@\"name\"]);\n```\n\n直接得到字典中namekey对应的值组成的数组，显然比循环取值再加入到新数组中方便快捷\n(\n    cookeee,\n    jim,\n    jim,\n    jbos\n)\n\n同样可以嵌套使用，先剔除name对应值的重复数据再取值\n\n```mm\nNSArray *array = @[@{@\"name\" : @\"cookeee\",@\"code\" : @1},\n                   @{@\"name\": @\"jim\",@\"code\" : @2},\n                   @{@\"name\": @\"jim\",@\"code\" : @1},\n                   @{@\"name\": @\"jbos\",@\"code\" : @1}];   \nNSLog(@\"%@\", [array valueForKeyPath:@\"@distinctUnionOfObjects.name\"]);\n```\n\n打印\n(\ncookeee,\njim,\njbos\n)","source":"_posts/点点滴滴：一个容易被忽视的数组和字典的方法.md","raw":"---\ntitle: 点点滴滴：一个容易被忽视的数组和字典的方法\ndate: 2016-08-27 21:11:06\ntags: 点点滴滴\n---\n\n今天来讨论下平时大家熟悉的数组/字典，但是容易忽略的数组/字典的valueForKeyPath方法\n可能大家对- (id)valueForKeyPath:(NSString *)keyPath方法不是很了解。\n其实这个方法非常的强大，举个例子:\n\n<!--more-->\n\n```objc\nNSArray *array = @[@\"name\", @\"w\", @\"aa\", @\"jimsa\"];\nNSLog(@\"%@\", [array valueForKeyPath:@\"uppercaseString\"]);\n```\n输出\n(\n    NAME,\n    W,\n    AA,\n    JIMSA\n)\n\n相当于数组中的每个成员执行了uppercaseString方法，然后把返回的对象组成一个新数组返回。既然可以用uppercaseString方法，那么NSString的其他方法也可以，比如\n\n```objc\n[array valueForKeyPath:@\"length\"];\n```\n返回每个字符串长度的组成的数组。只要你能想到的成员实例方法都可以这么用。\n如果你觉得这个方法就这么点功能，那就错了。还是举具体的例子\n对NSNumber数组快速计算数组求和、平均数、最大值、最小值\n\n```mm\nNSArray *array = @[@1, @2, @3, @4, @10];    \nNSNumber *sum = [array valueForKeyPath:@\"@sum.self\"];   \nNSNumber *avg = [array valueForKeyPath:@\"@avg.self\"]; \nNSNumber *max = [array valueForKeyPath:@\"@max.self\"];    \nNSNumber *min = [array valueForKeyPath:@\"@min.self\"];\n```\n或者指定输出类型\n\n```mm\nNSArray *array = @[@\"name\", @\"w\", @\"aa\", @\"jimsa\", @\"aa\"];    \nNSLog(@\"%@\", [array valueForKeyPath:@\"@distinctUnionOfObjects.self\"]);\n```\n打印\n(\nname,\nw,\njimsa,\naa\n)\n\n对NSDictionary数组快速找出相应key对的值\n\n```mm\nNSArray *array = @[@{@\"name\" : @\"cookeee\",@\"code\" : @1},\n                    @{@\"name\": @\"jim\",@\"code\" : @2},\n                    @{@\"name\": @\"jim\",@\"code\" : @1},\n                    @{@\"name\": @\"jbos\",@\"code\" : @1}];\nNSLog(@\"%@\", [array valueForKeyPath:@\"name\"]);\n```\n\n直接得到字典中namekey对应的值组成的数组，显然比循环取值再加入到新数组中方便快捷\n(\n    cookeee,\n    jim,\n    jim,\n    jbos\n)\n\n同样可以嵌套使用，先剔除name对应值的重复数据再取值\n\n```mm\nNSArray *array = @[@{@\"name\" : @\"cookeee\",@\"code\" : @1},\n                   @{@\"name\": @\"jim\",@\"code\" : @2},\n                   @{@\"name\": @\"jim\",@\"code\" : @1},\n                   @{@\"name\": @\"jbos\",@\"code\" : @1}];   \nNSLog(@\"%@\", [array valueForKeyPath:@\"@distinctUnionOfObjects.name\"]);\n```\n\n打印\n(\ncookeee,\njim,\njbos\n)","slug":"点点滴滴：一个容易被忽视的数组和字典的方法","published":1,"updated":"2017-01-20T15:15:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yy4000yhx5l8xwb7397","content":"<p>今天来讨论下平时大家熟悉的数组/字典，但是容易忽略的数组/字典的valueForKeyPath方法<br>可能大家对- (id)valueForKeyPath:(NSString *)keyPath方法不是很了解。<br>其实这个方法非常的强大，举个例子:</p>\n<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *array = @[<span class=\"string\">@\"name\"</span>, <span class=\"string\">@\"w\"</span>, <span class=\"string\">@\"aa\"</span>, <span class=\"string\">@\"jimsa\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, [array valueForKeyPath:<span class=\"string\">@\"uppercaseString\"</span>]);</div></pre></td></tr></table></figure>\n<p>输出<br>(<br>    NAME,<br>    W,<br>    AA,<br>    JIMSA<br>)</p>\n<p>相当于数组中的每个成员执行了uppercaseString方法，然后把返回的对象组成一个新数组返回。既然可以用uppercaseString方法，那么NSString的其他方法也可以，比如</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[array valueForKeyPath:<span class=\"string\">@\"length\"</span>];</div></pre></td></tr></table></figure>\n<p>返回每个字符串长度的组成的数组。只要你能想到的成员实例方法都可以这么用。<br>如果你觉得这个方法就这么点功能，那就错了。还是举具体的例子<br>对NSNumber数组快速计算数组求和、平均数、最大值、最小值</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *array = @[@<span class=\"number\">1</span>, @<span class=\"number\">2</span>, @<span class=\"number\">3</span>, @<span class=\"number\">4</span>, @<span class=\"number\">10</span>];    </div><div class=\"line\"><span class=\"built_in\">NSNumber</span> *sum = [array valueForKeyPath:<span class=\"string\">@\"@sum.self\"</span>];   </div><div class=\"line\"><span class=\"built_in\">NSNumber</span> *avg = [array valueForKeyPath:<span class=\"string\">@\"@avg.self\"</span>]; </div><div class=\"line\"><span class=\"built_in\">NSNumber</span> *max = [array valueForKeyPath:<span class=\"string\">@\"@max.self\"</span>];    </div><div class=\"line\"><span class=\"built_in\">NSNumber</span> *min = [array valueForKeyPath:<span class=\"string\">@\"@min.self\"</span>];</div></pre></td></tr></table></figure>\n<p>或者指定输出类型</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *array = @[<span class=\"string\">@\"name\"</span>, <span class=\"string\">@\"w\"</span>, <span class=\"string\">@\"aa\"</span>, <span class=\"string\">@\"jimsa\"</span>, <span class=\"string\">@\"aa\"</span>];    </div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, [array valueForKeyPath:<span class=\"string\">@\"@distinctUnionOfObjects.self\"</span>]);</div></pre></td></tr></table></figure>\n<p>打印<br>(<br>name,<br>w,<br>jimsa,<br>aa<br>)</p>\n<p>对NSDictionary数组快速找出相应key对的值</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *array = @[@&#123;<span class=\"string\">@\"name\"</span> : <span class=\"string\">@\"cookeee\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">1</span>&#125;,</div><div class=\"line\">                    @&#123;<span class=\"string\">@\"name\"</span>: <span class=\"string\">@\"jim\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">2</span>&#125;,</div><div class=\"line\">                    @&#123;<span class=\"string\">@\"name\"</span>: <span class=\"string\">@\"jim\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">1</span>&#125;,</div><div class=\"line\">                    @&#123;<span class=\"string\">@\"name\"</span>: <span class=\"string\">@\"jbos\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">1</span>&#125;];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, [array valueForKeyPath:<span class=\"string\">@\"name\"</span>]);</div></pre></td></tr></table></figure>\n<p>直接得到字典中namekey对应的值组成的数组，显然比循环取值再加入到新数组中方便快捷<br>(<br>    cookeee,<br>    jim,<br>    jim,<br>    jbos<br>)</p>\n<p>同样可以嵌套使用，先剔除name对应值的重复数据再取值</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *array = @[@&#123;<span class=\"string\">@\"name\"</span> : <span class=\"string\">@\"cookeee\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">1</span>&#125;,</div><div class=\"line\">                   @&#123;<span class=\"string\">@\"name\"</span>: <span class=\"string\">@\"jim\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">2</span>&#125;,</div><div class=\"line\">                   @&#123;<span class=\"string\">@\"name\"</span>: <span class=\"string\">@\"jim\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">1</span>&#125;,</div><div class=\"line\">                   @&#123;<span class=\"string\">@\"name\"</span>: <span class=\"string\">@\"jbos\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">1</span>&#125;];   </div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, [array valueForKeyPath:<span class=\"string\">@\"@distinctUnionOfObjects.name\"</span>]);</div></pre></td></tr></table></figure>\n<p>打印<br>(<br>cookeee,<br>jim,<br>jbos<br>)</p>\n","excerpt":"<p>今天来讨论下平时大家熟悉的数组/字典，但是容易忽略的数组/字典的valueForKeyPath方法<br>可能大家对- (id)valueForKeyPath:(NSString *)keyPath方法不是很了解。<br>其实这个方法非常的强大，举个例子:</p>","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *array = @[<span class=\"string\">@\"name\"</span>, <span class=\"string\">@\"w\"</span>, <span class=\"string\">@\"aa\"</span>, <span class=\"string\">@\"jimsa\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, [array valueForKeyPath:<span class=\"string\">@\"uppercaseString\"</span>]);</div></pre></td></tr></table></figure>\n<p>输出<br>(<br>    NAME,<br>    W,<br>    AA,<br>    JIMSA<br>)</p>\n<p>相当于数组中的每个成员执行了uppercaseString方法，然后把返回的对象组成一个新数组返回。既然可以用uppercaseString方法，那么NSString的其他方法也可以，比如</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[array valueForKeyPath:<span class=\"string\">@\"length\"</span>];</div></pre></td></tr></table></figure>\n<p>返回每个字符串长度的组成的数组。只要你能想到的成员实例方法都可以这么用。<br>如果你觉得这个方法就这么点功能，那就错了。还是举具体的例子<br>对NSNumber数组快速计算数组求和、平均数、最大值、最小值</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *array = @[@<span class=\"number\">1</span>, @<span class=\"number\">2</span>, @<span class=\"number\">3</span>, @<span class=\"number\">4</span>, @<span class=\"number\">10</span>];    </div><div class=\"line\"><span class=\"built_in\">NSNumber</span> *sum = [array valueForKeyPath:<span class=\"string\">@\"@sum.self\"</span>];   </div><div class=\"line\"><span class=\"built_in\">NSNumber</span> *avg = [array valueForKeyPath:<span class=\"string\">@\"@avg.self\"</span>]; </div><div class=\"line\"><span class=\"built_in\">NSNumber</span> *max = [array valueForKeyPath:<span class=\"string\">@\"@max.self\"</span>];    </div><div class=\"line\"><span class=\"built_in\">NSNumber</span> *min = [array valueForKeyPath:<span class=\"string\">@\"@min.self\"</span>];</div></pre></td></tr></table></figure>\n<p>或者指定输出类型</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *array = @[<span class=\"string\">@\"name\"</span>, <span class=\"string\">@\"w\"</span>, <span class=\"string\">@\"aa\"</span>, <span class=\"string\">@\"jimsa\"</span>, <span class=\"string\">@\"aa\"</span>];    </div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, [array valueForKeyPath:<span class=\"string\">@\"@distinctUnionOfObjects.self\"</span>]);</div></pre></td></tr></table></figure>\n<p>打印<br>(<br>name,<br>w,<br>jimsa,<br>aa<br>)</p>\n<p>对NSDictionary数组快速找出相应key对的值</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *array = @[@&#123;<span class=\"string\">@\"name\"</span> : <span class=\"string\">@\"cookeee\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">1</span>&#125;,</div><div class=\"line\">                    @&#123;<span class=\"string\">@\"name\"</span>: <span class=\"string\">@\"jim\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">2</span>&#125;,</div><div class=\"line\">                    @&#123;<span class=\"string\">@\"name\"</span>: <span class=\"string\">@\"jim\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">1</span>&#125;,</div><div class=\"line\">                    @&#123;<span class=\"string\">@\"name\"</span>: <span class=\"string\">@\"jbos\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">1</span>&#125;];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, [array valueForKeyPath:<span class=\"string\">@\"name\"</span>]);</div></pre></td></tr></table></figure>\n<p>直接得到字典中namekey对应的值组成的数组，显然比循环取值再加入到新数组中方便快捷<br>(<br>    cookeee,<br>    jim,<br>    jim,<br>    jbos<br>)</p>\n<p>同样可以嵌套使用，先剔除name对应值的重复数据再取值</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *array = @[@&#123;<span class=\"string\">@\"name\"</span> : <span class=\"string\">@\"cookeee\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">1</span>&#125;,</div><div class=\"line\">                   @&#123;<span class=\"string\">@\"name\"</span>: <span class=\"string\">@\"jim\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">2</span>&#125;,</div><div class=\"line\">                   @&#123;<span class=\"string\">@\"name\"</span>: <span class=\"string\">@\"jim\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">1</span>&#125;,</div><div class=\"line\">                   @&#123;<span class=\"string\">@\"name\"</span>: <span class=\"string\">@\"jbos\"</span>,<span class=\"string\">@\"code\"</span> : @<span class=\"number\">1</span>&#125;];   </div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, [array valueForKeyPath:<span class=\"string\">@\"@distinctUnionOfObjects.name\"</span>]);</div></pre></td></tr></table></figure>\n<p>打印<br>(<br>cookeee,<br>jim,<br>jbos<br>)</p>"},{"title":"点点滴滴：NSScanner的用法小结","date":"2016-08-27T12:36:20.000Z","toc":true,"_content":"\nNSScanner类是一个类簇的抽象父类,该类簇为一个从NSString对象扫描值的对象提供了程序接口。\n<!--more-->\nNSScanner对象把NSString 对象的的字符解释和转化成 number和string 类型的值。在创建NSScanner对象的时候为它分配字符(string )，当你从NSScanner对象获取内容的时候，它会从头到尾遍历字符串(string)。\n由于类簇的属性， scanner对象并不是 NSScanner类的实例，而是它一个私有子类的实例。尽管scanner对象的类是私有的，但是它的接口是公开的（抽象父类已经声明）。 NSScanner 的原始方法是string和Configuring a Scanner方法下面列举的所有的方法。\n在 NSScanner 对象扫描字符串的时候，你可以通过设置属性charactersToBeSkipped忽略某些字符。在扫描字符串之前，那些位于忽略字符集中的字符将会被跳过。默认的忽略字符是空格和回车字符。\n可以通过[[scanner string] substringFromIndex:[scanner scanLocation]]获取未扫描的字符串。\n\n#### [创建 Scanner对象](#1)\n```objc\n+ scannerWithString:\n+ localizedScannerWithString:\n- initWithString: Designated Initializer\n```\nscannerWithString，返回值是 扫描过aString字符串的NSScanner 对象，该方法通过调用initWithString设置扫描字符串;\nlocalizedScannerWithString,返回值是 通过用户默认的 locale方式扫描字符串的NSScanner 对象，该方法也是通过调用initWithString设置扫描字符串;\ninitWithString，返回值是NSScanner 对象，该对象通过扫描aString完成初始化\n\n#### [获取Scanner对象字符串](#1)\n```objc\nstring Property\n```\n\n#### [设置scanner对象](#1)\n```objc\nscanLocation Property\ncaseSensitive Property\ncharactersToBeSkipped Property\nlocale Property\n\nscanLocation,下次扫描开始的位置，如果该值超出了string的区域，将会引起NSRangeException,该属性在发生错误后重新扫描时非常有用。\ncaseSensitive，是否区分字符串中大小写的标志。默认为NO，注意：该设置不会应用到被跳过的字符集。\ncharactersToBeSkipped,在扫描时被跳过的字符集，默认是空白格和回车键。被跳过的字符集优先于扫描的字符集：例如一个scanner被跳过的字符集为空格，通过scanInt:去查找字符串中的整型数时，首先做的不是扫描，而是跳过空格，直到找到十进制数据或者其他的字符。在字符被扫描的时候，跳过功能就失效了。如果你扫描的字符和跳过的字符是一样的，结果将是未知的。被跳过的字符是一个唯一值，scanner不会将忽略大小写的功能应用于它，也不会用这些字符做一些组合，如果在扫描字符换的时候你想忽略全部的元音字符，就要这么做（比如：将字符集设置成“AEIOUaeiou”};\nlocale,scanner 的locale对它从字符串中区分数值产生影响，它通过locale的十进制分隔符区分浮点型数据的整数和小数部分。一个没有locale的scanner用非定域值。新的scanner若没有设置locale，使用默认locale。\n```\n\n#### [扫描字符串](#1)\n```objc\n- scanCharactersFromSet:intoString:\n- scanUpToCharactersFromSet:intoString:\n- scanDecimal:\n- scanDouble:\n- scanFloat:\n- scanHexDouble:\n- scanHexFloat:\n- scanHexInt:\n- scanHexLongLong:\n- scanInteger:\n- scanInt:\n- scanLongLong:\n- scanString:intoString:\n- scanUnsignedLongLong:\n- scanUpToString:intoString:\natEnd Property\n\nscanCharactersFromSet:intoString:扫描字符串中和NSCharacterSet字符集中匹配的字符，是按字符单个匹配的，例如，NSCharacterSet字符集为@\"test123Dmo\"，scanner字符串为 @\" 123test12Demotest\"，那么字符串中所有的字符都在字符集中，所以指针指向的地址存储的内容为\"123test12Demotest\"\nscanUpToCharactersFromSet:intoString：扫描字符串直到遇到NSCharacterSet字符集的字符时停止，指针指向的地址存储的内容为遇到跳过字符集字符之前的内容\nscanString:intoString:从当前的扫描位置开始扫描，判断扫描字符串是否从当前位置能扫描到和传入字符串相同的一串字符，如果能扫描到就返回YES,指针指向的地址存储的就是这段字符串的内容。例如scanner的string内容为123abc678,传入的字符串内容为abc，如果当前的扫描位置为0，那么扫描不到，但是如果将扫描位置设置成3，就可以扫描到了。\nscanUpToString:intoString:从当前的扫描位置开始扫描，扫描到和传入的字符串相同字符串时，停止，指针指向的地址存储的是遇到传入字符串之前的内容。例如scanner的string内容为123abc678,传入的字符串内容为abc，存储的内容为123\nscanDecimal:扫描NSDecimal类型的值，有关NSDecimal类型的值更多的信息可以查看：NSDecimalNumber\nscanDouble :扫描双精度浮点型字符，溢出和非溢出都被认为合法的浮点型数据。在溢出的情况下scanner将会跳过所有的数字，所以新的扫描位置将会在整个浮点型数据的后面。double指针指向的地址存储的数据为扫描出的值，包括溢出时的HUGE_VAL或者 –HUGE_VAL，即未溢出时的0.0。\nscanFloat：扫描单精度浮点型字符，具体内容同scanDouble\nscanHexDouble: 扫描双精度的十六进制类型，溢出和非溢出都被认为合法的浮点型数据。在溢出的情况下scanner将会跳过所有的数字，所以新的扫描位置将会在整个浮点型数据的后面。double指针指向的地址存储的数据为扫描出的值，包括溢出时的HUGE_VAL或者 –HUGE_VAL，即未溢出时的0.0。数据接收时对应的格式为 %a 或%A ，双精度十六进制字符前面一定要加  0x或者 0X。\nscanHexInt 扫描十六进制无符整型，unsigned int指针指向的地址值为 扫描到的值，包含溢出时的UINT_MAX。\nscanHexLongLong 同scanHexDouble\nscanInt 扫描整型，溢出也被认为是有效的整型，int 指针指向的地址的值为扫描到的值，包含溢出时的INT_MAX或INT_MIN。\nscanInteger 同scanInt\nscanLongLong 扫描LongLong 型，溢出也被认为是有效的整型，LongLong指针指向的地址的值为扫描到的值，包含溢出时的LLONG_MAX 或 LLONG_MIN。\n```\n\n### [如何使用](#1)\n#### [场景1：获取URL中的请求key和value。](#2)\n\n我们知道在iOS中，系统封装的URL会有一个属性叫做Query，如果是一个正确的URL会有类似的格式 \n@\"https://wwww.baidu.com/home.php?name=cheng&age=19&nickname=hehe\"\n\n其中？后面的就是URL的Query，那么如何分别获取key和value呢？\n\n```objc\nvoid scannerStringDemo(){\n    \n    NSURL *url = [NSURL URLWithString:@\"https://wwww.baidu.com/home.php?name=cheng&age=19&nickname=hehe\"];\n    NSScanner *scanner = [[NSScanner alloc]initWithString:url.query];\n    NSCharacterSet *delimiterSet = [NSCharacterSet characterSetWithCharactersInString:@\"&\"];\n    NSMutableDictionary *paris = [@{} mutableCopy];\n    \n    while (![scanner isAtEnd]) {\n        NSString *pairString = nil;\n        [scanner scanUpToCharactersFromSet:delimiterSet intoString:&pairString];\n        [scanner scanCharactersFromSet:delimiterSet intoString:NULL];\n        NSRange range = [pairString rangeOfString:@\"=\"];\n        if (range.location != NSNotFound) {\n            NSString *key = [pairString substringToIndex:range.location];\n            NSString *value = [pairString substringFromIndex:range.location + range.length];\n            [paris setObject:key forKey:@\"key\"];\n            [paris setObject:value forKey:@\"value\"];\n        }\n    }\n}\n\n```\n#### [场景2：判断当前的字符串是否是一个纯数字](#2)\n\n```objc\n- (BOOL)isPureInt:(NSString*)string{\n    NSScanner* scan = [NSScanner scannerWithString:string];\n    int val;\n    return[scan scanInt:&val] && [scan isAtEnd];\n}\n```\n\n#### [场景3：判断TextField输入的字符串是不是需要的格式，这里要求是最多三位小数的数字](#2)\n```objc\n+(BOOL)isValidAboutInputText:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string decimalNumber:(NSInteger)number{\n    NSScanner      *scanner    = [NSScanner scannerWithString:string];\n    NSCharacterSet *numbers;\n    NSRange         pointRange = [textField.text rangeOfString:@\".\"];\n    if ( (pointRange.length > 0) && (pointRange.location < range.location  || pointRange.location > range.location + range.length) ){\n        numbers = [NSCharacterSet characterSetWithCharactersInString:@\"0123456789\"];\n    }else{\n        numbers = [NSCharacterSet characterSetWithCharactersInString:@\"0123456789.\"];\n    }\n    if ( [textField.text isEqualToString:@\"\"] && [string isEqualToString:@\".\"] ){\n        return NO;\n    }\n    short remain = number; //保留 number位小数\n    NSString *tempStr = [textField.text stringByAppendingString:string];\n    NSUInteger strlen = [tempStr length];\n    if(pointRange.length > 0 && pointRange.location > 0){ //判断输入框内是否含有“.”。\n        if([string isEqualToString:@\".\"]){ //当输入框内已经含有“.”时，如果再输入“.”则被视为无效。\n            return NO;\n        }\n        if(strlen > 0 && (strlen - pointRange.location) > remain+1){ //当输入框内已经含有“.”，当字符串长度减去小数点前面的字符串长度大于需要要保留的小数点位数，则视当次输入无效。\n            return NO;\n        }\n    }\n    NSRange zeroRange = [textField.text rangeOfString:@\"0\"];\n    if(zeroRange.length == 1 && zeroRange.location == 0){ //判断输入框第一个字符是否为“0”\n        if(![string isEqualToString:@\"0\"] && ![string isEqualToString:@\".\"] && [textField.text length] == 1){ //当输入框只有一个字符并且字符为“0”时，再输入不为“0”或者“.”的字符时，则将此输入替换输入框的这唯一字符。\n            textField.text = string;\n            return NO;\n        }else{\n            if(pointRange.length == 0 && pointRange.location > 0){ //当输入框第一个字符为“0”时，并且没有“.”字符时，如果当此输入的字符为“0”，则视当此输入无效。\n                if([string isEqualToString:@\"0\"]){\n                    return NO;\n                }\n            }\n        }\n    }\n    NSString *buffer;\n    if ( ![scanner scanCharactersFromSet:numbers intoString:&buffer] && ([string length] != 0) ){\n        return NO;\n    }else{\n        return YES;\n    }\n}\n```\n\n### [注意事项](#2)\n```objc\n[scanner scanCharactersFromSet:delimiterSet intoString:NULL];可以使用这个方法，跳过不需要的字符。\n```\n目前能想到的用法就这些，如果有更多的用法，以后慢慢补充！","source":"_posts/点点滴滴：NSScanner的用法小结.md","raw":"---\ntitle: 点点滴滴：NSScanner的用法小结\ndate: 2016-08-27 20:36:20\ntags: 点点滴滴\ntoc: true\n---\n\nNSScanner类是一个类簇的抽象父类,该类簇为一个从NSString对象扫描值的对象提供了程序接口。\n<!--more-->\nNSScanner对象把NSString 对象的的字符解释和转化成 number和string 类型的值。在创建NSScanner对象的时候为它分配字符(string )，当你从NSScanner对象获取内容的时候，它会从头到尾遍历字符串(string)。\n由于类簇的属性， scanner对象并不是 NSScanner类的实例，而是它一个私有子类的实例。尽管scanner对象的类是私有的，但是它的接口是公开的（抽象父类已经声明）。 NSScanner 的原始方法是string和Configuring a Scanner方法下面列举的所有的方法。\n在 NSScanner 对象扫描字符串的时候，你可以通过设置属性charactersToBeSkipped忽略某些字符。在扫描字符串之前，那些位于忽略字符集中的字符将会被跳过。默认的忽略字符是空格和回车字符。\n可以通过[[scanner string] substringFromIndex:[scanner scanLocation]]获取未扫描的字符串。\n\n#### [创建 Scanner对象](#1)\n```objc\n+ scannerWithString:\n+ localizedScannerWithString:\n- initWithString: Designated Initializer\n```\nscannerWithString，返回值是 扫描过aString字符串的NSScanner 对象，该方法通过调用initWithString设置扫描字符串;\nlocalizedScannerWithString,返回值是 通过用户默认的 locale方式扫描字符串的NSScanner 对象，该方法也是通过调用initWithString设置扫描字符串;\ninitWithString，返回值是NSScanner 对象，该对象通过扫描aString完成初始化\n\n#### [获取Scanner对象字符串](#1)\n```objc\nstring Property\n```\n\n#### [设置scanner对象](#1)\n```objc\nscanLocation Property\ncaseSensitive Property\ncharactersToBeSkipped Property\nlocale Property\n\nscanLocation,下次扫描开始的位置，如果该值超出了string的区域，将会引起NSRangeException,该属性在发生错误后重新扫描时非常有用。\ncaseSensitive，是否区分字符串中大小写的标志。默认为NO，注意：该设置不会应用到被跳过的字符集。\ncharactersToBeSkipped,在扫描时被跳过的字符集，默认是空白格和回车键。被跳过的字符集优先于扫描的字符集：例如一个scanner被跳过的字符集为空格，通过scanInt:去查找字符串中的整型数时，首先做的不是扫描，而是跳过空格，直到找到十进制数据或者其他的字符。在字符被扫描的时候，跳过功能就失效了。如果你扫描的字符和跳过的字符是一样的，结果将是未知的。被跳过的字符是一个唯一值，scanner不会将忽略大小写的功能应用于它，也不会用这些字符做一些组合，如果在扫描字符换的时候你想忽略全部的元音字符，就要这么做（比如：将字符集设置成“AEIOUaeiou”};\nlocale,scanner 的locale对它从字符串中区分数值产生影响，它通过locale的十进制分隔符区分浮点型数据的整数和小数部分。一个没有locale的scanner用非定域值。新的scanner若没有设置locale，使用默认locale。\n```\n\n#### [扫描字符串](#1)\n```objc\n- scanCharactersFromSet:intoString:\n- scanUpToCharactersFromSet:intoString:\n- scanDecimal:\n- scanDouble:\n- scanFloat:\n- scanHexDouble:\n- scanHexFloat:\n- scanHexInt:\n- scanHexLongLong:\n- scanInteger:\n- scanInt:\n- scanLongLong:\n- scanString:intoString:\n- scanUnsignedLongLong:\n- scanUpToString:intoString:\natEnd Property\n\nscanCharactersFromSet:intoString:扫描字符串中和NSCharacterSet字符集中匹配的字符，是按字符单个匹配的，例如，NSCharacterSet字符集为@\"test123Dmo\"，scanner字符串为 @\" 123test12Demotest\"，那么字符串中所有的字符都在字符集中，所以指针指向的地址存储的内容为\"123test12Demotest\"\nscanUpToCharactersFromSet:intoString：扫描字符串直到遇到NSCharacterSet字符集的字符时停止，指针指向的地址存储的内容为遇到跳过字符集字符之前的内容\nscanString:intoString:从当前的扫描位置开始扫描，判断扫描字符串是否从当前位置能扫描到和传入字符串相同的一串字符，如果能扫描到就返回YES,指针指向的地址存储的就是这段字符串的内容。例如scanner的string内容为123abc678,传入的字符串内容为abc，如果当前的扫描位置为0，那么扫描不到，但是如果将扫描位置设置成3，就可以扫描到了。\nscanUpToString:intoString:从当前的扫描位置开始扫描，扫描到和传入的字符串相同字符串时，停止，指针指向的地址存储的是遇到传入字符串之前的内容。例如scanner的string内容为123abc678,传入的字符串内容为abc，存储的内容为123\nscanDecimal:扫描NSDecimal类型的值，有关NSDecimal类型的值更多的信息可以查看：NSDecimalNumber\nscanDouble :扫描双精度浮点型字符，溢出和非溢出都被认为合法的浮点型数据。在溢出的情况下scanner将会跳过所有的数字，所以新的扫描位置将会在整个浮点型数据的后面。double指针指向的地址存储的数据为扫描出的值，包括溢出时的HUGE_VAL或者 –HUGE_VAL，即未溢出时的0.0。\nscanFloat：扫描单精度浮点型字符，具体内容同scanDouble\nscanHexDouble: 扫描双精度的十六进制类型，溢出和非溢出都被认为合法的浮点型数据。在溢出的情况下scanner将会跳过所有的数字，所以新的扫描位置将会在整个浮点型数据的后面。double指针指向的地址存储的数据为扫描出的值，包括溢出时的HUGE_VAL或者 –HUGE_VAL，即未溢出时的0.0。数据接收时对应的格式为 %a 或%A ，双精度十六进制字符前面一定要加  0x或者 0X。\nscanHexInt 扫描十六进制无符整型，unsigned int指针指向的地址值为 扫描到的值，包含溢出时的UINT_MAX。\nscanHexLongLong 同scanHexDouble\nscanInt 扫描整型，溢出也被认为是有效的整型，int 指针指向的地址的值为扫描到的值，包含溢出时的INT_MAX或INT_MIN。\nscanInteger 同scanInt\nscanLongLong 扫描LongLong 型，溢出也被认为是有效的整型，LongLong指针指向的地址的值为扫描到的值，包含溢出时的LLONG_MAX 或 LLONG_MIN。\n```\n\n### [如何使用](#1)\n#### [场景1：获取URL中的请求key和value。](#2)\n\n我们知道在iOS中，系统封装的URL会有一个属性叫做Query，如果是一个正确的URL会有类似的格式 \n@\"https://wwww.baidu.com/home.php?name=cheng&age=19&nickname=hehe\"\n\n其中？后面的就是URL的Query，那么如何分别获取key和value呢？\n\n```objc\nvoid scannerStringDemo(){\n    \n    NSURL *url = [NSURL URLWithString:@\"https://wwww.baidu.com/home.php?name=cheng&age=19&nickname=hehe\"];\n    NSScanner *scanner = [[NSScanner alloc]initWithString:url.query];\n    NSCharacterSet *delimiterSet = [NSCharacterSet characterSetWithCharactersInString:@\"&\"];\n    NSMutableDictionary *paris = [@{} mutableCopy];\n    \n    while (![scanner isAtEnd]) {\n        NSString *pairString = nil;\n        [scanner scanUpToCharactersFromSet:delimiterSet intoString:&pairString];\n        [scanner scanCharactersFromSet:delimiterSet intoString:NULL];\n        NSRange range = [pairString rangeOfString:@\"=\"];\n        if (range.location != NSNotFound) {\n            NSString *key = [pairString substringToIndex:range.location];\n            NSString *value = [pairString substringFromIndex:range.location + range.length];\n            [paris setObject:key forKey:@\"key\"];\n            [paris setObject:value forKey:@\"value\"];\n        }\n    }\n}\n\n```\n#### [场景2：判断当前的字符串是否是一个纯数字](#2)\n\n```objc\n- (BOOL)isPureInt:(NSString*)string{\n    NSScanner* scan = [NSScanner scannerWithString:string];\n    int val;\n    return[scan scanInt:&val] && [scan isAtEnd];\n}\n```\n\n#### [场景3：判断TextField输入的字符串是不是需要的格式，这里要求是最多三位小数的数字](#2)\n```objc\n+(BOOL)isValidAboutInputText:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string decimalNumber:(NSInteger)number{\n    NSScanner      *scanner    = [NSScanner scannerWithString:string];\n    NSCharacterSet *numbers;\n    NSRange         pointRange = [textField.text rangeOfString:@\".\"];\n    if ( (pointRange.length > 0) && (pointRange.location < range.location  || pointRange.location > range.location + range.length) ){\n        numbers = [NSCharacterSet characterSetWithCharactersInString:@\"0123456789\"];\n    }else{\n        numbers = [NSCharacterSet characterSetWithCharactersInString:@\"0123456789.\"];\n    }\n    if ( [textField.text isEqualToString:@\"\"] && [string isEqualToString:@\".\"] ){\n        return NO;\n    }\n    short remain = number; //保留 number位小数\n    NSString *tempStr = [textField.text stringByAppendingString:string];\n    NSUInteger strlen = [tempStr length];\n    if(pointRange.length > 0 && pointRange.location > 0){ //判断输入框内是否含有“.”。\n        if([string isEqualToString:@\".\"]){ //当输入框内已经含有“.”时，如果再输入“.”则被视为无效。\n            return NO;\n        }\n        if(strlen > 0 && (strlen - pointRange.location) > remain+1){ //当输入框内已经含有“.”，当字符串长度减去小数点前面的字符串长度大于需要要保留的小数点位数，则视当次输入无效。\n            return NO;\n        }\n    }\n    NSRange zeroRange = [textField.text rangeOfString:@\"0\"];\n    if(zeroRange.length == 1 && zeroRange.location == 0){ //判断输入框第一个字符是否为“0”\n        if(![string isEqualToString:@\"0\"] && ![string isEqualToString:@\".\"] && [textField.text length] == 1){ //当输入框只有一个字符并且字符为“0”时，再输入不为“0”或者“.”的字符时，则将此输入替换输入框的这唯一字符。\n            textField.text = string;\n            return NO;\n        }else{\n            if(pointRange.length == 0 && pointRange.location > 0){ //当输入框第一个字符为“0”时，并且没有“.”字符时，如果当此输入的字符为“0”，则视当此输入无效。\n                if([string isEqualToString:@\"0\"]){\n                    return NO;\n                }\n            }\n        }\n    }\n    NSString *buffer;\n    if ( ![scanner scanCharactersFromSet:numbers intoString:&buffer] && ([string length] != 0) ){\n        return NO;\n    }else{\n        return YES;\n    }\n}\n```\n\n### [注意事项](#2)\n```objc\n[scanner scanCharactersFromSet:delimiterSet intoString:NULL];可以使用这个方法，跳过不需要的字符。\n```\n目前能想到的用法就这些，如果有更多的用法，以后慢慢补充！","slug":"点点滴滴：NSScanner的用法小结","published":1,"updated":"2017-01-20T15:15:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yy50010hx5l1joknyuh","content":"<p>NSScanner类是一个类簇的抽象父类,该类簇为一个从NSString对象扫描值的对象提供了程序接口。<br><a id=\"more\"></a><br>NSScanner对象把NSString 对象的的字符解释和转化成 number和string 类型的值。在创建NSScanner对象的时候为它分配字符(string )，当你从NSScanner对象获取内容的时候，它会从头到尾遍历字符串(string)。<br>由于类簇的属性， scanner对象并不是 NSScanner类的实例，而是它一个私有子类的实例。尽管scanner对象的类是私有的，但是它的接口是公开的（抽象父类已经声明）。 NSScanner 的原始方法是string和Configuring a Scanner方法下面列举的所有的方法。<br>在 NSScanner 对象扫描字符串的时候，你可以通过设置属性charactersToBeSkipped忽略某些字符。在扫描字符串之前，那些位于忽略字符集中的字符将会被跳过。默认的忽略字符是空格和回车字符。<br>可以通过[[scanner string] substringFromIndex:[scanner scanLocation]]获取未扫描的字符串。</p>\n<h4 id=\"创建-Scanner对象\"><a href=\"#创建-Scanner对象\" class=\"headerlink\" title=\"创建 Scanner对象\"></a><a href=\"#1\">创建 Scanner对象</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ scannerWithString:</div><div class=\"line\">+ localizedScannerWithString:</div><div class=\"line\">- initWithString: Designated Initializer</div></pre></td></tr></table></figure>\n<p>scannerWithString，返回值是 扫描过aString字符串的NSScanner 对象，该方法通过调用initWithString设置扫描字符串;<br>localizedScannerWithString,返回值是 通过用户默认的 locale方式扫描字符串的NSScanner 对象，该方法也是通过调用initWithString设置扫描字符串;<br>initWithString，返回值是NSScanner 对象，该对象通过扫描aString完成初始化</p>\n<h4 id=\"获取Scanner对象字符串\"><a href=\"#获取Scanner对象字符串\" class=\"headerlink\" title=\"获取Scanner对象字符串\"></a><a href=\"#1\">获取Scanner对象字符串</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">string Property</div></pre></td></tr></table></figure>\n<h4 id=\"设置scanner对象\"><a href=\"#设置scanner对象\" class=\"headerlink\" title=\"设置scanner对象\"></a><a href=\"#1\">设置scanner对象</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">scanLocation Property</div><div class=\"line\">caseSensitive Property</div><div class=\"line\">charactersToBeSkipped Property</div><div class=\"line\">locale Property</div><div class=\"line\"></div><div class=\"line\">scanLocation,下次扫描开始的位置，如果该值超出了string的区域，将会引起<span class=\"built_in\">NSRangeException</span>,该属性在发生错误后重新扫描时非常有用。</div><div class=\"line\">caseSensitive，是否区分字符串中大小写的标志。默认为<span class=\"literal\">NO</span>，注意：该设置不会应用到被跳过的字符集。</div><div class=\"line\">charactersToBeSkipped,在扫描时被跳过的字符集，默认是空白格和回车键。被跳过的字符集优先于扫描的字符集：例如一个scanner被跳过的字符集为空格，通过scanInt:去查找字符串中的整型数时，首先做的不是扫描，而是跳过空格，直到找到十进制数据或者其他的字符。在字符被扫描的时候，跳过功能就失效了。如果你扫描的字符和跳过的字符是一样的，结果将是未知的。被跳过的字符是一个唯一值，scanner不会将忽略大小写的功能应用于它，也不会用这些字符做一些组合，如果在扫描字符换的时候你想忽略全部的元音字符，就要这么做（比如：将字符集设置成“AEIOUaeiou”&#125;;</div><div class=\"line\">locale,scanner 的locale对它从字符串中区分数值产生影响，它通过locale的十进制分隔符区分浮点型数据的整数和小数部分。一个没有locale的scanner用非定域值。新的scanner若没有设置locale，使用默认locale。</div></pre></td></tr></table></figure>\n<h4 id=\"扫描字符串\"><a href=\"#扫描字符串\" class=\"headerlink\" title=\"扫描字符串\"></a><a href=\"#1\">扫描字符串</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">- scanCharactersFromSet:intoString:</div><div class=\"line\">- scanUpToCharactersFromSet:intoString:</div><div class=\"line\">- scanDecimal:</div><div class=\"line\">- scanDouble:</div><div class=\"line\">- scanFloat:</div><div class=\"line\">- scanHexDouble:</div><div class=\"line\">- scanHexFloat:</div><div class=\"line\">- scanHexInt:</div><div class=\"line\">- scanHexLongLong:</div><div class=\"line\">- scanInteger:</div><div class=\"line\">- scanInt:</div><div class=\"line\">- scanLongLong:</div><div class=\"line\">- scanString:intoString:</div><div class=\"line\">- scanUnsignedLongLong:</div><div class=\"line\">- scanUpToString:intoString:</div><div class=\"line\">atEnd Property</div><div class=\"line\"></div><div class=\"line\">scanCharactersFromSet:intoString:扫描字符串中和<span class=\"built_in\">NSCharacterSet</span>字符集中匹配的字符，是按字符单个匹配的，例如，<span class=\"built_in\">NSCharacterSet</span>字符集为<span class=\"string\">@\"test123Dmo\"</span>，scanner字符串为 <span class=\"string\">@\" 123test12Demotest\"</span>，那么字符串中所有的字符都在字符集中，所以指针指向的地址存储的内容为<span class=\"string\">\"123test12Demotest\"</span></div><div class=\"line\">scanUpToCharactersFromSet:intoString：扫描字符串直到遇到<span class=\"built_in\">NSCharacterSet</span>字符集的字符时停止，指针指向的地址存储的内容为遇到跳过字符集字符之前的内容</div><div class=\"line\">scanString:intoString:从当前的扫描位置开始扫描，判断扫描字符串是否从当前位置能扫描到和传入字符串相同的一串字符，如果能扫描到就返回<span class=\"literal\">YES</span>,指针指向的地址存储的就是这段字符串的内容。例如scanner的string内容为<span class=\"number\">123</span>abc678,传入的字符串内容为abc，如果当前的扫描位置为<span class=\"number\">0</span>，那么扫描不到，但是如果将扫描位置设置成<span class=\"number\">3</span>，就可以扫描到了。</div><div class=\"line\">scanUpToString:intoString:从当前的扫描位置开始扫描，扫描到和传入的字符串相同字符串时，停止，指针指向的地址存储的是遇到传入字符串之前的内容。例如scanner的string内容为<span class=\"number\">123</span>abc678,传入的字符串内容为abc，存储的内容为<span class=\"number\">123</span></div><div class=\"line\">scanDecimal:扫描<span class=\"built_in\">NSDecimal</span>类型的值，有关<span class=\"built_in\">NSDecimal</span>类型的值更多的信息可以查看：<span class=\"built_in\">NSDecimalNumber</span></div><div class=\"line\">scanDouble :扫描双精度浮点型字符，溢出和非溢出都被认为合法的浮点型数据。在溢出的情况下scanner将会跳过所有的数字，所以新的扫描位置将会在整个浮点型数据的后面。<span class=\"keyword\">double</span>指针指向的地址存储的数据为扫描出的值，包括溢出时的HUGE_VAL或者 –HUGE_VAL，即未溢出时的<span class=\"number\">0.0</span>。</div><div class=\"line\">scanFloat：扫描单精度浮点型字符，具体内容同scanDouble</div><div class=\"line\">scanHexDouble: 扫描双精度的十六进制类型，溢出和非溢出都被认为合法的浮点型数据。在溢出的情况下scanner将会跳过所有的数字，所以新的扫描位置将会在整个浮点型数据的后面。<span class=\"keyword\">double</span>指针指向的地址存储的数据为扫描出的值，包括溢出时的HUGE_VAL或者 –HUGE_VAL，即未溢出时的<span class=\"number\">0.0</span>。数据接收时对应的格式为 %a 或%A ，双精度十六进制字符前面一定要加  <span class=\"number\">0</span>x或者 <span class=\"number\">0</span>X。</div><div class=\"line\">scanHexInt 扫描十六进制无符整型，<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>指针指向的地址值为 扫描到的值，包含溢出时的<span class=\"built_in\">UINT_MAX</span>。</div><div class=\"line\">scanHexLongLong 同scanHexDouble</div><div class=\"line\">scanInt 扫描整型，溢出也被认为是有效的整型，<span class=\"keyword\">int</span> 指针指向的地址的值为扫描到的值，包含溢出时的INT_MAX或INT_MIN。</div><div class=\"line\">scanInteger 同scanInt</div><div class=\"line\">scanLongLong 扫描LongLong 型，溢出也被认为是有效的整型，LongLong指针指向的地址的值为扫描到的值，包含溢出时的LLONG_MAX 或 LLONG_MIN。</div></pre></td></tr></table></figure>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a><a href=\"#1\">如何使用</a></h3><h4 id=\"场景1：获取URL中的请求key和value。\"><a href=\"#场景1：获取URL中的请求key和value。\" class=\"headerlink\" title=\"场景1：获取URL中的请求key和value。\"></a><a href=\"#2\">场景1：获取URL中的请求key和value。</a></h4><p>我们知道在iOS中，系统封装的URL会有一个属性叫做Query，如果是一个正确的URL会有类似的格式<br>@”<a href=\"https://wwww.baidu.com/home.php?name=cheng&amp;age=19&amp;nickname=hehe\" target=\"_blank\" rel=\"external\">https://wwww.baidu.com/home.php?name=cheng&amp;age=19&amp;nickname=hehe</a>“</p>\n<p>其中？后面的就是URL的Query，那么如何分别获取key和value呢？</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> scannerStringDemo()&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"https://wwww.baidu.com/home.php?name=cheng&amp;age=19&amp;nickname=hehe\"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSScanner</span> *scanner = [[<span class=\"built_in\">NSScanner</span> alloc]initWithString:url.query];</div><div class=\"line\">    <span class=\"built_in\">NSCharacterSet</span> *delimiterSet = [<span class=\"built_in\">NSCharacterSet</span> characterSetWithCharactersInString:<span class=\"string\">@\"&amp;\"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *paris = [@&#123;&#125; mutableCopy];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">while</span> (![scanner isAtEnd]) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *pairString = <span class=\"literal\">nil</span>;</div><div class=\"line\">        [scanner scanUpToCharactersFromSet:delimiterSet intoString:&amp;pairString];</div><div class=\"line\">        [scanner scanCharactersFromSet:delimiterSet intoString:<span class=\"literal\">NULL</span>];</div><div class=\"line\">        <span class=\"built_in\">NSRange</span> range = [pairString rangeOfString:<span class=\"string\">@\"=\"</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span> (range.location != <span class=\"built_in\">NSNotFound</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *key = [pairString substringToIndex:range.location];</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *value = [pairString substringFromIndex:range.location + range.length];</div><div class=\"line\">            [paris setObject:key forKey:<span class=\"string\">@\"key\"</span>];</div><div class=\"line\">            [paris setObject:value forKey:<span class=\"string\">@\"value\"</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"场景2：判断当前的字符串是否是一个纯数字\"><a href=\"#场景2：判断当前的字符串是否是一个纯数字\" class=\"headerlink\" title=\"场景2：判断当前的字符串是否是一个纯数字\"></a><a href=\"#2\">场景2：判断当前的字符串是否是一个纯数字</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isPureInt:(<span class=\"built_in\">NSString</span>*)string&#123;</div><div class=\"line\">    <span class=\"built_in\">NSScanner</span>* scan = [<span class=\"built_in\">NSScanner</span> scannerWithString:string];</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    <span class=\"keyword\">return</span>[scan scanInt:&amp;val] &amp;&amp; [scan isAtEnd];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"场景3：判断TextField输入的字符串是不是需要的格式，这里要求是最多三位小数的数字\"><a href=\"#场景3：判断TextField输入的字符串是不是需要的格式，这里要求是最多三位小数的数字\" class=\"headerlink\" title=\"场景3：判断TextField输入的字符串是不是需要的格式，这里要求是最多三位小数的数字\"></a><a href=\"#2\">场景3：判断TextField输入的字符串是不是需要的格式，这里要求是最多三位小数的数字</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">+(<span class=\"built_in\">BOOL</span>)isValidAboutInputText:(<span class=\"built_in\">UITextField</span> *)textField shouldChangeCharactersInRange:(<span class=\"built_in\">NSRange</span>)range replacementString:(<span class=\"built_in\">NSString</span> *)string decimalNumber:(<span class=\"built_in\">NSInteger</span>)number&#123;</div><div class=\"line\">    <span class=\"built_in\">NSScanner</span>      *scanner    = [<span class=\"built_in\">NSScanner</span> scannerWithString:string];</div><div class=\"line\">    <span class=\"built_in\">NSCharacterSet</span> *numbers;</div><div class=\"line\">    <span class=\"built_in\">NSRange</span>         pointRange = [textField.text rangeOfString:<span class=\"string\">@\".\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> ( (pointRange.length &gt; <span class=\"number\">0</span>) &amp;&amp; (pointRange.location &lt; range.location  || pointRange.location &gt; range.location + range.length) )&#123;</div><div class=\"line\">        numbers = [<span class=\"built_in\">NSCharacterSet</span> characterSetWithCharactersInString:<span class=\"string\">@\"0123456789\"</span>];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        numbers = [<span class=\"built_in\">NSCharacterSet</span> characterSetWithCharactersInString:<span class=\"string\">@\"0123456789.\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( [textField.text isEqualToString:<span class=\"string\">@\"\"</span>] &amp;&amp; [string isEqualToString:<span class=\"string\">@\".\"</span>] )&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">short</span> remain = number; <span class=\"comment\">//保留 number位小数</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *tempStr = [textField.text stringByAppendingString:string];</div><div class=\"line\">    <span class=\"built_in\">NSUInteger</span> strlen = [tempStr length];</div><div class=\"line\">    <span class=\"keyword\">if</span>(pointRange.length &gt; <span class=\"number\">0</span> &amp;&amp; pointRange.location &gt; <span class=\"number\">0</span>)&#123; <span class=\"comment\">//判断输入框内是否含有“.”。</span></div><div class=\"line\">        <span class=\"keyword\">if</span>([string isEqualToString:<span class=\"string\">@\".\"</span>])&#123; <span class=\"comment\">//当输入框内已经含有“.”时，如果再输入“.”则被视为无效。</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(strlen &gt; <span class=\"number\">0</span> &amp;&amp; (strlen - pointRange.location) &gt; remain+<span class=\"number\">1</span>)&#123; <span class=\"comment\">//当输入框内已经含有“.”，当字符串长度减去小数点前面的字符串长度大于需要要保留的小数点位数，则视当次输入无效。</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">NSRange</span> zeroRange = [textField.text rangeOfString:<span class=\"string\">@\"0\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span>(zeroRange.length == <span class=\"number\">1</span> &amp;&amp; zeroRange.location == <span class=\"number\">0</span>)&#123; <span class=\"comment\">//判断输入框第一个字符是否为“0”</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(![string isEqualToString:<span class=\"string\">@\"0\"</span>] &amp;&amp; ![string isEqualToString:<span class=\"string\">@\".\"</span>] &amp;&amp; [textField.text length] == <span class=\"number\">1</span>)&#123; <span class=\"comment\">//当输入框只有一个字符并且字符为“0”时，再输入不为“0”或者“.”的字符时，则将此输入替换输入框的这唯一字符。</span></div><div class=\"line\">            textField.text = string;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(pointRange.length == <span class=\"number\">0</span> &amp;&amp; pointRange.location &gt; <span class=\"number\">0</span>)&#123; <span class=\"comment\">//当输入框第一个字符为“0”时，并且没有“.”字符时，如果当此输入的字符为“0”，则视当此输入无效。</span></div><div class=\"line\">                <span class=\"keyword\">if</span>([string isEqualToString:<span class=\"string\">@\"0\"</span>])&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *buffer;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( ![scanner scanCharactersFromSet:numbers intoString:&amp;buffer] &amp;&amp; ([string length] != <span class=\"number\">0</span>) )&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a><a href=\"#2\">注意事项</a></h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[scanner scanCharactersFromSet:delimiterSet intoString:<span class=\"literal\">NULL</span>];可以使用这个方法，跳过不需要的字符。</div></pre></td></tr></table></figure>\n<p>目前能想到的用法就这些，如果有更多的用法，以后慢慢补充！</p>\n","excerpt":"<p>NSScanner类是一个类簇的抽象父类,该类簇为一个从NSString对象扫描值的对象提供了程序接口。<br></p>","more":"<br>NSScanner对象把NSString 对象的的字符解释和转化成 number和string 类型的值。在创建NSScanner对象的时候为它分配字符(string )，当你从NSScanner对象获取内容的时候，它会从头到尾遍历字符串(string)。<br>由于类簇的属性， scanner对象并不是 NSScanner类的实例，而是它一个私有子类的实例。尽管scanner对象的类是私有的，但是它的接口是公开的（抽象父类已经声明）。 NSScanner 的原始方法是string和Configuring a Scanner方法下面列举的所有的方法。<br>在 NSScanner 对象扫描字符串的时候，你可以通过设置属性charactersToBeSkipped忽略某些字符。在扫描字符串之前，那些位于忽略字符集中的字符将会被跳过。默认的忽略字符是空格和回车字符。<br>可以通过[[scanner string] substringFromIndex:[scanner scanLocation]]获取未扫描的字符串。<p></p>\n<h4 id=\"创建-Scanner对象\"><a href=\"#创建-Scanner对象\" class=\"headerlink\" title=\"创建 Scanner对象\"></a><a href=\"#1\">创建 Scanner对象</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ scannerWithString:</div><div class=\"line\">+ localizedScannerWithString:</div><div class=\"line\">- initWithString: Designated Initializer</div></pre></td></tr></table></figure>\n<p>scannerWithString，返回值是 扫描过aString字符串的NSScanner 对象，该方法通过调用initWithString设置扫描字符串;<br>localizedScannerWithString,返回值是 通过用户默认的 locale方式扫描字符串的NSScanner 对象，该方法也是通过调用initWithString设置扫描字符串;<br>initWithString，返回值是NSScanner 对象，该对象通过扫描aString完成初始化</p>\n<h4 id=\"获取Scanner对象字符串\"><a href=\"#获取Scanner对象字符串\" class=\"headerlink\" title=\"获取Scanner对象字符串\"></a><a href=\"#1\">获取Scanner对象字符串</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">string Property</div></pre></td></tr></table></figure>\n<h4 id=\"设置scanner对象\"><a href=\"#设置scanner对象\" class=\"headerlink\" title=\"设置scanner对象\"></a><a href=\"#1\">设置scanner对象</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">scanLocation Property</div><div class=\"line\">caseSensitive Property</div><div class=\"line\">charactersToBeSkipped Property</div><div class=\"line\">locale Property</div><div class=\"line\"></div><div class=\"line\">scanLocation,下次扫描开始的位置，如果该值超出了string的区域，将会引起<span class=\"built_in\">NSRangeException</span>,该属性在发生错误后重新扫描时非常有用。</div><div class=\"line\">caseSensitive，是否区分字符串中大小写的标志。默认为<span class=\"literal\">NO</span>，注意：该设置不会应用到被跳过的字符集。</div><div class=\"line\">charactersToBeSkipped,在扫描时被跳过的字符集，默认是空白格和回车键。被跳过的字符集优先于扫描的字符集：例如一个scanner被跳过的字符集为空格，通过scanInt:去查找字符串中的整型数时，首先做的不是扫描，而是跳过空格，直到找到十进制数据或者其他的字符。在字符被扫描的时候，跳过功能就失效了。如果你扫描的字符和跳过的字符是一样的，结果将是未知的。被跳过的字符是一个唯一值，scanner不会将忽略大小写的功能应用于它，也不会用这些字符做一些组合，如果在扫描字符换的时候你想忽略全部的元音字符，就要这么做（比如：将字符集设置成“AEIOUaeiou”&#125;;</div><div class=\"line\">locale,scanner 的locale对它从字符串中区分数值产生影响，它通过locale的十进制分隔符区分浮点型数据的整数和小数部分。一个没有locale的scanner用非定域值。新的scanner若没有设置locale，使用默认locale。</div></pre></td></tr></table></figure>\n<h4 id=\"扫描字符串\"><a href=\"#扫描字符串\" class=\"headerlink\" title=\"扫描字符串\"></a><a href=\"#1\">扫描字符串</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">- scanCharactersFromSet:intoString:</div><div class=\"line\">- scanUpToCharactersFromSet:intoString:</div><div class=\"line\">- scanDecimal:</div><div class=\"line\">- scanDouble:</div><div class=\"line\">- scanFloat:</div><div class=\"line\">- scanHexDouble:</div><div class=\"line\">- scanHexFloat:</div><div class=\"line\">- scanHexInt:</div><div class=\"line\">- scanHexLongLong:</div><div class=\"line\">- scanInteger:</div><div class=\"line\">- scanInt:</div><div class=\"line\">- scanLongLong:</div><div class=\"line\">- scanString:intoString:</div><div class=\"line\">- scanUnsignedLongLong:</div><div class=\"line\">- scanUpToString:intoString:</div><div class=\"line\">atEnd Property</div><div class=\"line\"></div><div class=\"line\">scanCharactersFromSet:intoString:扫描字符串中和<span class=\"built_in\">NSCharacterSet</span>字符集中匹配的字符，是按字符单个匹配的，例如，<span class=\"built_in\">NSCharacterSet</span>字符集为<span class=\"string\">@\"test123Dmo\"</span>，scanner字符串为 <span class=\"string\">@\" 123test12Demotest\"</span>，那么字符串中所有的字符都在字符集中，所以指针指向的地址存储的内容为<span class=\"string\">\"123test12Demotest\"</span></div><div class=\"line\">scanUpToCharactersFromSet:intoString：扫描字符串直到遇到<span class=\"built_in\">NSCharacterSet</span>字符集的字符时停止，指针指向的地址存储的内容为遇到跳过字符集字符之前的内容</div><div class=\"line\">scanString:intoString:从当前的扫描位置开始扫描，判断扫描字符串是否从当前位置能扫描到和传入字符串相同的一串字符，如果能扫描到就返回<span class=\"literal\">YES</span>,指针指向的地址存储的就是这段字符串的内容。例如scanner的string内容为<span class=\"number\">123</span>abc678,传入的字符串内容为abc，如果当前的扫描位置为<span class=\"number\">0</span>，那么扫描不到，但是如果将扫描位置设置成<span class=\"number\">3</span>，就可以扫描到了。</div><div class=\"line\">scanUpToString:intoString:从当前的扫描位置开始扫描，扫描到和传入的字符串相同字符串时，停止，指针指向的地址存储的是遇到传入字符串之前的内容。例如scanner的string内容为<span class=\"number\">123</span>abc678,传入的字符串内容为abc，存储的内容为<span class=\"number\">123</span></div><div class=\"line\">scanDecimal:扫描<span class=\"built_in\">NSDecimal</span>类型的值，有关<span class=\"built_in\">NSDecimal</span>类型的值更多的信息可以查看：<span class=\"built_in\">NSDecimalNumber</span></div><div class=\"line\">scanDouble :扫描双精度浮点型字符，溢出和非溢出都被认为合法的浮点型数据。在溢出的情况下scanner将会跳过所有的数字，所以新的扫描位置将会在整个浮点型数据的后面。<span class=\"keyword\">double</span>指针指向的地址存储的数据为扫描出的值，包括溢出时的HUGE_VAL或者 –HUGE_VAL，即未溢出时的<span class=\"number\">0.0</span>。</div><div class=\"line\">scanFloat：扫描单精度浮点型字符，具体内容同scanDouble</div><div class=\"line\">scanHexDouble: 扫描双精度的十六进制类型，溢出和非溢出都被认为合法的浮点型数据。在溢出的情况下scanner将会跳过所有的数字，所以新的扫描位置将会在整个浮点型数据的后面。<span class=\"keyword\">double</span>指针指向的地址存储的数据为扫描出的值，包括溢出时的HUGE_VAL或者 –HUGE_VAL，即未溢出时的<span class=\"number\">0.0</span>。数据接收时对应的格式为 %a 或%A ，双精度十六进制字符前面一定要加  <span class=\"number\">0</span>x或者 <span class=\"number\">0</span>X。</div><div class=\"line\">scanHexInt 扫描十六进制无符整型，<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>指针指向的地址值为 扫描到的值，包含溢出时的<span class=\"built_in\">UINT_MAX</span>。</div><div class=\"line\">scanHexLongLong 同scanHexDouble</div><div class=\"line\">scanInt 扫描整型，溢出也被认为是有效的整型，<span class=\"keyword\">int</span> 指针指向的地址的值为扫描到的值，包含溢出时的INT_MAX或INT_MIN。</div><div class=\"line\">scanInteger 同scanInt</div><div class=\"line\">scanLongLong 扫描LongLong 型，溢出也被认为是有效的整型，LongLong指针指向的地址的值为扫描到的值，包含溢出时的LLONG_MAX 或 LLONG_MIN。</div></pre></td></tr></table></figure>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a><a href=\"#1\">如何使用</a></h3><h4 id=\"场景1：获取URL中的请求key和value。\"><a href=\"#场景1：获取URL中的请求key和value。\" class=\"headerlink\" title=\"场景1：获取URL中的请求key和value。\"></a><a href=\"#2\">场景1：获取URL中的请求key和value。</a></h4><p>我们知道在iOS中，系统封装的URL会有一个属性叫做Query，如果是一个正确的URL会有类似的格式<br>@”<a href=\"https://wwww.baidu.com/home.php?name=cheng&amp;age=19&amp;nickname=hehe\">https://wwww.baidu.com/home.php?name=cheng&amp;age=19&amp;nickname=hehe</a>“</p>\n<p>其中？后面的就是URL的Query，那么如何分别获取key和value呢？</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> scannerStringDemo()&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"https://wwww.baidu.com/home.php?name=cheng&amp;age=19&amp;nickname=hehe\"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSScanner</span> *scanner = [[<span class=\"built_in\">NSScanner</span> alloc]initWithString:url.query];</div><div class=\"line\">    <span class=\"built_in\">NSCharacterSet</span> *delimiterSet = [<span class=\"built_in\">NSCharacterSet</span> characterSetWithCharactersInString:<span class=\"string\">@\"&amp;\"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *paris = [@&#123;&#125; mutableCopy];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">while</span> (![scanner isAtEnd]) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *pairString = <span class=\"literal\">nil</span>;</div><div class=\"line\">        [scanner scanUpToCharactersFromSet:delimiterSet intoString:&amp;pairString];</div><div class=\"line\">        [scanner scanCharactersFromSet:delimiterSet intoString:<span class=\"literal\">NULL</span>];</div><div class=\"line\">        <span class=\"built_in\">NSRange</span> range = [pairString rangeOfString:<span class=\"string\">@\"=\"</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span> (range.location != <span class=\"built_in\">NSNotFound</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *key = [pairString substringToIndex:range.location];</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *value = [pairString substringFromIndex:range.location + range.length];</div><div class=\"line\">            [paris setObject:key forKey:<span class=\"string\">@\"key\"</span>];</div><div class=\"line\">            [paris setObject:value forKey:<span class=\"string\">@\"value\"</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"场景2：判断当前的字符串是否是一个纯数字\"><a href=\"#场景2：判断当前的字符串是否是一个纯数字\" class=\"headerlink\" title=\"场景2：判断当前的字符串是否是一个纯数字\"></a><a href=\"#2\">场景2：判断当前的字符串是否是一个纯数字</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isPureInt:(<span class=\"built_in\">NSString</span>*)string&#123;</div><div class=\"line\">    <span class=\"built_in\">NSScanner</span>* scan = [<span class=\"built_in\">NSScanner</span> scannerWithString:string];</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    <span class=\"keyword\">return</span>[scan scanInt:&amp;val] &amp;&amp; [scan isAtEnd];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"场景3：判断TextField输入的字符串是不是需要的格式，这里要求是最多三位小数的数字\"><a href=\"#场景3：判断TextField输入的字符串是不是需要的格式，这里要求是最多三位小数的数字\" class=\"headerlink\" title=\"场景3：判断TextField输入的字符串是不是需要的格式，这里要求是最多三位小数的数字\"></a><a href=\"#2\">场景3：判断TextField输入的字符串是不是需要的格式，这里要求是最多三位小数的数字</a></h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">+(<span class=\"built_in\">BOOL</span>)isValidAboutInputText:(<span class=\"built_in\">UITextField</span> *)textField shouldChangeCharactersInRange:(<span class=\"built_in\">NSRange</span>)range replacementString:(<span class=\"built_in\">NSString</span> *)string decimalNumber:(<span class=\"built_in\">NSInteger</span>)number&#123;</div><div class=\"line\">    <span class=\"built_in\">NSScanner</span>      *scanner    = [<span class=\"built_in\">NSScanner</span> scannerWithString:string];</div><div class=\"line\">    <span class=\"built_in\">NSCharacterSet</span> *numbers;</div><div class=\"line\">    <span class=\"built_in\">NSRange</span>         pointRange = [textField.text rangeOfString:<span class=\"string\">@\".\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> ( (pointRange.length &gt; <span class=\"number\">0</span>) &amp;&amp; (pointRange.location &lt; range.location  || pointRange.location &gt; range.location + range.length) )&#123;</div><div class=\"line\">        numbers = [<span class=\"built_in\">NSCharacterSet</span> characterSetWithCharactersInString:<span class=\"string\">@\"0123456789\"</span>];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        numbers = [<span class=\"built_in\">NSCharacterSet</span> characterSetWithCharactersInString:<span class=\"string\">@\"0123456789.\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( [textField.text isEqualToString:<span class=\"string\">@\"\"</span>] &amp;&amp; [string isEqualToString:<span class=\"string\">@\".\"</span>] )&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">short</span> remain = number; <span class=\"comment\">//保留 number位小数</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *tempStr = [textField.text stringByAppendingString:string];</div><div class=\"line\">    <span class=\"built_in\">NSUInteger</span> strlen = [tempStr length];</div><div class=\"line\">    <span class=\"keyword\">if</span>(pointRange.length &gt; <span class=\"number\">0</span> &amp;&amp; pointRange.location &gt; <span class=\"number\">0</span>)&#123; <span class=\"comment\">//判断输入框内是否含有“.”。</span></div><div class=\"line\">        <span class=\"keyword\">if</span>([string isEqualToString:<span class=\"string\">@\".\"</span>])&#123; <span class=\"comment\">//当输入框内已经含有“.”时，如果再输入“.”则被视为无效。</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(strlen &gt; <span class=\"number\">0</span> &amp;&amp; (strlen - pointRange.location) &gt; remain+<span class=\"number\">1</span>)&#123; <span class=\"comment\">//当输入框内已经含有“.”，当字符串长度减去小数点前面的字符串长度大于需要要保留的小数点位数，则视当次输入无效。</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">NSRange</span> zeroRange = [textField.text rangeOfString:<span class=\"string\">@\"0\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span>(zeroRange.length == <span class=\"number\">1</span> &amp;&amp; zeroRange.location == <span class=\"number\">0</span>)&#123; <span class=\"comment\">//判断输入框第一个字符是否为“0”</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(![string isEqualToString:<span class=\"string\">@\"0\"</span>] &amp;&amp; ![string isEqualToString:<span class=\"string\">@\".\"</span>] &amp;&amp; [textField.text length] == <span class=\"number\">1</span>)&#123; <span class=\"comment\">//当输入框只有一个字符并且字符为“0”时，再输入不为“0”或者“.”的字符时，则将此输入替换输入框的这唯一字符。</span></div><div class=\"line\">            textField.text = string;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(pointRange.length == <span class=\"number\">0</span> &amp;&amp; pointRange.location &gt; <span class=\"number\">0</span>)&#123; <span class=\"comment\">//当输入框第一个字符为“0”时，并且没有“.”字符时，如果当此输入的字符为“0”，则视当此输入无效。</span></div><div class=\"line\">                <span class=\"keyword\">if</span>([string isEqualToString:<span class=\"string\">@\"0\"</span>])&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *buffer;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( ![scanner scanCharactersFromSet:numbers intoString:&amp;buffer] &amp;&amp; ([string length] != <span class=\"number\">0</span>) )&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a><a href=\"#2\">注意事项</a></h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[scanner scanCharactersFromSet:delimiterSet intoString:<span class=\"literal\">NULL</span>];可以使用这个方法，跳过不需要的字符。</div></pre></td></tr></table></figure>\n<p>目前能想到的用法就这些，如果有更多的用法，以后慢慢补充！</p>"},{"title":"点点滴滴：关于va_list","date":"2016-08-27T12:52:29.000Z","toc":false,"_content":"\n想必在iOS这行混过一段时间的人看到下面的代码都会很熟悉\n<!--more-->\n![](http://ock9zbzms.bkt.clouddn.com/small-small640.png)\n我们今天要讨论的就是这个方法最后边的可变参数列表的使用。这个方法内部到底是如何实现的呢？以及这样提供函数调用的好处又有哪些呢？接下来，我们慢慢研究下\n\n1.首先，苹果这么做，肯定是有它这么设计的原因。相比于最后一个参数换为数组，可变参数列表的形式更加直观，可读性强！此外，相对于只能传递一个参数的方法，可变参数列表参数又提供了扩展性，基于此，很有必要去研究下可变参数列表的使用了。\n2.其次，iOS实现可变参数列表的关键点是什么？关键在于va_list。va_list是C语言提供的处理可变参数的一种方法。具体的注意事项如下\n\n1.首先在函数里面定义va_list的变量，这个变量是指向参数的指针。\n2.然后用va_start初始化刚定义的va_list变量。\n3.然后用va_arg返回可变的参数，va_arg的第二个参数是返回的参数类型，例如va_arg(args,NSString *)，va_arg每调用一次就会指向下个参数的地址，直到再也没有获取到参数为止。\n4.最后用va_end宏结束可变参数的获取。\n\n下面，用一个demo来具体演示下如果使用可变参数列表声明、定义函数\n\n![](http://ock9zbzms.bkt.clouddn.com/small-small641.png)\n![](http://ock9zbzms.bkt.clouddn.com/small-small642.png)\n\nTips\n\n1.函数调用的时候，最后一个参数后面一定要加nil，我们也在函数声明的定义用编译器去做了属性声明，要求最后一个参数传递nil进去，否则会crash。\n2.函数传递的参数类型要求是相同数据类型，要传字符串都传字符串，要传数字都传数字，否则也会有问题。\n今天主要就对这个进行一个小小的总结，总结这个题材会做多少期，目前我个人也不知道，等哪天总结的差不多了，也许就停下来了吧。嘿嘿！","source":"_posts/点点滴滴：关于va-list.md","raw":"---\ntitle: 点点滴滴：关于va_list\ndate: 2016-08-27 20:52:29\ntags: 点点滴滴\ntoc: false\n---\n\n想必在iOS这行混过一段时间的人看到下面的代码都会很熟悉\n<!--more-->\n![](http://ock9zbzms.bkt.clouddn.com/small-small640.png)\n我们今天要讨论的就是这个方法最后边的可变参数列表的使用。这个方法内部到底是如何实现的呢？以及这样提供函数调用的好处又有哪些呢？接下来，我们慢慢研究下\n\n1.首先，苹果这么做，肯定是有它这么设计的原因。相比于最后一个参数换为数组，可变参数列表的形式更加直观，可读性强！此外，相对于只能传递一个参数的方法，可变参数列表参数又提供了扩展性，基于此，很有必要去研究下可变参数列表的使用了。\n2.其次，iOS实现可变参数列表的关键点是什么？关键在于va_list。va_list是C语言提供的处理可变参数的一种方法。具体的注意事项如下\n\n1.首先在函数里面定义va_list的变量，这个变量是指向参数的指针。\n2.然后用va_start初始化刚定义的va_list变量。\n3.然后用va_arg返回可变的参数，va_arg的第二个参数是返回的参数类型，例如va_arg(args,NSString *)，va_arg每调用一次就会指向下个参数的地址，直到再也没有获取到参数为止。\n4.最后用va_end宏结束可变参数的获取。\n\n下面，用一个demo来具体演示下如果使用可变参数列表声明、定义函数\n\n![](http://ock9zbzms.bkt.clouddn.com/small-small641.png)\n![](http://ock9zbzms.bkt.clouddn.com/small-small642.png)\n\nTips\n\n1.函数调用的时候，最后一个参数后面一定要加nil，我们也在函数声明的定义用编译器去做了属性声明，要求最后一个参数传递nil进去，否则会crash。\n2.函数传递的参数类型要求是相同数据类型，要传字符串都传字符串，要传数字都传数字，否则也会有问题。\n今天主要就对这个进行一个小小的总结，总结这个题材会做多少期，目前我个人也不知道，等哪天总结的差不多了，也许就停下来了吧。嘿嘿！","slug":"点点滴滴：关于va-list","published":1,"updated":"2017-01-20T15:15:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14o8yy70012hx5ln7g1oaxt","content":"<p>想必在iOS这行混过一段时间的人看到下面的代码都会很熟悉<br><a id=\"more\"></a><br><img src=\"http://ock9zbzms.bkt.clouddn.com/small-small640.png\" alt=\"\"><br>我们今天要讨论的就是这个方法最后边的可变参数列表的使用。这个方法内部到底是如何实现的呢？以及这样提供函数调用的好处又有哪些呢？接下来，我们慢慢研究下</p>\n<p>1.首先，苹果这么做，肯定是有它这么设计的原因。相比于最后一个参数换为数组，可变参数列表的形式更加直观，可读性强！此外，相对于只能传递一个参数的方法，可变参数列表参数又提供了扩展性，基于此，很有必要去研究下可变参数列表的使用了。<br>2.其次，iOS实现可变参数列表的关键点是什么？关键在于va_list。va_list是C语言提供的处理可变参数的一种方法。具体的注意事项如下</p>\n<p>1.首先在函数里面定义va_list的变量，这个变量是指向参数的指针。<br>2.然后用va_start初始化刚定义的va_list变量。<br>3.然后用va_arg返回可变的参数，va_arg的第二个参数是返回的参数类型，例如va_arg(args,NSString *)，va_arg每调用一次就会指向下个参数的地址，直到再也没有获取到参数为止。<br>4.最后用va_end宏结束可变参数的获取。</p>\n<p>下面，用一个demo来具体演示下如果使用可变参数列表声明、定义函数</p>\n<p><img src=\"http://ock9zbzms.bkt.clouddn.com/small-small641.png\" alt=\"\"><br><img src=\"http://ock9zbzms.bkt.clouddn.com/small-small642.png\" alt=\"\"></p>\n<p>Tips</p>\n<p>1.函数调用的时候，最后一个参数后面一定要加nil，我们也在函数声明的定义用编译器去做了属性声明，要求最后一个参数传递nil进去，否则会crash。<br>2.函数传递的参数类型要求是相同数据类型，要传字符串都传字符串，要传数字都传数字，否则也会有问题。<br>今天主要就对这个进行一个小小的总结，总结这个题材会做多少期，目前我个人也不知道，等哪天总结的差不多了，也许就停下来了吧。嘿嘿！</p>\n","excerpt":"<p>想必在iOS这行混过一段时间的人看到下面的代码都会很熟悉<br></p>","more":"<br><img src=\"http://ock9zbzms.bkt.clouddn.com/small-small640.png\" alt=\"\"><br>我们今天要讨论的就是这个方法最后边的可变参数列表的使用。这个方法内部到底是如何实现的呢？以及这样提供函数调用的好处又有哪些呢？接下来，我们慢慢研究下<p></p>\n<p>1.首先，苹果这么做，肯定是有它这么设计的原因。相比于最后一个参数换为数组，可变参数列表的形式更加直观，可读性强！此外，相对于只能传递一个参数的方法，可变参数列表参数又提供了扩展性，基于此，很有必要去研究下可变参数列表的使用了。<br>2.其次，iOS实现可变参数列表的关键点是什么？关键在于va_list。va_list是C语言提供的处理可变参数的一种方法。具体的注意事项如下</p>\n<p>1.首先在函数里面定义va_list的变量，这个变量是指向参数的指针。<br>2.然后用va_start初始化刚定义的va_list变量。<br>3.然后用va_arg返回可变的参数，va_arg的第二个参数是返回的参数类型，例如va_arg(args,NSString *)，va_arg每调用一次就会指向下个参数的地址，直到再也没有获取到参数为止。<br>4.最后用va_end宏结束可变参数的获取。</p>\n<p>下面，用一个demo来具体演示下如果使用可变参数列表声明、定义函数</p>\n<p><img src=\"http://ock9zbzms.bkt.clouddn.com/small-small641.png\" alt=\"\"><br><img src=\"http://ock9zbzms.bkt.clouddn.com/small-small642.png\" alt=\"\"></p>\n<p>Tips</p>\n<p>1.函数调用的时候，最后一个参数后面一定要加nil，我们也在函数声明的定义用编译器去做了属性声明，要求最后一个参数传递nil进去，否则会crash。<br>2.函数传递的参数类型要求是相同数据类型，要传字符串都传字符串，要传数字都传数字，否则也会有问题。<br>今天主要就对这个进行一个小小的总结，总结这个题材会做多少期，目前我个人也不知道，等哪天总结的差不多了，也许就停下来了吧。嘿嘿！</p>"}],"PostAsset":[{"_id":"source/_posts/CAReplicatorLayer探究/5.gif","slug":"5.gif","post":"ck14o8yvg0000hx5lvuzv7758","modified":1,"renderable":0},{"_id":"source/_posts/Hexo使用手册/流程图.png","slug":"流程图.png","post":"ck14o8yvw0005hx5lsb2wggu7","modified":1,"renderable":0},{"_id":"source/_posts/关于Runtime的一些理论和实践/1.jpeg","post":"ck14o8yxf000mhx5l9ty277tv","slug":"1.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/关于Runtime的一些理论和实践/2.png","post":"ck14o8yxf000mhx5l9ty277tv","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/如何在iOS9系统中使用Universal-Link/apple_capabilities.png","post":"ck14o8yxx000shx5lipdk5g0n","slug":"apple_capabilities.png","modified":1,"renderable":1},{"_id":"source/_posts/如何在iOS9系统中使用Universal-Link/apple_team_id.png","post":"ck14o8yxx000shx5lipdk5g0n","slug":"apple_team_id.png","modified":1,"renderable":1},{"_id":"source/_posts/如何在iOS9系统中使用Universal-Link/universal_links.png","post":"ck14o8yxx000shx5lipdk5g0n","slug":"universal_links.png","modified":1,"renderable":1},{"_id":"source/_posts/CAReplicatorLayer探究/1.png","post":"ck14o8yvg0000hx5lvuzv7758","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/CAReplicatorLayer探究/2.png","post":"ck14o8yvg0000hx5lvuzv7758","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/CAReplicatorLayer探究/3.png","post":"ck14o8yvg0000hx5lvuzv7758","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/CAReplicatorLayer探究/CAReplicatorLayer.gif","slug":"CAReplicatorLayer.gif","post":"ck14o8yvg0000hx5lvuzv7758","modified":1,"renderable":0},{"_id":"source/_posts/CoreGraphicsAndAnimations-2/1.gif","slug":"1.gif","post":"ck14o8yvq0002hx5lugwpekin","modified":1,"renderable":0},{"_id":"source/_posts/CoreGraphicsAndAnimations-2/2.gif","slug":"2.gif","post":"ck14o8yvq0002hx5lugwpekin","modified":1,"renderable":0},{"_id":"source/_posts/CoreGraphicsAndAnimations-2/3.gif","slug":"3.gif","post":"ck14o8yvq0002hx5lugwpekin","modified":1,"renderable":0},{"_id":"source/_posts/CoreGraphicsAndAnimations-2/4.gif","slug":"4.gif","post":"ck14o8yvq0002hx5lugwpekin","modified":1,"renderable":0},{"_id":"source/_posts/CoreGraphicsAndAnimations-2/5.gif","slug":"5.gif","post":"ck14o8yvq0002hx5lugwpekin","modified":1,"renderable":0},{"_id":"source/_posts/CoreGraphicsAndAnimation/1.png","post":"ck14o8yvu0004hx5lzvvqnqp3","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/CoreGraphicsAndAnimation/2.png","post":"ck14o8yvu0004hx5lzvvqnqp3","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/CoreGraphicsAndAnimation/6.gif","slug":"6.gif","post":"ck14o8yvu0004hx5lzvvqnqp3","modified":1,"renderable":0},{"_id":"source/_posts/CoreGraphicsAndAnimation/7.gif","post":"ck14o8yvu0004hx5lzvvqnqp3","slug":"7.gif","modified":1,"renderable":1},{"_id":"source/_posts/CoreGraphicsAndAnimation/8.png","post":"ck14o8yvu0004hx5lzvvqnqp3","slug":"8.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck14o8ywb000bhx5l3fhtyx9d","category_id":"ck14o8ywe000ehx5lwzgd1nl0","_id":"ck14o8yxh000nhx5ltnowkdsq"}],"PostTag":[{"post_id":"ck14o8yvw0005hx5lsb2wggu7","tag_id":"ck14o8yw10007hx5lonr4c4ta","_id":"ck14o8ywc000chx5l2nxjurdh"},{"post_id":"ck14o8yvz0006hx5ln51vdw6i","tag_id":"ck14o8ywa000ahx5l1j8qj3u9","_id":"ck14o8ywr000hhx5lgj8eq0qu"},{"post_id":"ck14o8yw70008hx5ly73k5u41","tag_id":"ck14o8ywa000ahx5l1j8qj3u9","_id":"ck14o8yxf000lhx5l23xsmvzp"},{"post_id":"ck14o8yw90009hx5l3d0ih92a","tag_id":"ck14o8ywa000ahx5l1j8qj3u9","_id":"ck14o8yxj000qhx5la8vnv89z"},{"post_id":"ck14o8ywb000bhx5l3fhtyx9d","tag_id":"ck14o8yxi000phx5l4p1dgxff","_id":"ck14o8yy1000vhx5l40h2sbm5"},{"post_id":"ck14o8ywc000dhx5lot5ekm2u","tag_id":"ck14o8yy0000thx5l3brn56i9","_id":"ck14o8yy5000zhx5lzn75s1ml"},{"post_id":"ck14o8ywf000fhx5l6cqc0537","tag_id":"ck14o8yy3000xhx5ll6gphkwt","_id":"ck14o8yy80013hx5l4sfz739g"},{"post_id":"ck14o8yx2000jhx5l4bdsoqql","tag_id":"ck14o8yy3000xhx5ll6gphkwt","_id":"ck14o8yya0015hx5liarupe7b"},{"post_id":"ck14o8yxj000rhx5lyyq2n7zx","tag_id":"ck14o8yya0014hx5l8emz5jcy","_id":"ck14o8yya0017hx5ls4t9btr2"},{"post_id":"ck14o8yy0000uhx5ln6rh8ga1","tag_id":"ck14o8yya0014hx5l8emz5jcy","_id":"ck14o8yya0019hx5l824rb7ho"},{"post_id":"ck14o8yy2000whx5lqgaifbup","tag_id":"ck14o8yya0014hx5l8emz5jcy","_id":"ck14o8yyb001bhx5llwz9fdkh"},{"post_id":"ck14o8yy4000yhx5l8xwb7397","tag_id":"ck14o8yya0014hx5l8emz5jcy","_id":"ck14o8yyc001dhx5l2d4wkt8k"},{"post_id":"ck14o8yy50010hx5l1joknyuh","tag_id":"ck14o8yya0014hx5l8emz5jcy","_id":"ck14o8yyc001fhx5liicpjo4y"},{"post_id":"ck14o8yy70012hx5ln7g1oaxt","tag_id":"ck14o8yya0014hx5l8emz5jcy","_id":"ck14o8yyc001ghx5lrord3fs2"}],"Tag":[{"name":"Hexo","_id":"ck14o8yw10007hx5lonr4c4ta"},{"name":"三方库研究","_id":"ck14o8ywa000ahx5l1j8qj3u9"},{"name":"工具","_id":"ck14o8yxi000phx5l4p1dgxff"},{"name":"翻译","_id":"ck14o8yy0000thx5l3brn56i9"},{"name":"coredata学习","_id":"ck14o8yy3000xhx5ll6gphkwt"},{"name":"点点滴滴","_id":"ck14o8yya0014hx5l8emz5jcy"}]}}